
SD-CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000082b4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004082b4  004082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20400000  004082bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000013c  204009e8  00408ca4  000209e8  2**2
                  ALLOC
  4 .stack        00002004  20400b24  00408de0  000209e8  2**0
                  ALLOC
  5 .heap         00000200  20402b28  0040ade4  000209e8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002569c  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004da6  00000000  00000000  0004610b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f4e0  00000000  00000000  0004aeb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010a8  00000000  00000000  0005a391  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001318  00000000  00000000  0005b439  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025462  00000000  00000000  0005c751  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013f9a  00000000  00000000  00081bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094f0f  00000000  00000000  00095b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003560  00000000  00000000  0012aa5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 2b 40 20 09 24 40 00 07 24 40 00 07 24 40 00     (+@ .$@..$@..$@.
  400010:	07 24 40 00 07 24 40 00 07 24 40 00 00 00 00 00     .$@..$@..$@.....
	...
  40002c:	07 24 40 00 07 24 40 00 00 00 00 00 07 24 40 00     .$@..$@......$@.
  40003c:	07 24 40 00 07 24 40 00 07 24 40 00 07 24 40 00     .$@..$@..$@..$@.
  40004c:	07 24 40 00 07 24 40 00 07 24 40 00 07 24 40 00     .$@..$@..$@..$@.
  40005c:	07 24 40 00 07 24 40 00 00 00 00 00 d5 1d 40 00     .$@..$@.......@.
  40006c:	e9 1d 40 00 fd 1d 40 00 07 24 40 00 07 24 40 00     ..@...@..$@..$@.
  40007c:	07 24 40 00 11 1e 40 00 25 1e 40 00 07 24 40 00     .$@...@.%.@..$@.
  40008c:	07 24 40 00 07 24 40 00 07 24 40 00 07 24 40 00     .$@..$@..$@..$@.
  40009c:	07 24 40 00 07 24 40 00 07 24 40 00 07 24 40 00     .$@..$@..$@..$@.
  4000ac:	07 24 40 00 07 24 40 00 07 24 40 00 07 24 40 00     .$@..$@..$@..$@.
  4000bc:	07 24 40 00 07 24 40 00 07 24 40 00 07 24 40 00     .$@..$@..$@..$@.
  4000cc:	07 24 40 00 00 00 00 00 07 24 40 00 00 00 00 00     .$@......$@.....
  4000dc:	07 24 40 00 07 24 40 00 07 24 40 00 07 24 40 00     .$@..$@..$@..$@.
  4000ec:	07 24 40 00 07 24 40 00 07 24 40 00 07 24 40 00     .$@..$@..$@..$@.
  4000fc:	07 24 40 00 07 24 40 00 07 24 40 00 07 24 40 00     .$@..$@..$@..$@.
  40010c:	07 24 40 00 07 24 40 00 00 00 00 00 00 00 00 00     .$@..$@.........
  40011c:	00 00 00 00 07 24 40 00 07 24 40 00 07 24 40 00     .....$@..$@..$@.
  40012c:	07 24 40 00 07 24 40 00 00 00 00 00 07 24 40 00     .$@..$@......$@.
  40013c:	07 24 40 00                                         .$@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009e8 	.word	0x204009e8
  40015c:	00000000 	.word	0x00000000
  400160:	004082bc 	.word	0x004082bc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004082bc 	.word	0x004082bc
  4001a0:	204009ec 	.word	0x204009ec
  4001a4:	004082bc 	.word	0x004082bc
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001b6:	3300      	adds	r3, #0
  4001b8:	bf18      	it	ne
  4001ba:	2301      	movne	r3, #1
  4001bc:	7c4a      	ldrb	r2, [r1, #17]
  4001be:	6809      	ldr	r1, [r1, #0]
  4001c0:	4803      	ldr	r0, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c2:	7800      	ldrb	r0, [r0, #0]
  4001c4:	4c03      	ldr	r4, [pc, #12]	; (4001d4 <sd_mmc_configure_slot+0x28>)
  4001c6:	47a0      	blx	r4
  4001c8:	bd10      	pop	{r4, pc}
  4001ca:	bf00      	nop
  4001cc:	20400a04 	.word	0x20400a04
  4001d0:	20400a0d 	.word	0x20400a0d
  4001d4:	00401665 	.word	0x00401665

004001d8 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d8:	b108      	cbz	r0, 4001de <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001da:	2004      	movs	r0, #4
  4001dc:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001de:	4b32      	ldr	r3, [pc, #200]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001e0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001e2:	4b32      	ldr	r3, [pc, #200]	; (4002ac <sd_mmc_select_slot+0xd4>)
  4001e4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001e8:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4001ec:	f002 021f 	and.w	r2, r2, #31
  4001f0:	2301      	movs	r3, #1
  4001f2:	fa03 f202 	lsl.w	r2, r3, r2
  4001f6:	420a      	tst	r2, r1
  4001f8:	d010      	beq.n	40021c <sd_mmc_select_slot+0x44>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001fc:	7b9b      	ldrb	r3, [r3, #14]
  4001fe:	2b01      	cmp	r3, #1
  400200:	d004      	beq.n	40020c <sd_mmc_select_slot+0x34>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400202:	2204      	movs	r2, #4
  400204:	4b28      	ldr	r3, [pc, #160]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400206:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400208:	2002      	movs	r0, #2
  40020a:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  40020c:	4b28      	ldr	r3, [pc, #160]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  40020e:	781b      	ldrb	r3, [r3, #0]
  400210:	2b00      	cmp	r3, #0
  400212:	d0f6      	beq.n	400202 <sd_mmc_select_slot+0x2a>
		SysTick->CTRL = 0;
  400214:	2200      	movs	r2, #0
  400216:	4b27      	ldr	r3, [pc, #156]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400218:	601a      	str	r2, [r3, #0]
  40021a:	e7f2      	b.n	400202 <sd_mmc_select_slot+0x2a>
{
  40021c:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  40021e:	4b22      	ldr	r3, [pc, #136]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400220:	7b9b      	ldrb	r3, [r3, #14]
  400222:	2b04      	cmp	r3, #4
  400224:	d005      	beq.n	400232 <sd_mmc_select_slot+0x5a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400226:	2b01      	cmp	r3, #1
  400228:	d019      	beq.n	40025e <sd_mmc_select_slot+0x86>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  40022a:	2b03      	cmp	r3, #3
  40022c:	d12c      	bne.n	400288 <sd_mmc_select_slot+0xb0>
		return SD_MMC_ERR_UNUSABLE;
  40022e:	2003      	movs	r0, #3
  400230:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400232:	2201      	movs	r2, #1
  400234:	4b1c      	ldr	r3, [pc, #112]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400236:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  400238:	4b1e      	ldr	r3, [pc, #120]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	b93b      	cbnz	r3, 40024e <sd_mmc_select_slot+0x76>
		sd_mmc_sam_systick_used = true;
  40023e:	4b1c      	ldr	r3, [pc, #112]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400240:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400242:	4b1c      	ldr	r3, [pc, #112]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400244:	491c      	ldr	r1, [pc, #112]	; (4002b8 <sd_mmc_select_slot+0xe0>)
  400246:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400248:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  40024a:	2002      	movs	r0, #2
  40024c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40024e:	2200      	movs	r2, #0
  400250:	4b17      	ldr	r3, [pc, #92]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400252:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400254:	4819      	ldr	r0, [pc, #100]	; (4002bc <sd_mmc_select_slot+0xe4>)
  400256:	4b1a      	ldr	r3, [pc, #104]	; (4002c0 <sd_mmc_select_slot+0xe8>)
  400258:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  40025a:	2002      	movs	r0, #2
  40025c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40025e:	4b14      	ldr	r3, [pc, #80]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400260:	781b      	ldrb	r3, [r3, #0]
  400262:	b13b      	cbz	r3, 400274 <sd_mmc_select_slot+0x9c>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400264:	4b13      	ldr	r3, [pc, #76]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400266:	681b      	ldr	r3, [r3, #0]
  400268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40026c:	d01a      	beq.n	4002a4 <sd_mmc_select_slot+0xcc>
		SysTick->CTRL = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b10      	ldr	r3, [pc, #64]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400272:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400274:	4b0c      	ldr	r3, [pc, #48]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400276:	2202      	movs	r2, #2
  400278:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40027a:	4a12      	ldr	r2, [pc, #72]	; (4002c4 <sd_mmc_select_slot+0xec>)
  40027c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40027e:	2201      	movs	r2, #1
  400280:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400282:	2200      	movs	r2, #0
  400284:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  400288:	2200      	movs	r2, #0
  40028a:	4b0f      	ldr	r3, [pc, #60]	; (4002c8 <sd_mmc_select_slot+0xf0>)
  40028c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40028e:	4c06      	ldr	r4, [pc, #24]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400290:	4b0e      	ldr	r3, [pc, #56]	; (4002cc <sd_mmc_select_slot+0xf4>)
  400292:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400294:	4b0e      	ldr	r3, [pc, #56]	; (4002d0 <sd_mmc_select_slot+0xf8>)
  400296:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400298:	7ba0      	ldrb	r0, [r4, #14]
  40029a:	2802      	cmp	r0, #2
  40029c:	bf14      	ite	ne
  40029e:	2000      	movne	r0, #0
  4002a0:	2001      	moveq	r0, #1
  4002a2:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  4002a4:	2002      	movs	r0, #2
  4002a6:	bd10      	pop	{r4, pc}
  4002a8:	2040000c 	.word	0x2040000c
  4002ac:	00200707 	.word	0x00200707
  4002b0:	20400a0c 	.word	0x20400a0c
  4002b4:	e000e010 	.word	0xe000e010
  4002b8:	023c3460 	.word	0x023c3460
  4002bc:	0303af6b 	.word	0x0303af6b
  4002c0:	20400001 	.word	0x20400001
  4002c4:	00061a80 	.word	0x00061a80
  4002c8:	20400a0d 	.word	0x20400a0d
  4002cc:	20400a04 	.word	0x20400a04
  4002d0:	004001ad 	.word	0x004001ad

004002d4 <sdio_cmd52>:
{
  4002d4:	b538      	push	{r3, r4, r5, lr}
  4002d6:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4002d8:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002da:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4002de:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4002e2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4002e6:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002e8:	4311      	orrs	r1, r2
  4002ea:	f241 3034 	movw	r0, #4916	; 0x1334
  4002ee:	4b05      	ldr	r3, [pc, #20]	; (400304 <sdio_cmd52+0x30>)
  4002f0:	4798      	blx	r3
  4002f2:	4605      	mov	r5, r0
  4002f4:	b908      	cbnz	r0, 4002fa <sdio_cmd52+0x26>
}
  4002f6:	4628      	mov	r0, r5
  4002f8:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  4002fa:	4b03      	ldr	r3, [pc, #12]	; (400308 <sdio_cmd52+0x34>)
  4002fc:	4798      	blx	r3
  4002fe:	7020      	strb	r0, [r4, #0]
	return true;
  400300:	e7f9      	b.n	4002f6 <sdio_cmd52+0x22>
  400302:	bf00      	nop
  400304:	0040174d 	.word	0x0040174d
  400308:	00401771 	.word	0x00401771

0040030c <sd_mmc_cmd9_mci>:
{
  40030c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40030e:	4b09      	ldr	r3, [pc, #36]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	8999      	ldrh	r1, [r3, #12]
  400314:	0409      	lsls	r1, r1, #16
  400316:	f641 3009 	movw	r0, #6921	; 0x1b09
  40031a:	4b07      	ldr	r3, [pc, #28]	; (400338 <sd_mmc_cmd9_mci+0x2c>)
  40031c:	4798      	blx	r3
  40031e:	4604      	mov	r4, r0
  400320:	b908      	cbnz	r0, 400326 <sd_mmc_cmd9_mci+0x1a>
}
  400322:	4620      	mov	r0, r4
  400324:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400326:	4b03      	ldr	r3, [pc, #12]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400328:	6818      	ldr	r0, [r3, #0]
  40032a:	3012      	adds	r0, #18
  40032c:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_cmd9_mci+0x30>)
  40032e:	4798      	blx	r3
	return true;
  400330:	e7f7      	b.n	400322 <sd_mmc_cmd9_mci+0x16>
  400332:	bf00      	nop
  400334:	20400a04 	.word	0x20400a04
  400338:	0040174d 	.word	0x0040174d
  40033c:	00401779 	.word	0x00401779

00400340 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400340:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400342:	4b04      	ldr	r3, [pc, #16]	; (400354 <sd_mmc_deselect_slot+0x14>)
  400344:	781b      	ldrb	r3, [r3, #0]
  400346:	b103      	cbz	r3, 40034a <sd_mmc_deselect_slot+0xa>
  400348:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40034a:	2000      	movs	r0, #0
  40034c:	4b02      	ldr	r3, [pc, #8]	; (400358 <sd_mmc_deselect_slot+0x18>)
  40034e:	4798      	blx	r3
	}
}
  400350:	e7fa      	b.n	400348 <sd_mmc_deselect_slot+0x8>
  400352:	bf00      	nop
  400354:	20400a0d 	.word	0x20400a0d
  400358:	00401729 	.word	0x00401729

0040035c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40035c:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  40035e:	2010      	movs	r0, #16
  400360:	4b05      	ldr	r3, [pc, #20]	; (400378 <sd_mmc_init+0x1c>)
  400362:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400364:	2204      	movs	r2, #4
  400366:	4b05      	ldr	r3, [pc, #20]	; (40037c <sd_mmc_init+0x20>)
  400368:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40036a:	22ff      	movs	r2, #255	; 0xff
  40036c:	4b04      	ldr	r3, [pc, #16]	; (400380 <sd_mmc_init+0x24>)
  40036e:	701a      	strb	r2, [r3, #0]
	driver_init();
  400370:	4b04      	ldr	r3, [pc, #16]	; (400384 <sd_mmc_init+0x28>)
  400372:	4798      	blx	r3
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	00401f59 	.word	0x00401f59
  40037c:	2040000c 	.word	0x2040000c
  400380:	20400a0d 	.word	0x20400a0d
  400384:	00401629 	.word	0x00401629

00400388 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40038c:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40038e:	4ba7      	ldr	r3, [pc, #668]	; (40062c <sd_mmc_check+0x2a4>)
  400390:	4798      	blx	r3
  400392:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400394:	2801      	cmp	r0, #1
  400396:	d005      	beq.n	4003a4 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  400398:	4ba5      	ldr	r3, [pc, #660]	; (400630 <sd_mmc_check+0x2a8>)
  40039a:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  40039c:	4620      	mov	r0, r4
  40039e:	b015      	add	sp, #84	; 0x54
  4003a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4003a4:	ae14      	add	r6, sp, #80	; 0x50
  4003a6:	2308      	movs	r3, #8
  4003a8:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4003ac:	4ba1      	ldr	r3, [pc, #644]	; (400634 <sd_mmc_check+0x2ac>)
  4003ae:	681b      	ldr	r3, [r3, #0]
  4003b0:	2701      	movs	r7, #1
  4003b2:	73df      	strb	r7, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4003b4:	2500      	movs	r5, #0
  4003b6:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  4003b8:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  4003ba:	4b9f      	ldr	r3, [pc, #636]	; (400638 <sd_mmc_check+0x2b0>)
  4003bc:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003be:	9600      	str	r6, [sp, #0]
  4003c0:	462b      	mov	r3, r5
  4003c2:	2206      	movs	r2, #6
  4003c4:	4629      	mov	r1, r5
  4003c6:	4638      	mov	r0, r7
  4003c8:	4e9c      	ldr	r6, [pc, #624]	; (40063c <sd_mmc_check+0x2b4>)
  4003ca:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003cc:	4629      	mov	r1, r5
  4003ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003d2:	4b9b      	ldr	r3, [pc, #620]	; (400640 <sd_mmc_check+0x2b8>)
  4003d4:	4798      	blx	r3
  4003d6:	b930      	cbnz	r0, 4003e6 <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4003d8:	4b96      	ldr	r3, [pc, #600]	; (400634 <sd_mmc_check+0x2ac>)
  4003da:	681b      	ldr	r3, [r3, #0]
  4003dc:	2403      	movs	r4, #3
  4003de:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  4003e0:	4b93      	ldr	r3, [pc, #588]	; (400630 <sd_mmc_check+0x2a8>)
  4003e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4003e4:	e7da      	b.n	40039c <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003ea:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ee:	4b94      	ldr	r3, [pc, #592]	; (400640 <sd_mmc_check+0x2b8>)
  4003f0:	4798      	blx	r3
  4003f2:	2800      	cmp	r0, #0
  4003f4:	f040 8093 	bne.w	40051e <sd_mmc_check+0x196>
	*v2 = 0;
  4003f8:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  4003fc:	2100      	movs	r1, #0
  4003fe:	f244 5005 	movw	r0, #17669	; 0x4505
  400402:	4b8f      	ldr	r3, [pc, #572]	; (400640 <sd_mmc_check+0x2b8>)
  400404:	4798      	blx	r3
  400406:	2800      	cmp	r0, #0
  400408:	f040 8097 	bne.w	40053a <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40040c:	4b89      	ldr	r3, [pc, #548]	; (400634 <sd_mmc_check+0x2ac>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	7bdb      	ldrb	r3, [r3, #15]
  400412:	f013 0f01 	tst.w	r3, #1
  400416:	f040 80b5 	bne.w	400584 <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40041a:	2100      	movs	r1, #0
  40041c:	f245 1003 	movw	r0, #20739	; 0x5103
  400420:	4b87      	ldr	r3, [pc, #540]	; (400640 <sd_mmc_check+0x2b8>)
  400422:	4798      	blx	r3
  400424:	2800      	cmp	r0, #0
  400426:	d0d7      	beq.n	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400428:	4d82      	ldr	r5, [pc, #520]	; (400634 <sd_mmc_check+0x2ac>)
  40042a:	682e      	ldr	r6, [r5, #0]
  40042c:	4b85      	ldr	r3, [pc, #532]	; (400644 <sd_mmc_check+0x2bc>)
  40042e:	4798      	blx	r3
  400430:	0c00      	lsrs	r0, r0, #16
  400432:	81b0      	strh	r0, [r6, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400434:	682b      	ldr	r3, [r5, #0]
  400436:	7bdb      	ldrb	r3, [r3, #15]
  400438:	f013 0f01 	tst.w	r3, #1
  40043c:	d034      	beq.n	4004a8 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  40043e:	4b82      	ldr	r3, [pc, #520]	; (400648 <sd_mmc_check+0x2c0>)
  400440:	4798      	blx	r3
  400442:	2800      	cmp	r0, #0
  400444:	d0c8      	beq.n	4003d8 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400446:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400448:	7d5a      	ldrb	r2, [r3, #21]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40044a:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40044e:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400452:	497e      	ldr	r1, [pc, #504]	; (40064c <sd_mmc_check+0x2c4>)
  400454:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40045c:	fb02 f201 	mul.w	r2, r2, r1
  400460:	497b      	ldr	r1, [pc, #492]	; (400650 <sd_mmc_check+0x2c8>)
  400462:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400466:	fb02 f201 	mul.w	r2, r2, r1
  40046a:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  40046c:	7c9a      	ldrb	r2, [r3, #18]
  40046e:	0992      	lsrs	r2, r2, #6
  400470:	f040 820c 	bne.w	40088c <sd_mmc_check+0x504>
  400474:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400476:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400478:	7e1a      	ldrb	r2, [r3, #24]
  40047a:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40047c:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  400480:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400484:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400486:	7ed9      	ldrb	r1, [r3, #27]
  400488:	0049      	lsls	r1, r1, #1
  40048a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40048e:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400492:	3201      	adds	r2, #1
  400494:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400498:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40049a:	408a      	lsls	r2, r1
  40049c:	7dd9      	ldrb	r1, [r3, #23]
  40049e:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4004a2:	408a      	lsls	r2, r1
				/ 1024;
  4004a4:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4004a6:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4004a8:	4b62      	ldr	r3, [pc, #392]	; (400634 <sd_mmc_check+0x2ac>)
  4004aa:	681b      	ldr	r3, [r3, #0]
  4004ac:	8999      	ldrh	r1, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4004ae:	0409      	lsls	r1, r1, #16
  4004b0:	f243 1007 	movw	r0, #12551	; 0x3107
  4004b4:	4b62      	ldr	r3, [pc, #392]	; (400640 <sd_mmc_check+0x2b8>)
  4004b6:	4798      	blx	r3
  4004b8:	2800      	cmp	r0, #0
  4004ba:	d08d      	beq.n	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4004bc:	4b5d      	ldr	r3, [pc, #372]	; (400634 <sd_mmc_check+0x2ac>)
  4004be:	681b      	ldr	r3, [r3, #0]
  4004c0:	7bda      	ldrb	r2, [r3, #15]
  4004c2:	f012 0f01 	tst.w	r2, #1
  4004c6:	f040 81ee 	bne.w	4008a6 <sd_mmc_check+0x51e>
	if (IS_SDIO()) {
  4004ca:	4b5a      	ldr	r3, [pc, #360]	; (400634 <sd_mmc_check+0x2ac>)
  4004cc:	681b      	ldr	r3, [r3, #0]
  4004ce:	7bdb      	ldrb	r3, [r3, #15]
  4004d0:	f013 0f04 	tst.w	r3, #4
  4004d4:	f000 829d 	beq.w	400a12 <sd_mmc_check+0x68a>
  4004d8:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4004da:	2700      	movs	r7, #0
  4004dc:	4e57      	ldr	r6, [pc, #348]	; (40063c <sd_mmc_check+0x2b4>)
  4004de:	f1a5 0309 	sub.w	r3, r5, #9
  4004e2:	aa03      	add	r2, sp, #12
  4004e4:	4413      	add	r3, r2
  4004e6:	9300      	str	r3, [sp, #0]
  4004e8:	463b      	mov	r3, r7
  4004ea:	462a      	mov	r2, r5
  4004ec:	4639      	mov	r1, r7
  4004ee:	4638      	mov	r0, r7
  4004f0:	47b0      	blx	r6
		addr_old++;
  4004f2:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4004f4:	2d0d      	cmp	r5, #13
  4004f6:	d1f2      	bne.n	4004de <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4004f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4004fc:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400500:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400504:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400508:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40050c:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400510:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  400514:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400516:	f04f 0800 	mov.w	r8, #0
  40051a:	4f48      	ldr	r7, [pc, #288]	; (40063c <sd_mmc_check+0x2b4>)
  40051c:	e23a      	b.n	400994 <sd_mmc_check+0x60c>
	resp = driver_get_response();
  40051e:	4b49      	ldr	r3, [pc, #292]	; (400644 <sd_mmc_check+0x2bc>)
  400520:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400522:	f1b0 3fff 	cmp.w	r0, #4294967295
  400526:	f000 834a 	beq.w	400bbe <sd_mmc_check+0x836>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  40052a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40052e:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  400532:	f47f af51 	bne.w	4003d8 <sd_mmc_check+0x50>
	*v2 = 1;
  400536:	46b9      	mov	r9, r7
  400538:	e760      	b.n	4003fc <sd_mmc_check+0x74>
	resp = driver_get_response();
  40053a:	4b42      	ldr	r3, [pc, #264]	; (400644 <sd_mmc_check+0x2bc>)
  40053c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  40053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  400542:	f43f af63 	beq.w	40040c <sd_mmc_check+0x84>
  400546:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40054a:	f244 5805 	movw	r8, #17669	; 0x4505
  40054e:	4e3c      	ldr	r6, [pc, #240]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400550:	4f3c      	ldr	r7, [pc, #240]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400552:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  400556:	4640      	mov	r0, r8
  400558:	47b0      	blx	r6
  40055a:	2800      	cmp	r0, #0
  40055c:	f43f af3c 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400560:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400562:	2800      	cmp	r0, #0
  400564:	db02      	blt.n	40056c <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  400566:	3d01      	subs	r5, #1
  400568:	d1f3      	bne.n	400552 <sd_mmc_check+0x1ca>
  40056a:	e735      	b.n	4003d8 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  40056c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400570:	d104      	bne.n	40057c <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400572:	4b30      	ldr	r3, [pc, #192]	; (400634 <sd_mmc_check+0x2ac>)
  400574:	681b      	ldr	r3, [r3, #0]
  400576:	2204      	movs	r2, #4
  400578:	73da      	strb	r2, [r3, #15]
  40057a:	e74e      	b.n	40041a <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40057c:	4b2d      	ldr	r3, [pc, #180]	; (400634 <sd_mmc_check+0x2ac>)
  40057e:	681b      	ldr	r3, [r3, #0]
  400580:	2205      	movs	r2, #5
  400582:	73da      	strb	r2, [r3, #15]
  400584:	f1b9 0f00 	cmp.w	r9, #0
  400588:	4f32      	ldr	r7, [pc, #200]	; (400654 <sd_mmc_check+0x2cc>)
  40058a:	bf14      	ite	ne
  40058c:	46b9      	movne	r9, r7
  40058e:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  400592:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400596:	f04f 0800 	mov.w	r8, #0
  40059a:	4e29      	ldr	r6, [pc, #164]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  40059c:	4f29      	ldr	r7, [pc, #164]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40059e:	4641      	mov	r1, r8
  4005a0:	f241 1037 	movw	r0, #4407	; 0x1137
  4005a4:	47b0      	blx	r6
  4005a6:	b148      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4005a8:	4649      	mov	r1, r9
  4005aa:	f244 5029 	movw	r0, #17705	; 0x4529
  4005ae:	47b0      	blx	r6
  4005b0:	b120      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		resp = driver_get_response();
  4005b2:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005b4:	2800      	cmp	r0, #0
  4005b6:	db20      	blt.n	4005fa <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4005b8:	3d01      	subs	r5, #1
  4005ba:	d1f0      	bne.n	40059e <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4005bc:	4b1d      	ldr	r3, [pc, #116]	; (400634 <sd_mmc_check+0x2ac>)
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	2202      	movs	r2, #2
  4005c2:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4005c4:	2100      	movs	r1, #0
  4005c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4005ca:	4b1d      	ldr	r3, [pc, #116]	; (400640 <sd_mmc_check+0x2b8>)
  4005cc:	4798      	blx	r3
  4005ce:	2800      	cmp	r0, #0
  4005d0:	f43f af02 	beq.w	4003d8 <sd_mmc_check+0x50>
  4005d4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005d8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400654 <sd_mmc_check+0x2cc>
  4005dc:	4e18      	ldr	r6, [pc, #96]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4005de:	4f19      	ldr	r7, [pc, #100]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005e0:	4641      	mov	r1, r8
  4005e2:	f244 5001 	movw	r0, #17665	; 0x4501
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f43f aef5 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  4005ee:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005f0:	2800      	cmp	r0, #0
  4005f2:	db31      	blt.n	400658 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  4005f4:	3d01      	subs	r5, #1
  4005f6:	d1f3      	bne.n	4005e0 <sd_mmc_check+0x258>
  4005f8:	e6ee      	b.n	4003d8 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  4005fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4005fe:	d005      	beq.n	40060c <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400600:	4b0c      	ldr	r3, [pc, #48]	; (400634 <sd_mmc_check+0x2ac>)
  400602:	681a      	ldr	r2, [r3, #0]
  400604:	7bd3      	ldrb	r3, [r2, #15]
  400606:	f043 0308 	orr.w	r3, r3, #8
  40060a:	73d3      	strb	r3, [r2, #15]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40060c:	4b09      	ldr	r3, [pc, #36]	; (400634 <sd_mmc_check+0x2ac>)
  40060e:	681b      	ldr	r3, [r3, #0]
  400610:	7bdb      	ldrb	r3, [r3, #15]
  400612:	f013 0f01 	tst.w	r3, #1
  400616:	f43f af00 	beq.w	40041a <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40061a:	2100      	movs	r1, #0
  40061c:	f645 3002 	movw	r0, #23298	; 0x5b02
  400620:	4b07      	ldr	r3, [pc, #28]	; (400640 <sd_mmc_check+0x2b8>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f47f aef8 	bne.w	40041a <sd_mmc_check+0x92>
  40062a:	e6d5      	b.n	4003d8 <sd_mmc_check+0x50>
  40062c:	004001d9 	.word	0x004001d9
  400630:	00400341 	.word	0x00400341
  400634:	20400a04 	.word	0x20400a04
  400638:	0040172b 	.word	0x0040172b
  40063c:	004002d5 	.word	0x004002d5
  400640:	0040174d 	.word	0x0040174d
  400644:	00401771 	.word	0x00401771
  400648:	0040030d 	.word	0x0040030d
  40064c:	004078c8 	.word	0x004078c8
  400650:	004078e4 	.word	0x004078e4
  400654:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400658:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40065c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400660:	d027      	beq.n	4006b2 <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400662:	2100      	movs	r1, #0
  400664:	f645 3002 	movw	r0, #23298	; 0x5b02
  400668:	4ba5      	ldr	r3, [pc, #660]	; (400900 <sd_mmc_check+0x578>)
  40066a:	4798      	blx	r3
  40066c:	2800      	cmp	r0, #0
  40066e:	f43f aeb3 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  400672:	4ba4      	ldr	r3, [pc, #656]	; (400904 <sd_mmc_check+0x57c>)
  400674:	681b      	ldr	r3, [r3, #0]
  400676:	2201      	movs	r2, #1
  400678:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  40067a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40067e:	f241 1003 	movw	r0, #4355	; 0x1103
  400682:	4b9f      	ldr	r3, [pc, #636]	; (400900 <sd_mmc_check+0x578>)
  400684:	4798      	blx	r3
  400686:	2800      	cmp	r0, #0
  400688:	f43f aea6 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  40068c:	4b9e      	ldr	r3, [pc, #632]	; (400908 <sd_mmc_check+0x580>)
  40068e:	4798      	blx	r3
  400690:	2800      	cmp	r0, #0
  400692:	f43f aea1 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400696:	4b9b      	ldr	r3, [pc, #620]	; (400904 <sd_mmc_check+0x57c>)
  400698:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40069a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  40069c:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4006a0:	3b01      	subs	r3, #1
  4006a2:	2b03      	cmp	r3, #3
  4006a4:	d80c      	bhi.n	4006c0 <sd_mmc_check+0x338>
  4006a6:	e8df f013 	tbh	[pc, r3, lsl #1]
  4006aa:	00cd      	.short	0x00cd
  4006ac:	00d300d0 	.word	0x00d300d0
  4006b0:	00d6      	.short	0x00d6
				sd_mmc_card->type |= CARD_TYPE_HC;
  4006b2:	4b94      	ldr	r3, [pc, #592]	; (400904 <sd_mmc_check+0x57c>)
  4006b4:	681a      	ldr	r2, [r3, #0]
  4006b6:	7bd3      	ldrb	r3, [r2, #15]
  4006b8:	f043 0308 	orr.w	r3, r3, #8
  4006bc:	73d3      	strb	r3, [r2, #15]
  4006be:	e7d0      	b.n	400662 <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4006c0:	2312      	movs	r3, #18
  4006c2:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c4:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4006c6:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4006ca:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4006ce:	498f      	ldr	r1, [pc, #572]	; (40090c <sd_mmc_check+0x584>)
  4006d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4006d8:	fb03 f301 	mul.w	r3, r3, r1
  4006dc:	498c      	ldr	r1, [pc, #560]	; (400910 <sd_mmc_check+0x588>)
  4006de:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4006e2:	fb03 f301 	mul.w	r3, r3, r1
  4006e6:	6013      	str	r3, [r2, #0]
  4006e8:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006ea:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ec:	7e13      	ldrb	r3, [r2, #24]
  4006ee:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006f0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4006f4:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4006f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4006fc:	f640 71ff 	movw	r1, #4095	; 0xfff
  400700:	428b      	cmp	r3, r1
  400702:	d00f      	beq.n	400724 <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400704:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400706:	7ed1      	ldrb	r1, [r2, #27]
  400708:	0049      	lsls	r1, r1, #1
  40070a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40070e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400710:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400714:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400716:	408b      	lsls	r3, r1
  400718:	7dd1      	ldrb	r1, [r2, #23]
  40071a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40071e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400720:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400722:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400724:	8991      	ldrh	r1, [r2, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400726:	0409      	lsls	r1, r1, #16
  400728:	f243 1007 	movw	r0, #12551	; 0x3107
  40072c:	4b74      	ldr	r3, [pc, #464]	; (400900 <sd_mmc_check+0x578>)
  40072e:	4798      	blx	r3
  400730:	2800      	cmp	r0, #0
  400732:	f43f ae51 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400736:	4b73      	ldr	r3, [pc, #460]	; (400904 <sd_mmc_check+0x57c>)
  400738:	681b      	ldr	r3, [r3, #0]
  40073a:	7c1b      	ldrb	r3, [r3, #16]
  40073c:	2b3f      	cmp	r3, #63	; 0x3f
  40073e:	f240 8097 	bls.w	400870 <sd_mmc_check+0x4e8>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400742:	2100      	movs	r1, #0
  400744:	9100      	str	r1, [sp, #0]
  400746:	2301      	movs	r3, #1
  400748:	f44f 7200 	mov.w	r2, #512	; 0x200
  40074c:	4871      	ldr	r0, [pc, #452]	; (400914 <sd_mmc_check+0x58c>)
  40074e:	4d72      	ldr	r5, [pc, #456]	; (400918 <sd_mmc_check+0x590>)
  400750:	47a8      	blx	r5
  400752:	2800      	cmp	r0, #0
  400754:	f43f ae40 	beq.w	4003d8 <sd_mmc_check+0x50>
  400758:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40075a:	4e70      	ldr	r6, [pc, #448]	; (40091c <sd_mmc_check+0x594>)
  40075c:	a803      	add	r0, sp, #12
  40075e:	47b0      	blx	r6
  400760:	2800      	cmp	r0, #0
  400762:	f43f ae39 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400766:	3501      	adds	r5, #1
  400768:	b2ad      	uxth	r5, r5
  40076a:	2d32      	cmp	r5, #50	; 0x32
  40076c:	d1f6      	bne.n	40075c <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  40076e:	9e03      	ldr	r6, [sp, #12]
  400770:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400774:	4b63      	ldr	r3, [pc, #396]	; (400904 <sd_mmc_check+0x57c>)
  400776:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400778:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40077a:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40077c:	7e1b      	ldrb	r3, [r3, #24]
  40077e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400780:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  400784:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400788:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40078c:	f640 72ff 	movw	r2, #4095	; 0xfff
  400790:	4293      	cmp	r3, r2
  400792:	d10e      	bne.n	4007b2 <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  400794:	4f61      	ldr	r7, [pc, #388]	; (40091c <sd_mmc_check+0x594>)
  400796:	a804      	add	r0, sp, #16
  400798:	47b8      	blx	r7
  40079a:	2800      	cmp	r0, #0
  40079c:	f43f ae1c 	beq.w	4003d8 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4007a0:	3501      	adds	r5, #1
  4007a2:	b2ad      	uxth	r5, r5
  4007a4:	2d35      	cmp	r5, #53	; 0x35
  4007a6:	d9f6      	bls.n	400796 <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4007a8:	4b56      	ldr	r3, [pc, #344]	; (400904 <sd_mmc_check+0x57c>)
  4007aa:	681a      	ldr	r2, [r3, #0]
  4007ac:	9b04      	ldr	r3, [sp, #16]
  4007ae:	085b      	lsrs	r3, r3, #1
  4007b0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4007b2:	4f5a      	ldr	r7, [pc, #360]	; (40091c <sd_mmc_check+0x594>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4007b4:	2d7f      	cmp	r5, #127	; 0x7f
  4007b6:	d951      	bls.n	40085c <sd_mmc_check+0x4d4>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4007b8:	4b59      	ldr	r3, [pc, #356]	; (400920 <sd_mmc_check+0x598>)
  4007ba:	7818      	ldrb	r0, [r3, #0]
  4007bc:	4b59      	ldr	r3, [pc, #356]	; (400924 <sd_mmc_check+0x59c>)
  4007be:	4798      	blx	r3
  4007c0:	2803      	cmp	r0, #3
  4007c2:	d91d      	bls.n	400800 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4007c4:	4b56      	ldr	r3, [pc, #344]	; (400920 <sd_mmc_check+0x598>)
  4007c6:	7818      	ldrb	r0, [r3, #0]
  4007c8:	4b56      	ldr	r3, [pc, #344]	; (400924 <sd_mmc_check+0x59c>)
  4007ca:	4798      	blx	r3
  4007cc:	4605      	mov	r5, r0
	switch (bus_width) {
  4007ce:	2804      	cmp	r0, #4
  4007d0:	d04c      	beq.n	40086c <sd_mmc_check+0x4e4>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4007d2:	4b55      	ldr	r3, [pc, #340]	; (400928 <sd_mmc_check+0x5a0>)
  4007d4:	4955      	ldr	r1, [pc, #340]	; (40092c <sd_mmc_check+0x5a4>)
  4007d6:	2808      	cmp	r0, #8
  4007d8:	bf18      	it	ne
  4007da:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4007dc:	f243 1006 	movw	r0, #12550	; 0x3106
  4007e0:	4b47      	ldr	r3, [pc, #284]	; (400900 <sd_mmc_check+0x578>)
  4007e2:	4798      	blx	r3
  4007e4:	2800      	cmp	r0, #0
  4007e6:	f43f adf7 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4007ea:	4b51      	ldr	r3, [pc, #324]	; (400930 <sd_mmc_check+0x5a8>)
  4007ec:	4798      	blx	r3
  4007ee:	f010 0f80 	tst.w	r0, #128	; 0x80
  4007f2:	f47f adf1 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  4007f6:	4b43      	ldr	r3, [pc, #268]	; (400904 <sd_mmc_check+0x57c>)
  4007f8:	681b      	ldr	r3, [r3, #0]
  4007fa:	745d      	strb	r5, [r3, #17]
			sd_mmc_configure_slot();
  4007fc:	4b4d      	ldr	r3, [pc, #308]	; (400934 <sd_mmc_check+0x5ac>)
  4007fe:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400800:	4b4d      	ldr	r3, [pc, #308]	; (400938 <sd_mmc_check+0x5b0>)
  400802:	4798      	blx	r3
  400804:	b1be      	cbz	r6, 400836 <sd_mmc_check+0x4ae>
  400806:	b1b0      	cbz	r0, 400836 <sd_mmc_check+0x4ae>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400808:	494c      	ldr	r1, [pc, #304]	; (40093c <sd_mmc_check+0x5b4>)
  40080a:	f243 1006 	movw	r0, #12550	; 0x3106
  40080e:	4b3c      	ldr	r3, [pc, #240]	; (400900 <sd_mmc_check+0x578>)
  400810:	4798      	blx	r3
  400812:	2800      	cmp	r0, #0
  400814:	f43f ade0 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400818:	4b45      	ldr	r3, [pc, #276]	; (400930 <sd_mmc_check+0x5a8>)
  40081a:	4798      	blx	r3
  40081c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400820:	f47f adda 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400824:	4b37      	ldr	r3, [pc, #220]	; (400904 <sd_mmc_check+0x57c>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2201      	movs	r2, #1
  40082a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  40082e:	4a44      	ldr	r2, [pc, #272]	; (400940 <sd_mmc_check+0x5b8>)
  400830:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400832:	4b40      	ldr	r3, [pc, #256]	; (400934 <sd_mmc_check+0x5ac>)
  400834:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400836:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400838:	f44f 7800 	mov.w	r8, #512	; 0x200
  40083c:	f241 1710 	movw	r7, #4368	; 0x1110
  400840:	4e2f      	ldr	r6, [pc, #188]	; (400900 <sd_mmc_check+0x578>)
  400842:	e01d      	b.n	400880 <sd_mmc_check+0x4f8>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400844:	2314      	movs	r3, #20
  400846:	7413      	strb	r3, [r2, #16]
  400848:	e73c      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40084a:	2322      	movs	r3, #34	; 0x22
  40084c:	7413      	strb	r3, [r2, #16]
  40084e:	e739      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400850:	2330      	movs	r3, #48	; 0x30
  400852:	7413      	strb	r3, [r2, #16]
  400854:	e736      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400856:	2340      	movs	r3, #64	; 0x40
  400858:	7413      	strb	r3, [r2, #16]
  40085a:	e733      	b.n	4006c4 <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  40085c:	a804      	add	r0, sp, #16
  40085e:	47b8      	blx	r7
  400860:	2800      	cmp	r0, #0
  400862:	f43f adb9 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400866:	3501      	adds	r5, #1
  400868:	b2ad      	uxth	r5, r5
  40086a:	e7a3      	b.n	4007b4 <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40086c:	4935      	ldr	r1, [pc, #212]	; (400944 <sd_mmc_check+0x5bc>)
  40086e:	e7b5      	b.n	4007dc <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  400870:	4b30      	ldr	r3, [pc, #192]	; (400934 <sd_mmc_check+0x5ac>)
  400872:	4798      	blx	r3
  400874:	e7df      	b.n	400836 <sd_mmc_check+0x4ae>
  400876:	3d01      	subs	r5, #1
	while (retry--) {
  400878:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  40087c:	f43f adac 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400880:	4641      	mov	r1, r8
  400882:	4638      	mov	r0, r7
  400884:	47b0      	blx	r6
  400886:	2800      	cmp	r0, #0
  400888:	d0f5      	beq.n	400876 <sd_mmc_check+0x4ee>
  40088a:	e10e      	b.n	400aaa <sd_mmc_check+0x722>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40088c:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40088e:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400890:	7e5a      	ldrb	r2, [r3, #25]
  400892:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400894:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  400898:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  40089a:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  40089e:	3201      	adds	r2, #1
  4008a0:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4008a2:	605a      	str	r2, [r3, #4]
  4008a4:	e600      	b.n	4004a8 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4008a6:	8999      	ldrh	r1, [r3, #12]
  4008a8:	0409      	lsls	r1, r1, #16
  4008aa:	f241 1037 	movw	r0, #4407	; 0x1137
  4008ae:	4b14      	ldr	r3, [pc, #80]	; (400900 <sd_mmc_check+0x578>)
  4008b0:	4798      	blx	r3
  4008b2:	2800      	cmp	r0, #0
  4008b4:	f43f ad90 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4008b8:	2301      	movs	r3, #1
  4008ba:	9300      	str	r3, [sp, #0]
  4008bc:	2208      	movs	r2, #8
  4008be:	2100      	movs	r1, #0
  4008c0:	4821      	ldr	r0, [pc, #132]	; (400948 <sd_mmc_check+0x5c0>)
  4008c2:	4d15      	ldr	r5, [pc, #84]	; (400918 <sd_mmc_check+0x590>)
  4008c4:	47a8      	blx	r5
  4008c6:	2800      	cmp	r0, #0
  4008c8:	f43f ad86 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  4008cc:	2101      	movs	r1, #1
  4008ce:	a804      	add	r0, sp, #16
  4008d0:	4b1e      	ldr	r3, [pc, #120]	; (40094c <sd_mmc_check+0x5c4>)
  4008d2:	4798      	blx	r3
  4008d4:	2800      	cmp	r0, #0
  4008d6:	f43f ad7f 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  4008da:	4b1d      	ldr	r3, [pc, #116]	; (400950 <sd_mmc_check+0x5c8>)
  4008dc:	4798      	blx	r3
  4008de:	2800      	cmp	r0, #0
  4008e0:	f43f ad7a 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  4008e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008e8:	f003 030f 	and.w	r3, r3, #15
  4008ec:	2b01      	cmp	r3, #1
  4008ee:	d036      	beq.n	40095e <sd_mmc_check+0x5d6>
  4008f0:	b383      	cbz	r3, 400954 <sd_mmc_check+0x5cc>
  4008f2:	2b02      	cmp	r3, #2
  4008f4:	d038      	beq.n	400968 <sd_mmc_check+0x5e0>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4008f6:	4b03      	ldr	r3, [pc, #12]	; (400904 <sd_mmc_check+0x57c>)
  4008f8:	681b      	ldr	r3, [r3, #0]
  4008fa:	2210      	movs	r2, #16
  4008fc:	741a      	strb	r2, [r3, #16]
  4008fe:	e5e4      	b.n	4004ca <sd_mmc_check+0x142>
  400900:	0040174d 	.word	0x0040174d
  400904:	20400a04 	.word	0x20400a04
  400908:	0040030d 	.word	0x0040030d
  40090c:	004078c8 	.word	0x004078c8
  400910:	00407888 	.word	0x00407888
  400914:	00081108 	.word	0x00081108
  400918:	004017a9 	.word	0x004017a9
  40091c:	00401871 	.word	0x00401871
  400920:	20400a0d 	.word	0x20400a0d
  400924:	00401655 	.word	0x00401655
  400928:	01b70000 	.word	0x01b70000
  40092c:	01b70200 	.word	0x01b70200
  400930:	00401771 	.word	0x00401771
  400934:	004001ad 	.word	0x004001ad
  400938:	0040165f 	.word	0x0040165f
  40093c:	03b90100 	.word	0x03b90100
  400940:	03197500 	.word	0x03197500
  400944:	01b70100 	.word	0x01b70100
  400948:	00081133 	.word	0x00081133
  40094c:	004018e5 	.word	0x004018e5
  400950:	004019dd 	.word	0x004019dd
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400954:	4b9b      	ldr	r3, [pc, #620]	; (400bc4 <sd_mmc_check+0x83c>)
  400956:	681b      	ldr	r3, [r3, #0]
  400958:	2210      	movs	r2, #16
  40095a:	741a      	strb	r2, [r3, #16]
  40095c:	e5b5      	b.n	4004ca <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  40095e:	4b99      	ldr	r3, [pc, #612]	; (400bc4 <sd_mmc_check+0x83c>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	221a      	movs	r2, #26
  400964:	741a      	strb	r2, [r3, #16]
  400966:	e5b0      	b.n	4004ca <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400968:	f89d 3012 	ldrb.w	r3, [sp, #18]
  40096c:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  40096e:	4b95      	ldr	r3, [pc, #596]	; (400bc4 <sd_mmc_check+0x83c>)
  400970:	681b      	ldr	r3, [r3, #0]
  400972:	bf14      	ite	ne
  400974:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400976:	2220      	moveq	r2, #32
  400978:	741a      	strb	r2, [r3, #16]
  40097a:	e5a6      	b.n	4004ca <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  40097c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400980:	2b00      	cmp	r3, #0
  400982:	f43f ad29 	beq.w	4003d8 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400986:	3302      	adds	r3, #2
  400988:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  40098a:	f509 7380 	add.w	r3, r9, #256	; 0x100
  40098e:	429e      	cmp	r6, r3
  400990:	f63f ad22 	bhi.w	4003d8 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400994:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400996:	ab04      	add	r3, sp, #16
  400998:	442b      	add	r3, r5
  40099a:	9300      	str	r3, [sp, #0]
  40099c:	4643      	mov	r3, r8
  40099e:	1972      	adds	r2, r6, r5
  4009a0:	4641      	mov	r1, r8
  4009a2:	4640      	mov	r0, r8
  4009a4:	47b8      	blx	r7
  4009a6:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  4009a8:	2d03      	cmp	r5, #3
  4009aa:	d1f4      	bne.n	400996 <sd_mmc_check+0x60e>
		if (buf[0] == SDIO_CISTPL_END) {
  4009ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009b0:	2bff      	cmp	r3, #255	; 0xff
  4009b2:	f43f ad11 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4009b6:	2b22      	cmp	r3, #34	; 0x22
  4009b8:	d1e0      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4009be:	2b00      	cmp	r3, #0
  4009c0:	d1dc      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009c2:	ad04      	add	r5, sp, #16
  4009c4:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4009c8:	f04f 0800 	mov.w	r8, #0
  4009cc:	4f7e      	ldr	r7, [pc, #504]	; (400bc8 <sd_mmc_check+0x840>)
  4009ce:	9500      	str	r5, [sp, #0]
  4009d0:	4643      	mov	r3, r8
  4009d2:	4632      	mov	r2, r6
  4009d4:	4641      	mov	r1, r8
  4009d6:	4640      	mov	r0, r8
  4009d8:	47b8      	blx	r7
		addr_new++;
  4009da:	3601      	adds	r6, #1
  4009dc:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  4009de:	454e      	cmp	r6, r9
  4009e0:	d1f5      	bne.n	4009ce <sd_mmc_check+0x646>
	tplfe_max_tran_speed = buf[5];
  4009e2:	f89d 3015 	ldrb.w	r3, [sp, #21]
  4009e6:	2b32      	cmp	r3, #50	; 0x32
  4009e8:	bf28      	it	cs
  4009ea:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  4009ec:	4a75      	ldr	r2, [pc, #468]	; (400bc4 <sd_mmc_check+0x83c>)
  4009ee:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  4009f0:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4009f4:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4009f8:	4974      	ldr	r1, [pc, #464]	; (400bcc <sd_mmc_check+0x844>)
  4009fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400a02:	fb03 f301 	mul.w	r3, r3, r1
  400a06:	4972      	ldr	r1, [pc, #456]	; (400bd0 <sd_mmc_check+0x848>)
  400a08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400a0c:	fb03 f301 	mul.w	r3, r3, r1
  400a10:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400a12:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x84c>)
  400a14:	7818      	ldrb	r0, [r3, #0]
  400a16:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x850>)
  400a18:	4798      	blx	r3
  400a1a:	2803      	cmp	r0, #3
  400a1c:	d922      	bls.n	400a64 <sd_mmc_check+0x6dc>
		if (IS_SDIO()) {
  400a1e:	4b69      	ldr	r3, [pc, #420]	; (400bc4 <sd_mmc_check+0x83c>)
  400a20:	681b      	ldr	r3, [r3, #0]
  400a22:	7bdb      	ldrb	r3, [r3, #15]
  400a24:	f013 0f04 	tst.w	r3, #4
  400a28:	d146      	bne.n	400ab8 <sd_mmc_check+0x730>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a2a:	4b66      	ldr	r3, [pc, #408]	; (400bc4 <sd_mmc_check+0x83c>)
  400a2c:	681b      	ldr	r3, [r3, #0]
  400a2e:	7bda      	ldrb	r2, [r3, #15]
  400a30:	f012 0f01 	tst.w	r2, #1
  400a34:	d014      	beq.n	400a60 <sd_mmc_check+0x6d8>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400a36:	8999      	ldrh	r1, [r3, #12]
  400a38:	0409      	lsls	r1, r1, #16
  400a3a:	f241 1037 	movw	r0, #4407	; 0x1137
  400a3e:	4b67      	ldr	r3, [pc, #412]	; (400bdc <sd_mmc_check+0x854>)
  400a40:	4798      	blx	r3
  400a42:	2800      	cmp	r0, #0
  400a44:	f43f acc8 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400a48:	2102      	movs	r1, #2
  400a4a:	f241 1006 	movw	r0, #4358	; 0x1106
  400a4e:	4b63      	ldr	r3, [pc, #396]	; (400bdc <sd_mmc_check+0x854>)
  400a50:	4798      	blx	r3
  400a52:	2800      	cmp	r0, #0
  400a54:	f43f acc0 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400a58:	4b5a      	ldr	r3, [pc, #360]	; (400bc4 <sd_mmc_check+0x83c>)
  400a5a:	681b      	ldr	r3, [r3, #0]
  400a5c:	2204      	movs	r2, #4
  400a5e:	745a      	strb	r2, [r3, #17]
		sd_mmc_configure_slot();
  400a60:	4b5f      	ldr	r3, [pc, #380]	; (400be0 <sd_mmc_check+0x858>)
  400a62:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400a64:	4b5f      	ldr	r3, [pc, #380]	; (400be4 <sd_mmc_check+0x85c>)
  400a66:	4798      	blx	r3
  400a68:	b180      	cbz	r0, 400a8c <sd_mmc_check+0x704>
		if (IS_SDIO()) {
  400a6a:	4b56      	ldr	r3, [pc, #344]	; (400bc4 <sd_mmc_check+0x83c>)
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	7bdb      	ldrb	r3, [r3, #15]
  400a70:	f013 0f04 	tst.w	r3, #4
  400a74:	d141      	bne.n	400afa <sd_mmc_check+0x772>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a76:	4b53      	ldr	r3, [pc, #332]	; (400bc4 <sd_mmc_check+0x83c>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	7bda      	ldrb	r2, [r3, #15]
  400a7c:	f012 0f01 	tst.w	r2, #1
  400a80:	d002      	beq.n	400a88 <sd_mmc_check+0x700>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a82:	7c1b      	ldrb	r3, [r3, #16]
  400a84:	2b10      	cmp	r3, #16
  400a86:	d85e      	bhi.n	400b46 <sd_mmc_check+0x7be>
		sd_mmc_configure_slot();
  400a88:	4b55      	ldr	r3, [pc, #340]	; (400be0 <sd_mmc_check+0x858>)
  400a8a:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a8c:	4b4d      	ldr	r3, [pc, #308]	; (400bc4 <sd_mmc_check+0x83c>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	7bdb      	ldrb	r3, [r3, #15]
  400a92:	f013 0f01 	tst.w	r3, #1
  400a96:	d008      	beq.n	400aaa <sd_mmc_check+0x722>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400a98:	f44f 7100 	mov.w	r1, #512	; 0x200
  400a9c:	f241 1010 	movw	r0, #4368	; 0x1110
  400aa0:	4b4e      	ldr	r3, [pc, #312]	; (400bdc <sd_mmc_check+0x854>)
  400aa2:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400aa4:	2800      	cmp	r0, #0
  400aa6:	f43f ac97 	beq.w	4003d8 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400aaa:	4b46      	ldr	r3, [pc, #280]	; (400bc4 <sd_mmc_check+0x83c>)
  400aac:	681b      	ldr	r3, [r3, #0]
  400aae:	2200      	movs	r2, #0
  400ab0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400ab2:	4b4d      	ldr	r3, [pc, #308]	; (400be8 <sd_mmc_check+0x860>)
  400ab4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400ab6:	e471      	b.n	40039c <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400ab8:	ab04      	add	r3, sp, #16
  400aba:	9300      	str	r3, [sp, #0]
  400abc:	2300      	movs	r3, #0
  400abe:	2208      	movs	r2, #8
  400ac0:	4619      	mov	r1, r3
  400ac2:	4618      	mov	r0, r3
  400ac4:	4d40      	ldr	r5, [pc, #256]	; (400bc8 <sd_mmc_check+0x840>)
  400ac6:	47a8      	blx	r5
  400ac8:	2800      	cmp	r0, #0
  400aca:	f43f ac85 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400ace:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400ad2:	2b00      	cmp	r3, #0
  400ad4:	daa9      	bge.n	400a2a <sd_mmc_check+0x6a2>
	u8_value = SDIO_BUSWIDTH_4B;
  400ad6:	ab14      	add	r3, sp, #80	; 0x50
  400ad8:	2202      	movs	r2, #2
  400ada:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400ade:	9300      	str	r3, [sp, #0]
  400ae0:	2301      	movs	r3, #1
  400ae2:	2207      	movs	r2, #7
  400ae4:	2100      	movs	r1, #0
  400ae6:	4618      	mov	r0, r3
  400ae8:	47a8      	blx	r5
  400aea:	2800      	cmp	r0, #0
  400aec:	f43f ac74 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400af0:	4b34      	ldr	r3, [pc, #208]	; (400bc4 <sd_mmc_check+0x83c>)
  400af2:	681b      	ldr	r3, [r3, #0]
  400af4:	2204      	movs	r2, #4
  400af6:	745a      	strb	r2, [r3, #17]
  400af8:	e797      	b.n	400a2a <sd_mmc_check+0x6a2>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400afa:	ab04      	add	r3, sp, #16
  400afc:	9300      	str	r3, [sp, #0]
  400afe:	2300      	movs	r3, #0
  400b00:	2213      	movs	r2, #19
  400b02:	4619      	mov	r1, r3
  400b04:	4618      	mov	r0, r3
  400b06:	4d30      	ldr	r5, [pc, #192]	; (400bc8 <sd_mmc_check+0x840>)
  400b08:	47a8      	blx	r5
  400b0a:	2800      	cmp	r0, #0
  400b0c:	f43f ac64 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400b10:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400b14:	f013 0f01 	tst.w	r3, #1
  400b18:	d0ad      	beq.n	400a76 <sd_mmc_check+0x6ee>
	u8_value = SDIO_EHS;
  400b1a:	ab14      	add	r3, sp, #80	; 0x50
  400b1c:	2202      	movs	r2, #2
  400b1e:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400b22:	9300      	str	r3, [sp, #0]
  400b24:	2301      	movs	r3, #1
  400b26:	2213      	movs	r2, #19
  400b28:	2100      	movs	r1, #0
  400b2a:	4618      	mov	r0, r3
  400b2c:	47a8      	blx	r5
  400b2e:	2800      	cmp	r0, #0
  400b30:	f43f ac52 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400b34:	4b23      	ldr	r3, [pc, #140]	; (400bc4 <sd_mmc_check+0x83c>)
  400b36:	681b      	ldr	r3, [r3, #0]
  400b38:	2201      	movs	r2, #1
  400b3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400b3e:	681a      	ldr	r2, [r3, #0]
  400b40:	0052      	lsls	r2, r2, #1
  400b42:	601a      	str	r2, [r3, #0]
  400b44:	e797      	b.n	400a76 <sd_mmc_check+0x6ee>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400b46:	2540      	movs	r5, #64	; 0x40
  400b48:	462a      	mov	r2, r5
  400b4a:	2100      	movs	r1, #0
  400b4c:	a804      	add	r0, sp, #16
  400b4e:	4b27      	ldr	r3, [pc, #156]	; (400bec <sd_mmc_check+0x864>)
  400b50:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400b52:	2301      	movs	r3, #1
  400b54:	9300      	str	r3, [sp, #0]
  400b56:	462a      	mov	r2, r5
  400b58:	4925      	ldr	r1, [pc, #148]	; (400bf0 <sd_mmc_check+0x868>)
  400b5a:	4826      	ldr	r0, [pc, #152]	; (400bf4 <sd_mmc_check+0x86c>)
  400b5c:	4d26      	ldr	r5, [pc, #152]	; (400bf8 <sd_mmc_check+0x870>)
  400b5e:	47a8      	blx	r5
  400b60:	2800      	cmp	r0, #0
  400b62:	f43f ac39 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400b66:	2101      	movs	r1, #1
  400b68:	a804      	add	r0, sp, #16
  400b6a:	4b24      	ldr	r3, [pc, #144]	; (400bfc <sd_mmc_check+0x874>)
  400b6c:	4798      	blx	r3
  400b6e:	2800      	cmp	r0, #0
  400b70:	f43f ac32 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400b74:	4b22      	ldr	r3, [pc, #136]	; (400c00 <sd_mmc_check+0x878>)
  400b76:	4798      	blx	r3
  400b78:	2800      	cmp	r0, #0
  400b7a:	f43f ac2d 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400b7e:	4b21      	ldr	r3, [pc, #132]	; (400c04 <sd_mmc_check+0x87c>)
  400b80:	4798      	blx	r3
  400b82:	f010 0f80 	tst.w	r0, #128	; 0x80
  400b86:	f47f ac27 	bne.w	4003d8 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400b8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400b8e:	f003 030f 	and.w	r3, r3, #15
  400b92:	2b0f      	cmp	r3, #15
  400b94:	f43f af78 	beq.w	400a88 <sd_mmc_check+0x700>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400b98:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400b9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ba0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ba4:	f47f ac18 	bne.w	4003d8 <sd_mmc_check+0x50>
	driver_send_clock();
  400ba8:	4b17      	ldr	r3, [pc, #92]	; (400c08 <sd_mmc_check+0x880>)
  400baa:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400bac:	4b05      	ldr	r3, [pc, #20]	; (400bc4 <sd_mmc_check+0x83c>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	2201      	movs	r2, #1
  400bb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400bb6:	681a      	ldr	r2, [r3, #0]
  400bb8:	0052      	lsls	r2, r2, #1
  400bba:	601a      	str	r2, [r3, #0]
  400bbc:	e764      	b.n	400a88 <sd_mmc_check+0x700>
	*v2 = 0;
  400bbe:	f04f 0900 	mov.w	r9, #0
  400bc2:	e41b      	b.n	4003fc <sd_mmc_check+0x74>
  400bc4:	20400a04 	.word	0x20400a04
  400bc8:	004002d5 	.word	0x004002d5
  400bcc:	004078c8 	.word	0x004078c8
  400bd0:	004078e4 	.word	0x004078e4
  400bd4:	20400a0d 	.word	0x20400a0d
  400bd8:	00401655 	.word	0x00401655
  400bdc:	0040174d 	.word	0x0040174d
  400be0:	004001ad 	.word	0x004001ad
  400be4:	0040165f 	.word	0x0040165f
  400be8:	00400341 	.word	0x00400341
  400bec:	0040495d 	.word	0x0040495d
  400bf0:	80ffff01 	.word	0x80ffff01
  400bf4:	00081106 	.word	0x00081106
  400bf8:	004017a9 	.word	0x004017a9
  400bfc:	004018e5 	.word	0x004018e5
  400c00:	004019dd 	.word	0x004019dd
  400c04:	00401771 	.word	0x00401771
  400c08:	0040172b 	.word	0x0040172b

00400c0c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c0c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c0e:	4b05      	ldr	r3, [pc, #20]	; (400c24 <sd_mmc_get_type+0x18>)
  400c10:	4798      	blx	r3
  400c12:	b108      	cbz	r0, 400c18 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400c14:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c16:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c18:	4b03      	ldr	r3, [pc, #12]	; (400c28 <sd_mmc_get_type+0x1c>)
  400c1a:	4798      	blx	r3
	return sd_mmc_card->type;
  400c1c:	4b03      	ldr	r3, [pc, #12]	; (400c2c <sd_mmc_get_type+0x20>)
  400c1e:	681b      	ldr	r3, [r3, #0]
  400c20:	7bd8      	ldrb	r0, [r3, #15]
  400c22:	bd08      	pop	{r3, pc}
  400c24:	004001d9 	.word	0x004001d9
  400c28:	00400341 	.word	0x00400341
  400c2c:	20400a04 	.word	0x20400a04

00400c30 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400c30:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c32:	4b05      	ldr	r3, [pc, #20]	; (400c48 <sd_mmc_get_capacity+0x18>)
  400c34:	4798      	blx	r3
  400c36:	b108      	cbz	r0, 400c3c <sd_mmc_get_capacity+0xc>
		return 0;
  400c38:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400c3a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c3c:	4b03      	ldr	r3, [pc, #12]	; (400c4c <sd_mmc_get_capacity+0x1c>)
  400c3e:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400c40:	4b03      	ldr	r3, [pc, #12]	; (400c50 <sd_mmc_get_capacity+0x20>)
  400c42:	681b      	ldr	r3, [r3, #0]
  400c44:	6858      	ldr	r0, [r3, #4]
  400c46:	bd08      	pop	{r3, pc}
  400c48:	004001d9 	.word	0x004001d9
  400c4c:	00400341 	.word	0x00400341
  400c50:	20400a04 	.word	0x20400a04

00400c54 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400c54:	2000      	movs	r0, #0
  400c56:	4770      	bx	lr

00400c58 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c5c:	b082      	sub	sp, #8
  400c5e:	468a      	mov	sl, r1
  400c60:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400c62:	4b26      	ldr	r3, [pc, #152]	; (400cfc <sd_mmc_init_read_blocks+0xa4>)
  400c64:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400c66:	4680      	mov	r8, r0
  400c68:	b118      	cbz	r0, 400c72 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400c6a:	4640      	mov	r0, r8
  400c6c:	b002      	add	sp, #8
  400c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c72:	4c23      	ldr	r4, [pc, #140]	; (400d00 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c74:	4e23      	ldr	r6, [pc, #140]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c76:	4d24      	ldr	r5, [pc, #144]	; (400d08 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c78:	4f24      	ldr	r7, [pc, #144]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c7a:	6833      	ldr	r3, [r6, #0]
  400c7c:	8999      	ldrh	r1, [r3, #12]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c7e:	0409      	lsls	r1, r1, #16
  400c80:	f241 100d 	movw	r0, #4365	; 0x110d
  400c84:	47a8      	blx	r5
  400c86:	b128      	cbz	r0, 400c94 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c88:	47b8      	blx	r7
  400c8a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400c8e:	d117      	bne.n	400cc0 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400c90:	3c01      	subs	r4, #1
  400c92:	d1f2      	bne.n	400c7a <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400c94:	4b1e      	ldr	r3, [pc, #120]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400c96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400c98:	f04f 0805 	mov.w	r8, #5
  400c9c:	e7e5      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400c9e:	4b1b      	ldr	r3, [pc, #108]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
  400ca0:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400ca2:	4b1c      	ldr	r3, [pc, #112]	; (400d14 <sd_mmc_init_read_blocks+0xbc>)
  400ca4:	4003      	ands	r3, r0
  400ca6:	b933      	cbnz	r3, 400cb6 <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400ca8:	4b1b      	ldr	r3, [pc, #108]	; (400d18 <sd_mmc_init_read_blocks+0xc0>)
  400caa:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400cae:	4b1b      	ldr	r3, [pc, #108]	; (400d1c <sd_mmc_init_read_blocks+0xc4>)
  400cb0:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400cb4:	e7d9      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400cb6:	4b16      	ldr	r3, [pc, #88]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cb8:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400cba:	f04f 0805 	mov.w	r8, #5
  400cbe:	e7d4      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400cc0:	4b17      	ldr	r3, [pc, #92]	; (400d20 <sd_mmc_init_read_blocks+0xc8>)
  400cc2:	4818      	ldr	r0, [pc, #96]	; (400d24 <sd_mmc_init_read_blocks+0xcc>)
  400cc4:	f1b9 0f01 	cmp.w	r9, #1
  400cc8:	bf98      	it	ls
  400cca:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400ccc:	4b0d      	ldr	r3, [pc, #52]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
  400cce:	681b      	ldr	r3, [r3, #0]
  400cd0:	7bdb      	ldrb	r3, [r3, #15]
  400cd2:	f013 0f08 	tst.w	r3, #8
  400cd6:	d101      	bne.n	400cdc <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400cd8:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400cdc:	2301      	movs	r3, #1
  400cde:	9300      	str	r3, [sp, #0]
  400ce0:	464b      	mov	r3, r9
  400ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ce6:	4651      	mov	r1, sl
  400ce8:	4c0f      	ldr	r4, [pc, #60]	; (400d28 <sd_mmc_init_read_blocks+0xd0>)
  400cea:	47a0      	blx	r4
  400cec:	2800      	cmp	r0, #0
  400cee:	d1d6      	bne.n	400c9e <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400cf0:	4b07      	ldr	r3, [pc, #28]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cf2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400cf4:	f04f 0805 	mov.w	r8, #5
  400cf8:	e7b7      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
  400cfa:	bf00      	nop
  400cfc:	004001d9 	.word	0x004001d9
  400d00:	00030d41 	.word	0x00030d41
  400d04:	20400a04 	.word	0x20400a04
  400d08:	0040174d 	.word	0x0040174d
  400d0c:	00401771 	.word	0x00401771
  400d10:	00400341 	.word	0x00400341
  400d14:	e4580000 	.word	0xe4580000
  400d18:	20400a08 	.word	0x20400a08
  400d1c:	20400a0a 	.word	0x20400a0a
  400d20:	00081111 	.word	0x00081111
  400d24:	00101112 	.word	0x00101112
  400d28:	004017a9 	.word	0x004017a9

00400d2c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400d2c:	b510      	push	{r4, lr}
  400d2e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400d30:	4b06      	ldr	r3, [pc, #24]	; (400d4c <sd_mmc_start_read_blocks+0x20>)
  400d32:	4798      	blx	r3
  400d34:	b920      	cbnz	r0, 400d40 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d36:	2200      	movs	r2, #0
  400d38:	4b05      	ldr	r3, [pc, #20]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d3a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400d3c:	2005      	movs	r0, #5
  400d3e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400d40:	4a03      	ldr	r2, [pc, #12]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d42:	8813      	ldrh	r3, [r2, #0]
  400d44:	1b1c      	subs	r4, r3, r4
  400d46:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400d48:	2000      	movs	r0, #0
}
  400d4a:	bd10      	pop	{r4, pc}
  400d4c:	004018e5 	.word	0x004018e5
  400d50:	20400a08 	.word	0x20400a08

00400d54 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400d54:	b510      	push	{r4, lr}
  400d56:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400d58:	4b13      	ldr	r3, [pc, #76]	; (400da8 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d5a:	4798      	blx	r3
  400d5c:	b908      	cbnz	r0, 400d62 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400d5e:	2005      	movs	r0, #5
  400d60:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400d62:	b184      	cbz	r4, 400d86 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400d64:	2200      	movs	r2, #0
  400d66:	4b11      	ldr	r3, [pc, #68]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d68:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400d6a:	4b11      	ldr	r3, [pc, #68]	; (400db0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d6c:	881b      	ldrh	r3, [r3, #0]
  400d6e:	2b01      	cmp	r3, #1
  400d70:	d00f      	beq.n	400d92 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400d72:	2100      	movs	r1, #0
  400d74:	f243 100c 	movw	r0, #12556	; 0x310c
  400d78:	4b0e      	ldr	r3, [pc, #56]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d7a:	4798      	blx	r3
  400d7c:	b168      	cbz	r0, 400d9a <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400d7e:	4b0e      	ldr	r3, [pc, #56]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d80:	4798      	blx	r3
	return SD_MMC_OK;
  400d82:	2000      	movs	r0, #0
  400d84:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400d86:	4b09      	ldr	r3, [pc, #36]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d88:	881b      	ldrh	r3, [r3, #0]
  400d8a:	2b00      	cmp	r3, #0
  400d8c:	d0ed      	beq.n	400d6a <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400d8e:	2000      	movs	r0, #0
}
  400d90:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400d92:	4b09      	ldr	r3, [pc, #36]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d94:	4798      	blx	r3
		return SD_MMC_OK;
  400d96:	2000      	movs	r0, #0
  400d98:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400d9a:	2100      	movs	r1, #0
  400d9c:	f243 100c 	movw	r0, #12556	; 0x310c
  400da0:	4b04      	ldr	r3, [pc, #16]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400da2:	4798      	blx	r3
  400da4:	e7eb      	b.n	400d7e <sd_mmc_wait_end_of_read_blocks+0x2a>
  400da6:	bf00      	nop
  400da8:	004019dd 	.word	0x004019dd
  400dac:	20400a08 	.word	0x20400a08
  400db0:	20400a0a 	.word	0x20400a0a
  400db4:	0040174d 	.word	0x0040174d
  400db8:	00400341 	.word	0x00400341

00400dbc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400dbc:	b570      	push	{r4, r5, r6, lr}
  400dbe:	b082      	sub	sp, #8
  400dc0:	460e      	mov	r6, r1
  400dc2:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400dc4:	4b16      	ldr	r3, [pc, #88]	; (400e20 <sd_mmc_init_write_blocks+0x64>)
  400dc6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400dc8:	4604      	mov	r4, r0
  400dca:	b9b8      	cbnz	r0, 400dfc <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400dcc:	4b15      	ldr	r3, [pc, #84]	; (400e24 <sd_mmc_init_write_blocks+0x68>)
  400dce:	4816      	ldr	r0, [pc, #88]	; (400e28 <sd_mmc_init_write_blocks+0x6c>)
  400dd0:	2d01      	cmp	r5, #1
  400dd2:	bf98      	it	ls
  400dd4:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400dd6:	4b15      	ldr	r3, [pc, #84]	; (400e2c <sd_mmc_init_write_blocks+0x70>)
  400dd8:	681b      	ldr	r3, [r3, #0]
  400dda:	7bdb      	ldrb	r3, [r3, #15]
  400ddc:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400de0:	bf08      	it	eq
  400de2:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400de4:	2301      	movs	r3, #1
  400de6:	9300      	str	r3, [sp, #0]
  400de8:	462b      	mov	r3, r5
  400dea:	f44f 7200 	mov.w	r2, #512	; 0x200
  400dee:	4631      	mov	r1, r6
  400df0:	4e0f      	ldr	r6, [pc, #60]	; (400e30 <sd_mmc_init_write_blocks+0x74>)
  400df2:	47b0      	blx	r6
  400df4:	b928      	cbnz	r0, 400e02 <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400df6:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400df8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400dfa:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400dfc:	4620      	mov	r0, r4
  400dfe:	b002      	add	sp, #8
  400e00:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400e02:	4b0d      	ldr	r3, [pc, #52]	; (400e38 <sd_mmc_init_write_blocks+0x7c>)
  400e04:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400e06:	4b0d      	ldr	r3, [pc, #52]	; (400e3c <sd_mmc_init_write_blocks+0x80>)
  400e08:	4003      	ands	r3, r0
  400e0a:	b923      	cbnz	r3, 400e16 <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400e0c:	4b0c      	ldr	r3, [pc, #48]	; (400e40 <sd_mmc_init_write_blocks+0x84>)
  400e0e:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400e10:	4b0c      	ldr	r3, [pc, #48]	; (400e44 <sd_mmc_init_write_blocks+0x88>)
  400e12:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400e14:	e7f2      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400e16:	4b07      	ldr	r3, [pc, #28]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400e18:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e1a:	2405      	movs	r4, #5
  400e1c:	e7ee      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
  400e1e:	bf00      	nop
  400e20:	004001d9 	.word	0x004001d9
  400e24:	00089118 	.word	0x00089118
  400e28:	00109119 	.word	0x00109119
  400e2c:	20400a04 	.word	0x20400a04
  400e30:	004017a9 	.word	0x004017a9
  400e34:	00400341 	.word	0x00400341
  400e38:	00401771 	.word	0x00401771
  400e3c:	e4580000 	.word	0xe4580000
  400e40:	20400a08 	.word	0x20400a08
  400e44:	20400a0a 	.word	0x20400a0a

00400e48 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400e48:	b510      	push	{r4, lr}
  400e4a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400e4c:	4b06      	ldr	r3, [pc, #24]	; (400e68 <sd_mmc_start_write_blocks+0x20>)
  400e4e:	4798      	blx	r3
  400e50:	b920      	cbnz	r0, 400e5c <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e52:	2200      	movs	r2, #0
  400e54:	4b05      	ldr	r3, [pc, #20]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e56:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e58:	2005      	movs	r0, #5
  400e5a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e5c:	4a03      	ldr	r2, [pc, #12]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e5e:	8813      	ldrh	r3, [r2, #0]
  400e60:	1b1c      	subs	r4, r3, r4
  400e62:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e64:	2000      	movs	r0, #0
}
  400e66:	bd10      	pop	{r4, pc}
  400e68:	00401a41 	.word	0x00401a41
  400e6c:	20400a08 	.word	0x20400a08

00400e70 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400e70:	b510      	push	{r4, lr}
  400e72:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400e74:	4b12      	ldr	r3, [pc, #72]	; (400ec0 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400e76:	4798      	blx	r3
  400e78:	b908      	cbnz	r0, 400e7e <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e7a:	2005      	movs	r0, #5
  400e7c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e7e:	b184      	cbz	r4, 400ea2 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e80:	2200      	movs	r2, #0
  400e82:	4b10      	ldr	r3, [pc, #64]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e84:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e86:	4b10      	ldr	r3, [pc, #64]	; (400ec8 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400e88:	881b      	ldrh	r3, [r3, #0]
  400e8a:	2b01      	cmp	r3, #1
  400e8c:	d00f      	beq.n	400eae <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400e8e:	2100      	movs	r1, #0
  400e90:	f243 100c 	movw	r0, #12556	; 0x310c
  400e94:	4b0d      	ldr	r3, [pc, #52]	; (400ecc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e96:	4798      	blx	r3
  400e98:	b968      	cbnz	r0, 400eb6 <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400e9a:	4b0d      	ldr	r3, [pc, #52]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400e9c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e9e:	2005      	movs	r0, #5
  400ea0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400ea2:	4b08      	ldr	r3, [pc, #32]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400ea4:	881b      	ldrh	r3, [r3, #0]
  400ea6:	2b00      	cmp	r3, #0
  400ea8:	d0ed      	beq.n	400e86 <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400eaa:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400eac:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400eae:	4b08      	ldr	r3, [pc, #32]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb0:	4798      	blx	r3
		return SD_MMC_OK;
  400eb2:	2000      	movs	r0, #0
  400eb4:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400eb6:	4b06      	ldr	r3, [pc, #24]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb8:	4798      	blx	r3
	return SD_MMC_OK;
  400eba:	2000      	movs	r0, #0
  400ebc:	bd10      	pop	{r4, pc}
  400ebe:	bf00      	nop
  400ec0:	00401b39 	.word	0x00401b39
  400ec4:	20400a08 	.word	0x20400a08
  400ec8:	20400a0a 	.word	0x20400a0a
  400ecc:	0040174d 	.word	0x0040174d
  400ed0:	00400341 	.word	0x00400341

00400ed4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400ed4:	b510      	push	{r4, lr}
  400ed6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400ed8:	4b0f      	ldr	r3, [pc, #60]	; (400f18 <sd_mmc_test_unit_ready+0x44>)
  400eda:	4798      	blx	r3
  400edc:	2801      	cmp	r0, #1
  400ede:	d018      	beq.n	400f12 <sd_mmc_test_unit_ready+0x3e>
  400ee0:	b118      	cbz	r0, 400eea <sd_mmc_test_unit_ready+0x16>
  400ee2:	2802      	cmp	r0, #2
  400ee4:	d010      	beq.n	400f08 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400ee6:	2001      	movs	r0, #1
  400ee8:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400eea:	4b0c      	ldr	r3, [pc, #48]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400eec:	5d1b      	ldrb	r3, [r3, r4]
  400eee:	b10b      	cbz	r3, 400ef4 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400ef0:	2002      	movs	r0, #2
	}
}
  400ef2:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400ef4:	4620      	mov	r0, r4
  400ef6:	4b0a      	ldr	r3, [pc, #40]	; (400f20 <sd_mmc_test_unit_ready+0x4c>)
  400ef8:	4798      	blx	r3
  400efa:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400efe:	2800      	cmp	r0, #0
  400f00:	bf14      	ite	ne
  400f02:	2000      	movne	r0, #0
  400f04:	2002      	moveq	r0, #2
  400f06:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400f08:	2200      	movs	r2, #0
  400f0a:	4b04      	ldr	r3, [pc, #16]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400f0c:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400f0e:	2002      	movs	r0, #2
  400f10:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400f12:	2003      	movs	r0, #3
  400f14:	bd10      	pop	{r4, pc}
  400f16:	bf00      	nop
  400f18:	00400389 	.word	0x00400389
  400f1c:	20400a10 	.word	0x20400a10
  400f20:	00400c0d 	.word	0x00400c0d

00400f24 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400f24:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400f26:	2000      	movs	r0, #0
  400f28:	4b01      	ldr	r3, [pc, #4]	; (400f30 <sd_mmc_test_unit_ready_0+0xc>)
  400f2a:	4798      	blx	r3
}
  400f2c:	bd08      	pop	{r3, pc}
  400f2e:	bf00      	nop
  400f30:	00400ed5 	.word	0x00400ed5

00400f34 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400f34:	b538      	push	{r3, r4, r5, lr}
  400f36:	4604      	mov	r4, r0
  400f38:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400f3a:	4b04      	ldr	r3, [pc, #16]	; (400f4c <sd_mmc_read_capacity+0x18>)
  400f3c:	4798      	blx	r3
  400f3e:	0040      	lsls	r0, r0, #1
  400f40:	3801      	subs	r0, #1
  400f42:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400f44:	4620      	mov	r0, r4
  400f46:	4b02      	ldr	r3, [pc, #8]	; (400f50 <sd_mmc_read_capacity+0x1c>)
  400f48:	4798      	blx	r3
}
  400f4a:	bd38      	pop	{r3, r4, r5, pc}
  400f4c:	00400c31 	.word	0x00400c31
  400f50:	00400ed5 	.word	0x00400ed5

00400f54 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400f54:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400f56:	4601      	mov	r1, r0
  400f58:	2000      	movs	r0, #0
  400f5a:	4b01      	ldr	r3, [pc, #4]	; (400f60 <sd_mmc_read_capacity_0+0xc>)
  400f5c:	4798      	blx	r3
}
  400f5e:	bd08      	pop	{r3, pc}
  400f60:	00400f35 	.word	0x00400f35

00400f64 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400f64:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400f66:	2000      	movs	r0, #0
  400f68:	4b01      	ldr	r3, [pc, #4]	; (400f70 <sd_mmc_wr_protect_0+0xc>)
  400f6a:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  400f6c:	bd08      	pop	{r3, pc}
  400f6e:	bf00      	nop
  400f70:	00400c55 	.word	0x00400c55

00400f74 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400f74:	b510      	push	{r4, lr}
  400f76:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400f78:	2201      	movs	r2, #1
  400f7a:	4b0a      	ldr	r3, [pc, #40]	; (400fa4 <sd_mmc_mem_2_ram+0x30>)
  400f7c:	4798      	blx	r3
  400f7e:	b120      	cbz	r0, 400f8a <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400f80:	2802      	cmp	r0, #2
  400f82:	bf0c      	ite	eq
  400f84:	2002      	moveq	r0, #2
  400f86:	2001      	movne	r0, #1
  400f88:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400f8a:	2101      	movs	r1, #1
  400f8c:	4620      	mov	r0, r4
  400f8e:	4b06      	ldr	r3, [pc, #24]	; (400fa8 <sd_mmc_mem_2_ram+0x34>)
  400f90:	4798      	blx	r3
  400f92:	b108      	cbz	r0, 400f98 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  400f94:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400f96:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400f98:	4b04      	ldr	r3, [pc, #16]	; (400fac <sd_mmc_mem_2_ram+0x38>)
  400f9a:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400f9c:	3000      	adds	r0, #0
  400f9e:	bf18      	it	ne
  400fa0:	2001      	movne	r0, #1
  400fa2:	bd10      	pop	{r4, pc}
  400fa4:	00400c59 	.word	0x00400c59
  400fa8:	00400d2d 	.word	0x00400d2d
  400fac:	00400d55 	.word	0x00400d55

00400fb0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400fb0:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400fb2:	460a      	mov	r2, r1
  400fb4:	4601      	mov	r1, r0
  400fb6:	2000      	movs	r0, #0
  400fb8:	4b01      	ldr	r3, [pc, #4]	; (400fc0 <sd_mmc_mem_2_ram_0+0x10>)
  400fba:	4798      	blx	r3
}
  400fbc:	bd08      	pop	{r3, pc}
  400fbe:	bf00      	nop
  400fc0:	00400f75 	.word	0x00400f75

00400fc4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  400fc4:	b510      	push	{r4, lr}
  400fc6:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  400fc8:	2201      	movs	r2, #1
  400fca:	4b0a      	ldr	r3, [pc, #40]	; (400ff4 <sd_mmc_ram_2_mem+0x30>)
  400fcc:	4798      	blx	r3
  400fce:	b120      	cbz	r0, 400fda <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400fd0:	2802      	cmp	r0, #2
  400fd2:	bf0c      	ite	eq
  400fd4:	2002      	moveq	r0, #2
  400fd6:	2001      	movne	r0, #1
  400fd8:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  400fda:	2101      	movs	r1, #1
  400fdc:	4620      	mov	r0, r4
  400fde:	4b06      	ldr	r3, [pc, #24]	; (400ff8 <sd_mmc_ram_2_mem+0x34>)
  400fe0:	4798      	blx	r3
  400fe2:	b108      	cbz	r0, 400fe8 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  400fe4:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400fe6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  400fe8:	4b04      	ldr	r3, [pc, #16]	; (400ffc <sd_mmc_ram_2_mem+0x38>)
  400fea:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400fec:	3000      	adds	r0, #0
  400fee:	bf18      	it	ne
  400ff0:	2001      	movne	r0, #1
  400ff2:	bd10      	pop	{r4, pc}
  400ff4:	00400dbd 	.word	0x00400dbd
  400ff8:	00400e49 	.word	0x00400e49
  400ffc:	00400e71 	.word	0x00400e71

00401000 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401000:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  401002:	460a      	mov	r2, r1
  401004:	4601      	mov	r1, r0
  401006:	2000      	movs	r0, #0
  401008:	4b01      	ldr	r3, [pc, #4]	; (401010 <sd_mmc_ram_2_mem_0+0x10>)
  40100a:	4798      	blx	r3
}
  40100c:	bd08      	pop	{r3, pc}
  40100e:	bf00      	nop
  401010:	00400fc5 	.word	0x00400fc5

00401014 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401014:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401016:	4810      	ldr	r0, [pc, #64]	; (401058 <sysclk_init+0x44>)
  401018:	4b10      	ldr	r3, [pc, #64]	; (40105c <sysclk_init+0x48>)
  40101a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40101c:	213e      	movs	r1, #62	; 0x3e
  40101e:	2000      	movs	r0, #0
  401020:	4b0f      	ldr	r3, [pc, #60]	; (401060 <sysclk_init+0x4c>)
  401022:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401024:	4c0f      	ldr	r4, [pc, #60]	; (401064 <sysclk_init+0x50>)
  401026:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401028:	2800      	cmp	r0, #0
  40102a:	d0fc      	beq.n	401026 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40102c:	4b0e      	ldr	r3, [pc, #56]	; (401068 <sysclk_init+0x54>)
  40102e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401030:	4a0e      	ldr	r2, [pc, #56]	; (40106c <sysclk_init+0x58>)
  401032:	4b0f      	ldr	r3, [pc, #60]	; (401070 <sysclk_init+0x5c>)
  401034:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401036:	4c0f      	ldr	r4, [pc, #60]	; (401074 <sysclk_init+0x60>)
  401038:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40103a:	2800      	cmp	r0, #0
  40103c:	d0fc      	beq.n	401038 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40103e:	2002      	movs	r0, #2
  401040:	4b0d      	ldr	r3, [pc, #52]	; (401078 <sysclk_init+0x64>)
  401042:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401044:	2000      	movs	r0, #0
  401046:	4b0d      	ldr	r3, [pc, #52]	; (40107c <sysclk_init+0x68>)
  401048:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40104a:	4b0d      	ldr	r3, [pc, #52]	; (401080 <sysclk_init+0x6c>)
  40104c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40104e:	4802      	ldr	r0, [pc, #8]	; (401058 <sysclk_init+0x44>)
  401050:	4b02      	ldr	r3, [pc, #8]	; (40105c <sysclk_init+0x48>)
  401052:	4798      	blx	r3
  401054:	bd10      	pop	{r4, pc}
  401056:	bf00      	nop
  401058:	11e1a300 	.word	0x11e1a300
  40105c:	004025dd 	.word	0x004025dd
  401060:	00401ed5 	.word	0x00401ed5
  401064:	00401f29 	.word	0x00401f29
  401068:	00401f39 	.word	0x00401f39
  40106c:	20183f01 	.word	0x20183f01
  401070:	400e0600 	.word	0x400e0600
  401074:	00401f49 	.word	0x00401f49
  401078:	00401e39 	.word	0x00401e39
  40107c:	00401e71 	.word	0x00401e71
  401080:	004024d1 	.word	0x004024d1

00401084 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401084:	b108      	cbz	r0, 40108a <mem_test_unit_ready+0x6>
  401086:	2001      	movs	r0, #1
  401088:	4770      	bx	lr
{
  40108a:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  40108c:	4b01      	ldr	r3, [pc, #4]	; (401094 <mem_test_unit_ready+0x10>)
  40108e:	4798      	blx	r3
  401090:	bd08      	pop	{r3, pc}
  401092:	bf00      	nop
  401094:	00400f25 	.word	0x00400f25

00401098 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401098:	b108      	cbz	r0, 40109e <mem_read_capacity+0x6>
  40109a:	2001      	movs	r0, #1
  40109c:	4770      	bx	lr
{
  40109e:	b508      	push	{r3, lr}
  4010a0:	4608      	mov	r0, r1
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4010a2:	4b01      	ldr	r3, [pc, #4]	; (4010a8 <mem_read_capacity+0x10>)
  4010a4:	4798      	blx	r3
  4010a6:	bd08      	pop	{r3, pc}
  4010a8:	00400f55 	.word	0x00400f55

004010ac <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  4010ac:	fab0 f080 	clz	r0, r0
  4010b0:	0940      	lsrs	r0, r0, #5
  4010b2:	4770      	bx	lr

004010b4 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4010b4:	b108      	cbz	r0, 4010ba <mem_wr_protect+0x6>
  4010b6:	2001      	movs	r0, #1
  4010b8:	4770      	bx	lr
{
  4010ba:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4010bc:	4b01      	ldr	r3, [pc, #4]	; (4010c4 <mem_wr_protect+0x10>)
  4010be:	4798      	blx	r3
  4010c0:	bd08      	pop	{r3, pc}
  4010c2:	bf00      	nop
  4010c4:	00400f65 	.word	0x00400f65

004010c8 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4010c8:	b108      	cbz	r0, 4010ce <memory_2_ram+0x6>
  4010ca:	2001      	movs	r0, #1
  4010cc:	4770      	bx	lr
{
  4010ce:	b508      	push	{r3, lr}
  4010d0:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4010d2:	4611      	mov	r1, r2
  4010d4:	4b01      	ldr	r3, [pc, #4]	; (4010dc <memory_2_ram+0x14>)
  4010d6:	4798      	blx	r3
  4010d8:	bd08      	pop	{r3, pc}
  4010da:	bf00      	nop
  4010dc:	00400fb1 	.word	0x00400fb1

004010e0 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  4010e0:	b108      	cbz	r0, 4010e6 <ram_2_memory+0x6>
  4010e2:	2001      	movs	r0, #1
  4010e4:	4770      	bx	lr
{
  4010e6:	b508      	push	{r3, lr}
  4010e8:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  4010ea:	4611      	mov	r1, r2
  4010ec:	4b01      	ldr	r3, [pc, #4]	; (4010f4 <ram_2_memory+0x14>)
  4010ee:	4798      	blx	r3
  4010f0:	bd08      	pop	{r3, pc}
  4010f2:	bf00      	nop
  4010f4:	00401001 	.word	0x00401001

004010f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4010f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4010fc:	b980      	cbnz	r0, 401120 <_read+0x28>
  4010fe:	460c      	mov	r4, r1
  401100:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  401102:	2a00      	cmp	r2, #0
  401104:	dd0f      	ble.n	401126 <_read+0x2e>
  401106:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401108:	4e08      	ldr	r6, [pc, #32]	; (40112c <_read+0x34>)
  40110a:	4d09      	ldr	r5, [pc, #36]	; (401130 <_read+0x38>)
  40110c:	6830      	ldr	r0, [r6, #0]
  40110e:	4621      	mov	r1, r4
  401110:	682b      	ldr	r3, [r5, #0]
  401112:	4798      	blx	r3
		ptr++;
  401114:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  401116:	42bc      	cmp	r4, r7
  401118:	d1f8      	bne.n	40110c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40111a:	4640      	mov	r0, r8
  40111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401120:	f04f 38ff 	mov.w	r8, #4294967295
  401124:	e7f9      	b.n	40111a <_read+0x22>
	for (; len > 0; --len) {
  401126:	4680      	mov	r8, r0
  401128:	e7f7      	b.n	40111a <_read+0x22>
  40112a:	bf00      	nop
  40112c:	20400af8 	.word	0x20400af8
  401130:	20400af0 	.word	0x20400af0

00401134 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401134:	3801      	subs	r0, #1
  401136:	2802      	cmp	r0, #2
  401138:	d815      	bhi.n	401166 <_write+0x32>
{
  40113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40113e:	460e      	mov	r6, r1
  401140:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401142:	b19a      	cbz	r2, 40116c <_write+0x38>
  401144:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401146:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401180 <_write+0x4c>
  40114a:	4f0c      	ldr	r7, [pc, #48]	; (40117c <_write+0x48>)
  40114c:	f8d8 0000 	ldr.w	r0, [r8]
  401150:	f815 1b01 	ldrb.w	r1, [r5], #1
  401154:	683b      	ldr	r3, [r7, #0]
  401156:	4798      	blx	r3
  401158:	2800      	cmp	r0, #0
  40115a:	db0a      	blt.n	401172 <_write+0x3e>
  40115c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40115e:	3c01      	subs	r4, #1
  401160:	d1f4      	bne.n	40114c <_write+0x18>
  401162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401166:	f04f 30ff 	mov.w	r0, #4294967295
  40116a:	4770      	bx	lr
	for (; len != 0; --len) {
  40116c:	4610      	mov	r0, r2
  40116e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401172:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40117a:	bf00      	nop
  40117c:	20400af4 	.word	0x20400af4
  401180:	20400af8 	.word	0x20400af8

00401184 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401186:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40118a:	4bb8      	ldr	r3, [pc, #736]	; (40146c <board_init+0x2e8>)
  40118c:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40118e:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401192:	4fb7      	ldr	r7, [pc, #732]	; (401470 <board_init+0x2ec>)
  401194:	4638      	mov	r0, r7
  401196:	4db7      	ldr	r5, [pc, #732]	; (401474 <board_init+0x2f0>)
  401198:	47a8      	blx	r5
	dw_region_attr =
  40119a:	4eb7      	ldr	r6, [pc, #732]	; (401478 <board_init+0x2f4>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40119c:	ea40 0106 	orr.w	r1, r0, r6
  4011a0:	2011      	movs	r0, #17
  4011a2:	4cb6      	ldr	r4, [pc, #728]	; (40147c <board_init+0x2f8>)
  4011a4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  4011a6:	48b6      	ldr	r0, [pc, #728]	; (401480 <board_init+0x2fc>)
  4011a8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011aa:	49b6      	ldr	r1, [pc, #728]	; (401484 <board_init+0x300>)
  4011ac:	4301      	orrs	r1, r0
  4011ae:	48b6      	ldr	r0, [pc, #728]	; (401488 <board_init+0x304>)
  4011b0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4011b2:	4638      	mov	r0, r7
  4011b4:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011b6:	ea40 0106 	orr.w	r1, r0, r6
  4011ba:	48b4      	ldr	r0, [pc, #720]	; (40148c <board_init+0x308>)
  4011bc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  4011be:	48b4      	ldr	r0, [pc, #720]	; (401490 <board_init+0x30c>)
  4011c0:	47a8      	blx	r5
	dw_region_attr =
  4011c2:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  4011c6:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011ca:	ea40 0106 	orr.w	r1, r0, r6
  4011ce:	48b1      	ldr	r0, [pc, #708]	; (401494 <board_init+0x310>)
  4011d0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4011d2:	48b1      	ldr	r0, [pc, #708]	; (401498 <board_init+0x314>)
  4011d4:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011d6:	ea40 0106 	orr.w	r1, r0, r6
  4011da:	48b0      	ldr	r0, [pc, #704]	; (40149c <board_init+0x318>)
  4011dc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4011de:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4011e2:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  4011e4:	4eae      	ldr	r6, [pc, #696]	; (4014a0 <board_init+0x31c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011e6:	ea40 0106 	orr.w	r1, r0, r6
  4011ea:	48ae      	ldr	r0, [pc, #696]	; (4014a4 <board_init+0x320>)
  4011ec:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  4011ee:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4011f2:	47a8      	blx	r5
	dw_region_attr =
  4011f4:	4fac      	ldr	r7, [pc, #688]	; (4014a8 <board_init+0x324>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011f6:	ea40 0107 	orr.w	r1, r0, r7
  4011fa:	48ac      	ldr	r0, [pc, #688]	; (4014ac <board_init+0x328>)
  4011fc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  4011fe:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401202:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401204:	49aa      	ldr	r1, [pc, #680]	; (4014b0 <board_init+0x32c>)
  401206:	4301      	orrs	r1, r0
  401208:	48aa      	ldr	r0, [pc, #680]	; (4014b4 <board_init+0x330>)
  40120a:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  40120c:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401210:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401212:	ea40 0107 	orr.w	r1, r0, r7
  401216:	48a8      	ldr	r0, [pc, #672]	; (4014b8 <board_init+0x334>)
  401218:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  40121a:	48a8      	ldr	r0, [pc, #672]	; (4014bc <board_init+0x338>)
  40121c:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40121e:	ea40 0106 	orr.w	r1, r0, r6
  401222:	48a7      	ldr	r0, [pc, #668]	; (4014c0 <board_init+0x33c>)
  401224:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401226:	4ca7      	ldr	r4, [pc, #668]	; (4014c4 <board_init+0x340>)
  401228:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40122a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  40122e:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401230:	2005      	movs	r0, #5
  401232:	4ba5      	ldr	r3, [pc, #660]	; (4014c8 <board_init+0x344>)
  401234:	4798      	blx	r3
  __ASM volatile ("dsb");
  401236:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40123a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  40123e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401242:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401246:	2300      	movs	r3, #0
  401248:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40124c:	6963      	ldr	r3, [r4, #20]
  40124e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401252:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  401254:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401258:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40125c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401260:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401264:	f007 0007 	and.w	r0, r7, #7
  401268:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40126a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40126e:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401272:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  401276:	f3bf 8f4f 	dsb	sy
  40127a:	f04f 34ff 	mov.w	r4, #4294967295
  40127e:	fa04 fc00 	lsl.w	ip, r4, r0
  401282:	fa06 f000 	lsl.w	r0, r6, r0
  401286:	fa04 f40e 	lsl.w	r4, r4, lr
  40128a:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40128e:	4d8d      	ldr	r5, [pc, #564]	; (4014c4 <board_init+0x340>)
         int32_t tmpways = ways;
  401290:	463a      	mov	r2, r7
  401292:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  401294:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  401298:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40129c:	3a01      	subs	r2, #1
  40129e:	4423      	add	r3, r4
  4012a0:	f1b2 3fff 	cmp.w	r2, #4294967295
  4012a4:	d1f6      	bne.n	401294 <board_init+0x110>
        } while(sets--);
  4012a6:	3e01      	subs	r6, #1
  4012a8:	4460      	add	r0, ip
  4012aa:	f1b6 3fff 	cmp.w	r6, #4294967295
  4012ae:	d1ef      	bne.n	401290 <board_init+0x10c>
  4012b0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4012b4:	4b83      	ldr	r3, [pc, #524]	; (4014c4 <board_init+0x340>)
  4012b6:	695a      	ldr	r2, [r3, #20]
  4012b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4012bc:	615a      	str	r2, [r3, #20]
  4012be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4012c2:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4012c6:	4a81      	ldr	r2, [pc, #516]	; (4014cc <board_init+0x348>)
  4012c8:	4981      	ldr	r1, [pc, #516]	; (4014d0 <board_init+0x34c>)
  4012ca:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4012cc:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4012d0:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4012d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4012d6:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4012da:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4012de:	f022 0201 	bic.w	r2, r2, #1
  4012e2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4012e6:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4012ea:	f022 0201 	bic.w	r2, r2, #1
  4012ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4012f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4012f6:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4012fa:	200a      	movs	r0, #10
  4012fc:	4c75      	ldr	r4, [pc, #468]	; (4014d4 <board_init+0x350>)
  4012fe:	47a0      	blx	r4
  401300:	200b      	movs	r0, #11
  401302:	47a0      	blx	r4
  401304:	200c      	movs	r0, #12
  401306:	47a0      	blx	r4
  401308:	2010      	movs	r0, #16
  40130a:	47a0      	blx	r4
  40130c:	2011      	movs	r0, #17
  40130e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401310:	4a71      	ldr	r2, [pc, #452]	; (4014d8 <board_init+0x354>)
  401312:	f44f 7380 	mov.w	r3, #256	; 0x100
  401316:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401318:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40131c:	6313      	str	r3, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40131e:	4b6f      	ldr	r3, [pc, #444]	; (4014dc <board_init+0x358>)
  401320:	f44f 6100 	mov.w	r1, #2048	; 0x800
  401324:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401326:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40132a:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40132c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401330:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401332:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  401334:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401338:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40133a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  40133e:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401340:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401342:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  401346:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401348:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40134c:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401350:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401354:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401358:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40135a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40135e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401360:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401362:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401366:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401368:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  40136c:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40136e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401370:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  401374:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401376:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401378:	4859      	ldr	r0, [pc, #356]	; (4014e0 <board_init+0x35c>)
  40137a:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  40137e:	f041 0110 	orr.w	r1, r1, #16
  401382:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  401386:	f500 20b2 	add.w	r0, r0, #364544	; 0x59000
  40138a:	2110      	movs	r1, #16
  40138c:	6601      	str	r1, [r0, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40138e:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
		base->PIO_MDDR = mask;
  401392:	6541      	str	r1, [r0, #84]	; 0x54
		base->PIO_IFDR = mask;
  401394:	6241      	str	r1, [r0, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401396:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40139a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40139c:	430c      	orrs	r4, r1
  40139e:	6704      	str	r4, [r0, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4013a0:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4013a2:	430c      	orrs	r4, r1
  4013a4:	6744      	str	r4, [r0, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013a6:	6041      	str	r1, [r0, #4]
		base->PIO_PUDR = mask;
  4013a8:	2008      	movs	r0, #8
  4013aa:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013ac:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013b0:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013b2:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013b4:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013b8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4013ba:	f024 0408 	bic.w	r4, r4, #8
  4013be:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4013c0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4013c2:	f024 0408 	bic.w	r4, r4, #8
  4013c6:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013c8:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  4013ca:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013cc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013d0:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013d2:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013d4:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013d8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4013da:	f020 0010 	bic.w	r0, r0, #16
  4013de:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4013e0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4013e2:	f020 0010 	bic.w	r0, r0, #16
  4013e6:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013e8:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4013ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013ee:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013f0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013f4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013f6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013f8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4013fe:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  401402:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401404:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401406:	4308      	orrs	r0, r1
  401408:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40140a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40140c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  401410:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401412:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401416:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401418:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40141a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40141e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401420:	4308      	orrs	r0, r1
  401422:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401424:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401426:	4308      	orrs	r0, r1
  401428:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40142a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40142c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401430:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401432:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401436:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401438:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40143a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40143e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401440:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  401444:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401446:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401448:	4308      	orrs	r0, r1
  40144a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40144c:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40144e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401452:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401454:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401458:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40145a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40145c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401460:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401462:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  401466:	6718      	str	r0, [r3, #112]	; 0x70
  401468:	e03c      	b.n	4014e4 <board_init+0x360>
  40146a:	bf00      	nop
  40146c:	400e1850 	.word	0x400e1850
  401470:	003fffff 	.word	0x003fffff
  401474:	00401bb5 	.word	0x00401bb5
  401478:	01000001 	.word	0x01000001
  40147c:	00401ba9 	.word	0x00401ba9
  401480:	001fffff 	.word	0x001fffff
  401484:	06230001 	.word	0x06230001
  401488:	00400012 	.word	0x00400012
  40148c:	20000013 	.word	0x20000013
  401490:	0003ffff 	.word	0x0003ffff
  401494:	20400014 	.word	0x20400014
  401498:	0001ffff 	.word	0x0001ffff
  40149c:	20440015 	.word	0x20440015
  4014a0:	13010001 	.word	0x13010001
  4014a4:	40000016 	.word	0x40000016
  4014a8:	03000001 	.word	0x03000001
  4014ac:	60000017 	.word	0x60000017
  4014b0:	03250001 	.word	0x03250001
  4014b4:	70000018 	.word	0x70000018
  4014b8:	80000019 	.word	0x80000019
  4014bc:	000fffff 	.word	0x000fffff
  4014c0:	a010001a 	.word	0xa010001a
  4014c4:	e000ed00 	.word	0xe000ed00
  4014c8:	00401b9d 	.word	0x00401b9d
  4014cc:	400e0c00 	.word	0x400e0c00
  4014d0:	5a00080c 	.word	0x5a00080c
  4014d4:	00401f59 	.word	0x00401f59
  4014d8:	400e1200 	.word	0x400e1200
  4014dc:	400e0e00 	.word	0x400e0e00
  4014e0:	40088000 	.word	0x40088000
		base->PIO_ABCDSR[1] |= mask;
  4014e4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4014e6:	4308      	orrs	r0, r1
  4014e8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4014ea:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4014ec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4014f0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4014f2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4014f6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4014f8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4014fa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4014fe:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401500:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  401504:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401506:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401508:	4308      	orrs	r0, r1
  40150a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40150c:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40150e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401512:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401514:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401518:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40151a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40151c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401520:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401522:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  401526:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401528:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40152a:	4308      	orrs	r0, r1
  40152c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40152e:	6059      	str	r1, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  401534:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401536:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  40153a:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40153c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401540:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401542:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401544:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401548:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40154a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40154e:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401550:	6f53      	ldr	r3, [r2, #116]	; 0x74
  401552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401556:	6753      	str	r3, [r2, #116]	; 0x74
  401558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40155a:	bf00      	nop

0040155c <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  40155c:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  40155e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401562:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401564:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401566:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401568:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  40156a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  40156c:	2680      	movs	r6, #128	; 0x80
  40156e:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  401570:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401572:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401574:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401576:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  401578:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  40157a:	2200      	movs	r2, #0
  40157c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  40157e:	2205      	movs	r2, #5
  401580:	601a      	str	r2, [r3, #0]
}
  401582:	bc70      	pop	{r4, r5, r6}
  401584:	4770      	bx	lr
	...

00401588 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  401588:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  40158a:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  40158e:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  401590:	f411 7f80 	tst.w	r1, #256	; 0x100
  401594:	d004      	beq.n	4015a0 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  401596:	f411 6f00 	tst.w	r1, #2048	; 0x800
  40159a:	d00e      	beq.n	4015ba <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  40159c:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  4015a0:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  4015a4:	bf18      	it	ne
  4015a6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  4015aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4015ae:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  4015b0:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  4015b2:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  4015b4:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  4015b8:	e00d      	b.n	4015d6 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  4015ba:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  4015be:	bf14      	ite	ne
  4015c0:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  4015c4:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  4015c8:	e7ea      	b.n	4015a0 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4015ca:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4015ce:	d10c      	bne.n	4015ea <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4015d0:	f013 0f01 	tst.w	r3, #1
  4015d4:	d10d      	bne.n	4015f2 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  4015d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  4015d8:	2a00      	cmp	r2, #0
  4015da:	d0f6      	beq.n	4015ca <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4015dc:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  4015e0:	d0f6      	beq.n	4015d0 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  4015e2:	4b10      	ldr	r3, [pc, #64]	; (401624 <hsmci_send_cmd_execute+0x9c>)
  4015e4:	4798      	blx	r3
				return false;
  4015e6:	2000      	movs	r0, #0
  4015e8:	bd08      	pop	{r3, pc}
				hsmci_reset();
  4015ea:	4b0e      	ldr	r3, [pc, #56]	; (401624 <hsmci_send_cmd_execute+0x9c>)
  4015ec:	4798      	blx	r3
				return false;
  4015ee:	2000      	movs	r0, #0
  4015f0:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  4015f2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  4015f6:	d103      	bne.n	401600 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  4015f8:	2001      	movs	r0, #1
  4015fa:	bd08      	pop	{r3, pc}
	return true;
  4015fc:	2001      	movs	r0, #1
  4015fe:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  401600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401606:	f04f 32ff 	mov.w	r2, #4294967295
  40160a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  40160e:	f003 0330 	and.w	r3, r3, #48	; 0x30
  401612:	2b20      	cmp	r3, #32
  401614:	d0f2      	beq.n	4015fc <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  401616:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401618:	3a01      	subs	r2, #1
  40161a:	d1f8      	bne.n	40160e <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  40161c:	4b01      	ldr	r3, [pc, #4]	; (401624 <hsmci_send_cmd_execute+0x9c>)
  40161e:	4798      	blx	r3
			return false;
  401620:	2000      	movs	r0, #0
  401622:	bd08      	pop	{r3, pc}
  401624:	0040155d 	.word	0x0040155d

00401628 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401628:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  40162a:	2012      	movs	r0, #18
  40162c:	4c08      	ldr	r4, [pc, #32]	; (401650 <hsmci_init+0x28>)
  40162e:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  401630:	203a      	movs	r0, #58	; 0x3a
  401632:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401638:	2272      	movs	r2, #114	; 0x72
  40163a:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  40163c:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40163e:	2211      	movs	r2, #17
  401640:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  401642:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401646:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401648:	2205      	movs	r2, #5
  40164a:	601a      	str	r2, [r3, #0]
  40164c:	bd10      	pop	{r4, pc}
  40164e:	bf00      	nop
  401650:	00401f59 	.word	0x00401f59

00401654 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401654:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401656:	bf0c      	ite	eq
  401658:	2004      	moveq	r0, #4
  40165a:	2000      	movne	r0, #0
  40165c:	4770      	bx	lr

0040165e <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  40165e:	2001      	movs	r0, #1
  401660:	4770      	bx	lr
	...

00401664 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401664:	b37b      	cbz	r3, 4016c6 <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401666:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40166a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40166c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401670:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  401672:	4b2b      	ldr	r3, [pc, #172]	; (401720 <hsmci_select_device+0xbc>)
  401674:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  401678:	d337      	bcc.n	4016ea <hsmci_select_device+0x86>
{
  40167a:	b410      	push	{r4}
		div = (mck / speed) - 2;
  40167c:	4829      	ldr	r0, [pc, #164]	; (401724 <hsmci_select_device+0xc0>)
  40167e:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  401682:	fb01 0113 	mls	r1, r1, r3, r0
  401686:	bb29      	cbnz	r1, 4016d4 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  401688:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40168a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40168e:	6848      	ldr	r0, [r1, #4]
  401690:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  401694:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401696:	684c      	ldr	r4, [r1, #4]
  401698:	f3c3 0047 	ubfx	r0, r3, #1, #8
  40169c:	4320      	orrs	r0, r4
  40169e:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  4016a0:	f013 0f01 	tst.w	r3, #1
  4016a4:	d018      	beq.n	4016d8 <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  4016a6:	684b      	ldr	r3, [r1, #4]
  4016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4016ac:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4016ae:	2a04      	cmp	r2, #4
  4016b0:	d019      	beq.n	4016e6 <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4016b2:	2a08      	cmp	r2, #8
  4016b4:	bf0c      	ite	eq
  4016b6:	22c0      	moveq	r2, #192	; 0xc0
  4016b8:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4016ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016be:	60da      	str	r2, [r3, #12]
}
  4016c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016c4:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  4016c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4016ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
  4016cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4016d0:	6543      	str	r3, [r0, #84]	; 0x54
  4016d2:	e7ce      	b.n	401672 <hsmci_select_device+0xe>
			div++;
  4016d4:	3b01      	subs	r3, #1
  4016d6:	e7d8      	b.n	40168a <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4016d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4016dc:	684b      	ldr	r3, [r1, #4]
  4016de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4016e2:	604b      	str	r3, [r1, #4]
  4016e4:	e7e3      	b.n	4016ae <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4016e6:	2280      	movs	r2, #128	; 0x80
  4016e8:	e7e7      	b.n	4016ba <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4016ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016ee:	6859      	ldr	r1, [r3, #4]
  4016f0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  4016f4:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4016f6:	6859      	ldr	r1, [r3, #4]
  4016f8:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4016fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4016fe:	684b      	ldr	r3, [r1, #4]
  401700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401704:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  401706:	2a04      	cmp	r2, #4
  401708:	d007      	beq.n	40171a <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  40170a:	2a08      	cmp	r2, #8
  40170c:	bf0c      	ite	eq
  40170e:	22c0      	moveq	r2, #192	; 0xc0
  401710:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401716:	60da      	str	r2, [r3, #12]
  401718:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  40171a:	2280      	movs	r2, #128	; 0x80
  40171c:	e7f9      	b.n	401712 <hsmci_select_device+0xae>
  40171e:	bf00      	nop
  401720:	08f0d17f 	.word	0x08f0d17f
  401724:	08f0d180 	.word	0x08f0d180

00401728 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  401728:	4770      	bx	lr

0040172a <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40172a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40172e:	685a      	ldr	r2, [r3, #4]
  401730:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401734:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401736:	2200      	movs	r2, #0
  401738:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  40173a:	f44f 6210 	mov.w	r2, #2304	; 0x900
  40173e:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  401740:	461a      	mov	r2, r3
  401742:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401744:	f013 0f01 	tst.w	r3, #1
  401748:	d0fb      	beq.n	401742 <hsmci_send_clock+0x18>
}
  40174a:	4770      	bx	lr

0040174c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  40174c:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40174e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401752:	685a      	ldr	r2, [r3, #4]
  401754:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401758:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  40175a:	2400      	movs	r4, #0
  40175c:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  40175e:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  401760:	460a      	mov	r2, r1
  401762:	4601      	mov	r1, r0
  401764:	4620      	mov	r0, r4
  401766:	4b01      	ldr	r3, [pc, #4]	; (40176c <hsmci_send_cmd+0x20>)
  401768:	4798      	blx	r3
}
  40176a:	bd10      	pop	{r4, pc}
  40176c:	00401589 	.word	0x00401589

00401770 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  401770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401774:	6a18      	ldr	r0, [r3, #32]
}
  401776:	4770      	bx	lr

00401778 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  401778:	b410      	push	{r4}
  40177a:	1d03      	adds	r3, r0, #4
  40177c:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  40177e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401782:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  401784:	0e11      	lsrs	r1, r2, #24
  401786:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40178a:	0c11      	lsrs	r1, r2, #16
  40178c:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  401790:	0a11      	lsrs	r1, r2, #8
  401792:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  401796:	f803 2c01 	strb.w	r2, [r3, #-1]
  40179a:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  40179c:	4283      	cmp	r3, r0
  40179e:	d1f0      	bne.n	401782 <hsmci_get_response_128+0xa>
		response++;
	}
}
  4017a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4017a4:	4770      	bx	lr
	...

004017a8 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4017a8:	b570      	push	{r4, r5, r6, lr}
  4017aa:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  4017ae:	b384      	cbz	r4, 401812 <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  4017b0:	f44f 7580 	mov.w	r5, #256	; 0x100
  4017b4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4017b8:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4017ba:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4017be:	686c      	ldr	r4, [r5, #4]
  4017c0:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  4017c4:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  4017c6:	f012 0f03 	tst.w	r2, #3
  4017ca:	d027      	beq.n	40181c <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4017cc:	686c      	ldr	r4, [r5, #4]
  4017ce:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4017d2:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  4017d4:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  4017d8:	2c00      	cmp	r4, #0
  4017da:	bf14      	ite	ne
  4017dc:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  4017e0:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  4017e4:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  4017e8:	d11f      	bne.n	40182a <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  4017ea:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  4017ee:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4017f2:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  4017f4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  4017f8:	d12b      	bne.n	401852 <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  4017fa:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  4017fe:	d12b      	bne.n	401858 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  401800:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  401804:	d118      	bne.n	401838 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  401806:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  40180a:	bf18      	it	ne
  40180c:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  401810:	e012      	b.n	401838 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  401812:	2500      	movs	r5, #0
  401814:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401818:	6525      	str	r5, [r4, #80]	; 0x50
  40181a:	e7ce      	b.n	4017ba <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40181c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  401820:	686c      	ldr	r4, [r5, #4]
  401822:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  401826:	606c      	str	r4, [r5, #4]
  401828:	e7d4      	b.n	4017d4 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  40182a:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  40182e:	f3c2 0508 	ubfx	r5, r2, #0, #9
  401832:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  401836:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401838:	2600      	movs	r6, #0
  40183a:	4d09      	ldr	r5, [pc, #36]	; (401860 <hsmci_adtc_start+0xb8>)
  40183c:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  40183e:	4d09      	ldr	r5, [pc, #36]	; (401864 <hsmci_adtc_start+0xbc>)
  401840:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  401842:	4a09      	ldr	r2, [pc, #36]	; (401868 <hsmci_adtc_start+0xc0>)
  401844:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401846:	460a      	mov	r2, r1
  401848:	4601      	mov	r1, r0
  40184a:	4620      	mov	r0, r4
  40184c:	4b07      	ldr	r3, [pc, #28]	; (40186c <hsmci_adtc_start+0xc4>)
  40184e:	4798      	blx	r3
}
  401850:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  401852:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  401856:	e7ef      	b.n	401838 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  401858:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40185c:	e7ec      	b.n	401838 <hsmci_adtc_start+0x90>
  40185e:	bf00      	nop
  401860:	20400a18 	.word	0x20400a18
  401864:	20400a12 	.word	0x20400a12
  401868:	20400a14 	.word	0x20400a14
  40186c:	00401589 	.word	0x00401589

00401870 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  401870:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  401872:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401876:	4a16      	ldr	r2, [pc, #88]	; (4018d0 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  401878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40187a:	4213      	tst	r3, r2
  40187c:	d11d      	bne.n	4018ba <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  40187e:	f013 0f02 	tst.w	r3, #2
  401882:	d0f9      	beq.n	401878 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  401884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40188a:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  40188c:	4a11      	ldr	r2, [pc, #68]	; (4018d4 <hsmci_read_word+0x64>)
  40188e:	6813      	ldr	r3, [r2, #0]
  401890:	3304      	adds	r3, #4
  401892:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401894:	4a10      	ldr	r2, [pc, #64]	; (4018d8 <hsmci_read_word+0x68>)
  401896:	8811      	ldrh	r1, [r2, #0]
  401898:	4a10      	ldr	r2, [pc, #64]	; (4018dc <hsmci_read_word+0x6c>)
  40189a:	8812      	ldrh	r2, [r2, #0]
  40189c:	fb02 f201 	mul.w	r2, r2, r1
  4018a0:	4293      	cmp	r3, r2
  4018a2:	d312      	bcc.n	4018ca <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4018a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4018a8:	4a09      	ldr	r2, [pc, #36]	; (4018d0 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4018aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4018ac:	4213      	tst	r3, r2
  4018ae:	d108      	bne.n	4018c2 <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4018b0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4018b4:	d0f9      	beq.n	4018aa <hsmci_read_word+0x3a>
	return true;
  4018b6:	2001      	movs	r0, #1
  4018b8:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4018ba:	4b09      	ldr	r3, [pc, #36]	; (4018e0 <hsmci_read_word+0x70>)
  4018bc:	4798      	blx	r3
			return false;
  4018be:	2000      	movs	r0, #0
  4018c0:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4018c2:	4b07      	ldr	r3, [pc, #28]	; (4018e0 <hsmci_read_word+0x70>)
  4018c4:	4798      	blx	r3
			return false;
  4018c6:	2000      	movs	r0, #0
  4018c8:	bd08      	pop	{r3, pc}
		return true;
  4018ca:	2001      	movs	r0, #1
}
  4018cc:	bd08      	pop	{r3, pc}
  4018ce:	bf00      	nop
  4018d0:	c0600000 	.word	0xc0600000
  4018d4:	20400a18 	.word	0x20400a18
  4018d8:	20400a12 	.word	0x20400a12
  4018dc:	20400a14 	.word	0x20400a14
  4018e0:	0040155d 	.word	0x0040155d

004018e4 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  4018e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4018e8:	b088      	sub	sp, #32
  4018ea:	4604      	mov	r4, r0
  4018ec:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  4018ee:	2220      	movs	r2, #32
  4018f0:	2100      	movs	r1, #0
  4018f2:	4668      	mov	r0, sp
  4018f4:	4b30      	ldr	r3, [pc, #192]	; (4019b8 <hsmci_start_read_blocks+0xd4>)
  4018f6:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4018f8:	2201      	movs	r2, #1
  4018fa:	4b30      	ldr	r3, [pc, #192]	; (4019bc <hsmci_start_read_blocks+0xd8>)
  4018fc:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  4018fe:	4b30      	ldr	r3, [pc, #192]	; (4019c0 <hsmci_start_read_blocks+0xdc>)
  401900:	881b      	ldrh	r3, [r3, #0]
  401902:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)dest & 3) {
  401906:	f014 0f03 	tst.w	r4, #3
  40190a:	d14a      	bne.n	4019a2 <hsmci_start_read_blocks+0xbe>
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40190c:	4b2d      	ldr	r3, [pc, #180]	; (4019c4 <hsmci_start_read_blocks+0xe0>)
  40190e:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF1
						| XDMAC_CC_DIF_AHB_IF0
						| XDMAC_CC_SAM_FIXED_AM
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  401910:	08ab      	lsrs	r3, r5, #2
  401912:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401918:	6853      	ldr	r3, [r2, #4]
  40191a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40191e:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  401920:	4b29      	ldr	r3, [pc, #164]	; (4019c8 <hsmci_start_read_blocks+0xe4>)
  401922:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  401924:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401926:	466a      	mov	r2, sp
  401928:	2100      	movs	r1, #0
  40192a:	4824      	ldr	r0, [pc, #144]	; (4019bc <hsmci_start_read_blocks+0xd8>)
  40192c:	4b27      	ldr	r3, [pc, #156]	; (4019cc <hsmci_start_read_blocks+0xe8>)
  40192e:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401930:	4b27      	ldr	r3, [pc, #156]	; (4019d0 <hsmci_start_read_blocks+0xec>)
  401932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401936:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40193a:	f003 0007 	and.w	r0, r3, #7
  40193e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401940:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401944:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401948:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  40194c:	f3bf 8f4f 	dsb	sy
  401950:	f04f 34ff 	mov.w	r4, #4294967295
  401954:	fa04 f800 	lsl.w	r8, r4, r0
  401958:	fa07 f000 	lsl.w	r0, r7, r0
  40195c:	fa04 f40c 	lsl.w	r4, r4, ip
  401960:	fa0e fc0c 	lsl.w	ip, lr, ip

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  401964:	4e1a      	ldr	r6, [pc, #104]	; (4019d0 <hsmci_start_read_blocks+0xec>)
         int32_t tmpways = ways;
  401966:	4672      	mov	r2, lr
  401968:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  40196a:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40196e:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  401972:	3a01      	subs	r2, #1
  401974:	4423      	add	r3, r4
  401976:	f1b2 3fff 	cmp.w	r2, #4294967295
  40197a:	d1f6      	bne.n	40196a <hsmci_start_read_blocks+0x86>
        } while(sets--);
  40197c:	3f01      	subs	r7, #1
  40197e:	4440      	add	r0, r8
  401980:	f1b7 3fff 	cmp.w	r7, #4294967295
  401984:	d1ef      	bne.n	401966 <hsmci_start_read_blocks+0x82>
  401986:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40198a:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40198e:	2001      	movs	r0, #1
  401990:	4b0a      	ldr	r3, [pc, #40]	; (4019bc <hsmci_start_read_blocks+0xd8>)
  401992:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  401994:	4a0f      	ldr	r2, [pc, #60]	; (4019d4 <hsmci_start_read_blocks+0xf0>)
  401996:	6813      	ldr	r3, [r2, #0]
  401998:	442b      	add	r3, r5
  40199a:	6013      	str	r3, [r2, #0]
	return true;
}
  40199c:	b008      	add	sp, #32
  40199e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4019a2:	4b0d      	ldr	r3, [pc, #52]	; (4019d8 <hsmci_start_read_blocks+0xf4>)
  4019a4:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  4019a6:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4019a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4019ac:	6853      	ldr	r3, [r2, #4]
  4019ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4019b2:	6053      	str	r3, [r2, #4]
  4019b4:	e7b4      	b.n	401920 <hsmci_start_read_blocks+0x3c>
  4019b6:	bf00      	nop
  4019b8:	0040495d 	.word	0x0040495d
  4019bc:	40078000 	.word	0x40078000
  4019c0:	20400a12 	.word	0x20400a12
  4019c4:	00043001 	.word	0x00043001
  4019c8:	40000200 	.word	0x40000200
  4019cc:	004023cb 	.word	0x004023cb
  4019d0:	e000ed00 	.word	0xe000ed00
  4019d4:	20400a18 	.word	0x20400a18
  4019d8:	00042001 	.word	0x00042001

004019dc <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  4019dc:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4019de:	4b12      	ldr	r3, [pc, #72]	; (401a28 <hsmci_wait_end_of_read_blocks+0x4c>)
  4019e0:	881b      	ldrh	r3, [r3, #0]
  4019e2:	4a12      	ldr	r2, [pc, #72]	; (401a2c <hsmci_wait_end_of_read_blocks+0x50>)
  4019e4:	8812      	ldrh	r2, [r2, #0]
  4019e6:	fb02 f203 	mul.w	r2, r2, r3
  4019ea:	4b11      	ldr	r3, [pc, #68]	; (401a30 <hsmci_wait_end_of_read_blocks+0x54>)
  4019ec:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  4019ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4019f2:	4910      	ldr	r1, [pc, #64]	; (401a34 <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4019f4:	4e10      	ldr	r6, [pc, #64]	; (401a38 <hsmci_wait_end_of_read_blocks+0x5c>)
  4019f6:	e009      	b.n	401a0c <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  4019f8:	4b10      	ldr	r3, [pc, #64]	; (401a3c <hsmci_wait_end_of_read_blocks+0x60>)
  4019fa:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4019fc:	2201      	movs	r2, #1
  4019fe:	4b0e      	ldr	r3, [pc, #56]	; (401a38 <hsmci_wait_end_of_read_blocks+0x5c>)
  401a00:	621a      	str	r2, [r3, #32]
			return false;
  401a02:	2000      	movs	r0, #0
  401a04:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401a06:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401a0a:	d10a      	bne.n	401a22 <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  401a0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401a0e:	420b      	tst	r3, r1
  401a10:	d1f2      	bne.n	4019f8 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401a12:	42a2      	cmp	r2, r4
  401a14:	d9f7      	bls.n	401a06 <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401a16:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401a18:	f015 0f01 	tst.w	r5, #1
  401a1c:	d0f3      	beq.n	401a06 <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  401a1e:	2001      	movs	r0, #1
	return true;
}
  401a20:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  401a22:	2001      	movs	r0, #1
  401a24:	bd70      	pop	{r4, r5, r6, pc}
  401a26:	bf00      	nop
  401a28:	20400a12 	.word	0x20400a12
  401a2c:	20400a14 	.word	0x20400a14
  401a30:	20400a18 	.word	0x20400a18
  401a34:	c0600000 	.word	0xc0600000
  401a38:	40078000 	.word	0x40078000
  401a3c:	0040155d 	.word	0x0040155d

00401a40 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  401a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a44:	b088      	sub	sp, #32
  401a46:	4604      	mov	r4, r0
  401a48:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  401a4a:	2220      	movs	r2, #32
  401a4c:	2100      	movs	r1, #0
  401a4e:	4668      	mov	r0, sp
  401a50:	4b30      	ldr	r3, [pc, #192]	; (401b14 <hsmci_start_write_blocks+0xd4>)
  401a52:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401a54:	2201      	movs	r2, #1
  401a56:	4b30      	ldr	r3, [pc, #192]	; (401b18 <hsmci_start_write_blocks+0xd8>)
  401a58:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  401a5a:	4b30      	ldr	r3, [pc, #192]	; (401b1c <hsmci_start_write_blocks+0xdc>)
  401a5c:	881b      	ldrh	r3, [r3, #0]
  401a5e:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)src & 3) {
  401a62:	f014 0f03 	tst.w	r4, #3
  401a66:	d14a      	bne.n	401afe <hsmci_start_write_blocks+0xbe>
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401a68:	4b2d      	ldr	r3, [pc, #180]	; (401b20 <hsmci_start_write_blocks+0xe0>)
  401a6a:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF0
						| XDMAC_CC_DIF_AHB_IF1
						| XDMAC_CC_SAM_INCREMENTED_AM
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  401a6c:	08ab      	lsrs	r3, r5, #2
  401a6e:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401a74:	6853      	ldr	r3, [r2, #4]
  401a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401a7a:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)src;
  401a7c:	9401      	str	r4, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  401a7e:	4b29      	ldr	r3, [pc, #164]	; (401b24 <hsmci_start_write_blocks+0xe4>)
  401a80:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401a82:	466a      	mov	r2, sp
  401a84:	2100      	movs	r1, #0
  401a86:	4824      	ldr	r0, [pc, #144]	; (401b18 <hsmci_start_write_blocks+0xd8>)
  401a88:	4b27      	ldr	r3, [pc, #156]	; (401b28 <hsmci_start_write_blocks+0xe8>)
  401a8a:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  401a8c:	4b27      	ldr	r3, [pc, #156]	; (401b2c <hsmci_start_write_blocks+0xec>)
  401a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401a92:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401a96:	f003 0007 	and.w	r0, r3, #7
  401a9a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401a9c:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401aa0:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401aa4:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  401aa8:	f3bf 8f4f 	dsb	sy
  401aac:	f04f 34ff 	mov.w	r4, #4294967295
  401ab0:	fa04 f800 	lsl.w	r8, r4, r0
  401ab4:	fa07 f000 	lsl.w	r0, r7, r0
  401ab8:	fa04 f40c 	lsl.w	r4, r4, ip
  401abc:	fa0e fc0c 	lsl.w	ip, lr, ip
              SCB->DCCISW = sw;
  401ac0:	4e1a      	ldr	r6, [pc, #104]	; (401b2c <hsmci_start_write_blocks+0xec>)
         int32_t tmpways = ways;
  401ac2:	4672      	mov	r2, lr
  401ac4:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  401ac6:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  401aca:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  401ace:	3a01      	subs	r2, #1
  401ad0:	4423      	add	r3, r4
  401ad2:	f1b2 3fff 	cmp.w	r2, #4294967295
  401ad6:	d1f6      	bne.n	401ac6 <hsmci_start_write_blocks+0x86>
        } while(sets--);
  401ad8:	3f01      	subs	r7, #1
  401ada:	4440      	add	r0, r8
  401adc:	f1b7 3fff 	cmp.w	r7, #4294967295
  401ae0:	d1ef      	bne.n	401ac2 <hsmci_start_write_blocks+0x82>
  401ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ae6:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401aea:	2001      	movs	r0, #1
  401aec:	4b0a      	ldr	r3, [pc, #40]	; (401b18 <hsmci_start_write_blocks+0xd8>)
  401aee:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  401af0:	4a0f      	ldr	r2, [pc, #60]	; (401b30 <hsmci_start_write_blocks+0xf0>)
  401af2:	6813      	ldr	r3, [r2, #0]
  401af4:	442b      	add	r3, r5
  401af6:	6013      	str	r3, [r2, #0]
	return true;
}
  401af8:	b008      	add	sp, #32
  401afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401afe:	4b0d      	ldr	r3, [pc, #52]	; (401b34 <hsmci_start_write_blocks+0xf4>)
  401b00:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  401b02:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401b08:	6853      	ldr	r3, [r2, #4]
  401b0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401b0e:	6053      	str	r3, [r2, #4]
  401b10:	e7b4      	b.n	401a7c <hsmci_start_write_blocks+0x3c>
  401b12:	bf00      	nop
  401b14:	0040495d 	.word	0x0040495d
  401b18:	40078000 	.word	0x40078000
  401b1c:	20400a12 	.word	0x20400a12
  401b20:	00015011 	.word	0x00015011
  401b24:	40000200 	.word	0x40000200
  401b28:	004023cb 	.word	0x004023cb
  401b2c:	e000ed00 	.word	0xe000ed00
  401b30:	20400a18 	.word	0x20400a18
  401b34:	00014011 	.word	0x00014011

00401b38 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  401b38:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401b3a:	4b12      	ldr	r3, [pc, #72]	; (401b84 <hsmci_wait_end_of_write_blocks+0x4c>)
  401b3c:	881b      	ldrh	r3, [r3, #0]
  401b3e:	4a12      	ldr	r2, [pc, #72]	; (401b88 <hsmci_wait_end_of_write_blocks+0x50>)
  401b40:	8812      	ldrh	r2, [r2, #0]
  401b42:	fb02 f203 	mul.w	r2, r2, r3
  401b46:	4b11      	ldr	r3, [pc, #68]	; (401b8c <hsmci_wait_end_of_write_blocks+0x54>)
  401b48:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  401b4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401b4e:	4910      	ldr	r1, [pc, #64]	; (401b90 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401b50:	4e10      	ldr	r6, [pc, #64]	; (401b94 <hsmci_wait_end_of_write_blocks+0x5c>)
  401b52:	e009      	b.n	401b68 <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  401b54:	4b10      	ldr	r3, [pc, #64]	; (401b98 <hsmci_wait_end_of_write_blocks+0x60>)
  401b56:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401b58:	2201      	movs	r2, #1
  401b5a:	4b0e      	ldr	r3, [pc, #56]	; (401b94 <hsmci_wait_end_of_write_blocks+0x5c>)
  401b5c:	621a      	str	r2, [r3, #32]
			return false;
  401b5e:	2000      	movs	r0, #0
  401b60:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401b62:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401b66:	d10a      	bne.n	401b7e <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  401b68:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401b6a:	420b      	tst	r3, r1
  401b6c:	d1f2      	bne.n	401b54 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401b6e:	42a2      	cmp	r2, r4
  401b70:	d9f7      	bls.n	401b62 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401b72:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401b74:	f015 0f01 	tst.w	r5, #1
  401b78:	d0f3      	beq.n	401b62 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  401b7a:	2001      	movs	r0, #1

	return true;
}
  401b7c:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  401b7e:	2001      	movs	r0, #1
  401b80:	bd70      	pop	{r4, r5, r6, pc}
  401b82:	bf00      	nop
  401b84:	20400a12 	.word	0x20400a12
  401b88:	20400a14 	.word	0x20400a14
  401b8c:	20400a18 	.word	0x20400a18
  401b90:	c0600000 	.word	0xc0600000
  401b94:	40078000 	.word	0x40078000
  401b98:	0040155d 	.word	0x0040155d

00401b9c <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401b9c:	4b01      	ldr	r3, [pc, #4]	; (401ba4 <mpu_enable+0x8>)
  401b9e:	6058      	str	r0, [r3, #4]
  401ba0:	4770      	bx	lr
  401ba2:	bf00      	nop
  401ba4:	e000ed90 	.word	0xe000ed90

00401ba8 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401ba8:	4b01      	ldr	r3, [pc, #4]	; (401bb0 <mpu_set_region+0x8>)
  401baa:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401bac:	6119      	str	r1, [r3, #16]
  401bae:	4770      	bx	lr
  401bb0:	e000ed90 	.word	0xe000ed90

00401bb4 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401bb4:	2820      	cmp	r0, #32
  401bb6:	d909      	bls.n	401bcc <mpu_cal_mpu_region_size+0x18>
  401bb8:	2304      	movs	r3, #4
  401bba:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  401bbc:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  401bbe:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401bc0:	4290      	cmp	r0, r2
  401bc2:	d901      	bls.n	401bc8 <mpu_cal_mpu_region_size+0x14>
  401bc4:	2b1e      	cmp	r3, #30
  401bc6:	d9f9      	bls.n	401bbc <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  401bc8:	0058      	lsls	r0, r3, #1
  401bca:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  401bcc:	2304      	movs	r3, #4
  401bce:	e7fb      	b.n	401bc8 <mpu_cal_mpu_region_size+0x14>

00401bd0 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401bd0:	6301      	str	r1, [r0, #48]	; 0x30
  401bd2:	4770      	bx	lr

00401bd4 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401bd4:	6341      	str	r1, [r0, #52]	; 0x34
  401bd6:	4770      	bx	lr

00401bd8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401bd8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401bda:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401bde:	d03a      	beq.n	401c56 <pio_set_peripheral+0x7e>
  401be0:	d813      	bhi.n	401c0a <pio_set_peripheral+0x32>
  401be2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401be6:	d025      	beq.n	401c34 <pio_set_peripheral+0x5c>
  401be8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401bec:	d10a      	bne.n	401c04 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bee:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401bf0:	4313      	orrs	r3, r2
  401bf2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401bf4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401bf6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401bf8:	400b      	ands	r3, r1
  401bfa:	ea23 0302 	bic.w	r3, r3, r2
  401bfe:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401c00:	6042      	str	r2, [r0, #4]
  401c02:	4770      	bx	lr
	switch (ul_type) {
  401c04:	2900      	cmp	r1, #0
  401c06:	d1fb      	bne.n	401c00 <pio_set_peripheral+0x28>
  401c08:	4770      	bx	lr
  401c0a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c0e:	d021      	beq.n	401c54 <pio_set_peripheral+0x7c>
  401c10:	d809      	bhi.n	401c26 <pio_set_peripheral+0x4e>
  401c12:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401c16:	d1f3      	bne.n	401c00 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c18:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c1a:	4313      	orrs	r3, r2
  401c1c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c1e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c20:	4313      	orrs	r3, r2
  401c22:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c24:	e7ec      	b.n	401c00 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401c26:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401c2a:	d013      	beq.n	401c54 <pio_set_peripheral+0x7c>
  401c2c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c30:	d010      	beq.n	401c54 <pio_set_peripheral+0x7c>
  401c32:	e7e5      	b.n	401c00 <pio_set_peripheral+0x28>
{
  401c34:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c36:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c38:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401c3a:	43d3      	mvns	r3, r2
  401c3c:	4021      	ands	r1, r4
  401c3e:	461c      	mov	r4, r3
  401c40:	4019      	ands	r1, r3
  401c42:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c44:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c46:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401c48:	400b      	ands	r3, r1
  401c4a:	4023      	ands	r3, r4
  401c4c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401c4e:	6042      	str	r2, [r0, #4]
}
  401c50:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c54:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c56:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c58:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401c5a:	400b      	ands	r3, r1
  401c5c:	ea23 0302 	bic.w	r3, r3, r2
  401c60:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c62:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c64:	4313      	orrs	r3, r2
  401c66:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c68:	e7ca      	b.n	401c00 <pio_set_peripheral+0x28>

00401c6a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401c6a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c6c:	f012 0f01 	tst.w	r2, #1
  401c70:	d10d      	bne.n	401c8e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401c72:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c74:	f012 0f0a 	tst.w	r2, #10
  401c78:	d00b      	beq.n	401c92 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401c7a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401c7c:	f012 0f02 	tst.w	r2, #2
  401c80:	d109      	bne.n	401c96 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401c82:	f012 0f08 	tst.w	r2, #8
  401c86:	d008      	beq.n	401c9a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401c88:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401c8c:	e005      	b.n	401c9a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401c8e:	6641      	str	r1, [r0, #100]	; 0x64
  401c90:	e7f0      	b.n	401c74 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401c92:	6241      	str	r1, [r0, #36]	; 0x24
  401c94:	e7f2      	b.n	401c7c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401c96:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401c9a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401c9c:	6001      	str	r1, [r0, #0]
  401c9e:	4770      	bx	lr

00401ca0 <pio_set_output>:
{
  401ca0:	b410      	push	{r4}
  401ca2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401ca4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401ca6:	b94c      	cbnz	r4, 401cbc <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401ca8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401caa:	b14b      	cbz	r3, 401cc0 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401cac:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401cae:	b94a      	cbnz	r2, 401cc4 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401cb0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401cb2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401cb4:	6001      	str	r1, [r0, #0]
}
  401cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cba:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401cbc:	6641      	str	r1, [r0, #100]	; 0x64
  401cbe:	e7f4      	b.n	401caa <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401cc0:	6541      	str	r1, [r0, #84]	; 0x54
  401cc2:	e7f4      	b.n	401cae <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401cc4:	6301      	str	r1, [r0, #48]	; 0x30
  401cc6:	e7f4      	b.n	401cb2 <pio_set_output+0x12>

00401cc8 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  401cc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401cca:	420b      	tst	r3, r1
}
  401ccc:	bf14      	ite	ne
  401cce:	2001      	movne	r0, #1
  401cd0:	2000      	moveq	r0, #0
  401cd2:	4770      	bx	lr

00401cd4 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  401cd4:	f012 0f10 	tst.w	r2, #16
  401cd8:	d012      	beq.n	401d00 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  401cda:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401cde:	f012 0f20 	tst.w	r2, #32
  401ce2:	d007      	beq.n	401cf4 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  401ce4:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  401ce8:	f012 0f40 	tst.w	r2, #64	; 0x40
  401cec:	d005      	beq.n	401cfa <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  401cee:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  401cf2:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  401cf4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  401cf8:	e7f6      	b.n	401ce8 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  401cfa:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  401cfe:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401d00:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  401d04:	4770      	bx	lr

00401d06 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  401d06:	6401      	str	r1, [r0, #64]	; 0x40
  401d08:	4770      	bx	lr

00401d0a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d0c:	4770      	bx	lr

00401d0e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d0e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d10:	4770      	bx	lr
	...

00401d14 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d18:	4604      	mov	r4, r0
  401d1a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401d1c:	4b0e      	ldr	r3, [pc, #56]	; (401d58 <pio_handler_process+0x44>)
  401d1e:	4798      	blx	r3
  401d20:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401d22:	4620      	mov	r0, r4
  401d24:	4b0d      	ldr	r3, [pc, #52]	; (401d5c <pio_handler_process+0x48>)
  401d26:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401d28:	4005      	ands	r5, r0
  401d2a:	d013      	beq.n	401d54 <pio_handler_process+0x40>
  401d2c:	4c0c      	ldr	r4, [pc, #48]	; (401d60 <pio_handler_process+0x4c>)
  401d2e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401d32:	e003      	b.n	401d3c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401d34:	42b4      	cmp	r4, r6
  401d36:	d00d      	beq.n	401d54 <pio_handler_process+0x40>
  401d38:	3410      	adds	r4, #16
		while (status != 0) {
  401d3a:	b15d      	cbz	r5, 401d54 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401d3c:	6820      	ldr	r0, [r4, #0]
  401d3e:	4540      	cmp	r0, r8
  401d40:	d1f8      	bne.n	401d34 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401d42:	6861      	ldr	r1, [r4, #4]
  401d44:	4229      	tst	r1, r5
  401d46:	d0f5      	beq.n	401d34 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401d48:	68e3      	ldr	r3, [r4, #12]
  401d4a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401d4c:	6863      	ldr	r3, [r4, #4]
  401d4e:	ea25 0503 	bic.w	r5, r5, r3
  401d52:	e7ef      	b.n	401d34 <pio_handler_process+0x20>
  401d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401d58:	00401d0b 	.word	0x00401d0b
  401d5c:	00401d0f 	.word	0x00401d0f
  401d60:	20400a1c 	.word	0x20400a1c

00401d64 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401d66:	4c18      	ldr	r4, [pc, #96]	; (401dc8 <pio_handler_set+0x64>)
  401d68:	6826      	ldr	r6, [r4, #0]
  401d6a:	2e06      	cmp	r6, #6
  401d6c:	d82a      	bhi.n	401dc4 <pio_handler_set+0x60>
  401d6e:	f04f 0c00 	mov.w	ip, #0
  401d72:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401d74:	4f15      	ldr	r7, [pc, #84]	; (401dcc <pio_handler_set+0x68>)
  401d76:	e004      	b.n	401d82 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401d78:	3401      	adds	r4, #1
  401d7a:	b2e4      	uxtb	r4, r4
  401d7c:	46a4      	mov	ip, r4
  401d7e:	42a6      	cmp	r6, r4
  401d80:	d309      	bcc.n	401d96 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  401d82:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401d84:	0125      	lsls	r5, r4, #4
  401d86:	597d      	ldr	r5, [r7, r5]
  401d88:	428d      	cmp	r5, r1
  401d8a:	d1f5      	bne.n	401d78 <pio_handler_set+0x14>
  401d8c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  401d90:	686d      	ldr	r5, [r5, #4]
  401d92:	4295      	cmp	r5, r2
  401d94:	d1f0      	bne.n	401d78 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401d96:	4d0d      	ldr	r5, [pc, #52]	; (401dcc <pio_handler_set+0x68>)
  401d98:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401d9c:	eb05 040e 	add.w	r4, r5, lr
  401da0:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401da4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401da6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401da8:	9906      	ldr	r1, [sp, #24]
  401daa:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401dac:	3601      	adds	r6, #1
  401dae:	4566      	cmp	r6, ip
  401db0:	d005      	beq.n	401dbe <pio_handler_set+0x5a>
  401db2:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401db4:	461a      	mov	r2, r3
  401db6:	4b06      	ldr	r3, [pc, #24]	; (401dd0 <pio_handler_set+0x6c>)
  401db8:	4798      	blx	r3

	return 0;
  401dba:	2000      	movs	r0, #0
  401dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  401dbe:	4902      	ldr	r1, [pc, #8]	; (401dc8 <pio_handler_set+0x64>)
  401dc0:	600e      	str	r6, [r1, #0]
  401dc2:	e7f6      	b.n	401db2 <pio_handler_set+0x4e>
		return 1;
  401dc4:	2001      	movs	r0, #1
}
  401dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401dc8:	20400a8c 	.word	0x20400a8c
  401dcc:	20400a1c 	.word	0x20400a1c
  401dd0:	00401cd5 	.word	0x00401cd5

00401dd4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401dd4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401dd6:	210a      	movs	r1, #10
  401dd8:	4801      	ldr	r0, [pc, #4]	; (401de0 <PIOA_Handler+0xc>)
  401dda:	4b02      	ldr	r3, [pc, #8]	; (401de4 <PIOA_Handler+0x10>)
  401ddc:	4798      	blx	r3
  401dde:	bd08      	pop	{r3, pc}
  401de0:	400e0e00 	.word	0x400e0e00
  401de4:	00401d15 	.word	0x00401d15

00401de8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401de8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401dea:	210b      	movs	r1, #11
  401dec:	4801      	ldr	r0, [pc, #4]	; (401df4 <PIOB_Handler+0xc>)
  401dee:	4b02      	ldr	r3, [pc, #8]	; (401df8 <PIOB_Handler+0x10>)
  401df0:	4798      	blx	r3
  401df2:	bd08      	pop	{r3, pc}
  401df4:	400e1000 	.word	0x400e1000
  401df8:	00401d15 	.word	0x00401d15

00401dfc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401dfc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401dfe:	210c      	movs	r1, #12
  401e00:	4801      	ldr	r0, [pc, #4]	; (401e08 <PIOC_Handler+0xc>)
  401e02:	4b02      	ldr	r3, [pc, #8]	; (401e0c <PIOC_Handler+0x10>)
  401e04:	4798      	blx	r3
  401e06:	bd08      	pop	{r3, pc}
  401e08:	400e1200 	.word	0x400e1200
  401e0c:	00401d15 	.word	0x00401d15

00401e10 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401e10:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401e12:	2110      	movs	r1, #16
  401e14:	4801      	ldr	r0, [pc, #4]	; (401e1c <PIOD_Handler+0xc>)
  401e16:	4b02      	ldr	r3, [pc, #8]	; (401e20 <PIOD_Handler+0x10>)
  401e18:	4798      	blx	r3
  401e1a:	bd08      	pop	{r3, pc}
  401e1c:	400e1400 	.word	0x400e1400
  401e20:	00401d15 	.word	0x00401d15

00401e24 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401e24:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401e26:	2111      	movs	r1, #17
  401e28:	4801      	ldr	r0, [pc, #4]	; (401e30 <PIOE_Handler+0xc>)
  401e2a:	4b02      	ldr	r3, [pc, #8]	; (401e34 <PIOE_Handler+0x10>)
  401e2c:	4798      	blx	r3
  401e2e:	bd08      	pop	{r3, pc}
  401e30:	400e1600 	.word	0x400e1600
  401e34:	00401d15 	.word	0x00401d15

00401e38 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401e38:	2803      	cmp	r0, #3
  401e3a:	d011      	beq.n	401e60 <pmc_mck_set_division+0x28>
  401e3c:	2804      	cmp	r0, #4
  401e3e:	d012      	beq.n	401e66 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401e40:	2802      	cmp	r0, #2
  401e42:	bf0c      	ite	eq
  401e44:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401e48:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401e4a:	4a08      	ldr	r2, [pc, #32]	; (401e6c <pmc_mck_set_division+0x34>)
  401e4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401e52:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401e54:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401e56:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e58:	f013 0f08 	tst.w	r3, #8
  401e5c:	d0fb      	beq.n	401e56 <pmc_mck_set_division+0x1e>
}
  401e5e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401e60:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401e64:	e7f1      	b.n	401e4a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401e66:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401e6a:	e7ee      	b.n	401e4a <pmc_mck_set_division+0x12>
  401e6c:	400e0600 	.word	0x400e0600

00401e70 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401e70:	4a17      	ldr	r2, [pc, #92]	; (401ed0 <pmc_switch_mck_to_pllack+0x60>)
  401e72:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401e78:	4318      	orrs	r0, r3
  401e7a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e7e:	f013 0f08 	tst.w	r3, #8
  401e82:	d10a      	bne.n	401e9a <pmc_switch_mck_to_pllack+0x2a>
  401e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401e88:	4911      	ldr	r1, [pc, #68]	; (401ed0 <pmc_switch_mck_to_pllack+0x60>)
  401e8a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401e8c:	f012 0f08 	tst.w	r2, #8
  401e90:	d103      	bne.n	401e9a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e92:	3b01      	subs	r3, #1
  401e94:	d1f9      	bne.n	401e8a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401e96:	2001      	movs	r0, #1
  401e98:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401e9a:	4a0d      	ldr	r2, [pc, #52]	; (401ed0 <pmc_switch_mck_to_pllack+0x60>)
  401e9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e9e:	f023 0303 	bic.w	r3, r3, #3
  401ea2:	f043 0302 	orr.w	r3, r3, #2
  401ea6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ea8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401eaa:	f013 0f08 	tst.w	r3, #8
  401eae:	d10a      	bne.n	401ec6 <pmc_switch_mck_to_pllack+0x56>
  401eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401eb4:	4906      	ldr	r1, [pc, #24]	; (401ed0 <pmc_switch_mck_to_pllack+0x60>)
  401eb6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401eb8:	f012 0f08 	tst.w	r2, #8
  401ebc:	d105      	bne.n	401eca <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401ebe:	3b01      	subs	r3, #1
  401ec0:	d1f9      	bne.n	401eb6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401ec2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401ec4:	4770      	bx	lr
	return 0;
  401ec6:	2000      	movs	r0, #0
  401ec8:	4770      	bx	lr
  401eca:	2000      	movs	r0, #0
  401ecc:	4770      	bx	lr
  401ece:	bf00      	nop
  401ed0:	400e0600 	.word	0x400e0600

00401ed4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401ed4:	b9a0      	cbnz	r0, 401f00 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ed6:	480e      	ldr	r0, [pc, #56]	; (401f10 <pmc_switch_mainck_to_xtal+0x3c>)
  401ed8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401eda:	0209      	lsls	r1, r1, #8
  401edc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ede:	4a0d      	ldr	r2, [pc, #52]	; (401f14 <pmc_switch_mainck_to_xtal+0x40>)
  401ee0:	401a      	ands	r2, r3
  401ee2:	4b0d      	ldr	r3, [pc, #52]	; (401f18 <pmc_switch_mainck_to_xtal+0x44>)
  401ee4:	4313      	orrs	r3, r2
  401ee6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ee8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401eea:	4602      	mov	r2, r0
  401eec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401eee:	f013 0f01 	tst.w	r3, #1
  401ef2:	d0fb      	beq.n	401eec <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401ef4:	4a06      	ldr	r2, [pc, #24]	; (401f10 <pmc_switch_mainck_to_xtal+0x3c>)
  401ef6:	6a11      	ldr	r1, [r2, #32]
  401ef8:	4b08      	ldr	r3, [pc, #32]	; (401f1c <pmc_switch_mainck_to_xtal+0x48>)
  401efa:	430b      	orrs	r3, r1
  401efc:	6213      	str	r3, [r2, #32]
  401efe:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401f00:	4903      	ldr	r1, [pc, #12]	; (401f10 <pmc_switch_mainck_to_xtal+0x3c>)
  401f02:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401f04:	4a06      	ldr	r2, [pc, #24]	; (401f20 <pmc_switch_mainck_to_xtal+0x4c>)
  401f06:	401a      	ands	r2, r3
  401f08:	4b06      	ldr	r3, [pc, #24]	; (401f24 <pmc_switch_mainck_to_xtal+0x50>)
  401f0a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401f0c:	620b      	str	r3, [r1, #32]
  401f0e:	4770      	bx	lr
  401f10:	400e0600 	.word	0x400e0600
  401f14:	ffc8fffc 	.word	0xffc8fffc
  401f18:	00370001 	.word	0x00370001
  401f1c:	01370000 	.word	0x01370000
  401f20:	fec8fffc 	.word	0xfec8fffc
  401f24:	01370002 	.word	0x01370002

00401f28 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401f28:	4b02      	ldr	r3, [pc, #8]	; (401f34 <pmc_osc_is_ready_mainck+0xc>)
  401f2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f2c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401f30:	4770      	bx	lr
  401f32:	bf00      	nop
  401f34:	400e0600 	.word	0x400e0600

00401f38 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401f38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401f3c:	4b01      	ldr	r3, [pc, #4]	; (401f44 <pmc_disable_pllack+0xc>)
  401f3e:	629a      	str	r2, [r3, #40]	; 0x28
  401f40:	4770      	bx	lr
  401f42:	bf00      	nop
  401f44:	400e0600 	.word	0x400e0600

00401f48 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401f48:	4b02      	ldr	r3, [pc, #8]	; (401f54 <pmc_is_locked_pllack+0xc>)
  401f4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f4c:	f000 0002 	and.w	r0, r0, #2
  401f50:	4770      	bx	lr
  401f52:	bf00      	nop
  401f54:	400e0600 	.word	0x400e0600

00401f58 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401f58:	283f      	cmp	r0, #63	; 0x3f
  401f5a:	d81e      	bhi.n	401f9a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401f5c:	281f      	cmp	r0, #31
  401f5e:	d80c      	bhi.n	401f7a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401f60:	4b11      	ldr	r3, [pc, #68]	; (401fa8 <pmc_enable_periph_clk+0x50>)
  401f62:	699a      	ldr	r2, [r3, #24]
  401f64:	2301      	movs	r3, #1
  401f66:	4083      	lsls	r3, r0
  401f68:	4393      	bics	r3, r2
  401f6a:	d018      	beq.n	401f9e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401f6c:	2301      	movs	r3, #1
  401f6e:	fa03 f000 	lsl.w	r0, r3, r0
  401f72:	4b0d      	ldr	r3, [pc, #52]	; (401fa8 <pmc_enable_periph_clk+0x50>)
  401f74:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401f76:	2000      	movs	r0, #0
  401f78:	4770      	bx	lr
		ul_id -= 32;
  401f7a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401f7c:	4b0a      	ldr	r3, [pc, #40]	; (401fa8 <pmc_enable_periph_clk+0x50>)
  401f7e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401f82:	2301      	movs	r3, #1
  401f84:	4083      	lsls	r3, r0
  401f86:	4393      	bics	r3, r2
  401f88:	d00b      	beq.n	401fa2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401f8a:	2301      	movs	r3, #1
  401f8c:	fa03 f000 	lsl.w	r0, r3, r0
  401f90:	4b05      	ldr	r3, [pc, #20]	; (401fa8 <pmc_enable_periph_clk+0x50>)
  401f92:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401f96:	2000      	movs	r0, #0
  401f98:	4770      	bx	lr
		return 1;
  401f9a:	2001      	movs	r0, #1
  401f9c:	4770      	bx	lr
	return 0;
  401f9e:	2000      	movs	r0, #0
  401fa0:	4770      	bx	lr
  401fa2:	2000      	movs	r0, #0
}
  401fa4:	4770      	bx	lr
  401fa6:	bf00      	nop
  401fa8:	400e0600 	.word	0x400e0600

00401fac <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401fac:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401fae:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401fb0:	6884      	ldr	r4, [r0, #8]
  401fb2:	42a5      	cmp	r5, r4
  401fb4:	d003      	beq.n	401fbe <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  401fb6:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401fb8:	6884      	ldr	r4, [r0, #8]
  401fba:	42ac      	cmp	r4, r5
  401fbc:	d1fb      	bne.n	401fb6 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  401fbe:	b161      	cbz	r1, 401fda <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401fc0:	f3c4 5001 	ubfx	r0, r4, #20, #2
  401fc4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401fc8:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401fcc:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401fd0:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  401fd4:	bf18      	it	ne
  401fd6:	300c      	addne	r0, #12
  401fd8:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  401fda:	b142      	cbz	r2, 401fee <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  401fdc:	f3c4 3102 	ubfx	r1, r4, #12, #3
  401fe0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401fe4:	f3c4 2003 	ubfx	r0, r4, #8, #4
  401fe8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401fec:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  401fee:	b143      	cbz	r3, 402002 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401ff0:	f3c4 1202 	ubfx	r2, r4, #4, #3
  401ff4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401ff8:	f004 040f 	and.w	r4, r4, #15
  401ffc:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  402000:	601c      	str	r4, [r3, #0]
	}
}
  402002:	bc30      	pop	{r4, r5}
  402004:	4770      	bx	lr

00402006 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  402006:	b4f0      	push	{r4, r5, r6, r7}
  402008:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  40200a:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40200c:	68c4      	ldr	r4, [r0, #12]
  40200e:	42a5      	cmp	r5, r4
  402010:	d003      	beq.n	40201a <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  402012:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  402014:	68c4      	ldr	r4, [r0, #12]
  402016:	42ac      	cmp	r4, r5
  402018:	d1fb      	bne.n	402012 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  40201a:	b199      	cbz	r1, 402044 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40201c:	f3c4 3003 	ubfx	r0, r4, #12, #4
  402020:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402024:	f3c4 2703 	ubfx	r7, r4, #8, #4
  402028:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40202c:	f3c4 1002 	ubfx	r0, r4, #4, #3
  402030:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  402034:	f004 000f 	and.w	r0, r4, #15
  402038:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40203c:	2564      	movs	r5, #100	; 0x64
  40203e:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  402042:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  402044:	b142      	cbz	r2, 402058 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402046:	f3c4 5000 	ubfx	r0, r4, #20, #1
  40204a:	0081      	lsls	r1, r0, #2
  40204c:	4408      	add	r0, r1
  40204e:	f3c4 4103 	ubfx	r1, r4, #16, #4
  402052:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  402056:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  402058:	b143      	cbz	r3, 40206c <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40205a:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40205e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402062:	f3c4 6103 	ubfx	r1, r4, #24, #4
  402066:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  40206a:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  40206c:	b116      	cbz	r6, 402074 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  40206e:	f3c4 5442 	ubfx	r4, r4, #21, #3
  402072:	6034      	str	r4, [r6, #0]
	}
}
  402074:	bcf0      	pop	{r4, r5, r6, r7}
  402076:	4770      	bx	lr

00402078 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  402078:	4b28      	ldr	r3, [pc, #160]	; (40211c <twihs_set_speed+0xa4>)
  40207a:	4299      	cmp	r1, r3
  40207c:	d84b      	bhi.n	402116 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40207e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  402082:	4299      	cmp	r1, r3
  402084:	d92d      	bls.n	4020e2 <twihs_set_speed+0x6a>
{
  402086:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402088:	4c25      	ldr	r4, [pc, #148]	; (402120 <twihs_set_speed+0xa8>)
  40208a:	fba4 3402 	umull	r3, r4, r4, r2
  40208e:	0ba4      	lsrs	r4, r4, #14
  402090:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402092:	4b24      	ldr	r3, [pc, #144]	; (402124 <twihs_set_speed+0xac>)
  402094:	440b      	add	r3, r1
  402096:	009b      	lsls	r3, r3, #2
  402098:	fbb2 f2f3 	udiv	r2, r2, r3
  40209c:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40209e:	2cff      	cmp	r4, #255	; 0xff
  4020a0:	d91d      	bls.n	4020de <twihs_set_speed+0x66>
  4020a2:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4020a4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4020a6:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4020a8:	2cff      	cmp	r4, #255	; 0xff
  4020aa:	d901      	bls.n	4020b0 <twihs_set_speed+0x38>
  4020ac:	2906      	cmp	r1, #6
  4020ae:	d9f9      	bls.n	4020a4 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4020b0:	2aff      	cmp	r2, #255	; 0xff
  4020b2:	d907      	bls.n	4020c4 <twihs_set_speed+0x4c>
  4020b4:	2906      	cmp	r1, #6
  4020b6:	d805      	bhi.n	4020c4 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4020b8:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4020ba:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4020bc:	2aff      	cmp	r2, #255	; 0xff
  4020be:	d901      	bls.n	4020c4 <twihs_set_speed+0x4c>
  4020c0:	2906      	cmp	r1, #6
  4020c2:	d9f9      	bls.n	4020b8 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4020c4:	0213      	lsls	r3, r2, #8
  4020c6:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4020c8:	0409      	lsls	r1, r1, #16
  4020ca:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4020ce:	430b      	orrs	r3, r1
  4020d0:	b2e4      	uxtb	r4, r4
  4020d2:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  4020d4:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4020d6:	2000      	movs	r0, #0
}
  4020d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4020dc:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4020de:	2100      	movs	r1, #0
  4020e0:	e7e6      	b.n	4020b0 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4020e2:	0049      	lsls	r1, r1, #1
  4020e4:	fbb2 f2f1 	udiv	r2, r2, r1
  4020e8:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4020ea:	2aff      	cmp	r2, #255	; 0xff
  4020ec:	d911      	bls.n	402112 <twihs_set_speed+0x9a>
  4020ee:	2300      	movs	r3, #0
			ckdiv++;
  4020f0:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4020f2:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4020f4:	2aff      	cmp	r2, #255	; 0xff
  4020f6:	d901      	bls.n	4020fc <twihs_set_speed+0x84>
  4020f8:	2b06      	cmp	r3, #6
  4020fa:	d9f9      	bls.n	4020f0 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4020fc:	0211      	lsls	r1, r2, #8
  4020fe:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  402100:	041b      	lsls	r3, r3, #16
  402102:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402106:	430b      	orrs	r3, r1
  402108:	b2d2      	uxtb	r2, r2
  40210a:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  40210c:	6102      	str	r2, [r0, #16]
	return PASS;
  40210e:	2000      	movs	r0, #0
  402110:	4770      	bx	lr
	uint32_t ckdiv = 0;
  402112:	2300      	movs	r3, #0
  402114:	e7f2      	b.n	4020fc <twihs_set_speed+0x84>
		return FAIL;
  402116:	2001      	movs	r0, #1
  402118:	4770      	bx	lr
  40211a:	bf00      	nop
  40211c:	00061a80 	.word	0x00061a80
  402120:	057619f1 	.word	0x057619f1
  402124:	3ffd1200 	.word	0x3ffd1200

00402128 <twihs_master_init>:
{
  402128:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  40212a:	f04f 32ff 	mov.w	r2, #4294967295
  40212e:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  402130:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  402132:	2280      	movs	r2, #128	; 0x80
  402134:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  402136:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402138:	2208      	movs	r2, #8
  40213a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  40213c:	2220      	movs	r2, #32
  40213e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402140:	2204      	movs	r2, #4
  402142:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  402144:	680a      	ldr	r2, [r1, #0]
  402146:	6849      	ldr	r1, [r1, #4]
  402148:	4b03      	ldr	r3, [pc, #12]	; (402158 <twihs_master_init+0x30>)
  40214a:	4798      	blx	r3
}
  40214c:	2801      	cmp	r0, #1
  40214e:	bf14      	ite	ne
  402150:	2000      	movne	r0, #0
  402152:	2001      	moveq	r0, #1
  402154:	bd08      	pop	{r3, pc}
  402156:	bf00      	nop
  402158:	00402079 	.word	0x00402079

0040215c <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  40215c:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  40215e:	2b00      	cmp	r3, #0
  402160:	d046      	beq.n	4021f0 <twihs_master_read+0x94>
{
  402162:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  402164:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  402166:	2600      	movs	r6, #0
  402168:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40216a:	684a      	ldr	r2, [r1, #4]
  40216c:	0212      	lsls	r2, r2, #8
  40216e:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  402172:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  402176:	7c0d      	ldrb	r5, [r1, #16]
  402178:	042d      	lsls	r5, r5, #16
  40217a:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  40217e:	432a      	orrs	r2, r5
  402180:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  402182:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402184:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  402186:	b15d      	cbz	r5, 4021a0 <twihs_master_read+0x44>
	val = addr[0];
  402188:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  40218a:	2d01      	cmp	r5, #1
  40218c:	dd02      	ble.n	402194 <twihs_master_read+0x38>
		val |= addr[1];
  40218e:	784e      	ldrb	r6, [r1, #1]
  402190:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  402194:	2d02      	cmp	r5, #2
  402196:	dd04      	ble.n	4021a2 <twihs_master_read+0x46>
		val |= addr[2];
  402198:	7889      	ldrb	r1, [r1, #2]
  40219a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  40219e:	e000      	b.n	4021a2 <twihs_master_read+0x46>
		return 0;
  4021a0:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4021a2:	60c2      	str	r2, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4021a4:	2201      	movs	r2, #1
  4021a6:	6002      	str	r2, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4021a8:	2502      	movs	r5, #2
		status = p_twihs->TWIHS_SR;
  4021aa:	6a02      	ldr	r2, [r0, #32]
  4021ac:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  4021b0:	2b01      	cmp	r3, #1
  4021b2:	d008      	beq.n	4021c6 <twihs_master_read+0x6a>
		if (!(status & TWIHS_SR_RXRDY)) {
  4021b4:	f012 0f02 	tst.w	r2, #2
  4021b8:	d013      	beq.n	4021e2 <twihs_master_read+0x86>
		*buffer++ = p_twihs->TWIHS_RHR;
  4021ba:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4021bc:	f804 2b01 	strb.w	r2, [r4], #1
	while (cnt > 0) {
  4021c0:	3b01      	subs	r3, #1
  4021c2:	d1f2      	bne.n	4021aa <twihs_master_read+0x4e>
  4021c4:	e005      	b.n	4021d2 <twihs_master_read+0x76>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4021c6:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4021c8:	f012 0f02 	tst.w	r2, #2
  4021cc:	d00b      	beq.n	4021e6 <twihs_master_read+0x8a>
		*buffer++ = p_twihs->TWIHS_RHR;
  4021ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4021d0:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4021d2:	6a03      	ldr	r3, [r0, #32]
  4021d4:	f013 0f01 	tst.w	r3, #1
  4021d8:	d0fb      	beq.n	4021d2 <twihs_master_read+0x76>
	p_twihs->TWIHS_SR;
  4021da:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4021dc:	2000      	movs	r0, #0
}
  4021de:	bc70      	pop	{r4, r5, r6}
  4021e0:	4770      	bx	lr
	while (cnt > 0) {
  4021e2:	2b00      	cmp	r3, #0
  4021e4:	d0f5      	beq.n	4021d2 <twihs_master_read+0x76>
		status = p_twihs->TWIHS_SR;
  4021e6:	6a02      	ldr	r2, [r0, #32]
		if (!timeout--) {
  4021e8:	3901      	subs	r1, #1
  4021ea:	d1e1      	bne.n	4021b0 <twihs_master_read+0x54>
			return TWIHS_ERROR_TIMEOUT;
  4021ec:	2009      	movs	r0, #9
  4021ee:	e7f6      	b.n	4021de <twihs_master_read+0x82>
		return TWIHS_INVALID_ARGUMENT;
  4021f0:	2001      	movs	r0, #1
  4021f2:	4770      	bx	lr

004021f4 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  4021f4:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  4021f6:	2b00      	cmp	r3, #0
  4021f8:	d043      	beq.n	402282 <twihs_master_write+0x8e>
{
  4021fa:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4021fc:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4021fe:	2600      	movs	r6, #0
  402200:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402202:	7c0a      	ldrb	r2, [r1, #16]
  402204:	0412      	lsls	r2, r2, #16
  402206:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40220a:	684d      	ldr	r5, [r1, #4]
  40220c:	022d      	lsls	r5, r5, #8
  40220e:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402212:	432a      	orrs	r2, r5
  402214:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  402216:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402218:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  40221a:	b15d      	cbz	r5, 402234 <twihs_master_write+0x40>
	val = addr[0];
  40221c:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  40221e:	2d01      	cmp	r5, #1
  402220:	dd02      	ble.n	402228 <twihs_master_write+0x34>
		val |= addr[1];
  402222:	784e      	ldrb	r6, [r1, #1]
  402224:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  402228:	2d02      	cmp	r5, #2
  40222a:	dd04      	ble.n	402236 <twihs_master_write+0x42>
		val |= addr[2];
  40222c:	7889      	ldrb	r1, [r1, #2]
  40222e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  402232:	e000      	b.n	402236 <twihs_master_write+0x42>
		return 0;
  402234:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402236:	60c2      	str	r2, [r0, #12]
  402238:	e004      	b.n	402244 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  40223a:	f814 2b01 	ldrb.w	r2, [r4], #1
  40223e:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  402240:	3b01      	subs	r3, #1
  402242:	d00f      	beq.n	402264 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  402244:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402246:	f412 7f80 	tst.w	r2, #256	; 0x100
  40224a:	d11e      	bne.n	40228a <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  40224c:	f012 0f04 	tst.w	r2, #4
  402250:	d1f3      	bne.n	40223a <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  402252:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402254:	f412 7f80 	tst.w	r2, #256	; 0x100
  402258:	d115      	bne.n	402286 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  40225a:	f012 0f04 	tst.w	r2, #4
  40225e:	d1ec      	bne.n	40223a <twihs_master_write+0x46>
	while (cnt > 0) {
  402260:	2b00      	cmp	r3, #0
  402262:	d1f6      	bne.n	402252 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  402264:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402266:	f413 7f80 	tst.w	r3, #256	; 0x100
  40226a:	d111      	bne.n	402290 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  40226c:	f013 0f04 	tst.w	r3, #4
  402270:	d0f8      	beq.n	402264 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402272:	2302      	movs	r3, #2
  402274:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402276:	6a03      	ldr	r3, [r0, #32]
  402278:	f013 0f01 	tst.w	r3, #1
  40227c:	d0fb      	beq.n	402276 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  40227e:	2000      	movs	r0, #0
  402280:	e004      	b.n	40228c <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  402282:	2001      	movs	r0, #1
  402284:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  402286:	2005      	movs	r0, #5
  402288:	e000      	b.n	40228c <twihs_master_write+0x98>
  40228a:	2005      	movs	r0, #5
}
  40228c:	bc70      	pop	{r4, r5, r6}
  40228e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  402290:	2005      	movs	r0, #5
  402292:	e7fb      	b.n	40228c <twihs_master_write+0x98>

00402294 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402294:	6943      	ldr	r3, [r0, #20]
  402296:	f013 0f02 	tst.w	r3, #2
  40229a:	d002      	beq.n	4022a2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40229c:	61c1      	str	r1, [r0, #28]
	return 0;
  40229e:	2000      	movs	r0, #0
  4022a0:	4770      	bx	lr
		return 1;
  4022a2:	2001      	movs	r0, #1
}
  4022a4:	4770      	bx	lr

004022a6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4022a6:	6943      	ldr	r3, [r0, #20]
  4022a8:	f013 0f01 	tst.w	r3, #1
  4022ac:	d003      	beq.n	4022b6 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4022ae:	6983      	ldr	r3, [r0, #24]
  4022b0:	700b      	strb	r3, [r1, #0]
	return 0;
  4022b2:	2000      	movs	r0, #0
  4022b4:	4770      	bx	lr
		return 1;
  4022b6:	2001      	movs	r0, #1
}
  4022b8:	4770      	bx	lr

004022ba <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4022ba:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4022bc:	010b      	lsls	r3, r1, #4
  4022be:	4293      	cmp	r3, r2
  4022c0:	d914      	bls.n	4022ec <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4022c2:	00c9      	lsls	r1, r1, #3
  4022c4:	084b      	lsrs	r3, r1, #1
  4022c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4022ca:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4022ce:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4022d0:	1e5c      	subs	r4, r3, #1
  4022d2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4022d6:	428c      	cmp	r4, r1
  4022d8:	d901      	bls.n	4022de <usart_set_async_baudrate+0x24>
		return 1;
  4022da:	2001      	movs	r0, #1
  4022dc:	e017      	b.n	40230e <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4022de:	6841      	ldr	r1, [r0, #4]
  4022e0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4022e4:	6041      	str	r1, [r0, #4]
  4022e6:	e00c      	b.n	402302 <usart_set_async_baudrate+0x48>
		return 1;
  4022e8:	2001      	movs	r0, #1
  4022ea:	e010      	b.n	40230e <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4022ec:	0859      	lsrs	r1, r3, #1
  4022ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4022f2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4022f6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4022f8:	1e5c      	subs	r4, r3, #1
  4022fa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4022fe:	428c      	cmp	r4, r1
  402300:	d8f2      	bhi.n	4022e8 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402302:	0412      	lsls	r2, r2, #16
  402304:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402308:	431a      	orrs	r2, r3
  40230a:	6202      	str	r2, [r0, #32]

	return 0;
  40230c:	2000      	movs	r0, #0
}
  40230e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402312:	4770      	bx	lr

00402314 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402314:	4b08      	ldr	r3, [pc, #32]	; (402338 <usart_reset+0x24>)
  402316:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40231a:	2300      	movs	r3, #0
  40231c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40231e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  402320:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402322:	2388      	movs	r3, #136	; 0x88
  402324:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402326:	2324      	movs	r3, #36	; 0x24
  402328:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40232a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40232e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  402330:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402334:	6003      	str	r3, [r0, #0]
  402336:	4770      	bx	lr
  402338:	55534100 	.word	0x55534100

0040233c <usart_init_rs232>:
{
  40233c:	b570      	push	{r4, r5, r6, lr}
  40233e:	4605      	mov	r5, r0
  402340:	460c      	mov	r4, r1
  402342:	4616      	mov	r6, r2
	usart_reset(p_usart);
  402344:	4b0f      	ldr	r3, [pc, #60]	; (402384 <usart_init_rs232+0x48>)
  402346:	4798      	blx	r3
	ul_reg_val = 0;
  402348:	2200      	movs	r2, #0
  40234a:	4b0f      	ldr	r3, [pc, #60]	; (402388 <usart_init_rs232+0x4c>)
  40234c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40234e:	b1a4      	cbz	r4, 40237a <usart_init_rs232+0x3e>
  402350:	4632      	mov	r2, r6
  402352:	6821      	ldr	r1, [r4, #0]
  402354:	4628      	mov	r0, r5
  402356:	4b0d      	ldr	r3, [pc, #52]	; (40238c <usart_init_rs232+0x50>)
  402358:	4798      	blx	r3
  40235a:	4602      	mov	r2, r0
  40235c:	b978      	cbnz	r0, 40237e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40235e:	6863      	ldr	r3, [r4, #4]
  402360:	68a1      	ldr	r1, [r4, #8]
  402362:	430b      	orrs	r3, r1
  402364:	6921      	ldr	r1, [r4, #16]
  402366:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402368:	68e1      	ldr	r1, [r4, #12]
  40236a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40236c:	4906      	ldr	r1, [pc, #24]	; (402388 <usart_init_rs232+0x4c>)
  40236e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  402370:	6869      	ldr	r1, [r5, #4]
  402372:	430b      	orrs	r3, r1
  402374:	606b      	str	r3, [r5, #4]
}
  402376:	4610      	mov	r0, r2
  402378:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40237a:	2201      	movs	r2, #1
  40237c:	e7fb      	b.n	402376 <usart_init_rs232+0x3a>
  40237e:	2201      	movs	r2, #1
  402380:	e7f9      	b.n	402376 <usart_init_rs232+0x3a>
  402382:	bf00      	nop
  402384:	00402315 	.word	0x00402315
  402388:	20400a90 	.word	0x20400a90
  40238c:	004022bb 	.word	0x004022bb

00402390 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402390:	2340      	movs	r3, #64	; 0x40
  402392:	6003      	str	r3, [r0, #0]
  402394:	4770      	bx	lr

00402396 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  402396:	2310      	movs	r3, #16
  402398:	6003      	str	r3, [r0, #0]
  40239a:	4770      	bx	lr

0040239c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40239c:	6943      	ldr	r3, [r0, #20]
  40239e:	f013 0f02 	tst.w	r3, #2
  4023a2:	d004      	beq.n	4023ae <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4023a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4023a8:	61c1      	str	r1, [r0, #28]
	return 0;
  4023aa:	2000      	movs	r0, #0
  4023ac:	4770      	bx	lr
		return 1;
  4023ae:	2001      	movs	r0, #1
}
  4023b0:	4770      	bx	lr

004023b2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4023b2:	6943      	ldr	r3, [r0, #20]
  4023b4:	f013 0f01 	tst.w	r3, #1
  4023b8:	d005      	beq.n	4023c6 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4023ba:	6983      	ldr	r3, [r0, #24]
  4023bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4023c0:	600b      	str	r3, [r1, #0]
	return 0;
  4023c2:	2000      	movs	r0, #0
  4023c4:	4770      	bx	lr
		return 1;
  4023c6:	2001      	movs	r0, #1
}
  4023c8:	4770      	bx	lr

004023ca <xdmac_configure_transfer>:
  4023ca:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4023ce:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4023d0:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  4023d2:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  4023d4:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4023d6:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4023d8:	6813      	ldr	r3, [r2, #0]
  4023da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4023de:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4023e0:	6913      	ldr	r3, [r2, #16]
  4023e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4023e6:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4023e8:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4023ea:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4023ec:	6993      	ldr	r3, [r2, #24]
  4023ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4023f2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4023f6:	69d3      	ldr	r3, [r2, #28]
  4023f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4023fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  402400:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  402402:	678b      	str	r3, [r1, #120]	; 0x78
  402404:	4770      	bx	lr

00402406 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402406:	e7fe      	b.n	402406 <Dummy_Handler>

00402408 <Reset_Handler>:
{
  402408:	b500      	push	{lr}
  40240a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40240c:	4b25      	ldr	r3, [pc, #148]	; (4024a4 <Reset_Handler+0x9c>)
  40240e:	4a26      	ldr	r2, [pc, #152]	; (4024a8 <Reset_Handler+0xa0>)
  402410:	429a      	cmp	r2, r3
  402412:	d010      	beq.n	402436 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  402414:	4b25      	ldr	r3, [pc, #148]	; (4024ac <Reset_Handler+0xa4>)
  402416:	4a23      	ldr	r2, [pc, #140]	; (4024a4 <Reset_Handler+0x9c>)
  402418:	429a      	cmp	r2, r3
  40241a:	d20c      	bcs.n	402436 <Reset_Handler+0x2e>
  40241c:	3b01      	subs	r3, #1
  40241e:	1a9b      	subs	r3, r3, r2
  402420:	f023 0303 	bic.w	r3, r3, #3
  402424:	3304      	adds	r3, #4
  402426:	4413      	add	r3, r2
  402428:	491f      	ldr	r1, [pc, #124]	; (4024a8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40242a:	f851 0b04 	ldr.w	r0, [r1], #4
  40242e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  402432:	429a      	cmp	r2, r3
  402434:	d1f9      	bne.n	40242a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  402436:	4b1e      	ldr	r3, [pc, #120]	; (4024b0 <Reset_Handler+0xa8>)
  402438:	4a1e      	ldr	r2, [pc, #120]	; (4024b4 <Reset_Handler+0xac>)
  40243a:	429a      	cmp	r2, r3
  40243c:	d20a      	bcs.n	402454 <Reset_Handler+0x4c>
  40243e:	3b01      	subs	r3, #1
  402440:	1a9b      	subs	r3, r3, r2
  402442:	f023 0303 	bic.w	r3, r3, #3
  402446:	3304      	adds	r3, #4
  402448:	4413      	add	r3, r2
                *pDest++ = 0;
  40244a:	2100      	movs	r1, #0
  40244c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402450:	4293      	cmp	r3, r2
  402452:	d1fb      	bne.n	40244c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402454:	4a18      	ldr	r2, [pc, #96]	; (4024b8 <Reset_Handler+0xb0>)
  402456:	4b19      	ldr	r3, [pc, #100]	; (4024bc <Reset_Handler+0xb4>)
  402458:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40245c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40245e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402462:	fab3 f383 	clz	r3, r3
  402466:	095b      	lsrs	r3, r3, #5
  402468:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40246a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40246c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402470:	2200      	movs	r2, #0
  402472:	4b13      	ldr	r3, [pc, #76]	; (4024c0 <Reset_Handler+0xb8>)
  402474:	701a      	strb	r2, [r3, #0]
	return flags;
  402476:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402478:	4a12      	ldr	r2, [pc, #72]	; (4024c4 <Reset_Handler+0xbc>)
  40247a:	6813      	ldr	r3, [r2, #0]
  40247c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402480:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402482:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402486:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40248a:	b129      	cbz	r1, 402498 <Reset_Handler+0x90>
		cpu_irq_enable();
  40248c:	2201      	movs	r2, #1
  40248e:	4b0c      	ldr	r3, [pc, #48]	; (4024c0 <Reset_Handler+0xb8>)
  402490:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402492:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402496:	b662      	cpsie	i
        __libc_init_array();
  402498:	4b0b      	ldr	r3, [pc, #44]	; (4024c8 <Reset_Handler+0xc0>)
  40249a:	4798      	blx	r3
        main();
  40249c:	4b0b      	ldr	r3, [pc, #44]	; (4024cc <Reset_Handler+0xc4>)
  40249e:	4798      	blx	r3
  4024a0:	e7fe      	b.n	4024a0 <Reset_Handler+0x98>
  4024a2:	bf00      	nop
  4024a4:	20400000 	.word	0x20400000
  4024a8:	004082bc 	.word	0x004082bc
  4024ac:	204009e8 	.word	0x204009e8
  4024b0:	20400b24 	.word	0x20400b24
  4024b4:	204009e8 	.word	0x204009e8
  4024b8:	e000ed00 	.word	0xe000ed00
  4024bc:	00400000 	.word	0x00400000
  4024c0:	20400030 	.word	0x20400030
  4024c4:	e000ed88 	.word	0xe000ed88
  4024c8:	004048e5 	.word	0x004048e5
  4024cc:	00404521 	.word	0x00404521

004024d0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4024d0:	4b3b      	ldr	r3, [pc, #236]	; (4025c0 <SystemCoreClockUpdate+0xf0>)
  4024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024d4:	f003 0303 	and.w	r3, r3, #3
  4024d8:	2b01      	cmp	r3, #1
  4024da:	d01d      	beq.n	402518 <SystemCoreClockUpdate+0x48>
  4024dc:	b183      	cbz	r3, 402500 <SystemCoreClockUpdate+0x30>
  4024de:	2b02      	cmp	r3, #2
  4024e0:	d036      	beq.n	402550 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4024e2:	4b37      	ldr	r3, [pc, #220]	; (4025c0 <SystemCoreClockUpdate+0xf0>)
  4024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024ea:	2b70      	cmp	r3, #112	; 0x70
  4024ec:	d05f      	beq.n	4025ae <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4024ee:	4b34      	ldr	r3, [pc, #208]	; (4025c0 <SystemCoreClockUpdate+0xf0>)
  4024f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4024f2:	4934      	ldr	r1, [pc, #208]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  4024f4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4024f8:	680b      	ldr	r3, [r1, #0]
  4024fa:	40d3      	lsrs	r3, r2
  4024fc:	600b      	str	r3, [r1, #0]
  4024fe:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402500:	4b31      	ldr	r3, [pc, #196]	; (4025c8 <SystemCoreClockUpdate+0xf8>)
  402502:	695b      	ldr	r3, [r3, #20]
  402504:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402508:	bf14      	ite	ne
  40250a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40250e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402512:	4b2c      	ldr	r3, [pc, #176]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  402514:	601a      	str	r2, [r3, #0]
  402516:	e7e4      	b.n	4024e2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402518:	4b29      	ldr	r3, [pc, #164]	; (4025c0 <SystemCoreClockUpdate+0xf0>)
  40251a:	6a1b      	ldr	r3, [r3, #32]
  40251c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402520:	d003      	beq.n	40252a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402522:	4a2a      	ldr	r2, [pc, #168]	; (4025cc <SystemCoreClockUpdate+0xfc>)
  402524:	4b27      	ldr	r3, [pc, #156]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  402526:	601a      	str	r2, [r3, #0]
  402528:	e7db      	b.n	4024e2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40252a:	4a29      	ldr	r2, [pc, #164]	; (4025d0 <SystemCoreClockUpdate+0x100>)
  40252c:	4b25      	ldr	r3, [pc, #148]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  40252e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402530:	4b23      	ldr	r3, [pc, #140]	; (4025c0 <SystemCoreClockUpdate+0xf0>)
  402532:	6a1b      	ldr	r3, [r3, #32]
  402534:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402538:	2b10      	cmp	r3, #16
  40253a:	d005      	beq.n	402548 <SystemCoreClockUpdate+0x78>
  40253c:	2b20      	cmp	r3, #32
  40253e:	d1d0      	bne.n	4024e2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402540:	4a22      	ldr	r2, [pc, #136]	; (4025cc <SystemCoreClockUpdate+0xfc>)
  402542:	4b20      	ldr	r3, [pc, #128]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  402544:	601a      	str	r2, [r3, #0]
          break;
  402546:	e7cc      	b.n	4024e2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402548:	4a22      	ldr	r2, [pc, #136]	; (4025d4 <SystemCoreClockUpdate+0x104>)
  40254a:	4b1e      	ldr	r3, [pc, #120]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  40254c:	601a      	str	r2, [r3, #0]
          break;
  40254e:	e7c8      	b.n	4024e2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402550:	4b1b      	ldr	r3, [pc, #108]	; (4025c0 <SystemCoreClockUpdate+0xf0>)
  402552:	6a1b      	ldr	r3, [r3, #32]
  402554:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402558:	d016      	beq.n	402588 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40255a:	4a1c      	ldr	r2, [pc, #112]	; (4025cc <SystemCoreClockUpdate+0xfc>)
  40255c:	4b19      	ldr	r3, [pc, #100]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  40255e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402560:	4b17      	ldr	r3, [pc, #92]	; (4025c0 <SystemCoreClockUpdate+0xf0>)
  402562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402564:	f003 0303 	and.w	r3, r3, #3
  402568:	2b02      	cmp	r3, #2
  40256a:	d1ba      	bne.n	4024e2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40256c:	4a14      	ldr	r2, [pc, #80]	; (4025c0 <SystemCoreClockUpdate+0xf0>)
  40256e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402570:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402572:	4814      	ldr	r0, [pc, #80]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402574:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402578:	6803      	ldr	r3, [r0, #0]
  40257a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40257e:	b2d2      	uxtb	r2, r2
  402580:	fbb3 f3f2 	udiv	r3, r3, r2
  402584:	6003      	str	r3, [r0, #0]
  402586:	e7ac      	b.n	4024e2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402588:	4a11      	ldr	r2, [pc, #68]	; (4025d0 <SystemCoreClockUpdate+0x100>)
  40258a:	4b0e      	ldr	r3, [pc, #56]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  40258c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40258e:	4b0c      	ldr	r3, [pc, #48]	; (4025c0 <SystemCoreClockUpdate+0xf0>)
  402590:	6a1b      	ldr	r3, [r3, #32]
  402592:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402596:	2b10      	cmp	r3, #16
  402598:	d005      	beq.n	4025a6 <SystemCoreClockUpdate+0xd6>
  40259a:	2b20      	cmp	r3, #32
  40259c:	d1e0      	bne.n	402560 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40259e:	4a0b      	ldr	r2, [pc, #44]	; (4025cc <SystemCoreClockUpdate+0xfc>)
  4025a0:	4b08      	ldr	r3, [pc, #32]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  4025a2:	601a      	str	r2, [r3, #0]
          break;
  4025a4:	e7dc      	b.n	402560 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4025a6:	4a0b      	ldr	r2, [pc, #44]	; (4025d4 <SystemCoreClockUpdate+0x104>)
  4025a8:	4b06      	ldr	r3, [pc, #24]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  4025aa:	601a      	str	r2, [r3, #0]
          break;
  4025ac:	e7d8      	b.n	402560 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4025ae:	4a05      	ldr	r2, [pc, #20]	; (4025c4 <SystemCoreClockUpdate+0xf4>)
  4025b0:	6813      	ldr	r3, [r2, #0]
  4025b2:	4909      	ldr	r1, [pc, #36]	; (4025d8 <SystemCoreClockUpdate+0x108>)
  4025b4:	fba1 1303 	umull	r1, r3, r1, r3
  4025b8:	085b      	lsrs	r3, r3, #1
  4025ba:	6013      	str	r3, [r2, #0]
  4025bc:	4770      	bx	lr
  4025be:	bf00      	nop
  4025c0:	400e0600 	.word	0x400e0600
  4025c4:	20400034 	.word	0x20400034
  4025c8:	400e1810 	.word	0x400e1810
  4025cc:	00b71b00 	.word	0x00b71b00
  4025d0:	003d0900 	.word	0x003d0900
  4025d4:	007a1200 	.word	0x007a1200
  4025d8:	aaaaaaab 	.word	0xaaaaaaab

004025dc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4025dc:	4b16      	ldr	r3, [pc, #88]	; (402638 <system_init_flash+0x5c>)
  4025de:	4298      	cmp	r0, r3
  4025e0:	d913      	bls.n	40260a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4025e2:	4b16      	ldr	r3, [pc, #88]	; (40263c <system_init_flash+0x60>)
  4025e4:	4298      	cmp	r0, r3
  4025e6:	d915      	bls.n	402614 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4025e8:	4b15      	ldr	r3, [pc, #84]	; (402640 <system_init_flash+0x64>)
  4025ea:	4298      	cmp	r0, r3
  4025ec:	d916      	bls.n	40261c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4025ee:	4b15      	ldr	r3, [pc, #84]	; (402644 <system_init_flash+0x68>)
  4025f0:	4298      	cmp	r0, r3
  4025f2:	d917      	bls.n	402624 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4025f4:	4b14      	ldr	r3, [pc, #80]	; (402648 <system_init_flash+0x6c>)
  4025f6:	4298      	cmp	r0, r3
  4025f8:	d918      	bls.n	40262c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4025fa:	4b14      	ldr	r3, [pc, #80]	; (40264c <system_init_flash+0x70>)
  4025fc:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4025fe:	bf94      	ite	ls
  402600:	4a13      	ldrls	r2, [pc, #76]	; (402650 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402602:	4a14      	ldrhi	r2, [pc, #80]	; (402654 <system_init_flash+0x78>)
  402604:	4b14      	ldr	r3, [pc, #80]	; (402658 <system_init_flash+0x7c>)
  402606:	601a      	str	r2, [r3, #0]
  402608:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40260a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40260e:	4b12      	ldr	r3, [pc, #72]	; (402658 <system_init_flash+0x7c>)
  402610:	601a      	str	r2, [r3, #0]
  402612:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402614:	4a11      	ldr	r2, [pc, #68]	; (40265c <system_init_flash+0x80>)
  402616:	4b10      	ldr	r3, [pc, #64]	; (402658 <system_init_flash+0x7c>)
  402618:	601a      	str	r2, [r3, #0]
  40261a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40261c:	4a10      	ldr	r2, [pc, #64]	; (402660 <system_init_flash+0x84>)
  40261e:	4b0e      	ldr	r3, [pc, #56]	; (402658 <system_init_flash+0x7c>)
  402620:	601a      	str	r2, [r3, #0]
  402622:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402624:	4a0f      	ldr	r2, [pc, #60]	; (402664 <system_init_flash+0x88>)
  402626:	4b0c      	ldr	r3, [pc, #48]	; (402658 <system_init_flash+0x7c>)
  402628:	601a      	str	r2, [r3, #0]
  40262a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40262c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402630:	4b09      	ldr	r3, [pc, #36]	; (402658 <system_init_flash+0x7c>)
  402632:	601a      	str	r2, [r3, #0]
  402634:	4770      	bx	lr
  402636:	bf00      	nop
  402638:	015ef3bf 	.word	0x015ef3bf
  40263c:	02bde77f 	.word	0x02bde77f
  402640:	041cdb3f 	.word	0x041cdb3f
  402644:	057bceff 	.word	0x057bceff
  402648:	06dac2bf 	.word	0x06dac2bf
  40264c:	0839b67f 	.word	0x0839b67f
  402650:	04000500 	.word	0x04000500
  402654:	04000600 	.word	0x04000600
  402658:	400e0c00 	.word	0x400e0c00
  40265c:	04000100 	.word	0x04000100
  402660:	04000200 	.word	0x04000200
  402664:	04000300 	.word	0x04000300

00402668 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402668:	4b0a      	ldr	r3, [pc, #40]	; (402694 <_sbrk+0x2c>)
  40266a:	681b      	ldr	r3, [r3, #0]
  40266c:	b153      	cbz	r3, 402684 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40266e:	4b09      	ldr	r3, [pc, #36]	; (402694 <_sbrk+0x2c>)
  402670:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402672:	181a      	adds	r2, r3, r0
  402674:	4908      	ldr	r1, [pc, #32]	; (402698 <_sbrk+0x30>)
  402676:	4291      	cmp	r1, r2
  402678:	db08      	blt.n	40268c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40267a:	4610      	mov	r0, r2
  40267c:	4a05      	ldr	r2, [pc, #20]	; (402694 <_sbrk+0x2c>)
  40267e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402680:	4618      	mov	r0, r3
  402682:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402684:	4a05      	ldr	r2, [pc, #20]	; (40269c <_sbrk+0x34>)
  402686:	4b03      	ldr	r3, [pc, #12]	; (402694 <_sbrk+0x2c>)
  402688:	601a      	str	r2, [r3, #0]
  40268a:	e7f0      	b.n	40266e <_sbrk+0x6>
		return (caddr_t) -1;	
  40268c:	f04f 30ff 	mov.w	r0, #4294967295
}
  402690:	4770      	bx	lr
  402692:	bf00      	nop
  402694:	20400a94 	.word	0x20400a94
  402698:	2045fffc 	.word	0x2045fffc
  40269c:	20402d28 	.word	0x20402d28

004026a0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4026a0:	f04f 30ff 	mov.w	r0, #4294967295
  4026a4:	4770      	bx	lr

004026a6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4026a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4026aa:	604b      	str	r3, [r1, #4]

	return 0;
}
  4026ac:	2000      	movs	r0, #0
  4026ae:	4770      	bx	lr

004026b0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4026b0:	2001      	movs	r0, #1
  4026b2:	4770      	bx	lr

004026b4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4026b4:	2000      	movs	r0, #0
  4026b6:	4770      	bx	lr

004026b8 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  4026b8:	2801      	cmp	r0, #1
  4026ba:	d901      	bls.n	4026c0 <disk_initialize+0x8>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  4026bc:	2001      	movs	r0, #1
  4026be:	4770      	bx	lr
{
  4026c0:	b510      	push	{r4, lr}
  4026c2:	4604      	mov	r4, r0
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  4026c4:	4b0a      	ldr	r3, [pc, #40]	; (4026f0 <disk_initialize+0x38>)
  4026c6:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  4026c8:	2803      	cmp	r0, #3
  4026ca:	d106      	bne.n	4026da <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
  4026cc:	4620      	mov	r0, r4
  4026ce:	4b08      	ldr	r3, [pc, #32]	; (4026f0 <disk_initialize+0x38>)
  4026d0:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  4026d2:	2803      	cmp	r0, #3
  4026d4:	d101      	bne.n	4026da <disk_initialize+0x22>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  4026d6:	2001      	movs	r0, #1
  4026d8:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  4026da:	b938      	cbnz	r0, 4026ec <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  4026dc:	4620      	mov	r0, r4
  4026de:	4b05      	ldr	r3, [pc, #20]	; (4026f4 <disk_initialize+0x3c>)
  4026e0:	4798      	blx	r3
  4026e2:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  4026e4:	bf14      	ite	ne
  4026e6:	2004      	movne	r0, #4
  4026e8:	2000      	moveq	r0, #0
  4026ea:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  4026ec:	2001      	movs	r0, #1
}
  4026ee:	bd10      	pop	{r4, pc}
  4026f0:	00401085 	.word	0x00401085
  4026f4:	004010b5 	.word	0x004010b5

004026f8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  4026f8:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  4026fa:	4b05      	ldr	r3, [pc, #20]	; (402710 <disk_status+0x18>)
  4026fc:	4798      	blx	r3
  4026fe:	b120      	cbz	r0, 40270a <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  402700:	2802      	cmp	r0, #2
  402702:	bf0c      	ite	eq
  402704:	2003      	moveq	r0, #3
  402706:	2001      	movne	r0, #1
  402708:	bd08      	pop	{r3, pc}
		return 0;
  40270a:	2000      	movs	r0, #0
	}
}
  40270c:	bd08      	pop	{r3, pc}
  40270e:	bf00      	nop
  402710:	00401085 	.word	0x00401085

00402714 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  402714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402718:	b083      	sub	sp, #12
  40271a:	4680      	mov	r8, r0
  40271c:	460d      	mov	r5, r1
  40271e:	4614      	mov	r4, r2
  402720:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  402722:	4b15      	ldr	r3, [pc, #84]	; (402778 <disk_read+0x64>)
  402724:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  402726:	b918      	cbnz	r0, 402730 <disk_read+0x1c>
		return RES_ERROR;
  402728:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  40272a:	b003      	add	sp, #12
  40272c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402730:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  402732:	a901      	add	r1, sp, #4
  402734:	4640      	mov	r0, r8
  402736:	4b11      	ldr	r3, [pc, #68]	; (40277c <disk_read+0x68>)
  402738:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40273a:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  40273c:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  402740:	9b01      	ldr	r3, [sp, #4]
  402742:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  402746:	429a      	cmp	r2, r3
  402748:	d901      	bls.n	40274e <disk_read+0x3a>
		return RES_PARERR;
  40274a:	2004      	movs	r0, #4
  40274c:	e7ed      	b.n	40272a <disk_read+0x16>
	for (i = 0; i < count; i++) {
  40274e:	46ba      	mov	sl, r7
  402750:	b177      	cbz	r7, 402770 <disk_read+0x5c>
  402752:	0276      	lsls	r6, r6, #9
  402754:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  402756:	f8df b028 	ldr.w	fp, [pc, #40]	; 402780 <disk_read+0x6c>
  40275a:	462a      	mov	r2, r5
  40275c:	4621      	mov	r1, r4
  40275e:	4640      	mov	r0, r8
  402760:	47d8      	blx	fp
  402762:	b938      	cbnz	r0, 402774 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  402764:	3701      	adds	r7, #1
  402766:	444c      	add	r4, r9
  402768:	4435      	add	r5, r6
  40276a:	4557      	cmp	r7, sl
  40276c:	d1f5      	bne.n	40275a <disk_read+0x46>
  40276e:	e7dc      	b.n	40272a <disk_read+0x16>
	return RES_OK;
  402770:	2000      	movs	r0, #0
  402772:	e7da      	b.n	40272a <disk_read+0x16>
			return RES_ERROR;
  402774:	2001      	movs	r0, #1
  402776:	e7d8      	b.n	40272a <disk_read+0x16>
  402778:	004010ad 	.word	0x004010ad
  40277c:	00401099 	.word	0x00401099
  402780:	004010c9 	.word	0x004010c9

00402784 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  402784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402788:	b083      	sub	sp, #12
  40278a:	4680      	mov	r8, r0
  40278c:	460d      	mov	r5, r1
  40278e:	4614      	mov	r4, r2
  402790:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  402792:	4b15      	ldr	r3, [pc, #84]	; (4027e8 <disk_write+0x64>)
  402794:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  402796:	b918      	cbnz	r0, 4027a0 <disk_write+0x1c>
		return RES_ERROR;
  402798:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  40279a:	b003      	add	sp, #12
  40279c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027a0:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  4027a2:	a901      	add	r1, sp, #4
  4027a4:	4640      	mov	r0, r8
  4027a6:	4b11      	ldr	r3, [pc, #68]	; (4027ec <disk_write+0x68>)
  4027a8:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  4027aa:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  4027ac:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  4027b0:	9b01      	ldr	r3, [sp, #4]
  4027b2:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  4027b6:	429a      	cmp	r2, r3
  4027b8:	d901      	bls.n	4027be <disk_write+0x3a>
		return RES_PARERR;
  4027ba:	2004      	movs	r0, #4
  4027bc:	e7ed      	b.n	40279a <disk_write+0x16>
	for (i = 0; i < count; i++) {
  4027be:	46ba      	mov	sl, r7
  4027c0:	b177      	cbz	r7, 4027e0 <disk_write+0x5c>
  4027c2:	0276      	lsls	r6, r6, #9
  4027c4:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  4027c6:	f8df b028 	ldr.w	fp, [pc, #40]	; 4027f0 <disk_write+0x6c>
  4027ca:	462a      	mov	r2, r5
  4027cc:	4621      	mov	r1, r4
  4027ce:	4640      	mov	r0, r8
  4027d0:	47d8      	blx	fp
  4027d2:	b938      	cbnz	r0, 4027e4 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  4027d4:	3701      	adds	r7, #1
  4027d6:	444c      	add	r4, r9
  4027d8:	4435      	add	r5, r6
  4027da:	4557      	cmp	r7, sl
  4027dc:	d1f5      	bne.n	4027ca <disk_write+0x46>
  4027de:	e7dc      	b.n	40279a <disk_write+0x16>
	return RES_OK;
  4027e0:	2000      	movs	r0, #0
  4027e2:	e7da      	b.n	40279a <disk_write+0x16>
			return RES_ERROR;
  4027e4:	2001      	movs	r0, #1
  4027e6:	e7d8      	b.n	40279a <disk_write+0x16>
  4027e8:	004010ad 	.word	0x004010ad
  4027ec:	00401099 	.word	0x00401099
  4027f0:	004010e1 	.word	0x004010e1

004027f4 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  4027f4:	b510      	push	{r4, lr}
  4027f6:	b082      	sub	sp, #8
  4027f8:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  4027fa:	2903      	cmp	r1, #3
  4027fc:	d825      	bhi.n	40284a <disk_ioctl+0x56>
  4027fe:	e8df f001 	tbb	[pc, r1]
  402802:	071d      	.short	0x071d
  402804:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  402806:	2301      	movs	r3, #1
  402808:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  40280a:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  40280c:	b002      	add	sp, #8
  40280e:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  402810:	a901      	add	r1, sp, #4
  402812:	4b11      	ldr	r3, [pc, #68]	; (402858 <disk_ioctl+0x64>)
  402814:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  402816:	9b01      	ldr	r3, [sp, #4]
  402818:	3301      	adds	r3, #1
  40281a:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  40281c:	2000      	movs	r0, #0
	break;
  40281e:	e7f5      	b.n	40280c <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  402820:	4b0e      	ldr	r3, [pc, #56]	; (40285c <disk_ioctl+0x68>)
  402822:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  402824:	2808      	cmp	r0, #8
  402826:	d812      	bhi.n	40284e <disk_ioctl+0x5a>
  402828:	f44f 738b 	mov.w	r3, #278	; 0x116
  40282c:	fa23 f000 	lsr.w	r0, r3, r0
				(uc_sector_size != SECTOR_SIZE_2048) &&
  402830:	f010 0f01 	tst.w	r0, #1
  402834:	d00d      	beq.n	402852 <disk_ioctl+0x5e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  402836:	2000      	movs	r0, #0
  402838:	7020      	strb	r0, [r4, #0]
	break;
  40283a:	e7e7      	b.n	40280c <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  40283c:	4b08      	ldr	r3, [pc, #32]	; (402860 <disk_ioctl+0x6c>)
  40283e:	4798      	blx	r3
  402840:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  402842:	bf0c      	ite	eq
  402844:	2000      	moveq	r0, #0
  402846:	2003      	movne	r0, #3
  402848:	e7e0      	b.n	40280c <disk_ioctl+0x18>
		res = RES_PARERR;
  40284a:	2004      	movs	r0, #4
  40284c:	e7de      	b.n	40280c <disk_ioctl+0x18>
			return RES_ERROR;
  40284e:	2001      	movs	r0, #1
  402850:	e7dc      	b.n	40280c <disk_ioctl+0x18>
  402852:	2001      	movs	r0, #1
  402854:	e7da      	b.n	40280c <disk_ioctl+0x18>
  402856:	bf00      	nop
  402858:	00401099 	.word	0x00401099
  40285c:	004010ad 	.word	0x004010ad
  402860:	00401085 	.word	0x00401085

00402864 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  402864:	b530      	push	{r4, r5, lr}
  402866:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  402868:	4c11      	ldr	r4, [pc, #68]	; (4028b0 <get_fattime+0x4c>)
  40286a:	ab07      	add	r3, sp, #28
  40286c:	aa08      	add	r2, sp, #32
  40286e:	a909      	add	r1, sp, #36	; 0x24
  402870:	4620      	mov	r0, r4
  402872:	4d10      	ldr	r5, [pc, #64]	; (4028b4 <get_fattime+0x50>)
  402874:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  402876:	ab03      	add	r3, sp, #12
  402878:	9300      	str	r3, [sp, #0]
  40287a:	ab04      	add	r3, sp, #16
  40287c:	aa05      	add	r2, sp, #20
  40287e:	a906      	add	r1, sp, #24
  402880:	4620      	mov	r0, r4
  402882:	4c0d      	ldr	r4, [pc, #52]	; (4028b8 <get_fattime+0x54>)
  402884:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  402886:	9b04      	ldr	r3, [sp, #16]
  402888:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  40288a:	9805      	ldr	r0, [sp, #20]
  40288c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  402890:	9809      	ldr	r0, [sp, #36]	; 0x24
  402892:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  402896:	9808      	ldr	r0, [sp, #32]
  402898:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  40289c:	9807      	ldr	r0, [sp, #28]
  40289e:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  4028a2:	9806      	ldr	r0, [sp, #24]
  4028a4:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  4028a8:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  4028ac:	b00b      	add	sp, #44	; 0x2c
  4028ae:	bd30      	pop	{r4, r5, pc}
  4028b0:	400e1860 	.word	0x400e1860
  4028b4:	00401fad 	.word	0x00401fad
  4028b8:	00402007 	.word	0x00402007

004028bc <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  4028bc:	b13a      	cbz	r2, 4028ce <mem_cpy+0x12>
  4028be:	3801      	subs	r0, #1
  4028c0:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  4028c2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4028c6:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  4028ca:	4291      	cmp	r1, r2
  4028cc:	d1f9      	bne.n	4028c2 <mem_cpy+0x6>
  4028ce:	4770      	bx	lr

004028d0 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  4028d0:	b122      	cbz	r2, 4028dc <mem_set+0xc>
  4028d2:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  4028d4:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  4028d8:	4282      	cmp	r2, r0
  4028da:	d1fb      	bne.n	4028d4 <mem_set+0x4>
  4028dc:	4770      	bx	lr

004028de <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  4028de:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4028e0:	6983      	ldr	r3, [r0, #24]
  4028e2:	3b02      	subs	r3, #2
  4028e4:	4299      	cmp	r1, r3
  4028e6:	d204      	bcs.n	4028f2 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  4028e8:	7883      	ldrb	r3, [r0, #2]
  4028ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
  4028ec:	fb01 0003 	mla	r0, r1, r3, r0
  4028f0:	4770      	bx	lr
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4028f2:	2000      	movs	r0, #0
}
  4028f4:	4770      	bx	lr

004028f6 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  4028f6:	4602      	mov	r2, r0
  4028f8:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  4028fc:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  4028fe:	01c3      	lsls	r3, r0, #7
  402900:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  402904:	f812 0b01 	ldrb.w	r0, [r2], #1
  402908:	fa50 f383 	uxtab	r3, r0, r3
  40290c:	b2d8      	uxtb	r0, r3
  40290e:	428a      	cmp	r2, r1
  402910:	d1f5      	bne.n	4028fe <sum_sfn+0x8>
	return sum;
}
  402912:	4770      	bx	lr

00402914 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  402914:	b198      	cbz	r0, 40293e <validate+0x2a>
{
  402916:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  402918:	7802      	ldrb	r2, [r0, #0]
  40291a:	b90a      	cbnz	r2, 402920 <validate+0xc>
		return FR_INVALID_OBJECT;
  40291c:	2009      	movs	r0, #9
  40291e:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  402920:	88c2      	ldrh	r2, [r0, #6]
  402922:	428a      	cmp	r2, r1
  402924:	d001      	beq.n	40292a <validate+0x16>
		return FR_INVALID_OBJECT;
  402926:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  402928:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  40292a:	7840      	ldrb	r0, [r0, #1]
  40292c:	4b05      	ldr	r3, [pc, #20]	; (402944 <validate+0x30>)
  40292e:	4798      	blx	r3
  402930:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  402934:	2800      	cmp	r0, #0
  402936:	bf14      	ite	ne
  402938:	2003      	movne	r0, #3
  40293a:	2000      	moveq	r0, #0
  40293c:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  40293e:	2009      	movs	r0, #9
  402940:	4770      	bx	lr
  402942:	bf00      	nop
  402944:	004026f9 	.word	0x004026f9

00402948 <check_fs>:
{
  402948:	b538      	push	{r3, r4, r5, lr}
  40294a:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  40294c:	2301      	movs	r3, #1
  40294e:	460a      	mov	r2, r1
  402950:	f100 0130 	add.w	r1, r0, #48	; 0x30
  402954:	7840      	ldrb	r0, [r0, #1]
  402956:	4d1d      	ldr	r5, [pc, #116]	; (4029cc <check_fs+0x84>)
  402958:	47a8      	blx	r5
  40295a:	b108      	cbz	r0, 402960 <check_fs+0x18>
		return 3;
  40295c:	2003      	movs	r0, #3
  40295e:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  402960:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  402964:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  402968:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40296c:	b21b      	sxth	r3, r3
  40296e:	4a18      	ldr	r2, [pc, #96]	; (4029d0 <check_fs+0x88>)
  402970:	4293      	cmp	r3, r2
  402972:	d001      	beq.n	402978 <check_fs+0x30>
		return 2;
  402974:	2002      	movs	r0, #2
  402976:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  402978:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  40297c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  402980:	041b      	lsls	r3, r3, #16
  402982:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402986:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  40298a:	4313      	orrs	r3, r2
  40298c:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  402990:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402994:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  402998:	4a0e      	ldr	r2, [pc, #56]	; (4029d4 <check_fs+0x8c>)
  40299a:	4293      	cmp	r3, r2
  40299c:	d013      	beq.n	4029c6 <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  40299e:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  4029a2:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  4029a6:	0400      	lsls	r0, r0, #16
  4029a8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  4029ac:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  4029b0:	4318      	orrs	r0, r3
  4029b2:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  4029b6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4029ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  4029be:	1a80      	subs	r0, r0, r2
  4029c0:	bf18      	it	ne
  4029c2:	2001      	movne	r0, #1
  4029c4:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  4029c6:	2000      	movs	r0, #0
}
  4029c8:	bd38      	pop	{r3, r4, r5, pc}
  4029ca:	bf00      	nop
  4029cc:	00402715 	.word	0x00402715
  4029d0:	ffffaa55 	.word	0xffffaa55
  4029d4:	00544146 	.word	0x00544146

004029d8 <chk_mounted>:
{
  4029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  4029da:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  4029dc:	781c      	ldrb	r4, [r3, #0]
  4029de:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  4029e0:	2c09      	cmp	r4, #9
  4029e2:	d80a      	bhi.n	4029fa <chk_mounted+0x22>
  4029e4:	785d      	ldrb	r5, [r3, #1]
  4029e6:	2d3a      	cmp	r5, #58	; 0x3a
  4029e8:	d001      	beq.n	4029ee <chk_mounted+0x16>
  4029ea:	2400      	movs	r4, #0
  4029ec:	e006      	b.n	4029fc <chk_mounted+0x24>
		p += 2; *path = p;				/* Return pointer to the path name */
  4029ee:	3302      	adds	r3, #2
  4029f0:	6003      	str	r3, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  4029f2:	2c07      	cmp	r4, #7
  4029f4:	d902      	bls.n	4029fc <chk_mounted+0x24>
		return FR_INVALID_DRIVE;
  4029f6:	200b      	movs	r0, #11
  4029f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4029fa:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  4029fc:	4bae      	ldr	r3, [pc, #696]	; (402cb8 <chk_mounted+0x2e0>)
  4029fe:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  402a02:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402a04:	2d00      	cmp	r5, #0
  402a06:	f000 813e 	beq.w	402c86 <chk_mounted+0x2ae>
  402a0a:	4616      	mov	r6, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  402a0c:	782b      	ldrb	r3, [r5, #0]
  402a0e:	b17b      	cbz	r3, 402a30 <chk_mounted+0x58>
		stat = disk_status(fs->drv);
  402a10:	7868      	ldrb	r0, [r5, #1]
  402a12:	4baa      	ldr	r3, [pc, #680]	; (402cbc <chk_mounted+0x2e4>)
  402a14:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  402a16:	f010 0f01 	tst.w	r0, #1
  402a1a:	d109      	bne.n	402a30 <chk_mounted+0x58>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  402a1c:	2e00      	cmp	r6, #0
  402a1e:	f000 8134 	beq.w	402c8a <chk_mounted+0x2b2>
  402a22:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  402a26:	2800      	cmp	r0, #0
  402a28:	bf0c      	ite	eq
  402a2a:	2000      	moveq	r0, #0
  402a2c:	200a      	movne	r0, #10
  402a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  402a30:	2300      	movs	r3, #0
  402a32:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  402a34:	b2e0      	uxtb	r0, r4
  402a36:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  402a38:	4ba1      	ldr	r3, [pc, #644]	; (402cc0 <chk_mounted+0x2e8>)
  402a3a:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  402a3c:	f010 0f01 	tst.w	r0, #1
  402a40:	d001      	beq.n	402a46 <chk_mounted+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  402a42:	2003      	movs	r0, #3
  402a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  402a46:	b126      	cbz	r6, 402a52 <chk_mounted+0x7a>
  402a48:	f010 0f04 	tst.w	r0, #4
  402a4c:	d001      	beq.n	402a52 <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
  402a4e:	200a      	movs	r0, #10
  402a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  402a52:	2100      	movs	r1, #0
  402a54:	4628      	mov	r0, r5
  402a56:	4b9b      	ldr	r3, [pc, #620]	; (402cc4 <chk_mounted+0x2ec>)
  402a58:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  402a5a:	2801      	cmp	r0, #1
  402a5c:	d006      	beq.n	402a6c <chk_mounted+0x94>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  402a5e:	2400      	movs	r4, #0
	if (fmt == 3) return FR_DISK_ERR;
  402a60:	2803      	cmp	r0, #3
  402a62:	f000 8114 	beq.w	402c8e <chk_mounted+0x2b6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402a66:	b1c8      	cbz	r0, 402a9c <chk_mounted+0xc4>
  402a68:	200d      	movs	r0, #13
  402a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  402a6c:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  402a70:	b90b      	cbnz	r3, 402a76 <chk_mounted+0x9e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402a72:	200d      	movs	r0, #13
  402a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  402a76:	f895 31f9 	ldrb.w	r3, [r5, #505]	; 0x1f9
  402a7a:	f895 41f8 	ldrb.w	r4, [r5, #504]	; 0x1f8
  402a7e:	0424      	lsls	r4, r4, #16
  402a80:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  402a84:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  402a88:	431c      	orrs	r4, r3
  402a8a:	f895 31f7 	ldrb.w	r3, [r5, #503]	; 0x1f7
  402a8e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  402a92:	4621      	mov	r1, r4
  402a94:	4628      	mov	r0, r5
  402a96:	4b8b      	ldr	r3, [pc, #556]	; (402cc4 <chk_mounted+0x2ec>)
  402a98:	4798      	blx	r3
  402a9a:	e7e1      	b.n	402a60 <chk_mounted+0x88>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  402a9c:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  402aa0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  402aa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402aa8:	b21b      	sxth	r3, r3
  402aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402aae:	d001      	beq.n	402ab4 <chk_mounted+0xdc>
		return FR_NO_FILESYSTEM;
  402ab0:	200d      	movs	r0, #13
  402ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  402ab4:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
  402ab8:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  402abc:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  402ac0:	d10d      	bne.n	402ade <chk_mounted+0x106>
  402ac2:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
  402ac6:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
  402aca:	0412      	lsls	r2, r2, #16
  402acc:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  402ad0:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
  402ad4:	431a      	orrs	r2, r3
  402ad6:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
  402ada:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  402ade:	61ea      	str	r2, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  402ae0:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  402ae4:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  402ae8:	f10e 33ff 	add.w	r3, lr, #4294967295
  402aec:	b2db      	uxtb	r3, r3
  402aee:	2b01      	cmp	r3, #1
  402af0:	d901      	bls.n	402af6 <chk_mounted+0x11e>
  402af2:	200d      	movs	r0, #13
  402af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  402af6:	f895 603d 	ldrb.w	r6, [r5, #61]	; 0x3d
  402afa:	70ae      	strb	r6, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  402afc:	2e00      	cmp	r6, #0
  402afe:	f000 80c8 	beq.w	402c92 <chk_mounted+0x2ba>
  402b02:	1e73      	subs	r3, r6, #1
  402b04:	4233      	tst	r3, r6
  402b06:	d001      	beq.n	402b0c <chk_mounted+0x134>
  402b08:	200d      	movs	r0, #13
  402b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  402b0c:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  402b10:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
  402b14:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  402b18:	8129      	strh	r1, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402b1a:	f011 0f0f 	tst.w	r1, #15
  402b1e:	f040 80ba 	bne.w	402c96 <chk_mounted+0x2be>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  402b22:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  402b26:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  402b2a:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  402b2e:	d10d      	bne.n	402b4c <chk_mounted+0x174>
  402b30:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
  402b34:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
  402b38:	041b      	lsls	r3, r3, #16
  402b3a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  402b3e:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
  402b42:	4303      	orrs	r3, r0
  402b44:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  402b48:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  402b4c:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
  402b50:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  402b54:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  402b58:	f000 809f 	beq.w	402c9a <chk_mounted+0x2c2>
	fasize *= b;										/* Number of sectors for FAT area */
  402b5c:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  402b60:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  402b64:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  402b66:	4283      	cmp	r3, r0
  402b68:	f0c0 8099 	bcc.w	402c9e <chk_mounted+0x2c6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  402b6c:	1a1b      	subs	r3, r3, r0
  402b6e:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402b72:	2b00      	cmp	r3, #0
  402b74:	f000 8095 	beq.w	402ca2 <chk_mounted+0x2ca>
	fmt = FS_FAT12;
  402b78:	f640 76f5 	movw	r6, #4085	; 0xff5
  402b7c:	42b3      	cmp	r3, r6
  402b7e:	bf8c      	ite	hi
  402b80:	2602      	movhi	r6, #2
  402b82:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  402b84:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  402b88:	4563      	cmp	r3, ip
  402b8a:	f200 80a5 	bhi.w	402cd8 <chk_mounted+0x300>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402b8e:	3302      	adds	r3, #2
  402b90:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402b92:	4420      	add	r0, r4
  402b94:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402b96:	443c      	add	r4, r7
  402b98:	622c      	str	r4, [r5, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  402b9a:	2900      	cmp	r1, #0
  402b9c:	f000 8089 	beq.w	402cb2 <chk_mounted+0x2da>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  402ba0:	4474      	add	r4, lr
  402ba2:	626c      	str	r4, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  402ba4:	2e02      	cmp	r6, #2
  402ba6:	d10b      	bne.n	402bc0 <chk_mounted+0x1e8>
  402ba8:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402baa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  402bae:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  402bb2:	d37c      	bcc.n	402cae <chk_mounted+0x2d6>
	fs->free_clust = 0xFFFFFFFF;
  402bb4:	f04f 33ff 	mov.w	r3, #4294967295
  402bb8:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  402bba:	2300      	movs	r3, #0
  402bbc:	60eb      	str	r3, [r5, #12]
  402bbe:	e051      	b.n	402c64 <chk_mounted+0x28c>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  402bc0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402bc4:	f003 0301 	and.w	r3, r3, #1
  402bc8:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  402bcc:	e7ed      	b.n	402baa <chk_mounted+0x1d2>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  402bce:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  402bd2:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  402bd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  402bda:	b21b      	sxth	r3, r3
  402bdc:	4a3a      	ldr	r2, [pc, #232]	; (402cc8 <chk_mounted+0x2f0>)
  402bde:	4293      	cmp	r3, r2
  402be0:	d14b      	bne.n	402c7a <chk_mounted+0x2a2>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402be2:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  402be6:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  402bea:	041b      	lsls	r3, r3, #16
  402bec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402bf0:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
  402bf4:	4313      	orrs	r3, r2
  402bf6:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  402bfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  402bfe:	4a33      	ldr	r2, [pc, #204]	; (402ccc <chk_mounted+0x2f4>)
  402c00:	4293      	cmp	r3, r2
  402c02:	d13c      	bne.n	402c7e <chk_mounted+0x2a6>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  402c04:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  402c08:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  402c0c:	041b      	lsls	r3, r3, #16
  402c0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402c12:	f895 2214 	ldrb.w	r2, [r5, #532]	; 0x214
  402c16:	4313      	orrs	r3, r2
  402c18:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  402c1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402c20:	4a2b      	ldr	r2, [pc, #172]	; (402cd0 <chk_mounted+0x2f8>)
  402c22:	4293      	cmp	r3, r2
  402c24:	d12d      	bne.n	402c82 <chk_mounted+0x2aa>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  402c26:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  402c2a:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  402c2e:	041b      	lsls	r3, r3, #16
  402c30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402c34:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  402c38:	4313      	orrs	r3, r2
  402c3a:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  402c3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402c42:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  402c44:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  402c48:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  402c4c:	041b      	lsls	r3, r3, #16
  402c4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402c52:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  402c56:	4313      	orrs	r3, r2
  402c58:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  402c5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402c60:	612b      	str	r3, [r5, #16]
  402c62:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  402c64:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  402c66:	4a1b      	ldr	r2, [pc, #108]	; (402cd4 <chk_mounted+0x2fc>)
  402c68:	8813      	ldrh	r3, [r2, #0]
  402c6a:	3301      	adds	r3, #1
  402c6c:	b29b      	uxth	r3, r3
  402c6e:	8013      	strh	r3, [r2, #0]
  402c70:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  402c72:	2000      	movs	r0, #0
  402c74:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  402c76:	7128      	strb	r0, [r5, #4]
	return FR_OK;
  402c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c7a:	2603      	movs	r6, #3
  402c7c:	e7f2      	b.n	402c64 <chk_mounted+0x28c>
  402c7e:	2603      	movs	r6, #3
  402c80:	e7f0      	b.n	402c64 <chk_mounted+0x28c>
  402c82:	2603      	movs	r6, #3
  402c84:	e7ee      	b.n	402c64 <chk_mounted+0x28c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402c86:	200c      	movs	r0, #12
  402c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  402c8a:	2000      	movs	r0, #0
  402c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  402c8e:	2001      	movs	r0, #1
  402c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  402c92:	200d      	movs	r0, #13
  402c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402c96:	200d      	movs	r0, #13
  402c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  402c9a:	200d      	movs	r0, #13
  402c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  402c9e:	200d      	movs	r0, #13
  402ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402ca2:	200d      	movs	r0, #13
  402ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  402ca6:	200d      	movs	r0, #13
  402ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402caa:	200d      	movs	r0, #13
  402cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  402cae:	200d      	movs	r0, #13
  402cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  402cb2:	200d      	movs	r0, #13
  402cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cb6:	bf00      	nop
  402cb8:	20400a98 	.word	0x20400a98
  402cbc:	004026f9 	.word	0x004026f9
  402cc0:	004026b9 	.word	0x004026b9
  402cc4:	00402949 	.word	0x00402949
  402cc8:	ffffaa55 	.word	0xffffaa55
  402ccc:	41615252 	.word	0x41615252
  402cd0:	61417272 	.word	0x61417272
  402cd4:	20400ab8 	.word	0x20400ab8
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402cd8:	3302      	adds	r3, #2
  402cda:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402cdc:	4420      	add	r0, r4
  402cde:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402ce0:	4427      	add	r7, r4
  402ce2:	622f      	str	r7, [r5, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402ce4:	2900      	cmp	r1, #0
  402ce6:	d1e0      	bne.n	402caa <chk_mounted+0x2d2>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  402ce8:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  402cec:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
  402cf0:	0409      	lsls	r1, r1, #16
  402cf2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  402cf6:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
  402cfa:	4301      	orrs	r1, r0
  402cfc:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  402d00:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  402d04:	6269      	str	r1, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  402d06:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402d08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  402d0c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  402d10:	d3c9      	bcc.n	402ca6 <chk_mounted+0x2ce>
	fs->free_clust = 0xFFFFFFFF;
  402d12:	f04f 33ff 	mov.w	r3, #4294967295
  402d16:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  402d18:	2300      	movs	r3, #0
  402d1a:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
  402d1c:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  402d1e:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
  402d22:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
  402d26:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  402d2a:	4422      	add	r2, r4
  402d2c:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  402d2e:	2301      	movs	r3, #1
  402d30:	f105 0130 	add.w	r1, r5, #48	; 0x30
  402d34:	7868      	ldrb	r0, [r5, #1]
  402d36:	4c03      	ldr	r4, [pc, #12]	; (402d44 <chk_mounted+0x36c>)
  402d38:	47a0      	blx	r4
  402d3a:	2800      	cmp	r0, #0
  402d3c:	f43f af47 	beq.w	402bce <chk_mounted+0x1f6>
  402d40:	2603      	movs	r6, #3
  402d42:	e78f      	b.n	402c64 <chk_mounted+0x28c>
  402d44:	00402715 	.word	0x00402715

00402d48 <move_window>:
{
  402d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  402d4c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  402d4e:	428f      	cmp	r7, r1
  402d50:	d035      	beq.n	402dbe <move_window+0x76>
  402d52:	460e      	mov	r6, r1
  402d54:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  402d56:	7903      	ldrb	r3, [r0, #4]
  402d58:	b91b      	cbnz	r3, 402d62 <move_window+0x1a>
		if (sector) {
  402d5a:	bb2e      	cbnz	r6, 402da8 <move_window+0x60>
	return FR_OK;
  402d5c:	2000      	movs	r0, #0
  402d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  402d62:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402d66:	2301      	movs	r3, #1
  402d68:	463a      	mov	r2, r7
  402d6a:	4641      	mov	r1, r8
  402d6c:	7840      	ldrb	r0, [r0, #1]
  402d6e:	4d18      	ldr	r5, [pc, #96]	; (402dd0 <move_window+0x88>)
  402d70:	47a8      	blx	r5
  402d72:	bb38      	cbnz	r0, 402dc4 <move_window+0x7c>
			fs->wflag = 0;
  402d74:	2300      	movs	r3, #0
  402d76:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  402d78:	6a23      	ldr	r3, [r4, #32]
  402d7a:	69e2      	ldr	r2, [r4, #28]
  402d7c:	4413      	add	r3, r2
  402d7e:	429f      	cmp	r7, r3
  402d80:	d2eb      	bcs.n	402d5a <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402d82:	78e5      	ldrb	r5, [r4, #3]
  402d84:	2d01      	cmp	r5, #1
  402d86:	d9e8      	bls.n	402d5a <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  402d88:	f04f 0a01 	mov.w	sl, #1
  402d8c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 402dd0 <move_window+0x88>
					wsect += fs->fsize;
  402d90:	69e3      	ldr	r3, [r4, #28]
  402d92:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  402d94:	4653      	mov	r3, sl
  402d96:	463a      	mov	r2, r7
  402d98:	4641      	mov	r1, r8
  402d9a:	7860      	ldrb	r0, [r4, #1]
  402d9c:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402d9e:	3d01      	subs	r5, #1
  402da0:	b2ed      	uxtb	r5, r5
  402da2:	2d01      	cmp	r5, #1
  402da4:	d1f4      	bne.n	402d90 <move_window+0x48>
  402da6:	e7d8      	b.n	402d5a <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  402da8:	2301      	movs	r3, #1
  402daa:	4632      	mov	r2, r6
  402dac:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402db0:	7860      	ldrb	r0, [r4, #1]
  402db2:	4d08      	ldr	r5, [pc, #32]	; (402dd4 <move_window+0x8c>)
  402db4:	47a8      	blx	r5
  402db6:	b940      	cbnz	r0, 402dca <move_window+0x82>
			fs->winsect = sector;
  402db8:	62e6      	str	r6, [r4, #44]	; 0x2c
  402dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  402dbe:	2000      	movs	r0, #0
  402dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  402dc4:	2001      	movs	r0, #1
  402dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  402dca:	2001      	movs	r0, #1
}
  402dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402dd0:	00402785 	.word	0x00402785
  402dd4:	00402715 	.word	0x00402715

00402dd8 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402dd8:	2901      	cmp	r1, #1
  402dda:	d96a      	bls.n	402eb2 <get_fat+0xda>
{
  402ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402dde:	6983      	ldr	r3, [r0, #24]
  402de0:	4299      	cmp	r1, r3
  402de2:	d268      	bcs.n	402eb6 <get_fat+0xde>
  402de4:	460c      	mov	r4, r1
  402de6:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  402de8:	7803      	ldrb	r3, [r0, #0]
  402dea:	2b02      	cmp	r3, #2
  402dec:	d02f      	beq.n	402e4e <get_fat+0x76>
  402dee:	2b03      	cmp	r3, #3
  402df0:	d041      	beq.n	402e76 <get_fat+0x9e>
  402df2:	2b01      	cmp	r3, #1
  402df4:	d002      	beq.n	402dfc <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402df6:	f04f 30ff 	mov.w	r0, #4294967295
  402dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  402dfc:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402e00:	6a01      	ldr	r1, [r0, #32]
  402e02:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402e06:	4b2d      	ldr	r3, [pc, #180]	; (402ebc <get_fat+0xe4>)
  402e08:	4798      	blx	r3
  402e0a:	b110      	cbz	r0, 402e12 <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402e0c:	f04f 30ff 	mov.w	r0, #4294967295
  402e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  402e12:	f3c7 0308 	ubfx	r3, r7, #0, #9
  402e16:	4433      	add	r3, r6
  402e18:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  402e1c:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402e1e:	6a31      	ldr	r1, [r6, #32]
  402e20:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402e24:	4630      	mov	r0, r6
  402e26:	4b25      	ldr	r3, [pc, #148]	; (402ebc <get_fat+0xe4>)
  402e28:	4798      	blx	r3
  402e2a:	b110      	cbz	r0, 402e32 <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402e2c:	f04f 30ff 	mov.w	r0, #4294967295
  402e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  402e32:	f3c7 0708 	ubfx	r7, r7, #0, #9
  402e36:	19f0      	adds	r0, r6, r7
  402e38:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402e3c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  402e40:	f014 0f01 	tst.w	r4, #1
  402e44:	bf14      	ite	ne
  402e46:	0900      	lsrne	r0, r0, #4
  402e48:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  402e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  402e4e:	6a01      	ldr	r1, [r0, #32]
  402e50:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402e54:	4b19      	ldr	r3, [pc, #100]	; (402ebc <get_fat+0xe4>)
  402e56:	4798      	blx	r3
  402e58:	b110      	cbz	r0, 402e60 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402e5a:	f04f 30ff 	mov.w	r0, #4294967295
  402e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  402e60:	0060      	lsls	r0, r4, #1
  402e62:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  402e66:	4430      	add	r0, r6
  402e68:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  402e6c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402e70:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  402e76:	6a01      	ldr	r1, [r0, #32]
  402e78:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402e7c:	4b0f      	ldr	r3, [pc, #60]	; (402ebc <get_fat+0xe4>)
  402e7e:	4798      	blx	r3
  402e80:	b110      	cbz	r0, 402e88 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402e82:	f04f 30ff 	mov.w	r0, #4294967295
}
  402e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  402e88:	00a0      	lsls	r0, r4, #2
  402e8a:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  402e8e:	f100 0230 	add.w	r2, r0, #48	; 0x30
  402e92:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  402e94:	78d1      	ldrb	r1, [r2, #3]
  402e96:	7893      	ldrb	r3, [r2, #2]
  402e98:	041b      	lsls	r3, r3, #16
  402e9a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  402e9e:	4430      	add	r0, r6
  402ea0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402ea4:	4318      	orrs	r0, r3
  402ea6:	7853      	ldrb	r3, [r2, #1]
  402ea8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402eac:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  402eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  402eb2:	2001      	movs	r0, #1
  402eb4:	4770      	bx	lr
  402eb6:	2001      	movs	r0, #1
  402eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402eba:	bf00      	nop
  402ebc:	00402d49 	.word	0x00402d49

00402ec0 <dir_sdi>:
{
  402ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ec2:	4605      	mov	r5, r0
  402ec4:	460c      	mov	r4, r1
	dj->index = idx;
  402ec6:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  402ec8:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  402eca:	2901      	cmp	r1, #1
  402ecc:	d03d      	beq.n	402f4a <dir_sdi+0x8a>
  402ece:	6803      	ldr	r3, [r0, #0]
  402ed0:	699a      	ldr	r2, [r3, #24]
  402ed2:	4291      	cmp	r1, r2
  402ed4:	d301      	bcc.n	402eda <dir_sdi+0x1a>
		return FR_INT_ERR;
  402ed6:	2002      	movs	r0, #2
  402ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  402eda:	b961      	cbnz	r1, 402ef6 <dir_sdi+0x36>
  402edc:	781a      	ldrb	r2, [r3, #0]
  402ede:	2a03      	cmp	r2, #3
  402ee0:	d006      	beq.n	402ef0 <dir_sdi+0x30>
		dj->clust = clst;
  402ee2:	2200      	movs	r2, #0
  402ee4:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  402ee6:	891a      	ldrh	r2, [r3, #8]
  402ee8:	42a2      	cmp	r2, r4
  402eea:	d821      	bhi.n	402f30 <dir_sdi+0x70>
			return FR_INT_ERR;
  402eec:	2002      	movs	r0, #2
  402eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  402ef0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  402ef2:	2900      	cmp	r1, #0
  402ef4:	d0f5      	beq.n	402ee2 <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  402ef6:	789e      	ldrb	r6, [r3, #2]
  402ef8:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  402efa:	42b4      	cmp	r4, r6
  402efc:	d310      	bcc.n	402f20 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  402efe:	4f17      	ldr	r7, [pc, #92]	; (402f5c <dir_sdi+0x9c>)
  402f00:	6828      	ldr	r0, [r5, #0]
  402f02:	47b8      	blx	r7
  402f04:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402f06:	f1b0 3fff 	cmp.w	r0, #4294967295
  402f0a:	d020      	beq.n	402f4e <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  402f0c:	2801      	cmp	r0, #1
  402f0e:	d920      	bls.n	402f52 <dir_sdi+0x92>
  402f10:	682b      	ldr	r3, [r5, #0]
  402f12:	699b      	ldr	r3, [r3, #24]
  402f14:	4298      	cmp	r0, r3
  402f16:	d21e      	bcs.n	402f56 <dir_sdi+0x96>
			idx -= ic;
  402f18:	1ba4      	subs	r4, r4, r6
  402f1a:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  402f1c:	42a6      	cmp	r6, r4
  402f1e:	d9ef      	bls.n	402f00 <dir_sdi+0x40>
		dj->clust = clst;
  402f20:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402f22:	6828      	ldr	r0, [r5, #0]
  402f24:	4b0e      	ldr	r3, [pc, #56]	; (402f60 <dir_sdi+0xa0>)
  402f26:	4798      	blx	r3
  402f28:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  402f2c:	6128      	str	r0, [r5, #16]
  402f2e:	e003      	b.n	402f38 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402f32:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  402f36:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  402f38:	682b      	ldr	r3, [r5, #0]
  402f3a:	3330      	adds	r3, #48	; 0x30
  402f3c:	f004 040f 	and.w	r4, r4, #15
  402f40:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  402f44:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  402f46:	2000      	movs	r0, #0
  402f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  402f4a:	2002      	movs	r0, #2
  402f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402f4e:	2001      	movs	r0, #1
  402f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  402f52:	2002      	movs	r0, #2
  402f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f56:	2002      	movs	r0, #2
}
  402f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f5a:	bf00      	nop
  402f5c:	00402dd9 	.word	0x00402dd9
  402f60:	004028df 	.word	0x004028df

00402f64 <put_fat>:
{
  402f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402f68:	2901      	cmp	r1, #1
  402f6a:	f240 808f 	bls.w	40308c <put_fat+0x128>
  402f6e:	6983      	ldr	r3, [r0, #24]
  402f70:	4299      	cmp	r1, r3
  402f72:	d301      	bcc.n	402f78 <put_fat+0x14>
		res = FR_INT_ERR;
  402f74:	2702      	movs	r7, #2
	return res;
  402f76:	e08a      	b.n	40308e <put_fat+0x12a>
  402f78:	4615      	mov	r5, r2
  402f7a:	460c      	mov	r4, r1
  402f7c:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  402f7e:	7803      	ldrb	r3, [r0, #0]
  402f80:	2b02      	cmp	r3, #2
  402f82:	d04e      	beq.n	403022 <put_fat+0xbe>
  402f84:	2b03      	cmp	r3, #3
  402f86:	d05f      	beq.n	403048 <put_fat+0xe4>
  402f88:	2b01      	cmp	r3, #1
  402f8a:	d003      	beq.n	402f94 <put_fat+0x30>
			res = FR_INT_ERR;
  402f8c:	2702      	movs	r7, #2
		fs->wflag = 1;
  402f8e:	2301      	movs	r3, #1
  402f90:	7133      	strb	r3, [r6, #4]
  402f92:	e07c      	b.n	40308e <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  402f94:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402f98:	6a01      	ldr	r1, [r0, #32]
  402f9a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402f9e:	4b3d      	ldr	r3, [pc, #244]	; (403094 <put_fat+0x130>)
  402fa0:	4798      	blx	r3
			if (res != FR_OK) break;
  402fa2:	4607      	mov	r7, r0
  402fa4:	2800      	cmp	r0, #0
  402fa6:	d1f2      	bne.n	402f8e <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  402fa8:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402fac:	f014 0f01 	tst.w	r4, #1
  402fb0:	d01c      	beq.n	402fec <put_fat+0x88>
  402fb2:	4433      	add	r3, r6
  402fb4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  402fb8:	f002 020f 	and.w	r2, r2, #15
  402fbc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  402fc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  402fc4:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402fc8:	2301      	movs	r3, #1
  402fca:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402fcc:	6a31      	ldr	r1, [r6, #32]
  402fce:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402fd2:	4630      	mov	r0, r6
  402fd4:	4b2f      	ldr	r3, [pc, #188]	; (403094 <put_fat+0x130>)
  402fd6:	4798      	blx	r3
			if (res != FR_OK) break;
  402fd8:	2800      	cmp	r0, #0
  402fda:	d153      	bne.n	403084 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  402fdc:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402fe0:	f3c5 1207 	ubfx	r2, r5, #4, #8
  402fe4:	44b0      	add	r8, r6
  402fe6:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  402fea:	e7d0      	b.n	402f8e <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402fec:	4433      	add	r3, r6
  402fee:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  402ff2:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402ff6:	2301      	movs	r3, #1
  402ff8:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402ffa:	6a31      	ldr	r1, [r6, #32]
  402ffc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  403000:	4630      	mov	r0, r6
  403002:	4b24      	ldr	r3, [pc, #144]	; (403094 <put_fat+0x130>)
  403004:	4798      	blx	r3
			if (res != FR_OK) break;
  403006:	2800      	cmp	r0, #0
  403008:	d13e      	bne.n	403088 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  40300a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40300e:	eb06 0308 	add.w	r3, r6, r8
  403012:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  403016:	f023 030f 	bic.w	r3, r3, #15
  40301a:	f3c5 2203 	ubfx	r2, r5, #8, #4
  40301e:	431a      	orrs	r2, r3
  403020:	e7e0      	b.n	402fe4 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  403022:	6a01      	ldr	r1, [r0, #32]
  403024:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  403028:	4b1a      	ldr	r3, [pc, #104]	; (403094 <put_fat+0x130>)
  40302a:	4798      	blx	r3
			if (res != FR_OK) break;
  40302c:	4607      	mov	r7, r0
  40302e:	2800      	cmp	r0, #0
  403030:	d1ad      	bne.n	402f8e <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  403032:	0063      	lsls	r3, r4, #1
  403034:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  403038:	4433      	add	r3, r6
  40303a:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  40303e:	f3c5 2207 	ubfx	r2, r5, #8, #8
  403042:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  403046:	e7a2      	b.n	402f8e <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  403048:	6a01      	ldr	r1, [r0, #32]
  40304a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  40304e:	4b11      	ldr	r3, [pc, #68]	; (403094 <put_fat+0x130>)
  403050:	4798      	blx	r3
			if (res != FR_OK) break;
  403052:	4607      	mov	r7, r0
  403054:	2800      	cmp	r0, #0
  403056:	d19a      	bne.n	402f8e <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  403058:	00a1      	lsls	r1, r4, #2
  40305a:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  40305e:	f101 0330 	add.w	r3, r1, #48	; 0x30
  403062:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  403064:	78da      	ldrb	r2, [r3, #3]
  403066:	0612      	lsls	r2, r2, #24
  403068:	4431      	add	r1, r6
  40306a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  40306e:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  403070:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  403074:	f3c2 2107 	ubfx	r1, r2, #8, #8
  403078:	7059      	strb	r1, [r3, #1]
  40307a:	0c11      	lsrs	r1, r2, #16
  40307c:	7099      	strb	r1, [r3, #2]
  40307e:	0e12      	lsrs	r2, r2, #24
  403080:	70da      	strb	r2, [r3, #3]
			break;
  403082:	e784      	b.n	402f8e <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  403084:	4607      	mov	r7, r0
  403086:	e782      	b.n	402f8e <put_fat+0x2a>
  403088:	4607      	mov	r7, r0
  40308a:	e780      	b.n	402f8e <put_fat+0x2a>
		res = FR_INT_ERR;
  40308c:	2702      	movs	r7, #2
}
  40308e:	4638      	mov	r0, r7
  403090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403094:	00402d49 	.word	0x00402d49

00403098 <create_chain>:
{
  403098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40309c:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  40309e:	4688      	mov	r8, r1
  4030a0:	b941      	cbnz	r1, 4030b4 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  4030a2:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4030a4:	b186      	cbz	r6, 4030c8 <create_chain+0x30>
  4030a6:	6983      	ldr	r3, [r0, #24]
  4030a8:	429e      	cmp	r6, r3
  4030aa:	bf28      	it	cs
  4030ac:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  4030ae:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4030b0:	4f27      	ldr	r7, [pc, #156]	; (403150 <create_chain+0xb8>)
  4030b2:	e017      	b.n	4030e4 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  4030b4:	4b26      	ldr	r3, [pc, #152]	; (403150 <create_chain+0xb8>)
  4030b6:	4798      	blx	r3
  4030b8:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4030ba:	2801      	cmp	r0, #1
  4030bc:	d93e      	bls.n	40313c <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  4030be:	69aa      	ldr	r2, [r5, #24]
  4030c0:	4290      	cmp	r0, r2
  4030c2:	d340      	bcc.n	403146 <create_chain+0xae>
		scl = clst;
  4030c4:	4646      	mov	r6, r8
  4030c6:	e7f2      	b.n	4030ae <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4030c8:	2601      	movs	r6, #1
  4030ca:	e7f0      	b.n	4030ae <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4030cc:	4621      	mov	r1, r4
  4030ce:	4628      	mov	r0, r5
  4030d0:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  4030d2:	4603      	mov	r3, r0
  4030d4:	b170      	cbz	r0, 4030f4 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  4030d6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4030da:	d034      	beq.n	403146 <create_chain+0xae>
  4030dc:	2801      	cmp	r0, #1
  4030de:	d032      	beq.n	403146 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4030e0:	42b4      	cmp	r4, r6
  4030e2:	d02f      	beq.n	403144 <create_chain+0xac>
		ncl++;							/* Next cluster */
  4030e4:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  4030e6:	69ab      	ldr	r3, [r5, #24]
  4030e8:	429c      	cmp	r4, r3
  4030ea:	d3ef      	bcc.n	4030cc <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  4030ec:	2e01      	cmp	r6, #1
  4030ee:	d927      	bls.n	403140 <create_chain+0xa8>
			ncl = 2;
  4030f0:	2402      	movs	r4, #2
  4030f2:	e7eb      	b.n	4030cc <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  4030f4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  4030f8:	4621      	mov	r1, r4
  4030fa:	4628      	mov	r0, r5
  4030fc:	4b15      	ldr	r3, [pc, #84]	; (403154 <create_chain+0xbc>)
  4030fe:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  403100:	4603      	mov	r3, r0
  403102:	b910      	cbnz	r0, 40310a <create_chain+0x72>
  403104:	f1b8 0f00 	cmp.w	r8, #0
  403108:	d10b      	bne.n	403122 <create_chain+0x8a>
	if (res == FR_OK) {
  40310a:	b98b      	cbnz	r3, 403130 <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
  40310c:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  40310e:	692b      	ldr	r3, [r5, #16]
  403110:	f1b3 3fff 	cmp.w	r3, #4294967295
  403114:	d01a      	beq.n	40314c <create_chain+0xb4>
			fs->free_clust--;
  403116:	3b01      	subs	r3, #1
  403118:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  40311a:	2301      	movs	r3, #1
  40311c:	716b      	strb	r3, [r5, #5]
  40311e:	4623      	mov	r3, r4
  403120:	e011      	b.n	403146 <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  403122:	4622      	mov	r2, r4
  403124:	4641      	mov	r1, r8
  403126:	4628      	mov	r0, r5
  403128:	4b0a      	ldr	r3, [pc, #40]	; (403154 <create_chain+0xbc>)
  40312a:	4798      	blx	r3
  40312c:	4603      	mov	r3, r0
  40312e:	e7ec      	b.n	40310a <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  403130:	2b01      	cmp	r3, #1
  403132:	bf0c      	ite	eq
  403134:	f04f 33ff 	moveq.w	r3, #4294967295
  403138:	2301      	movne	r3, #1
  40313a:	e004      	b.n	403146 <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40313c:	2301      	movs	r3, #1
  40313e:	e002      	b.n	403146 <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  403140:	2300      	movs	r3, #0
  403142:	e000      	b.n	403146 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  403144:	2300      	movs	r3, #0
}
  403146:	4618      	mov	r0, r3
  403148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40314c:	4623      	mov	r3, r4
  40314e:	e7fa      	b.n	403146 <create_chain+0xae>
  403150:	00402dd9 	.word	0x00402dd9
  403154:	00402f65 	.word	0x00402f65

00403158 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  403158:	2901      	cmp	r1, #1
  40315a:	d92e      	bls.n	4031ba <remove_chain+0x62>
{
  40315c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403160:	4604      	mov	r4, r0
  403162:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  403164:	6983      	ldr	r3, [r0, #24]
  403166:	4299      	cmp	r1, r3
  403168:	d303      	bcc.n	403172 <remove_chain+0x1a>
		res = FR_INT_ERR;
  40316a:	2202      	movs	r2, #2
}
  40316c:	4610      	mov	r0, r2
  40316e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  403172:	4f16      	ldr	r7, [pc, #88]	; (4031cc <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  403174:	f04f 0900 	mov.w	r9, #0
  403178:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4031d0 <remove_chain+0x78>
  40317c:	e003      	b.n	403186 <remove_chain+0x2e>
  40317e:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  403180:	69a3      	ldr	r3, [r4, #24]
  403182:	42ab      	cmp	r3, r5
  403184:	d9f2      	bls.n	40316c <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  403186:	4631      	mov	r1, r6
  403188:	4620      	mov	r0, r4
  40318a:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  40318c:	4605      	mov	r5, r0
  40318e:	b1b8      	cbz	r0, 4031c0 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  403190:	2801      	cmp	r0, #1
  403192:	d017      	beq.n	4031c4 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  403194:	f1b0 3fff 	cmp.w	r0, #4294967295
  403198:	d016      	beq.n	4031c8 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40319a:	464a      	mov	r2, r9
  40319c:	4631      	mov	r1, r6
  40319e:	4620      	mov	r0, r4
  4031a0:	47c0      	blx	r8
			if (res != FR_OK) break;
  4031a2:	4602      	mov	r2, r0
  4031a4:	2800      	cmp	r0, #0
  4031a6:	d1e1      	bne.n	40316c <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  4031a8:	6923      	ldr	r3, [r4, #16]
  4031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4031ae:	d0e6      	beq.n	40317e <remove_chain+0x26>
				fs->free_clust++;
  4031b0:	3301      	adds	r3, #1
  4031b2:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  4031b4:	2301      	movs	r3, #1
  4031b6:	7163      	strb	r3, [r4, #5]
  4031b8:	e7e1      	b.n	40317e <remove_chain+0x26>
		res = FR_INT_ERR;
  4031ba:	2202      	movs	r2, #2
}
  4031bc:	4610      	mov	r0, r2
  4031be:	4770      	bx	lr
  4031c0:	2200      	movs	r2, #0
  4031c2:	e7d3      	b.n	40316c <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4031c4:	2202      	movs	r2, #2
  4031c6:	e7d1      	b.n	40316c <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4031c8:	2201      	movs	r2, #1
  4031ca:	e7cf      	b.n	40316c <remove_chain+0x14>
  4031cc:	00402dd9 	.word	0x00402dd9
  4031d0:	00402f65 	.word	0x00402f65

004031d4 <dir_next>:
{
  4031d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  4031d8:	88c4      	ldrh	r4, [r0, #6]
  4031da:	3401      	adds	r4, #1
  4031dc:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4031de:	b914      	cbnz	r4, 4031e6 <dir_next+0x12>
		return FR_NO_FILE;
  4031e0:	2004      	movs	r0, #4
  4031e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4031e6:	6903      	ldr	r3, [r0, #16]
  4031e8:	b913      	cbnz	r3, 4031f0 <dir_next+0x1c>
		return FR_NO_FILE;
  4031ea:	2004      	movs	r0, #4
  4031ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031f0:	460e      	mov	r6, r1
  4031f2:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  4031f4:	f014 070f 	ands.w	r7, r4, #15
  4031f8:	d110      	bne.n	40321c <dir_next+0x48>
		dj->sect++;					/* Next sector */
  4031fa:	3301      	adds	r3, #1
  4031fc:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  4031fe:	68c1      	ldr	r1, [r0, #12]
  403200:	b931      	cbnz	r1, 403210 <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  403202:	6803      	ldr	r3, [r0, #0]
  403204:	891b      	ldrh	r3, [r3, #8]
  403206:	42a3      	cmp	r3, r4
  403208:	d808      	bhi.n	40321c <dir_next+0x48>
				return FR_NO_FILE;
  40320a:	2004      	movs	r0, #4
  40320c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  403210:	6800      	ldr	r0, [r0, #0]
  403212:	7883      	ldrb	r3, [r0, #2]
  403214:	3b01      	subs	r3, #1
  403216:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  40321a:	d008      	beq.n	40322e <dir_next+0x5a>
	dj->index = i;
  40321c:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  40321e:	682b      	ldr	r3, [r5, #0]
  403220:	3330      	adds	r3, #48	; 0x30
  403222:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  403226:	616b      	str	r3, [r5, #20]
	return FR_OK;
  403228:	2000      	movs	r0, #0
  40322a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  40322e:	4b32      	ldr	r3, [pc, #200]	; (4032f8 <dir_next+0x124>)
  403230:	4798      	blx	r3
  403232:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  403234:	2801      	cmp	r0, #1
  403236:	d94d      	bls.n	4032d4 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  403238:	f1b0 3fff 	cmp.w	r0, #4294967295
  40323c:	d04d      	beq.n	4032da <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  40323e:	6828      	ldr	r0, [r5, #0]
  403240:	6983      	ldr	r3, [r0, #24]
  403242:	4598      	cmp	r8, r3
  403244:	d33e      	bcc.n	4032c4 <dir_next+0xf0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  403246:	b916      	cbnz	r6, 40324e <dir_next+0x7a>
  403248:	2004      	movs	r0, #4
  40324a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  40324e:	68e9      	ldr	r1, [r5, #12]
  403250:	4b2a      	ldr	r3, [pc, #168]	; (4032fc <dir_next+0x128>)
  403252:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  403254:	4680      	mov	r8, r0
  403256:	b910      	cbnz	r0, 40325e <dir_next+0x8a>
  403258:	2007      	movs	r0, #7
  40325a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  40325e:	2801      	cmp	r0, #1
  403260:	d03e      	beq.n	4032e0 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  403262:	f1b0 3fff 	cmp.w	r0, #4294967295
  403266:	d03e      	beq.n	4032e6 <dir_next+0x112>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  403268:	2100      	movs	r1, #0
  40326a:	6828      	ldr	r0, [r5, #0]
  40326c:	4b24      	ldr	r3, [pc, #144]	; (403300 <dir_next+0x12c>)
  40326e:	4798      	blx	r3
  403270:	2800      	cmp	r0, #0
  403272:	d13b      	bne.n	4032ec <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  403274:	6828      	ldr	r0, [r5, #0]
  403276:	f44f 7200 	mov.w	r2, #512	; 0x200
  40327a:	2100      	movs	r1, #0
  40327c:	3030      	adds	r0, #48	; 0x30
  40327e:	4b21      	ldr	r3, [pc, #132]	; (403304 <dir_next+0x130>)
  403280:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  403282:	682e      	ldr	r6, [r5, #0]
  403284:	4641      	mov	r1, r8
  403286:	4630      	mov	r0, r6
  403288:	4b1f      	ldr	r3, [pc, #124]	; (403308 <dir_next+0x134>)
  40328a:	4798      	blx	r3
  40328c:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40328e:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  403290:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  403294:	46b2      	mov	sl, r6
  403296:	f8df 9068 	ldr.w	r9, [pc, #104]	; 403300 <dir_next+0x12c>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40329a:	682b      	ldr	r3, [r5, #0]
  40329c:	7899      	ldrb	r1, [r3, #2]
  40329e:	b2f2      	uxtb	r2, r6
  4032a0:	4291      	cmp	r1, r2
  4032a2:	d90b      	bls.n	4032bc <dir_next+0xe8>
						dj->fs->wflag = 1;
  4032a4:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4032a8:	4651      	mov	r1, sl
  4032aa:	6828      	ldr	r0, [r5, #0]
  4032ac:	47c8      	blx	r9
  4032ae:	3601      	adds	r6, #1
  4032b0:	b9f8      	cbnz	r0, 4032f2 <dir_next+0x11e>
						dj->fs->winsect++;
  4032b2:	682a      	ldr	r2, [r5, #0]
  4032b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4032b6:	3301      	adds	r3, #1
  4032b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  4032ba:	e7ee      	b.n	40329a <dir_next+0xc6>
					dj->fs->winsect -= c;						/* Rewind window address */
  4032bc:	4616      	mov	r6, r2
  4032be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4032c0:	1b96      	subs	r6, r2, r6
  4032c2:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  4032c4:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  4032c8:	4641      	mov	r1, r8
  4032ca:	6828      	ldr	r0, [r5, #0]
  4032cc:	4b0e      	ldr	r3, [pc, #56]	; (403308 <dir_next+0x134>)
  4032ce:	4798      	blx	r3
  4032d0:	6128      	str	r0, [r5, #16]
  4032d2:	e7a3      	b.n	40321c <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  4032d4:	2002      	movs	r0, #2
  4032d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4032da:	2001      	movs	r0, #1
  4032dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4032e0:	2002      	movs	r0, #2
  4032e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4032e6:	2001      	movs	r0, #1
  4032e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4032ec:	2001      	movs	r0, #1
  4032ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4032f2:	2001      	movs	r0, #1
}
  4032f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032f8:	00402dd9 	.word	0x00402dd9
  4032fc:	00403099 	.word	0x00403099
  403300:	00402d49 	.word	0x00402d49
  403304:	004028d1 	.word	0x004028d1
  403308:	004028df 	.word	0x004028df

0040330c <dir_find>:
{
  40330c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403310:	b085      	sub	sp, #20
  403312:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  403314:	2100      	movs	r1, #0
  403316:	4b61      	ldr	r3, [pc, #388]	; (40349c <dir_find+0x190>)
  403318:	4798      	blx	r3
	if (res != FR_OK) return res;
  40331a:	4680      	mov	r8, r0
  40331c:	bb08      	cbnz	r0, 403362 <dir_find+0x56>
  40331e:	f04f 0bff 	mov.w	fp, #255	; 0xff
  403322:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  403324:	4f5e      	ldr	r7, [pc, #376]	; (4034a0 <dir_find+0x194>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  403326:	46da      	mov	sl, fp
  403328:	e094      	b.n	403454 <dir_find+0x148>
			if (a == AM_LFN) {			/* An LFN entry is found */
  40332a:	2a0f      	cmp	r2, #15
  40332c:	d01d      	beq.n	40336a <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  40332e:	f1b9 0f00 	cmp.w	r9, #0
  403332:	d104      	bne.n	40333e <dir_find+0x32>
  403334:	4620      	mov	r0, r4
  403336:	4b5b      	ldr	r3, [pc, #364]	; (4034a4 <dir_find+0x198>)
  403338:	4798      	blx	r3
  40333a:	4582      	cmp	sl, r0
  40333c:	d011      	beq.n	403362 <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40333e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403342:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  403344:	69ab      	ldr	r3, [r5, #24]
  403346:	7ada      	ldrb	r2, [r3, #11]
  403348:	f012 0f01 	tst.w	r2, #1
  40334c:	d179      	bne.n	403442 <dir_find+0x136>
  40334e:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  403352:	f814 1b01 	ldrb.w	r1, [r4], #1
  403356:	f813 2b01 	ldrb.w	r2, [r3], #1
  40335a:	4291      	cmp	r1, r2
  40335c:	d16b      	bne.n	403436 <dir_find+0x12a>
  40335e:	4284      	cmp	r4, r0
  403360:	d1f7      	bne.n	403352 <dir_find+0x46>
}
  403362:	4640      	mov	r0, r8
  403364:	b005      	add	sp, #20
  403366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  40336a:	f8d5 801c 	ldr.w	r8, [r5, #28]
  40336e:	f1b8 0f00 	cmp.w	r8, #0
  403372:	d068      	beq.n	403446 <dir_find+0x13a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  403374:	f016 0f40 	tst.w	r6, #64	; 0x40
  403378:	d00c      	beq.n	403394 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  40337a:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  40337e:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  403382:	88eb      	ldrh	r3, [r5, #6]
  403384:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  403386:	f894 b00d 	ldrb.w	fp, [r4, #13]
  40338a:	45d3      	cmp	fp, sl
  40338c:	d007      	beq.n	40339e <dir_find+0x92>
  40338e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403392:	e058      	b.n	403446 <dir_find+0x13a>
  403394:	45b1      	cmp	r9, r6
  403396:	d0f6      	beq.n	403386 <dir_find+0x7a>
  403398:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40339c:	e053      	b.n	403446 <dir_find+0x13a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  40339e:	f894 a000 	ldrb.w	sl, [r4]
  4033a2:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  4033a6:	f10a 3aff 	add.w	sl, sl, #4294967295
  4033aa:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  4033ae:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  4033b2:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4034b0 <dir_find+0x1a4>
  4033b6:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  4033ba:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4033bc:	9603      	str	r6, [sp, #12]
  4033be:	f8cd b004 	str.w	fp, [sp, #4]
  4033c2:	461e      	mov	r6, r3
  4033c4:	9502      	str	r5, [sp, #8]
  4033c6:	e00f      	b.n	4033e8 <dir_find+0xdc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4033c8:	4618      	mov	r0, r3
  4033ca:	4b37      	ldr	r3, [pc, #220]	; (4034a8 <dir_find+0x19c>)
  4033cc:	4798      	blx	r3
  4033ce:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  4033d0:	2efe      	cmp	r6, #254	; 0xfe
  4033d2:	d85a      	bhi.n	40348a <dir_find+0x17e>
  4033d4:	1c75      	adds	r5, r6, #1
  4033d6:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  4033da:	4b33      	ldr	r3, [pc, #204]	; (4034a8 <dir_find+0x19c>)
  4033dc:	4798      	blx	r3
  4033de:	4583      	cmp	fp, r0
  4033e0:	d157      	bne.n	403492 <dir_find+0x186>
  4033e2:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  4033e4:	45d1      	cmp	r9, sl
  4033e6:	d013      	beq.n	403410 <dir_find+0x104>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4033e8:	f819 2b01 	ldrb.w	r2, [r9], #1
  4033ec:	18a3      	adds	r3, r4, r2
  4033ee:	7859      	ldrb	r1, [r3, #1]
  4033f0:	5ca3      	ldrb	r3, [r4, r2]
  4033f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  4033f6:	2800      	cmp	r0, #0
  4033f8:	d1e6      	bne.n	4033c8 <dir_find+0xbc>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4033fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4033fe:	4293      	cmp	r3, r2
  403400:	d0f0      	beq.n	4033e4 <dir_find+0xd8>
  403402:	f8dd b004 	ldr.w	fp, [sp, #4]
  403406:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  403408:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40340a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40340e:	e01a      	b.n	403446 <dir_find+0x13a>
  403410:	f8dd b004 	ldr.w	fp, [sp, #4]
  403414:	4632      	mov	r2, r6
  403416:	9e03      	ldr	r6, [sp, #12]
  403418:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  40341a:	7823      	ldrb	r3, [r4, #0]
  40341c:	f013 0f40 	tst.w	r3, #64	; 0x40
  403420:	d004      	beq.n	40342c <dir_find+0x120>
  403422:	b118      	cbz	r0, 40342c <dir_find+0x120>
  403424:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  403428:	2b00      	cmp	r3, #0
  40342a:	d1ed      	bne.n	403408 <dir_find+0xfc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40342c:	3e01      	subs	r6, #1
  40342e:	fa5f f986 	uxtb.w	r9, r6
  403432:	46da      	mov	sl, fp
  403434:	e007      	b.n	403446 <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  403436:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40343a:	e004      	b.n	403446 <dir_find+0x13a>
			ord = 0xFF;
  40343c:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403440:	e001      	b.n	403446 <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  403442:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  403446:	2100      	movs	r1, #0
  403448:	4628      	mov	r0, r5
  40344a:	4b18      	ldr	r3, [pc, #96]	; (4034ac <dir_find+0x1a0>)
  40344c:	4798      	blx	r3
	} while (res == FR_OK);
  40344e:	4680      	mov	r8, r0
  403450:	2800      	cmp	r0, #0
  403452:	d186      	bne.n	403362 <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  403454:	6929      	ldr	r1, [r5, #16]
  403456:	6828      	ldr	r0, [r5, #0]
  403458:	47b8      	blx	r7
		if (res != FR_OK) break;
  40345a:	4680      	mov	r8, r0
  40345c:	2800      	cmp	r0, #0
  40345e:	d180      	bne.n	403362 <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  403460:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  403462:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  403464:	b176      	cbz	r6, 403484 <dir_find+0x178>
		a = dir[DIR_Attr] & AM_MASK;
  403466:	7ae3      	ldrb	r3, [r4, #11]
  403468:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  40346c:	2ee5      	cmp	r6, #229	; 0xe5
  40346e:	d0e5      	beq.n	40343c <dir_find+0x130>
  403470:	f013 0f08 	tst.w	r3, #8
  403474:	f43f af59 	beq.w	40332a <dir_find+0x1e>
  403478:	2a0f      	cmp	r2, #15
  40347a:	f43f af56 	beq.w	40332a <dir_find+0x1e>
			ord = 0xFF;
  40347e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403482:	e7e0      	b.n	403446 <dir_find+0x13a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  403484:	f04f 0804 	mov.w	r8, #4
  403488:	e76b      	b.n	403362 <dir_find+0x56>
  40348a:	f8dd b004 	ldr.w	fp, [sp, #4]
  40348e:	9d02      	ldr	r5, [sp, #8]
  403490:	e7ba      	b.n	403408 <dir_find+0xfc>
  403492:	f8dd b004 	ldr.w	fp, [sp, #4]
  403496:	9d02      	ldr	r5, [sp, #8]
  403498:	e7b6      	b.n	403408 <dir_find+0xfc>
  40349a:	bf00      	nop
  40349c:	00402ec1 	.word	0x00402ec1
  4034a0:	00402d49 	.word	0x00402d49
  4034a4:	004028f7 	.word	0x004028f7
  4034a8:	00404095 	.word	0x00404095
  4034ac:	004031d5 	.word	0x004031d5
  4034b0:	00407924 	.word	0x00407924

004034b4 <dir_register>:
{
  4034b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034b8:	b089      	sub	sp, #36	; 0x24
  4034ba:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  4034bc:	6985      	ldr	r5, [r0, #24]
  4034be:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  4034c2:	220c      	movs	r2, #12
  4034c4:	4629      	mov	r1, r5
  4034c6:	a805      	add	r0, sp, #20
  4034c8:	4ba8      	ldr	r3, [pc, #672]	; (40376c <dir_register+0x2b8>)
  4034ca:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  4034cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4034d0:	f013 0f01 	tst.w	r3, #1
  4034d4:	d079      	beq.n	4035ca <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  4034d6:	2300      	movs	r3, #0
  4034d8:	72eb      	strb	r3, [r5, #11]
  4034da:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  4034dc:	220b      	movs	r2, #11
  4034de:	a905      	add	r1, sp, #20
  4034e0:	4628      	mov	r0, r5
  4034e2:	4ba2      	ldr	r3, [pc, #648]	; (40376c <dir_register+0x2b8>)
  4034e4:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  4034e6:	2701      	movs	r7, #1
  4034e8:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4034ea:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  4034ee:	f8df 929c 	ldr.w	r9, [pc, #668]	; 40378c <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  4034f2:	f8df a278 	ldr.w	sl, [pc, #632]	; 40376c <dir_register+0x2b8>
  4034f6:	e032      	b.n	40355e <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  4034f8:	463b      	mov	r3, r7
  4034fa:	e030      	b.n	40355e <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4034fc:	4613      	mov	r3, r2
  4034fe:	e002      	b.n	403506 <dir_register+0x52>
  403500:	2300      	movs	r3, #0
  403502:	e000      	b.n	403506 <dir_register+0x52>
  403504:	4613      	mov	r3, r2
  403506:	442b      	add	r3, r5
  403508:	e005      	b.n	403516 <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40350a:	4641      	mov	r1, r8
  40350c:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  403510:	1b59      	subs	r1, r3, r5
  403512:	2907      	cmp	r1, #7
  403514:	d807      	bhi.n	403526 <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  403516:	2a07      	cmp	r2, #7
  403518:	d8f7      	bhi.n	40350a <dir_register+0x56>
  40351a:	a908      	add	r1, sp, #32
  40351c:	4411      	add	r1, r2
  40351e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  403522:	3201      	adds	r2, #1
  403524:	e7f2      	b.n	40350c <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  403526:	4620      	mov	r0, r4
  403528:	47c8      	blx	r9
			if (res != FR_OK) break;
  40352a:	4606      	mov	r6, r0
  40352c:	2800      	cmp	r0, #0
  40352e:	d13e      	bne.n	4035ae <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  403530:	3701      	adds	r7, #1
  403532:	b2bf      	uxth	r7, r7
  403534:	2f64      	cmp	r7, #100	; 0x64
  403536:	d038      	beq.n	4035aa <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  403538:	220b      	movs	r2, #11
  40353a:	a905      	add	r1, sp, #20
  40353c:	4628      	mov	r0, r5
  40353e:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  403540:	2f05      	cmp	r7, #5
  403542:	d9d9      	bls.n	4034f8 <dir_register+0x44>
  403544:	463b      	mov	r3, r7
  403546:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  403548:	03da      	lsls	r2, r3, #15
  40354a:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  40354e:	f831 2b02 	ldrh.w	r2, [r1], #2
  403552:	fa12 f383 	uxtah	r3, r2, r3
  403556:	b29b      	uxth	r3, r3
  403558:	880a      	ldrh	r2, [r1, #0]
  40355a:	2a00      	cmp	r2, #0
  40355c:	d1f4      	bne.n	403548 <dir_register+0x94>
  40355e:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  403562:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  403564:	f003 000f 	and.w	r0, r3, #15
  403568:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  40356c:	2939      	cmp	r1, #57	; 0x39
  40356e:	bf88      	it	hi
  403570:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  403574:	3a01      	subs	r2, #1
  403576:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  40357a:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  40357e:	2b00      	cmp	r3, #0
  403580:	d1f0      	bne.n	403564 <dir_register+0xb0>
	ns[i] = '~';
  403582:	217e      	movs	r1, #126	; 0x7e
  403584:	ab08      	add	r3, sp, #32
  403586:	4413      	add	r3, r2
  403588:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  40358c:	2a00      	cmp	r2, #0
  40358e:	d0b5      	beq.n	4034fc <dir_register+0x48>
  403590:	782b      	ldrb	r3, [r5, #0]
  403592:	2b20      	cmp	r3, #32
  403594:	d0b4      	beq.n	403500 <dir_register+0x4c>
  403596:	4629      	mov	r1, r5
  403598:	2300      	movs	r3, #0
  40359a:	3301      	adds	r3, #1
  40359c:	429a      	cmp	r2, r3
  40359e:	d0b1      	beq.n	403504 <dir_register+0x50>
  4035a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  4035a4:	2820      	cmp	r0, #32
  4035a6:	d1f8      	bne.n	40359a <dir_register+0xe6>
  4035a8:	e7ad      	b.n	403506 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  4035aa:	2607      	movs	r6, #7
  4035ac:	e004      	b.n	4035b8 <dir_register+0x104>
  4035ae:	2f64      	cmp	r7, #100	; 0x64
  4035b0:	f000 80ac 	beq.w	40370c <dir_register+0x258>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  4035b4:	2804      	cmp	r0, #4
  4035b6:	d003      	beq.n	4035c0 <dir_register+0x10c>
}
  4035b8:	4630      	mov	r0, r6
  4035ba:	b009      	add	sp, #36	; 0x24
  4035bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  4035c0:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4035c4:	72eb      	strb	r3, [r5, #11]
  4035c6:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  4035ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4035ce:	f013 0f02 	tst.w	r3, #2
  4035d2:	d014      	beq.n	4035fe <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  4035d4:	f8bb 3000 	ldrh.w	r3, [fp]
  4035d8:	b17b      	cbz	r3, 4035fa <dir_register+0x146>
  4035da:	2300      	movs	r3, #0
  4035dc:	3301      	adds	r3, #1
  4035de:	b29b      	uxth	r3, r3
  4035e0:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  4035e4:	2a00      	cmp	r2, #0
  4035e6:	d1f9      	bne.n	4035dc <dir_register+0x128>
		ne = (ne + 25) / 13;
  4035e8:	3319      	adds	r3, #25
  4035ea:	4f61      	ldr	r7, [pc, #388]	; (403770 <dir_register+0x2bc>)
  4035ec:	fb87 2703 	smull	r2, r7, r7, r3
  4035f0:	17db      	asrs	r3, r3, #31
  4035f2:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  4035f6:	b2bf      	uxth	r7, r7
  4035f8:	e002      	b.n	403600 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  4035fa:	2300      	movs	r3, #0
  4035fc:	e7f4      	b.n	4035e8 <dir_register+0x134>
		ne = 1;
  4035fe:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  403600:	2100      	movs	r1, #0
  403602:	4620      	mov	r0, r4
  403604:	4b5b      	ldr	r3, [pc, #364]	; (403774 <dir_register+0x2c0>)
  403606:	4798      	blx	r3
	if (res != FR_OK) return res;
  403608:	4606      	mov	r6, r0
  40360a:	2800      	cmp	r0, #0
  40360c:	d1d4      	bne.n	4035b8 <dir_register+0x104>
  40360e:	f04f 0a00 	mov.w	sl, #0
  403612:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  403614:	f8df 8164 	ldr.w	r8, [pc, #356]	; 40377c <dir_register+0x2c8>
			n = 0;					/* Not a blank entry. Restart to search */
  403618:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  40361a:	f8df 915c 	ldr.w	r9, [pc, #348]	; 403778 <dir_register+0x2c4>
  40361e:	e00a      	b.n	403636 <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  403620:	1c6b      	adds	r3, r5, #1
  403622:	b29b      	uxth	r3, r3
  403624:	429f      	cmp	r7, r3
  403626:	d073      	beq.n	403710 <dir_register+0x25c>
  403628:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  40362a:	2101      	movs	r1, #1
  40362c:	4620      	mov	r0, r4
  40362e:	47c8      	blx	r9
	} while (res == FR_OK);
  403630:	4606      	mov	r6, r0
  403632:	2800      	cmp	r0, #0
  403634:	d1c0      	bne.n	4035b8 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  403636:	6921      	ldr	r1, [r4, #16]
  403638:	6820      	ldr	r0, [r4, #0]
  40363a:	47c0      	blx	r8
		if (res != FR_OK) break;
  40363c:	4606      	mov	r6, r0
  40363e:	2800      	cmp	r0, #0
  403640:	d1ba      	bne.n	4035b8 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  403642:	6963      	ldr	r3, [r4, #20]
  403644:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  403646:	2be5      	cmp	r3, #229	; 0xe5
  403648:	d000      	beq.n	40364c <dir_register+0x198>
  40364a:	b923      	cbnz	r3, 403656 <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  40364c:	2d00      	cmp	r5, #0
  40364e:	d1e7      	bne.n	403620 <dir_register+0x16c>
  403650:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  403654:	e7e4      	b.n	403620 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  403656:	465d      	mov	r5, fp
  403658:	e7e7      	b.n	40362a <dir_register+0x176>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40365a:	4671      	mov	r1, lr
  40365c:	e070      	b.n	403740 <dir_register+0x28c>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  40365e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  403662:	4293      	cmp	r3, r2
  403664:	d002      	beq.n	40366c <dir_register+0x1b8>
  403666:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  40366a:	b90b      	cbnz	r3, 403670 <dir_register+0x1bc>
  40366c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  403670:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  403674:	6823      	ldr	r3, [r4, #0]
  403676:	2201      	movs	r2, #1
  403678:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  40367a:	4639      	mov	r1, r7
  40367c:	4620      	mov	r0, r4
  40367e:	4b3e      	ldr	r3, [pc, #248]	; (403778 <dir_register+0x2c4>)
  403680:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  403682:	4606      	mov	r6, r0
  403684:	2800      	cmp	r0, #0
  403686:	d197      	bne.n	4035b8 <dir_register+0x104>
  403688:	3d01      	subs	r5, #1
  40368a:	b2ad      	uxth	r5, r5
  40368c:	b315      	cbz	r5, 4036d4 <dir_register+0x220>
				res = move_window(dj->fs, dj->sect);
  40368e:	6921      	ldr	r1, [r4, #16]
  403690:	6820      	ldr	r0, [r4, #0]
  403692:	4b3a      	ldr	r3, [pc, #232]	; (40377c <dir_register+0x2c8>)
  403694:	4798      	blx	r3
				if (res != FR_OK) break;
  403696:	4606      	mov	r6, r0
  403698:	2800      	cmp	r0, #0
  40369a:	d18d      	bne.n	4035b8 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  40369c:	f8d4 901c 	ldr.w	r9, [r4, #28]
  4036a0:	6960      	ldr	r0, [r4, #20]
  4036a2:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  4036a6:	f89d 3000 	ldrb.w	r3, [sp]
  4036aa:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4036ac:	230f      	movs	r3, #15
  4036ae:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  4036b0:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  4036b2:	7687      	strb	r7, [r0, #26]
  4036b4:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  4036b6:	f10b 31ff 	add.w	r1, fp, #4294967295
  4036ba:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  4036be:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  4036c2:	4a2f      	ldr	r2, [pc, #188]	; (403780 <dir_register+0x2cc>)
  4036c4:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  4036c8:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4036ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4036ce:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4036d2:	e038      	b.n	403746 <dir_register+0x292>
		res = move_window(dj->fs, dj->sect);
  4036d4:	6921      	ldr	r1, [r4, #16]
  4036d6:	6820      	ldr	r0, [r4, #0]
  4036d8:	4b28      	ldr	r3, [pc, #160]	; (40377c <dir_register+0x2c8>)
  4036da:	4798      	blx	r3
		if (res == FR_OK) {
  4036dc:	4606      	mov	r6, r0
  4036de:	2800      	cmp	r0, #0
  4036e0:	f47f af6a 	bne.w	4035b8 <dir_register+0x104>
			dir = dj->dir;
  4036e4:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  4036e6:	2220      	movs	r2, #32
  4036e8:	2100      	movs	r1, #0
  4036ea:	4628      	mov	r0, r5
  4036ec:	4b25      	ldr	r3, [pc, #148]	; (403784 <dir_register+0x2d0>)
  4036ee:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  4036f0:	220b      	movs	r2, #11
  4036f2:	69a1      	ldr	r1, [r4, #24]
  4036f4:	4628      	mov	r0, r5
  4036f6:	4b1d      	ldr	r3, [pc, #116]	; (40376c <dir_register+0x2b8>)
  4036f8:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  4036fa:	69a3      	ldr	r3, [r4, #24]
  4036fc:	7adb      	ldrb	r3, [r3, #11]
  4036fe:	f003 0318 	and.w	r3, r3, #24
  403702:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  403704:	6823      	ldr	r3, [r4, #0]
  403706:	2201      	movs	r2, #1
  403708:	711a      	strb	r2, [r3, #4]
  40370a:	e755      	b.n	4035b8 <dir_register+0x104>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40370c:	2607      	movs	r6, #7
  40370e:	e753      	b.n	4035b8 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  403710:	2b01      	cmp	r3, #1
  403712:	d9df      	bls.n	4036d4 <dir_register+0x220>
		res = dir_sdi(dj, is);
  403714:	4651      	mov	r1, sl
  403716:	4620      	mov	r0, r4
  403718:	4b16      	ldr	r3, [pc, #88]	; (403774 <dir_register+0x2c0>)
  40371a:	4798      	blx	r3
		if (res == FR_OK) {
  40371c:	4606      	mov	r6, r0
  40371e:	2800      	cmp	r0, #0
  403720:	f47f af4a 	bne.w	4035b8 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  403724:	69a0      	ldr	r0, [r4, #24]
  403726:	4b18      	ldr	r3, [pc, #96]	; (403788 <dir_register+0x2d4>)
  403728:	4798      	blx	r3
  40372a:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  40372c:	2700      	movs	r7, #0
	s = wc = 0;
  40372e:	9701      	str	r7, [sp, #4]
  403730:	e7ad      	b.n	40368e <dir_register+0x1da>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  403732:	f892 e000 	ldrb.w	lr, [r2]
  403736:	f800 a00e 	strb.w	sl, [r0, lr]
  40373a:	4486      	add	lr, r0
  40373c:	f88e a001 	strb.w	sl, [lr, #1]
  403740:	3201      	adds	r2, #1
	} while (++s < 13);
  403742:	4542      	cmp	r2, r8
  403744:	d08b      	beq.n	40365e <dir_register+0x1aa>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  403746:	42b3      	cmp	r3, r6
  403748:	d0f3      	beq.n	403732 <dir_register+0x27e>
  40374a:	f101 0e01 	add.w	lr, r1, #1
  40374e:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  403752:	7811      	ldrb	r1, [r2, #0]
  403754:	5443      	strb	r3, [r0, r1]
  403756:	4401      	add	r1, r0
  403758:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  40375c:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  403760:	2b00      	cmp	r3, #0
  403762:	f47f af7a 	bne.w	40365a <dir_register+0x1a6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  403766:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  403768:	4633      	mov	r3, r6
  40376a:	e7e9      	b.n	403740 <dir_register+0x28c>
  40376c:	004028bd 	.word	0x004028bd
  403770:	4ec4ec4f 	.word	0x4ec4ec4f
  403774:	00402ec1 	.word	0x00402ec1
  403778:	004031d5 	.word	0x004031d5
  40377c:	00402d49 	.word	0x00402d49
  403780:	00407924 	.word	0x00407924
  403784:	004028d1 	.word	0x004028d1
  403788:	004028f7 	.word	0x004028f7
  40378c:	0040330d 	.word	0x0040330d

00403790 <sync>:
{
  403790:	b570      	push	{r4, r5, r6, lr}
  403792:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  403794:	2100      	movs	r1, #0
  403796:	4b2d      	ldr	r3, [pc, #180]	; (40384c <sync+0xbc>)
  403798:	4798      	blx	r3
	if (res == FR_OK) {
  40379a:	4603      	mov	r3, r0
  40379c:	b950      	cbnz	r0, 4037b4 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  40379e:	7823      	ldrb	r3, [r4, #0]
  4037a0:	2b03      	cmp	r3, #3
  4037a2:	d009      	beq.n	4037b8 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  4037a4:	2200      	movs	r2, #0
  4037a6:	4611      	mov	r1, r2
  4037a8:	7860      	ldrb	r0, [r4, #1]
  4037aa:	4b29      	ldr	r3, [pc, #164]	; (403850 <sync+0xc0>)
  4037ac:	4798      	blx	r3
	res = move_window(fs, 0);
  4037ae:	1c03      	adds	r3, r0, #0
  4037b0:	bf18      	it	ne
  4037b2:	2301      	movne	r3, #1
}
  4037b4:	4618      	mov	r0, r3
  4037b6:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  4037b8:	7963      	ldrb	r3, [r4, #5]
  4037ba:	2b00      	cmp	r3, #0
  4037bc:	d0f2      	beq.n	4037a4 <sync+0x14>
			fs->winsect = 0;
  4037be:	2600      	movs	r6, #0
  4037c0:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  4037c2:	f104 0530 	add.w	r5, r4, #48	; 0x30
  4037c6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4037ca:	4631      	mov	r1, r6
  4037cc:	4628      	mov	r0, r5
  4037ce:	4b21      	ldr	r3, [pc, #132]	; (403854 <sync+0xc4>)
  4037d0:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  4037d2:	2355      	movs	r3, #85	; 0x55
  4037d4:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  4037d8:	23aa      	movs	r3, #170	; 0xaa
  4037da:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  4037de:	2352      	movs	r3, #82	; 0x52
  4037e0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  4037e4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  4037e8:	2361      	movs	r3, #97	; 0x61
  4037ea:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  4037ee:	2241      	movs	r2, #65	; 0x41
  4037f0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  4037f4:	2172      	movs	r1, #114	; 0x72
  4037f6:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  4037fa:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  4037fe:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  403802:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  403806:	6923      	ldr	r3, [r4, #16]
  403808:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  40380c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  403810:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  403814:	0c1a      	lsrs	r2, r3, #16
  403816:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  40381a:	0e1b      	lsrs	r3, r3, #24
  40381c:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  403820:	68e3      	ldr	r3, [r4, #12]
  403822:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  403826:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40382a:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  40382e:	0c1a      	lsrs	r2, r3, #16
  403830:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  403834:	0e1b      	lsrs	r3, r3, #24
  403836:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  40383a:	2301      	movs	r3, #1
  40383c:	6962      	ldr	r2, [r4, #20]
  40383e:	4629      	mov	r1, r5
  403840:	7860      	ldrb	r0, [r4, #1]
  403842:	4d05      	ldr	r5, [pc, #20]	; (403858 <sync+0xc8>)
  403844:	47a8      	blx	r5
			fs->fsi_flag = 0;
  403846:	7166      	strb	r6, [r4, #5]
  403848:	e7ac      	b.n	4037a4 <sync+0x14>
  40384a:	bf00      	nop
  40384c:	00402d49 	.word	0x00402d49
  403850:	004027f5 	.word	0x004027f5
  403854:	004028d1 	.word	0x004028d1
  403858:	00402785 	.word	0x00402785

0040385c <follow_path>:
{
  40385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403860:	b083      	sub	sp, #12
  403862:	4682      	mov	sl, r0
  403864:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  403866:	780b      	ldrb	r3, [r1, #0]
  403868:	2b2f      	cmp	r3, #47	; 0x2f
  40386a:	d00a      	beq.n	403882 <follow_path+0x26>
  40386c:	2b5c      	cmp	r3, #92	; 0x5c
  40386e:	d008      	beq.n	403882 <follow_path+0x26>
	dj->sclust = 0;						/* Start from the root dir */
  403870:	2300      	movs	r3, #0
  403872:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  403876:	782b      	ldrb	r3, [r5, #0]
  403878:	2b1f      	cmp	r3, #31
  40387a:	d904      	bls.n	403886 <follow_path+0x2a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40387c:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 403b7c <follow_path+0x320>
  403880:	e130      	b.n	403ae4 <follow_path+0x288>
		path++;
  403882:	3501      	adds	r5, #1
  403884:	e7f4      	b.n	403870 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  403886:	2100      	movs	r1, #0
  403888:	4650      	mov	r0, sl
  40388a:	4bb6      	ldr	r3, [pc, #728]	; (403b64 <follow_path+0x308>)
  40388c:	4798      	blx	r3
  40388e:	4603      	mov	r3, r0
		dj->dir = 0;
  403890:	2200      	movs	r2, #0
  403892:	f8ca 2014 	str.w	r2, [sl, #20]
  403896:	e15a      	b.n	403b4e <follow_path+0x2f2>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  403898:	2b00      	cmp	r3, #0
  40389a:	f040 8152 	bne.w	403b42 <follow_path+0x2e6>
		lfn[di++] = w;					/* Store the Unicode char */
  40389e:	f827 2f02 	strh.w	r2, [r7, #2]!
		w = p[si++];					/* Get a character */
  4038a2:	1c63      	adds	r3, r4, #1
  4038a4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4038a8:	282f      	cmp	r0, #47	; 0x2f
  4038aa:	bf18      	it	ne
  4038ac:	281f      	cmpne	r0, #31
  4038ae:	d91b      	bls.n	4038e8 <follow_path+0x8c>
  4038b0:	285c      	cmp	r0, #92	; 0x5c
  4038b2:	d019      	beq.n	4038e8 <follow_path+0x8c>
		if (di >= _MAX_LFN)				/* Reject too long name */
  4038b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4038b8:	f000 8143 	beq.w	403b42 <follow_path+0x2e6>
		w = p[si++];					/* Get a character */
  4038bc:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4038be:	4641      	mov	r1, r8
  4038c0:	47d8      	blx	fp
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  4038c2:	4602      	mov	r2, r0
  4038c4:	2800      	cmp	r0, #0
  4038c6:	f000 813c 	beq.w	403b42 <follow_path+0x2e6>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  4038ca:	287f      	cmp	r0, #127	; 0x7f
  4038cc:	d8e7      	bhi.n	40389e <follow_path+0x42>
	while (*str && *str != chr) str++;
  4038ce:	2822      	cmp	r0, #34	; 0x22
  4038d0:	f000 813c 	beq.w	403b4c <follow_path+0x2f0>
  4038d4:	232a      	movs	r3, #42	; 0x2a
  4038d6:	49a4      	ldr	r1, [pc, #656]	; (403b68 <follow_path+0x30c>)
  4038d8:	b298      	uxth	r0, r3
  4038da:	4290      	cmp	r0, r2
  4038dc:	d0dc      	beq.n	403898 <follow_path+0x3c>
  4038de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4038e2:	2b00      	cmp	r3, #0
  4038e4:	d1f8      	bne.n	4038d8 <follow_path+0x7c>
  4038e6:	e7da      	b.n	40389e <follow_path+0x42>
	*path = &p[si];						/* Return pointer to the next segment */
  4038e8:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4038ea:	2820      	cmp	r0, #32
  4038ec:	bf34      	ite	cc
  4038ee:	2604      	movcc	r6, #4
  4038f0:	2600      	movcs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  4038f2:	2c00      	cmp	r4, #0
  4038f4:	f000 812a 	beq.w	403b4c <follow_path+0x2f0>
		w = lfn[di-1];
  4038f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4038fc:	4423      	add	r3, r4
  4038fe:	eb09 0243 	add.w	r2, r9, r3, lsl #1
  403902:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  403906:	2b20      	cmp	r3, #32
  403908:	d001      	beq.n	40390e <follow_path+0xb2>
  40390a:	2b2e      	cmp	r3, #46	; 0x2e
  40390c:	d108      	bne.n	403920 <follow_path+0xc4>
	while (di) {						/* Strip trailing spaces and dots */
  40390e:	3c01      	subs	r4, #1
  403910:	f000 811c 	beq.w	403b4c <follow_path+0x2f0>
		w = lfn[di-1];
  403914:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  403918:	2b20      	cmp	r3, #32
  40391a:	d0f8      	beq.n	40390e <follow_path+0xb2>
  40391c:	2b2e      	cmp	r3, #46	; 0x2e
  40391e:	d0f6      	beq.n	40390e <follow_path+0xb2>
	lfn[di] = 0;						/* LFN is created */
  403920:	0067      	lsls	r7, r4, #1
  403922:	2300      	movs	r3, #0
  403924:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
	mem_set(dj->fn, ' ', 11);
  403928:	220b      	movs	r2, #11
  40392a:	2120      	movs	r1, #32
  40392c:	f8da 0018 	ldr.w	r0, [sl, #24]
  403930:	4b8e      	ldr	r3, [pc, #568]	; (403b6c <follow_path+0x310>)
  403932:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  403934:	f8b9 3000 	ldrh.w	r3, [r9]
  403938:	2b20      	cmp	r3, #32
  40393a:	d001      	beq.n	403940 <follow_path+0xe4>
  40393c:	2b2e      	cmp	r3, #46	; 0x2e
  40393e:	d11f      	bne.n	403980 <follow_path+0x124>
  403940:	4649      	mov	r1, r9
  403942:	2300      	movs	r3, #0
  403944:	3301      	adds	r3, #1
  403946:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  40394a:	2a20      	cmp	r2, #32
  40394c:	d0fa      	beq.n	403944 <follow_path+0xe8>
  40394e:	2a2e      	cmp	r2, #46	; 0x2e
  403950:	d0f8      	beq.n	403944 <follow_path+0xe8>
	if (si) cf |= NS_LOSS | NS_LFN;
  403952:	b10b      	cbz	r3, 403958 <follow_path+0xfc>
  403954:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  403958:	3f02      	subs	r7, #2
  40395a:	eb09 0207 	add.w	r2, r9, r7
  40395e:	f839 1007 	ldrh.w	r1, [r9, r7]
  403962:	292e      	cmp	r1, #46	; 0x2e
  403964:	d005      	beq.n	403972 <follow_path+0x116>
  403966:	3c01      	subs	r4, #1
  403968:	d003      	beq.n	403972 <follow_path+0x116>
  40396a:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  40396e:	292e      	cmp	r1, #46	; 0x2e
  403970:	d1f9      	bne.n	403966 <follow_path+0x10a>
		dj->fn[i++] = (BYTE)w;
  403972:	2208      	movs	r2, #8
  403974:	9200      	str	r2, [sp, #0]
  403976:	f04f 0800 	mov.w	r8, #0
  40397a:	f8cd 8004 	str.w	r8, [sp, #4]
  40397e:	e004      	b.n	40398a <follow_path+0x12e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  403980:	2300      	movs	r3, #0
  403982:	e7e9      	b.n	403958 <follow_path+0xfc>
			cf |= NS_LOSS | NS_LFN; continue;
  403984:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  403988:	463b      	mov	r3, r7
  40398a:	1c5f      	adds	r7, r3, #1
  40398c:	f839 0013 	ldrh.w	r0, [r9, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  403990:	2800      	cmp	r0, #0
  403992:	d066      	beq.n	403a62 <follow_path+0x206>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  403994:	2820      	cmp	r0, #32
  403996:	d0f5      	beq.n	403984 <follow_path+0x128>
  403998:	282e      	cmp	r0, #46	; 0x2e
  40399a:	d101      	bne.n	4039a0 <follow_path+0x144>
  40399c:	42a7      	cmp	r7, r4
  40399e:	d1f1      	bne.n	403984 <follow_path+0x128>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  4039a0:	9b00      	ldr	r3, [sp, #0]
  4039a2:	4598      	cmp	r8, r3
  4039a4:	d218      	bcs.n	4039d8 <follow_path+0x17c>
  4039a6:	42a7      	cmp	r7, r4
  4039a8:	d016      	beq.n	4039d8 <follow_path+0x17c>
		if (w >= 0x80) {				/* Non ASCII char */
  4039aa:	287f      	cmp	r0, #127	; 0x7f
  4039ac:	d831      	bhi.n	403a12 <follow_path+0x1b6>
	while (*str && *str != chr) str++;
  4039ae:	282b      	cmp	r0, #43	; 0x2b
  4039b0:	d03d      	beq.n	403a2e <follow_path+0x1d2>
  4039b2:	232c      	movs	r3, #44	; 0x2c
  4039b4:	496e      	ldr	r1, [pc, #440]	; (403b70 <follow_path+0x314>)
  4039b6:	b29a      	uxth	r2, r3
  4039b8:	4282      	cmp	r2, r0
  4039ba:	d043      	beq.n	403a44 <follow_path+0x1e8>
  4039bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4039c0:	2b00      	cmp	r3, #0
  4039c2:	d1f8      	bne.n	4039b6 <follow_path+0x15a>
				if (IsUpper(w)) {		/* ASCII large capital */
  4039c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  4039c8:	b29b      	uxth	r3, r3
  4039ca:	2b19      	cmp	r3, #25
  4039cc:	d83d      	bhi.n	403a4a <follow_path+0x1ee>
					b |= 2;
  4039ce:	9b01      	ldr	r3, [sp, #4]
  4039d0:	f043 0302 	orr.w	r3, r3, #2
  4039d4:	9301      	str	r3, [sp, #4]
  4039d6:	e02d      	b.n	403a34 <follow_path+0x1d8>
			if (ni == 11) {				/* Long extension */
  4039d8:	9b00      	ldr	r3, [sp, #0]
  4039da:	2b0b      	cmp	r3, #11
  4039dc:	d00f      	beq.n	4039fe <follow_path+0x1a2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  4039de:	42a7      	cmp	r7, r4
  4039e0:	bf18      	it	ne
  4039e2:	f046 0603 	orrne.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  4039e6:	42a7      	cmp	r7, r4
  4039e8:	d83b      	bhi.n	403a62 <follow_path+0x206>
			b <<= 2; continue;
  4039ea:	9b01      	ldr	r3, [sp, #4]
  4039ec:	009b      	lsls	r3, r3, #2
  4039ee:	b2db      	uxtb	r3, r3
  4039f0:	9301      	str	r3, [sp, #4]
  4039f2:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
  4039f4:	220b      	movs	r2, #11
  4039f6:	9200      	str	r2, [sp, #0]
  4039f8:	f04f 0808 	mov.w	r8, #8
  4039fc:	e7c5      	b.n	40398a <follow_path+0x12e>
				cf |= NS_LOSS | NS_LFN; break;
  4039fe:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  403a02:	f8da 3018 	ldr.w	r3, [sl, #24]
  403a06:	781a      	ldrb	r2, [r3, #0]
  403a08:	2ae5      	cmp	r2, #229	; 0xe5
  403a0a:	d132      	bne.n	403a72 <follow_path+0x216>
  403a0c:	2205      	movs	r2, #5
  403a0e:	701a      	strb	r2, [r3, #0]
  403a10:	e02c      	b.n	403a6c <follow_path+0x210>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  403a12:	2100      	movs	r1, #0
  403a14:	47d8      	blx	fp
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  403a16:	4603      	mov	r3, r0
  403a18:	2800      	cmp	r0, #0
  403a1a:	f000 809f 	beq.w	403b5c <follow_path+0x300>
  403a1e:	4a55      	ldr	r2, [pc, #340]	; (403b74 <follow_path+0x318>)
  403a20:	4413      	add	r3, r2
  403a22:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  403a26:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  403a2a:	2800      	cmp	r0, #0
  403a2c:	d1bf      	bne.n	4039ae <follow_path+0x152>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  403a2e:	f046 0603 	orr.w	r6, r6, #3
  403a32:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  403a34:	f8da 3018 	ldr.w	r3, [sl, #24]
  403a38:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  403a3c:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  403a3e:	f108 0801 	add.w	r8, r8, #1
  403a42:	e7a2      	b.n	40398a <follow_path+0x12e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  403a44:	2b00      	cmp	r3, #0
  403a46:	d1f2      	bne.n	403a2e <follow_path+0x1d2>
  403a48:	e7bc      	b.n	4039c4 <follow_path+0x168>
					if (IsLower(w)) {	/* ASCII small capital */
  403a4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  403a4e:	b29b      	uxth	r3, r3
  403a50:	2b19      	cmp	r3, #25
  403a52:	d8ef      	bhi.n	403a34 <follow_path+0x1d8>
						b |= 1; w -= 0x20;
  403a54:	9b01      	ldr	r3, [sp, #4]
  403a56:	f043 0301 	orr.w	r3, r3, #1
  403a5a:	9301      	str	r3, [sp, #4]
  403a5c:	3820      	subs	r0, #32
  403a5e:	b280      	uxth	r0, r0
  403a60:	e7e8      	b.n	403a34 <follow_path+0x1d8>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  403a62:	f8da 3018 	ldr.w	r3, [sl, #24]
  403a66:	781a      	ldrb	r2, [r3, #0]
  403a68:	2ae5      	cmp	r2, #229	; 0xe5
  403a6a:	d0cf      	beq.n	403a0c <follow_path+0x1b0>
	if (ni == 8) b <<= 2;
  403a6c:	9b00      	ldr	r3, [sp, #0]
  403a6e:	2b08      	cmp	r3, #8
  403a70:	d052      	beq.n	403b18 <follow_path+0x2bc>
  403a72:	9a01      	ldr	r2, [sp, #4]
  403a74:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  403a78:	2b0c      	cmp	r3, #12
  403a7a:	d054      	beq.n	403b26 <follow_path+0x2ca>
  403a7c:	f002 0203 	and.w	r2, r2, #3
  403a80:	2a03      	cmp	r2, #3
  403a82:	d050      	beq.n	403b26 <follow_path+0x2ca>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  403a84:	f016 0f02 	tst.w	r6, #2
  403a88:	d10b      	bne.n	403aa2 <follow_path+0x246>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  403a8a:	9a01      	ldr	r2, [sp, #4]
  403a8c:	f002 0903 	and.w	r9, r2, #3
  403a90:	f1b9 0f01 	cmp.w	r9, #1
  403a94:	bf08      	it	eq
  403a96:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  403a9a:	2b04      	cmp	r3, #4
  403a9c:	bf08      	it	eq
  403a9e:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  403aa2:	f8da 3018 	ldr.w	r3, [sl, #24]
  403aa6:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  403aa8:	4650      	mov	r0, sl
  403aaa:	4b33      	ldr	r3, [pc, #204]	; (403b78 <follow_path+0x31c>)
  403aac:	4798      	blx	r3
			ns = *(dj->fn+NS);
  403aae:	f8da 3018 	ldr.w	r3, [sl, #24]
  403ab2:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  403ab4:	4603      	mov	r3, r0
  403ab6:	2800      	cmp	r0, #0
  403ab8:	d138      	bne.n	403b2c <follow_path+0x2d0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  403aba:	f012 0f04 	tst.w	r2, #4
  403abe:	d146      	bne.n	403b4e <follow_path+0x2f2>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  403ac0:	f8da 3014 	ldr.w	r3, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  403ac4:	7ada      	ldrb	r2, [r3, #11]
  403ac6:	f012 0f10 	tst.w	r2, #16
  403aca:	d038      	beq.n	403b3e <follow_path+0x2e2>
			dj->sclust = LD_CLUST(dir);
  403acc:	7d59      	ldrb	r1, [r3, #21]
  403ace:	7d1a      	ldrb	r2, [r3, #20]
  403ad0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403ad4:	7ed9      	ldrb	r1, [r3, #27]
  403ad6:	7e9b      	ldrb	r3, [r3, #26]
  403ad8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403adc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403ae0:	f8ca 3008 	str.w	r3, [sl, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  403ae4:	782b      	ldrb	r3, [r5, #0]
  403ae6:	2b2f      	cmp	r3, #47	; 0x2f
  403ae8:	d001      	beq.n	403aee <follow_path+0x292>
  403aea:	2b5c      	cmp	r3, #92	; 0x5c
  403aec:	d105      	bne.n	403afa <follow_path+0x29e>
  403aee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  403af2:	2b2f      	cmp	r3, #47	; 0x2f
  403af4:	d0fb      	beq.n	403aee <follow_path+0x292>
  403af6:	2b5c      	cmp	r3, #92	; 0x5c
  403af8:	d0f9      	beq.n	403aee <follow_path+0x292>
	lfn = dj->lfn;
  403afa:	f8da 901c 	ldr.w	r9, [sl, #28]
		w = p[si++];					/* Get a character */
  403afe:	7828      	ldrb	r0, [r5, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  403b00:	282f      	cmp	r0, #47	; 0x2f
  403b02:	bf18      	it	ne
  403b04:	281f      	cmpne	r0, #31
  403b06:	d91e      	bls.n	403b46 <follow_path+0x2ea>
  403b08:	285c      	cmp	r0, #92	; 0x5c
  403b0a:	d01c      	beq.n	403b46 <follow_path+0x2ea>
  403b0c:	f1a9 0702 	sub.w	r7, r9, #2
  403b10:	462e      	mov	r6, r5
  403b12:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403b14:	46a0      	mov	r8, r4
  403b16:	e6d2      	b.n	4038be <follow_path+0x62>
	if (ni == 8) b <<= 2;
  403b18:	9b01      	ldr	r3, [sp, #4]
  403b1a:	ea4f 0983 	mov.w	r9, r3, lsl #2
  403b1e:	fa5f f389 	uxtb.w	r3, r9
  403b22:	9301      	str	r3, [sp, #4]
  403b24:	e7a5      	b.n	403a72 <follow_path+0x216>
		cf |= NS_LFN;
  403b26:	f046 0602 	orr.w	r6, r6, #2
  403b2a:	e7ab      	b.n	403a84 <follow_path+0x228>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  403b2c:	2804      	cmp	r0, #4
  403b2e:	d10e      	bne.n	403b4e <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  403b30:	f002 0204 	and.w	r2, r2, #4
  403b34:	2a00      	cmp	r2, #0
  403b36:	bf14      	ite	ne
  403b38:	4603      	movne	r3, r0
  403b3a:	2305      	moveq	r3, #5
  403b3c:	e007      	b.n	403b4e <follow_path+0x2f2>
				res = FR_NO_PATH; break;
  403b3e:	2305      	movs	r3, #5
  403b40:	e005      	b.n	403b4e <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  403b42:	2306      	movs	r3, #6
	return res;
  403b44:	e003      	b.n	403b4e <follow_path+0x2f2>
	*path = &p[si];						/* Return pointer to the next segment */
  403b46:	3501      	adds	r5, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403b48:	281f      	cmp	r0, #31
  403b4a:	d804      	bhi.n	403b56 <follow_path+0x2fa>
  403b4c:	2306      	movs	r3, #6
}
  403b4e:	4618      	mov	r0, r3
  403b50:	b003      	add	sp, #12
  403b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	si = di = 0;
  403b56:	2400      	movs	r4, #0
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403b58:	4626      	mov	r6, r4
  403b5a:	e6ca      	b.n	4038f2 <follow_path+0x96>
			cf |= NS_LFN;				/* Force create LFN entry */
  403b5c:	f046 0602 	orr.w	r6, r6, #2
  403b60:	e765      	b.n	403a2e <follow_path+0x1d2>
  403b62:	bf00      	nop
  403b64:	00402ec1 	.word	0x00402ec1
  403b68:	004079b5 	.word	0x004079b5
  403b6c:	004028d1 	.word	0x004028d1
  403b70:	004079c1 	.word	0x004079c1
  403b74:	00407934 	.word	0x00407934
  403b78:	0040330d 	.word	0x0040330d
  403b7c:	00404055 	.word	0x00404055

00403b80 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  403b80:	2807      	cmp	r0, #7
  403b82:	d901      	bls.n	403b88 <f_mount+0x8>
		return FR_INVALID_DRIVE;
  403b84:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  403b86:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  403b88:	4b06      	ldr	r3, [pc, #24]	; (403ba4 <f_mount+0x24>)
  403b8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  403b8e:	b10b      	cbz	r3, 403b94 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  403b90:	2200      	movs	r2, #0
  403b92:	701a      	strb	r2, [r3, #0]
	if (fs) {
  403b94:	b109      	cbz	r1, 403b9a <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  403b96:	2300      	movs	r3, #0
  403b98:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  403b9a:	4b02      	ldr	r3, [pc, #8]	; (403ba4 <f_mount+0x24>)
  403b9c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  403ba0:	2000      	movs	r0, #0
  403ba2:	4770      	bx	lr
  403ba4:	20400a98 	.word	0x20400a98

00403ba8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  403ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403bac:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  403bb0:	4605      	mov	r5, r0
  403bb2:	9101      	str	r1, [sp, #4]
  403bb4:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  403bb6:	2300      	movs	r3, #0
  403bb8:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  403bba:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  403bbe:	f002 021e 	and.w	r2, r2, #30
  403bc2:	a985      	add	r1, sp, #532	; 0x214
  403bc4:	a801      	add	r0, sp, #4
  403bc6:	4b58      	ldr	r3, [pc, #352]	; (403d28 <f_open+0x180>)
  403bc8:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  403bca:	ab82      	add	r3, sp, #520	; 0x208
  403bcc:	938b      	str	r3, [sp, #556]	; 0x22c
  403bce:	ab02      	add	r3, sp, #8
  403bd0:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  403bd2:	b168      	cbz	r0, 403bf0 <f_open+0x48>
  403bd4:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  403bd6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403bd8:	f016 0f1c 	tst.w	r6, #28
  403bdc:	d158      	bne.n	403c90 <f_open+0xe8>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  403bde:	2b00      	cmp	r3, #0
  403be0:	f040 8096 	bne.w	403d10 <f_open+0x168>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  403be4:	7ae3      	ldrb	r3, [r4, #11]
  403be6:	f013 0f10 	tst.w	r3, #16
  403bea:	d062      	beq.n	403cb2 <f_open+0x10a>
				res = FR_NO_FILE;
  403bec:	2304      	movs	r3, #4
  403bee:	e08f      	b.n	403d10 <f_open+0x168>
		res = follow_path(&dj, path);	/* Follow the file path */
  403bf0:	9901      	ldr	r1, [sp, #4]
  403bf2:	a885      	add	r0, sp, #532	; 0x214
  403bf4:	4b4d      	ldr	r3, [pc, #308]	; (403d2c <f_open+0x184>)
  403bf6:	4798      	blx	r3
  403bf8:	4603      	mov	r3, r0
	dir = dj.dir;
  403bfa:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (!dir)	/* Current dir itself */
  403bfc:	b934      	cbnz	r4, 403c0c <f_open+0x64>
  403bfe:	b928      	cbnz	r0, 403c0c <f_open+0x64>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403c00:	f016 0f1c 	tst.w	r6, #28
  403c04:	f040 8089 	bne.w	403d1a <f_open+0x172>
			res = FR_INVALID_NAME;
  403c08:	2306      	movs	r3, #6
  403c0a:	e046      	b.n	403c9a <f_open+0xf2>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403c0c:	f016 0f1c 	tst.w	r6, #28
  403c10:	d0e5      	beq.n	403bde <f_open+0x36>
		if (res != FR_OK) {					/* No file, create new */
  403c12:	2b00      	cmp	r3, #0
  403c14:	d13c      	bne.n	403c90 <f_open+0xe8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  403c16:	7ae3      	ldrb	r3, [r4, #11]
  403c18:	f013 0f11 	tst.w	r3, #17
  403c1c:	d17f      	bne.n	403d1e <f_open+0x176>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  403c1e:	f016 0f04 	tst.w	r6, #4
  403c22:	d17e      	bne.n	403d22 <f_open+0x17a>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  403c24:	f017 0f08 	tst.w	r7, #8
  403c28:	d050      	beq.n	403ccc <f_open+0x124>
			dw = get_fattime();					/* Created time */
  403c2a:	4b41      	ldr	r3, [pc, #260]	; (403d30 <f_open+0x188>)
  403c2c:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  403c2e:	73a0      	strb	r0, [r4, #14]
  403c30:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403c34:	73e3      	strb	r3, [r4, #15]
  403c36:	0c03      	lsrs	r3, r0, #16
  403c38:	7423      	strb	r3, [r4, #16]
  403c3a:	0e00      	lsrs	r0, r0, #24
  403c3c:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  403c3e:	2300      	movs	r3, #0
  403c40:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  403c42:	7723      	strb	r3, [r4, #28]
  403c44:	7763      	strb	r3, [r4, #29]
  403c46:	77a3      	strb	r3, [r4, #30]
  403c48:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  403c4a:	7d62      	ldrb	r2, [r4, #21]
  403c4c:	7d26      	ldrb	r6, [r4, #20]
  403c4e:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  403c52:	7ee1      	ldrb	r1, [r4, #27]
  403c54:	7ea2      	ldrb	r2, [r4, #26]
  403c56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  403c5a:	76a3      	strb	r3, [r4, #26]
  403c5c:	76e3      	strb	r3, [r4, #27]
  403c5e:	7523      	strb	r3, [r4, #20]
  403c60:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  403c62:	9885      	ldr	r0, [sp, #532]	; 0x214
  403c64:	2301      	movs	r3, #1
  403c66:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  403c68:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  403c6c:	d02c      	beq.n	403cc8 <f_open+0x120>
				dw = dj.fs->winsect;
  403c6e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  403c72:	4631      	mov	r1, r6
  403c74:	4b2f      	ldr	r3, [pc, #188]	; (403d34 <f_open+0x18c>)
  403c76:	4798      	blx	r3
				if (res == FR_OK) {
  403c78:	4603      	mov	r3, r0
  403c7a:	2800      	cmp	r0, #0
  403c7c:	d148      	bne.n	403d10 <f_open+0x168>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  403c7e:	9885      	ldr	r0, [sp, #532]	; 0x214
  403c80:	3e01      	subs	r6, #1
  403c82:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  403c84:	4641      	mov	r1, r8
  403c86:	4b2c      	ldr	r3, [pc, #176]	; (403d38 <f_open+0x190>)
  403c88:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  403c8a:	4603      	mov	r3, r0
  403c8c:	b1e0      	cbz	r0, 403cc8 <f_open+0x120>
  403c8e:	e03f      	b.n	403d10 <f_open+0x168>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  403c90:	2b04      	cmp	r3, #4
  403c92:	d004      	beq.n	403c9e <f_open+0xf6>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  403c94:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  403c98:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  403c9a:	b1db      	cbz	r3, 403cd4 <f_open+0x12c>
  403c9c:	e038      	b.n	403d10 <f_open+0x168>
				res = dir_register(&dj);
  403c9e:	a885      	add	r0, sp, #532	; 0x214
  403ca0:	4b26      	ldr	r3, [pc, #152]	; (403d3c <f_open+0x194>)
  403ca2:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  403ca4:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  403ca8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  403caa:	4603      	mov	r3, r0
  403cac:	2800      	cmp	r0, #0
  403cae:	d0b9      	beq.n	403c24 <f_open+0x7c>
  403cb0:	e02e      	b.n	403d10 <f_open+0x168>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  403cb2:	f016 0f02 	tst.w	r6, #2
  403cb6:	d004      	beq.n	403cc2 <f_open+0x11a>
  403cb8:	f013 0f01 	tst.w	r3, #1
  403cbc:	d001      	beq.n	403cc2 <f_open+0x11a>
					res = FR_DENIED;
  403cbe:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  403cc0:	e026      	b.n	403d10 <f_open+0x168>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  403cc2:	f016 0f08 	tst.w	r6, #8
  403cc6:	d001      	beq.n	403ccc <f_open+0x124>
			mode |= FA__WRITTEN;
  403cc8:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  403ccc:	9b85      	ldr	r3, [sp, #532]	; 0x214
  403cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403cd0:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  403cd2:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  403cd4:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  403cd6:	7d62      	ldrb	r2, [r4, #21]
  403cd8:	7d23      	ldrb	r3, [r4, #20]
  403cda:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  403cde:	7ee1      	ldrb	r1, [r4, #27]
  403ce0:	7ea3      	ldrb	r3, [r4, #26]
  403ce2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403cea:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  403cec:	7fe2      	ldrb	r2, [r4, #31]
  403cee:	7fa3      	ldrb	r3, [r4, #30]
  403cf0:	041b      	lsls	r3, r3, #16
  403cf2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  403cf6:	7f22      	ldrb	r2, [r4, #28]
  403cf8:	4313      	orrs	r3, r2
  403cfa:	7f62      	ldrb	r2, [r4, #29]
  403cfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403d00:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  403d02:	2300      	movs	r3, #0
  403d04:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  403d06:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  403d08:	9a85      	ldr	r2, [sp, #532]	; 0x214
  403d0a:	602a      	str	r2, [r5, #0]
  403d0c:	88d2      	ldrh	r2, [r2, #6]
  403d0e:	80aa      	strh	r2, [r5, #4]
}
  403d10:	4618      	mov	r0, r3
  403d12:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  403d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_INVALID_NAME;
  403d1a:	2306      	movs	r3, #6
  403d1c:	e7ba      	b.n	403c94 <f_open+0xec>
				res = FR_DENIED;
  403d1e:	2307      	movs	r3, #7
  403d20:	e7f6      	b.n	403d10 <f_open+0x168>
					res = FR_EXIST;
  403d22:	2308      	movs	r3, #8
  403d24:	e7f4      	b.n	403d10 <f_open+0x168>
  403d26:	bf00      	nop
  403d28:	004029d9 	.word	0x004029d9
  403d2c:	0040385d 	.word	0x0040385d
  403d30:	00402865 	.word	0x00402865
  403d34:	00403159 	.word	0x00403159
  403d38:	00402d49 	.word	0x00402d49
  403d3c:	004034b5 	.word	0x004034b5

00403d40 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  403d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d44:	b083      	sub	sp, #12
  403d46:	4604      	mov	r4, r0
  403d48:	4689      	mov	r9, r1
  403d4a:	4616      	mov	r6, r2
  403d4c:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  403d4e:	2300      	movs	r3, #0
  403d50:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  403d54:	8881      	ldrh	r1, [r0, #4]
  403d56:	6800      	ldr	r0, [r0, #0]
  403d58:	4b75      	ldr	r3, [pc, #468]	; (403f30 <f_write+0x1f0>)
  403d5a:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  403d5c:	9001      	str	r0, [sp, #4]
  403d5e:	2800      	cmp	r0, #0
  403d60:	f040 80e2 	bne.w	403f28 <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  403d64:	79a3      	ldrb	r3, [r4, #6]
  403d66:	f013 0f80 	tst.w	r3, #128	; 0x80
  403d6a:	f040 80db 	bne.w	403f24 <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  403d6e:	f013 0f02 	tst.w	r3, #2
  403d72:	d102      	bne.n	403d7a <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  403d74:	2307      	movs	r3, #7
  403d76:	9301      	str	r3, [sp, #4]
  403d78:	e0d6      	b.n	403f28 <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  403d7a:	68e3      	ldr	r3, [r4, #12]
  403d7c:	42f3      	cmn	r3, r6
  403d7e:	d20e      	bcs.n	403d9e <f_write+0x5e>

	for ( ;  btw;							/* Repeat until all data written */
  403d80:	2e00      	cmp	r6, #0
  403d82:	d174      	bne.n	403e6e <f_write+0x12e>
  403d84:	e00b      	b.n	403d9e <f_write+0x5e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  403d86:	2100      	movs	r1, #0
  403d88:	4b6a      	ldr	r3, [pc, #424]	; (403f34 <f_write+0x1f4>)
  403d8a:	4798      	blx	r3
  403d8c:	4603      	mov	r3, r0
  403d8e:	6120      	str	r0, [r4, #16]
  403d90:	e003      	b.n	403d9a <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  403d92:	6961      	ldr	r1, [r4, #20]
  403d94:	4b67      	ldr	r3, [pc, #412]	; (403f34 <f_write+0x1f4>)
  403d96:	4798      	blx	r3
  403d98:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  403d9a:	2b00      	cmp	r3, #0
  403d9c:	d17a      	bne.n	403e94 <f_write+0x154>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  403d9e:	68a3      	ldr	r3, [r4, #8]
  403da0:	68e2      	ldr	r2, [r4, #12]
  403da2:	4293      	cmp	r3, r2
  403da4:	bf88      	it	hi
  403da6:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  403da8:	79a3      	ldrb	r3, [r4, #6]
  403daa:	f043 0320 	orr.w	r3, r3, #32
  403dae:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  403db0:	e0ba      	b.n	403f28 <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  403db2:	79a3      	ldrb	r3, [r4, #6]
  403db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403db8:	71a3      	strb	r3, [r4, #6]
  403dba:	2302      	movs	r3, #2
  403dbc:	9301      	str	r3, [sp, #4]
  403dbe:	e0b3      	b.n	403f28 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  403dc0:	79a3      	ldrb	r3, [r4, #6]
  403dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403dc6:	71a3      	strb	r3, [r4, #6]
  403dc8:	2301      	movs	r3, #1
  403dca:	9301      	str	r3, [sp, #4]
  403dcc:	e0ac      	b.n	403f28 <f_write+0x1e8>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  403dce:	2100      	movs	r1, #0
  403dd0:	4b59      	ldr	r3, [pc, #356]	; (403f38 <f_write+0x1f8>)
  403dd2:	4798      	blx	r3
  403dd4:	2800      	cmp	r0, #0
  403dd6:	d068      	beq.n	403eaa <f_write+0x16a>
				ABORT(fp->fs, FR_DISK_ERR);
  403dd8:	79a3      	ldrb	r3, [r4, #6]
  403dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403dde:	71a3      	strb	r3, [r4, #6]
  403de0:	2301      	movs	r3, #1
  403de2:	9301      	str	r3, [sp, #4]
  403de4:	e0a0      	b.n	403f28 <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  403de6:	79a3      	ldrb	r3, [r4, #6]
  403de8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403dec:	71a3      	strb	r3, [r4, #6]
  403dee:	2302      	movs	r3, #2
  403df0:	9301      	str	r3, [sp, #4]
  403df2:	e099      	b.n	403f28 <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  403df4:	79a3      	ldrb	r3, [r4, #6]
  403df6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403dfa:	71a3      	strb	r3, [r4, #6]
  403dfc:	2301      	movs	r3, #1
  403dfe:	9301      	str	r3, [sp, #4]
  403e00:	e092      	b.n	403f28 <f_write+0x1e8>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
  403e02:	f44f 7200 	mov.w	r2, #512	; 0x200
  403e06:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  403e0a:	3030      	adds	r0, #48	; 0x30
  403e0c:	4b4b      	ldr	r3, [pc, #300]	; (403f3c <f_write+0x1fc>)
  403e0e:	4798      	blx	r3
					fp->fs->wflag = 0;
  403e10:	6823      	ldr	r3, [r4, #0]
  403e12:	2200      	movs	r2, #0
  403e14:	711a      	strb	r2, [r3, #4]
  403e16:	e06c      	b.n	403ef2 <f_write+0x1b2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
  403e18:	68a2      	ldr	r2, [r4, #8]
  403e1a:	68e3      	ldr	r3, [r4, #12]
  403e1c:	429a      	cmp	r2, r3
  403e1e:	d26b      	bcs.n	403ef8 <f_write+0x1b8>
			fp->dsect = sect;
  403e20:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  403e22:	68a5      	ldr	r5, [r4, #8]
  403e24:	f3c5 0508 	ubfx	r5, r5, #0, #9
  403e28:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  403e2c:	42b5      	cmp	r5, r6
  403e2e:	bf28      	it	cs
  403e30:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  403e32:	69a1      	ldr	r1, [r4, #24]
  403e34:	6820      	ldr	r0, [r4, #0]
  403e36:	4b40      	ldr	r3, [pc, #256]	; (403f38 <f_write+0x1f8>)
  403e38:	4798      	blx	r3
  403e3a:	2800      	cmp	r0, #0
  403e3c:	d16b      	bne.n	403f16 <f_write+0x1d6>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  403e3e:	68a0      	ldr	r0, [r4, #8]
  403e40:	f3c0 0008 	ubfx	r0, r0, #0, #9
  403e44:	3030      	adds	r0, #48	; 0x30
  403e46:	6823      	ldr	r3, [r4, #0]
  403e48:	462a      	mov	r2, r5
  403e4a:	4649      	mov	r1, r9
  403e4c:	4418      	add	r0, r3
  403e4e:	4b3b      	ldr	r3, [pc, #236]	; (403f3c <f_write+0x1fc>)
  403e50:	4798      	blx	r3
		fp->fs->wflag = 1;
  403e52:	6823      	ldr	r3, [r4, #0]
  403e54:	2201      	movs	r2, #1
  403e56:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  403e58:	44a9      	add	r9, r5
  403e5a:	68a3      	ldr	r3, [r4, #8]
  403e5c:	442b      	add	r3, r5
  403e5e:	60a3      	str	r3, [r4, #8]
  403e60:	f8d8 3000 	ldr.w	r3, [r8]
  403e64:	442b      	add	r3, r5
  403e66:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  403e6a:	1b76      	subs	r6, r6, r5
  403e6c:	d097      	beq.n	403d9e <f_write+0x5e>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  403e6e:	68a2      	ldr	r2, [r4, #8]
  403e70:	f3c2 0308 	ubfx	r3, r2, #0, #9
  403e74:	2b00      	cmp	r3, #0
  403e76:	d1d4      	bne.n	403e22 <f_write+0xe2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  403e78:	6820      	ldr	r0, [r4, #0]
  403e7a:	7883      	ldrb	r3, [r0, #2]
  403e7c:	3b01      	subs	r3, #1
  403e7e:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  403e82:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  403e86:	d10b      	bne.n	403ea0 <f_write+0x160>
				if (fp->fptr == 0) {		/* On the top of the file? */
  403e88:	2a00      	cmp	r2, #0
  403e8a:	d182      	bne.n	403d92 <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  403e8c:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  403e8e:	2b00      	cmp	r3, #0
  403e90:	f43f af79 	beq.w	403d86 <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  403e94:	2b01      	cmp	r3, #1
  403e96:	d08c      	beq.n	403db2 <f_write+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  403e98:	f1b3 3fff 	cmp.w	r3, #4294967295
  403e9c:	d090      	beq.n	403dc0 <f_write+0x80>
				fp->clust = clst;			/* Update current cluster */
  403e9e:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  403ea0:	6820      	ldr	r0, [r4, #0]
  403ea2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  403ea4:	69a3      	ldr	r3, [r4, #24]
  403ea6:	429a      	cmp	r2, r3
  403ea8:	d091      	beq.n	403dce <f_write+0x8e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  403eaa:	f8d4 a000 	ldr.w	sl, [r4]
  403eae:	6961      	ldr	r1, [r4, #20]
  403eb0:	4650      	mov	r0, sl
  403eb2:	4b23      	ldr	r3, [pc, #140]	; (403f40 <f_write+0x200>)
  403eb4:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  403eb6:	4605      	mov	r5, r0
  403eb8:	2800      	cmp	r0, #0
  403eba:	d094      	beq.n	403de6 <f_write+0xa6>
			sect += csect;
  403ebc:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  403ebe:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  403ec2:	d0a9      	beq.n	403e18 <f_write+0xd8>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  403ec4:	f89a 3002 	ldrb.w	r3, [sl, #2]
  403ec8:	eb07 020b 	add.w	r2, r7, fp
  403ecc:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  403ece:	bf88      	it	hi
  403ed0:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  403ed4:	fa5f f38b 	uxtb.w	r3, fp
  403ed8:	462a      	mov	r2, r5
  403eda:	4649      	mov	r1, r9
  403edc:	f89a 0001 	ldrb.w	r0, [sl, #1]
  403ee0:	4f18      	ldr	r7, [pc, #96]	; (403f44 <f_write+0x204>)
  403ee2:	47b8      	blx	r7
  403ee4:	2800      	cmp	r0, #0
  403ee6:	d185      	bne.n	403df4 <f_write+0xb4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
  403ee8:	6820      	ldr	r0, [r4, #0]
  403eea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  403eec:	1b49      	subs	r1, r1, r5
  403eee:	458b      	cmp	fp, r1
  403ef0:	d887      	bhi.n	403e02 <f_write+0xc2>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  403ef2:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  403ef6:	e7af      	b.n	403e58 <f_write+0x118>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  403ef8:	2100      	movs	r1, #0
  403efa:	4650      	mov	r0, sl
  403efc:	4b0e      	ldr	r3, [pc, #56]	; (403f38 <f_write+0x1f8>)
  403efe:	4798      	blx	r3
  403f00:	b910      	cbnz	r0, 403f08 <f_write+0x1c8>
				fp->fs->winsect = sect;
  403f02:	6823      	ldr	r3, [r4, #0]
  403f04:	62dd      	str	r5, [r3, #44]	; 0x2c
  403f06:	e78b      	b.n	403e20 <f_write+0xe0>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  403f08:	79a3      	ldrb	r3, [r4, #6]
  403f0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403f0e:	71a3      	strb	r3, [r4, #6]
  403f10:	2301      	movs	r3, #1
  403f12:	9301      	str	r3, [sp, #4]
  403f14:	e008      	b.n	403f28 <f_write+0x1e8>
			ABORT(fp->fs, FR_DISK_ERR);
  403f16:	79a3      	ldrb	r3, [r4, #6]
  403f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403f1c:	71a3      	strb	r3, [r4, #6]
  403f1e:	2301      	movs	r3, #1
  403f20:	9301      	str	r3, [sp, #4]
  403f22:	e001      	b.n	403f28 <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  403f24:	2302      	movs	r3, #2
  403f26:	9301      	str	r3, [sp, #4]
}
  403f28:	9801      	ldr	r0, [sp, #4]
  403f2a:	b003      	add	sp, #12
  403f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f30:	00402915 	.word	0x00402915
  403f34:	00403099 	.word	0x00403099
  403f38:	00402d49 	.word	0x00402d49
  403f3c:	004028bd 	.word	0x004028bd
  403f40:	004028df 	.word	0x004028df
  403f44:	00402785 	.word	0x00402785

00403f48 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  403f48:	b538      	push	{r3, r4, r5, lr}
  403f4a:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  403f4c:	8881      	ldrh	r1, [r0, #4]
  403f4e:	6800      	ldr	r0, [r0, #0]
  403f50:	4b1f      	ldr	r3, [pc, #124]	; (403fd0 <f_sync+0x88>)
  403f52:	4798      	blx	r3
	if (res == FR_OK) {
  403f54:	4603      	mov	r3, r0
  403f56:	b918      	cbnz	r0, 403f60 <f_sync+0x18>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  403f58:	79a2      	ldrb	r2, [r4, #6]
  403f5a:	f012 0f20 	tst.w	r2, #32
  403f5e:	d101      	bne.n	403f64 <f_sync+0x1c>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  403f60:	4618      	mov	r0, r3
  403f62:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
  403f64:	69e1      	ldr	r1, [r4, #28]
  403f66:	6820      	ldr	r0, [r4, #0]
  403f68:	4b1a      	ldr	r3, [pc, #104]	; (403fd4 <f_sync+0x8c>)
  403f6a:	4798      	blx	r3
			if (res == FR_OK) {
  403f6c:	4603      	mov	r3, r0
  403f6e:	2800      	cmp	r0, #0
  403f70:	d1f6      	bne.n	403f60 <f_sync+0x18>
				dir = fp->dir_ptr;
  403f72:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  403f74:	7aeb      	ldrb	r3, [r5, #11]
  403f76:	f043 0320 	orr.w	r3, r3, #32
  403f7a:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  403f7c:	68e3      	ldr	r3, [r4, #12]
  403f7e:	772b      	strb	r3, [r5, #28]
  403f80:	89a3      	ldrh	r3, [r4, #12]
  403f82:	0a1b      	lsrs	r3, r3, #8
  403f84:	776b      	strb	r3, [r5, #29]
  403f86:	89e3      	ldrh	r3, [r4, #14]
  403f88:	77ab      	strb	r3, [r5, #30]
  403f8a:	7be3      	ldrb	r3, [r4, #15]
  403f8c:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  403f8e:	6923      	ldr	r3, [r4, #16]
  403f90:	76ab      	strb	r3, [r5, #26]
  403f92:	8a23      	ldrh	r3, [r4, #16]
  403f94:	0a1b      	lsrs	r3, r3, #8
  403f96:	76eb      	strb	r3, [r5, #27]
  403f98:	8a63      	ldrh	r3, [r4, #18]
  403f9a:	752b      	strb	r3, [r5, #20]
  403f9c:	8a63      	ldrh	r3, [r4, #18]
  403f9e:	0a1b      	lsrs	r3, r3, #8
  403fa0:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  403fa2:	4b0d      	ldr	r3, [pc, #52]	; (403fd8 <f_sync+0x90>)
  403fa4:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  403fa6:	75a8      	strb	r0, [r5, #22]
  403fa8:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403fac:	75eb      	strb	r3, [r5, #23]
  403fae:	0c03      	lsrs	r3, r0, #16
  403fb0:	762b      	strb	r3, [r5, #24]
  403fb2:	0e00      	lsrs	r0, r0, #24
  403fb4:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  403fb6:	79a3      	ldrb	r3, [r4, #6]
  403fb8:	f023 0320 	bic.w	r3, r3, #32
  403fbc:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  403fbe:	6823      	ldr	r3, [r4, #0]
  403fc0:	2201      	movs	r2, #1
  403fc2:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  403fc4:	6820      	ldr	r0, [r4, #0]
  403fc6:	4b05      	ldr	r3, [pc, #20]	; (403fdc <f_sync+0x94>)
  403fc8:	4798      	blx	r3
  403fca:	4603      	mov	r3, r0
  403fcc:	e7c8      	b.n	403f60 <f_sync+0x18>
  403fce:	bf00      	nop
  403fd0:	00402915 	.word	0x00402915
  403fd4:	00402d49 	.word	0x00402d49
  403fd8:	00402865 	.word	0x00402865
  403fdc:	00403791 	.word	0x00403791

00403fe0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  403fe0:	b510      	push	{r4, lr}
  403fe2:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  403fe4:	4b03      	ldr	r3, [pc, #12]	; (403ff4 <f_close+0x14>)
  403fe6:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  403fe8:	4603      	mov	r3, r0
  403fea:	b908      	cbnz	r0, 403ff0 <f_close+0x10>
  403fec:	2200      	movs	r2, #0
  403fee:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  403ff0:	4618      	mov	r0, r3
  403ff2:	bd10      	pop	{r4, pc}
  403ff4:	00403f49 	.word	0x00403f49

00403ff8 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  403ff8:	b510      	push	{r4, lr}
  403ffa:	b082      	sub	sp, #8
  403ffc:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  403ffe:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  404002:	ab01      	add	r3, sp, #4
  404004:	2201      	movs	r2, #1
  404006:	4669      	mov	r1, sp
  404008:	4620      	mov	r0, r4
  40400a:	4c05      	ldr	r4, [pc, #20]	; (404020 <f_putc+0x28>)
  40400c:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  40400e:	9b01      	ldr	r3, [sp, #4]
  404010:	2b01      	cmp	r3, #1
}
  404012:	bf0c      	ite	eq
  404014:	2001      	moveq	r0, #1
  404016:	f04f 30ff 	movne.w	r0, #4294967295
  40401a:	b002      	add	sp, #8
  40401c:	bd10      	pop	{r4, pc}
  40401e:	bf00      	nop
  404020:	00403d41 	.word	0x00403d41

00404024 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  404024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  404026:	7803      	ldrb	r3, [r0, #0]
  404028:	b17b      	cbz	r3, 40404a <f_puts+0x26>
  40402a:	460e      	mov	r6, r1
  40402c:	4605      	mov	r5, r0
  40402e:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  404030:	4f07      	ldr	r7, [pc, #28]	; (404050 <f_puts+0x2c>)
  404032:	4631      	mov	r1, r6
  404034:	4618      	mov	r0, r3
  404036:	47b8      	blx	r7
  404038:	f1b0 3fff 	cmp.w	r0, #4294967295
  40403c:	d006      	beq.n	40404c <f_puts+0x28>
  40403e:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  404040:	f814 3b01 	ldrb.w	r3, [r4], #1
  404044:	2b00      	cmp	r3, #0
  404046:	d1f4      	bne.n	404032 <f_puts+0xe>
  404048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40404a:	2000      	movs	r0, #0
	}
	return n;
}
  40404c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40404e:	bf00      	nop
  404050:	00403ff9 	.word	0x00403ff9

00404054 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  404054:	287f      	cmp	r0, #127	; 0x7f
  404056:	d919      	bls.n	40408c <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  404058:	b971      	cbnz	r1, 404078 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  40405a:	28c7      	cmp	r0, #199	; 0xc7
  40405c:	d013      	beq.n	404086 <ff_convert+0x32>
  40405e:	4a0c      	ldr	r2, [pc, #48]	; (404090 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  404060:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  404062:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  404066:	4281      	cmp	r1, r0
  404068:	d003      	beq.n	404072 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  40406a:	3301      	adds	r3, #1
  40406c:	b29b      	uxth	r3, r3
  40406e:	2b80      	cmp	r3, #128	; 0x80
  404070:	d1f7      	bne.n	404062 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  404072:	3380      	adds	r3, #128	; 0x80
  404074:	b2d8      	uxtb	r0, r3
  404076:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  404078:	28ff      	cmp	r0, #255	; 0xff
  40407a:	d806      	bhi.n	40408a <ff_convert+0x36>
  40407c:	3880      	subs	r0, #128	; 0x80
  40407e:	4b04      	ldr	r3, [pc, #16]	; (404090 <ff_convert+0x3c>)
  404080:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  404084:	4770      	bx	lr
				if (src == Tbl[c]) break;
  404086:	2300      	movs	r3, #0
  404088:	e7f3      	b.n	404072 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40408a:	2000      	movs	r0, #0
		}
	}

	return c;
}
  40408c:	4770      	bx	lr
  40408e:	bf00      	nop
  404090:	004079c8 	.word	0x004079c8

00404094 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  404094:	2861      	cmp	r0, #97	; 0x61
  404096:	d00e      	beq.n	4040b6 <ff_wtoupper+0x22>
  404098:	4908      	ldr	r1, [pc, #32]	; (4040bc <ff_wtoupper+0x28>)
  40409a:	2200      	movs	r2, #0
  40409c:	3201      	adds	r2, #1
  40409e:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  4040a2:	4283      	cmp	r3, r0
  4040a4:	d001      	beq.n	4040aa <ff_wtoupper+0x16>
  4040a6:	2b00      	cmp	r3, #0
  4040a8:	d1f8      	bne.n	40409c <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  4040aa:	b11b      	cbz	r3, 4040b4 <ff_wtoupper+0x20>
  4040ac:	4b04      	ldr	r3, [pc, #16]	; (4040c0 <ff_wtoupper+0x2c>)
  4040ae:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  4040b2:	4770      	bx	lr
  4040b4:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4040b6:	2200      	movs	r2, #0
  4040b8:	e7f8      	b.n	4040ac <ff_wtoupper+0x18>
  4040ba:	bf00      	nop
  4040bc:	00407ac8 	.word	0x00407ac8
  4040c0:	00407ca8 	.word	0x00407ca8

004040c4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4040c6:	b083      	sub	sp, #12
  4040c8:	4605      	mov	r5, r0
  4040ca:	460c      	mov	r4, r1
	uint32_t val = 0;
  4040cc:	2300      	movs	r3, #0
  4040ce:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4040d0:	4b2a      	ldr	r3, [pc, #168]	; (40417c <usart_serial_getchar+0xb8>)
  4040d2:	4298      	cmp	r0, r3
  4040d4:	d013      	beq.n	4040fe <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4040d6:	4b2a      	ldr	r3, [pc, #168]	; (404180 <usart_serial_getchar+0xbc>)
  4040d8:	4298      	cmp	r0, r3
  4040da:	d018      	beq.n	40410e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4040dc:	4b29      	ldr	r3, [pc, #164]	; (404184 <usart_serial_getchar+0xc0>)
  4040de:	4298      	cmp	r0, r3
  4040e0:	d01d      	beq.n	40411e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4040e2:	4b29      	ldr	r3, [pc, #164]	; (404188 <usart_serial_getchar+0xc4>)
  4040e4:	429d      	cmp	r5, r3
  4040e6:	d022      	beq.n	40412e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4040e8:	4b28      	ldr	r3, [pc, #160]	; (40418c <usart_serial_getchar+0xc8>)
  4040ea:	429d      	cmp	r5, r3
  4040ec:	d027      	beq.n	40413e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4040ee:	4b28      	ldr	r3, [pc, #160]	; (404190 <usart_serial_getchar+0xcc>)
  4040f0:	429d      	cmp	r5, r3
  4040f2:	d02e      	beq.n	404152 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4040f4:	4b27      	ldr	r3, [pc, #156]	; (404194 <usart_serial_getchar+0xd0>)
  4040f6:	429d      	cmp	r5, r3
  4040f8:	d035      	beq.n	404166 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4040fa:	b003      	add	sp, #12
  4040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4040fe:	461f      	mov	r7, r3
  404100:	4e25      	ldr	r6, [pc, #148]	; (404198 <usart_serial_getchar+0xd4>)
  404102:	4621      	mov	r1, r4
  404104:	4638      	mov	r0, r7
  404106:	47b0      	blx	r6
  404108:	2800      	cmp	r0, #0
  40410a:	d1fa      	bne.n	404102 <usart_serial_getchar+0x3e>
  40410c:	e7e9      	b.n	4040e2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40410e:	461f      	mov	r7, r3
  404110:	4e21      	ldr	r6, [pc, #132]	; (404198 <usart_serial_getchar+0xd4>)
  404112:	4621      	mov	r1, r4
  404114:	4638      	mov	r0, r7
  404116:	47b0      	blx	r6
  404118:	2800      	cmp	r0, #0
  40411a:	d1fa      	bne.n	404112 <usart_serial_getchar+0x4e>
  40411c:	e7e4      	b.n	4040e8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40411e:	461f      	mov	r7, r3
  404120:	4e1d      	ldr	r6, [pc, #116]	; (404198 <usart_serial_getchar+0xd4>)
  404122:	4621      	mov	r1, r4
  404124:	4638      	mov	r0, r7
  404126:	47b0      	blx	r6
  404128:	2800      	cmp	r0, #0
  40412a:	d1fa      	bne.n	404122 <usart_serial_getchar+0x5e>
  40412c:	e7df      	b.n	4040ee <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40412e:	461f      	mov	r7, r3
  404130:	4e19      	ldr	r6, [pc, #100]	; (404198 <usart_serial_getchar+0xd4>)
  404132:	4621      	mov	r1, r4
  404134:	4638      	mov	r0, r7
  404136:	47b0      	blx	r6
  404138:	2800      	cmp	r0, #0
  40413a:	d1fa      	bne.n	404132 <usart_serial_getchar+0x6e>
  40413c:	e7da      	b.n	4040f4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40413e:	461e      	mov	r6, r3
  404140:	4d16      	ldr	r5, [pc, #88]	; (40419c <usart_serial_getchar+0xd8>)
  404142:	a901      	add	r1, sp, #4
  404144:	4630      	mov	r0, r6
  404146:	47a8      	blx	r5
  404148:	2800      	cmp	r0, #0
  40414a:	d1fa      	bne.n	404142 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40414c:	9b01      	ldr	r3, [sp, #4]
  40414e:	7023      	strb	r3, [r4, #0]
  404150:	e7d3      	b.n	4040fa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  404152:	461e      	mov	r6, r3
  404154:	4d11      	ldr	r5, [pc, #68]	; (40419c <usart_serial_getchar+0xd8>)
  404156:	a901      	add	r1, sp, #4
  404158:	4630      	mov	r0, r6
  40415a:	47a8      	blx	r5
  40415c:	2800      	cmp	r0, #0
  40415e:	d1fa      	bne.n	404156 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  404160:	9b01      	ldr	r3, [sp, #4]
  404162:	7023      	strb	r3, [r4, #0]
  404164:	e7c9      	b.n	4040fa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  404166:	461e      	mov	r6, r3
  404168:	4d0c      	ldr	r5, [pc, #48]	; (40419c <usart_serial_getchar+0xd8>)
  40416a:	a901      	add	r1, sp, #4
  40416c:	4630      	mov	r0, r6
  40416e:	47a8      	blx	r5
  404170:	2800      	cmp	r0, #0
  404172:	d1fa      	bne.n	40416a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  404174:	9b01      	ldr	r3, [sp, #4]
  404176:	7023      	strb	r3, [r4, #0]
}
  404178:	e7bf      	b.n	4040fa <usart_serial_getchar+0x36>
  40417a:	bf00      	nop
  40417c:	400e0800 	.word	0x400e0800
  404180:	400e0a00 	.word	0x400e0a00
  404184:	400e1a00 	.word	0x400e1a00
  404188:	400e1c00 	.word	0x400e1c00
  40418c:	40024000 	.word	0x40024000
  404190:	40028000 	.word	0x40028000
  404194:	4002c000 	.word	0x4002c000
  404198:	004022a7 	.word	0x004022a7
  40419c:	004023b3 	.word	0x004023b3

004041a0 <usart_serial_putchar>:
{
  4041a0:	b570      	push	{r4, r5, r6, lr}
  4041a2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4041a4:	4b2a      	ldr	r3, [pc, #168]	; (404250 <usart_serial_putchar+0xb0>)
  4041a6:	4298      	cmp	r0, r3
  4041a8:	d013      	beq.n	4041d2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4041aa:	4b2a      	ldr	r3, [pc, #168]	; (404254 <usart_serial_putchar+0xb4>)
  4041ac:	4298      	cmp	r0, r3
  4041ae:	d019      	beq.n	4041e4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4041b0:	4b29      	ldr	r3, [pc, #164]	; (404258 <usart_serial_putchar+0xb8>)
  4041b2:	4298      	cmp	r0, r3
  4041b4:	d01f      	beq.n	4041f6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4041b6:	4b29      	ldr	r3, [pc, #164]	; (40425c <usart_serial_putchar+0xbc>)
  4041b8:	4298      	cmp	r0, r3
  4041ba:	d025      	beq.n	404208 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4041bc:	4b28      	ldr	r3, [pc, #160]	; (404260 <usart_serial_putchar+0xc0>)
  4041be:	4298      	cmp	r0, r3
  4041c0:	d02b      	beq.n	40421a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4041c2:	4b28      	ldr	r3, [pc, #160]	; (404264 <usart_serial_putchar+0xc4>)
  4041c4:	4298      	cmp	r0, r3
  4041c6:	d031      	beq.n	40422c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4041c8:	4b27      	ldr	r3, [pc, #156]	; (404268 <usart_serial_putchar+0xc8>)
  4041ca:	4298      	cmp	r0, r3
  4041cc:	d037      	beq.n	40423e <usart_serial_putchar+0x9e>
	return 0;
  4041ce:	2000      	movs	r0, #0
}
  4041d0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4041d2:	461e      	mov	r6, r3
  4041d4:	4d25      	ldr	r5, [pc, #148]	; (40426c <usart_serial_putchar+0xcc>)
  4041d6:	4621      	mov	r1, r4
  4041d8:	4630      	mov	r0, r6
  4041da:	47a8      	blx	r5
  4041dc:	2800      	cmp	r0, #0
  4041de:	d1fa      	bne.n	4041d6 <usart_serial_putchar+0x36>
		return 1;
  4041e0:	2001      	movs	r0, #1
  4041e2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4041e4:	461e      	mov	r6, r3
  4041e6:	4d21      	ldr	r5, [pc, #132]	; (40426c <usart_serial_putchar+0xcc>)
  4041e8:	4621      	mov	r1, r4
  4041ea:	4630      	mov	r0, r6
  4041ec:	47a8      	blx	r5
  4041ee:	2800      	cmp	r0, #0
  4041f0:	d1fa      	bne.n	4041e8 <usart_serial_putchar+0x48>
		return 1;
  4041f2:	2001      	movs	r0, #1
  4041f4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4041f6:	461e      	mov	r6, r3
  4041f8:	4d1c      	ldr	r5, [pc, #112]	; (40426c <usart_serial_putchar+0xcc>)
  4041fa:	4621      	mov	r1, r4
  4041fc:	4630      	mov	r0, r6
  4041fe:	47a8      	blx	r5
  404200:	2800      	cmp	r0, #0
  404202:	d1fa      	bne.n	4041fa <usart_serial_putchar+0x5a>
		return 1;
  404204:	2001      	movs	r0, #1
  404206:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404208:	461e      	mov	r6, r3
  40420a:	4d18      	ldr	r5, [pc, #96]	; (40426c <usart_serial_putchar+0xcc>)
  40420c:	4621      	mov	r1, r4
  40420e:	4630      	mov	r0, r6
  404210:	47a8      	blx	r5
  404212:	2800      	cmp	r0, #0
  404214:	d1fa      	bne.n	40420c <usart_serial_putchar+0x6c>
		return 1;
  404216:	2001      	movs	r0, #1
  404218:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40421a:	461e      	mov	r6, r3
  40421c:	4d14      	ldr	r5, [pc, #80]	; (404270 <usart_serial_putchar+0xd0>)
  40421e:	4621      	mov	r1, r4
  404220:	4630      	mov	r0, r6
  404222:	47a8      	blx	r5
  404224:	2800      	cmp	r0, #0
  404226:	d1fa      	bne.n	40421e <usart_serial_putchar+0x7e>
		return 1;
  404228:	2001      	movs	r0, #1
  40422a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40422c:	461e      	mov	r6, r3
  40422e:	4d10      	ldr	r5, [pc, #64]	; (404270 <usart_serial_putchar+0xd0>)
  404230:	4621      	mov	r1, r4
  404232:	4630      	mov	r0, r6
  404234:	47a8      	blx	r5
  404236:	2800      	cmp	r0, #0
  404238:	d1fa      	bne.n	404230 <usart_serial_putchar+0x90>
		return 1;
  40423a:	2001      	movs	r0, #1
  40423c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40423e:	461e      	mov	r6, r3
  404240:	4d0b      	ldr	r5, [pc, #44]	; (404270 <usart_serial_putchar+0xd0>)
  404242:	4621      	mov	r1, r4
  404244:	4630      	mov	r0, r6
  404246:	47a8      	blx	r5
  404248:	2800      	cmp	r0, #0
  40424a:	d1fa      	bne.n	404242 <usart_serial_putchar+0xa2>
		return 1;
  40424c:	2001      	movs	r0, #1
  40424e:	bd70      	pop	{r4, r5, r6, pc}
  404250:	400e0800 	.word	0x400e0800
  404254:	400e0a00 	.word	0x400e0a00
  404258:	400e1a00 	.word	0x400e1a00
  40425c:	400e1c00 	.word	0x400e1c00
  404260:	40024000 	.word	0x40024000
  404264:	40028000 	.word	0x40028000
  404268:	4002c000 	.word	0x4002c000
  40426c:	00402295 	.word	0x00402295
  404270:	0040239d 	.word	0x0040239d

00404274 <pin_toggle>:
/************************************************************************/

/** 
 *  Toggle pin controlado pelo PIO (out)
 */
void pin_toggle(Pio *pio, uint32_t mask){
  404274:	b538      	push	{r3, r4, r5, lr}
  404276:	4604      	mov	r4, r0
  404278:	460d      	mov	r5, r1
   if(pio_get_output_data_status(pio, mask))
  40427a:	4b06      	ldr	r3, [pc, #24]	; (404294 <pin_toggle+0x20>)
  40427c:	4798      	blx	r3
  40427e:	b920      	cbnz	r0, 40428a <pin_toggle+0x16>
    pio_clear(pio, mask);
   else
    pio_set(pio,mask);
  404280:	4629      	mov	r1, r5
  404282:	4620      	mov	r0, r4
  404284:	4b04      	ldr	r3, [pc, #16]	; (404298 <pin_toggle+0x24>)
  404286:	4798      	blx	r3
  404288:	bd38      	pop	{r3, r4, r5, pc}
    pio_clear(pio, mask);
  40428a:	4629      	mov	r1, r5
  40428c:	4620      	mov	r0, r4
  40428e:	4b03      	ldr	r3, [pc, #12]	; (40429c <pin_toggle+0x28>)
  404290:	4798      	blx	r3
  404292:	bd38      	pop	{r3, r4, r5, pc}
  404294:	00401cc9 	.word	0x00401cc9
  404298:	00401bd1 	.word	0x00401bd1
  40429c:	00401bd5 	.word	0x00401bd5

004042a0 <Button1_Handler>:
{
  4042a0:	b510      	push	{r4, lr}
  pin_toggle(PIOD, (1<<28));
  4042a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4042a6:	4804      	ldr	r0, [pc, #16]	; (4042b8 <Button1_Handler+0x18>)
  4042a8:	4c04      	ldr	r4, [pc, #16]	; (4042bc <Button1_Handler+0x1c>)
  4042aa:	47a0      	blx	r4
  pin_toggle(LED_PIO, LED_PIN_MASK);
  4042ac:	f44f 7180 	mov.w	r1, #256	; 0x100
  4042b0:	4803      	ldr	r0, [pc, #12]	; (4042c0 <Button1_Handler+0x20>)
  4042b2:	47a0      	blx	r4
  4042b4:	bd10      	pop	{r4, pc}
  4042b6:	bf00      	nop
  4042b8:	400e1400 	.word	0x400e1400
  4042bc:	00404275 	.word	0x00404275
  4042c0:	400e1200 	.word	0x400e1200

004042c4 <BUT_init>:
}

/**
 * @Brief Inicializa o pino do BUT
 */
void BUT_init(void){
  4042c4:	b510      	push	{r4, lr}
  4042c6:	b082      	sub	sp, #8
    /* config. pino botao em modo de entrada */
    pmc_enable_periph_clk(BUT_PIO_ID);
  4042c8:	200a      	movs	r0, #10
  4042ca:	4b10      	ldr	r3, [pc, #64]	; (40430c <BUT_init+0x48>)
  4042cc:	4798      	blx	r3
    pio_set_input(BUT_PIO, BUT_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4042ce:	4c10      	ldr	r4, [pc, #64]	; (404310 <BUT_init+0x4c>)
  4042d0:	2209      	movs	r2, #9
  4042d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4042d6:	4620      	mov	r0, r4
  4042d8:	4b0e      	ldr	r3, [pc, #56]	; (404314 <BUT_init+0x50>)
  4042da:	4798      	blx	r3
    
    /* config. interrupcao em borda de descida no botao do kit */
    /* indica funcao (but_Handler) a ser chamada quando houver uma interrup??o */
    pio_enable_interrupt(BUT_PIO, BUT_PIN_MASK);
  4042dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4042e0:	4620      	mov	r0, r4
  4042e2:	4b0d      	ldr	r3, [pc, #52]	; (404318 <BUT_init+0x54>)
  4042e4:	4798      	blx	r3
    pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIN_MASK, PIO_IT_FALL_EDGE, Button1_Handler);
  4042e6:	4b0d      	ldr	r3, [pc, #52]	; (40431c <BUT_init+0x58>)
  4042e8:	9300      	str	r3, [sp, #0]
  4042ea:	2350      	movs	r3, #80	; 0x50
  4042ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4042f0:	210a      	movs	r1, #10
  4042f2:	4620      	mov	r0, r4
  4042f4:	4c0a      	ldr	r4, [pc, #40]	; (404320 <BUT_init+0x5c>)
  4042f6:	47a0      	blx	r4
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4042f8:	4b0a      	ldr	r3, [pc, #40]	; (404324 <BUT_init+0x60>)
  4042fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4042fe:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404300:	2220      	movs	r2, #32
  404302:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    
    /* habilita interrup?c?o do PIO que controla o botao */
    /* e configura sua prioridade                        */
    NVIC_EnableIRQ(BUT_PIO_ID);
    NVIC_SetPriority(BUT_PIO_ID, 1);
};
  404306:	b002      	add	sp, #8
  404308:	bd10      	pop	{r4, pc}
  40430a:	bf00      	nop
  40430c:	00401f59 	.word	0x00401f59
  404310:	400e0e00 	.word	0x400e0e00
  404314:	00401c6b 	.word	0x00401c6b
  404318:	00401d07 	.word	0x00401d07
  40431c:	004042a1 	.word	0x004042a1
  404320:	00401d65 	.word	0x00401d65
  404324:	e000e100 	.word	0xe000e100

00404328 <LED_init>:

/**
 * @Brief Inicializa o pino do LED
 */
void LED_init(int estado){
  404328:	b510      	push	{r4, lr}
  40432a:	b082      	sub	sp, #8
  40432c:	4604      	mov	r4, r0
    pmc_enable_periph_clk(LED_PIO_ID);
  40432e:	200c      	movs	r0, #12
  404330:	4b05      	ldr	r3, [pc, #20]	; (404348 <LED_init+0x20>)
  404332:	4798      	blx	r3
    pio_set_output(LED_PIO, LED_PIN_MASK, estado, 0, 0 );
  404334:	2300      	movs	r3, #0
  404336:	9300      	str	r3, [sp, #0]
  404338:	4622      	mov	r2, r4
  40433a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40433e:	4803      	ldr	r0, [pc, #12]	; (40434c <LED_init+0x24>)
  404340:	4c03      	ldr	r4, [pc, #12]	; (404350 <LED_init+0x28>)
  404342:	47a0      	blx	r4
};
  404344:	b002      	add	sp, #8
  404346:	bd10      	pop	{r4, pc}
  404348:	00401f59 	.word	0x00401f59
  40434c:	400e1200 	.word	0x400e1200
  404350:	00401ca1 	.word	0x00401ca1

00404354 <bme280_i2c_bus_init>:
/************************************************************************/ 
/*	
 *  \Brief: The function is used as I2C bus init
 */
void bme280_i2c_bus_init(void)
{
  404354:	b500      	push	{lr}
  404356:	b085      	sub	sp, #20
	twihs_options_t bno055_option;
	pmc_enable_periph_clk(TWIHS_MCU6050_ID);
  404358:	2013      	movs	r0, #19
  40435a:	4b07      	ldr	r3, [pc, #28]	; (404378 <bme280_i2c_bus_init+0x24>)
  40435c:	4798      	blx	r3

	/* Configure the options of TWI driver */
	bno055_option.master_clk = sysclk_get_cpu_hz();
  40435e:	4b07      	ldr	r3, [pc, #28]	; (40437c <bme280_i2c_bus_init+0x28>)
  404360:	9301      	str	r3, [sp, #4]
	bno055_option.speed      = 10000;
  404362:	f242 7310 	movw	r3, #10000	; 0x2710
  404366:	9302      	str	r3, [sp, #8]
	twihs_master_init(TWIHS_MCU6050, &bno055_option);
  404368:	a901      	add	r1, sp, #4
  40436a:	4805      	ldr	r0, [pc, #20]	; (404380 <bme280_i2c_bus_init+0x2c>)
  40436c:	4b05      	ldr	r3, [pc, #20]	; (404384 <bme280_i2c_bus_init+0x30>)
  40436e:	4798      	blx	r3
}
  404370:	b005      	add	sp, #20
  404372:	f85d fb04 	ldr.w	pc, [sp], #4
  404376:	bf00      	nop
  404378:	00401f59 	.word	0x00401f59
  40437c:	11e1a300 	.word	0x11e1a300
  404380:	40018000 	.word	0x40018000
  404384:	00402129 	.word	0x00402129

00404388 <bme280_i2c_read_reg>:

uint8_t bme280_i2c_read_reg(uint CHIP_ADDRESS, uint reg_address, char *value){
  404388:	b510      	push	{r4, lr}
  40438a:	b086      	sub	sp, #24
  40438c:	4614      	mov	r4, r2
  	uint i = 1;
    
  	  twihs_packet_t p_packet;
  	  p_packet.chip         = CHIP_ADDRESS;//BME280_ADDRESS;
  40438e:	f88d 0014 	strb.w	r0, [sp, #20]
  	  p_packet.addr_length  = 0;
  404392:	2300      	movs	r3, #0
  404394:	9302      	str	r3, [sp, #8]

  	  char data = reg_address; //BME280_CHIP_ID_REG;
  404396:	ab06      	add	r3, sp, #24
  404398:	f803 1d15 	strb.w	r1, [r3, #-21]!
  	  p_packet.buffer       = &data;
  40439c:	9303      	str	r3, [sp, #12]
  	  p_packet.length       = 1;
  40439e:	2301      	movs	r3, #1
  4043a0:	9304      	str	r3, [sp, #16]
  	
  	  if(twihs_master_write(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  4043a2:	a901      	add	r1, sp, #4
  4043a4:	4809      	ldr	r0, [pc, #36]	; (4043cc <bme280_i2c_read_reg+0x44>)
  4043a6:	4b0a      	ldr	r3, [pc, #40]	; (4043d0 <bme280_i2c_read_reg+0x48>)
  4043a8:	4798      	blx	r3
  4043aa:	b110      	cbz	r0, 4043b2 <bme280_i2c_read_reg+0x2a>
  	    return 1;
  4043ac:	2001      	movs	r0, #1

  	  if(twihs_master_read(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  	    return 1;
        
    return 0;  
}
  4043ae:	b006      	add	sp, #24
  4043b0:	bd10      	pop	{r4, pc}
  	  p_packet.addr_length  = 0;
  4043b2:	2300      	movs	r3, #0
  4043b4:	9302      	str	r3, [sp, #8]
  	  p_packet.length       = 1;
  4043b6:	2301      	movs	r3, #1
  4043b8:	9304      	str	r3, [sp, #16]
      p_packet.buffer       = value;
  4043ba:	9403      	str	r4, [sp, #12]
  	  if(twihs_master_read(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  4043bc:	a901      	add	r1, sp, #4
  4043be:	4803      	ldr	r0, [pc, #12]	; (4043cc <bme280_i2c_read_reg+0x44>)
  4043c0:	4b04      	ldr	r3, [pc, #16]	; (4043d4 <bme280_i2c_read_reg+0x4c>)
  4043c2:	4798      	blx	r3
  	    return 1;
  4043c4:	3000      	adds	r0, #0
  4043c6:	bf18      	it	ne
  4043c8:	2001      	movne	r0, #1
  4043ca:	e7f0      	b.n	4043ae <bme280_i2c_read_reg+0x26>
  4043cc:	40018000 	.word	0x40018000
  4043d0:	004021f5 	.word	0x004021f5
  4043d4:	0040215d 	.word	0x0040215d

004043d8 <bme280_i2c_config_temp>:

int8_t bme280_i2c_config_temp(void){
  4043d8:	b500      	push	{lr}
  4043da:	b087      	sub	sp, #28
  	int32_t ierror = 0x00;
  	
  	twihs_packet_t p_packet;
  	p_packet.chip         = BME280_ADDRESS;//BME280_ADDRESS;
  4043dc:	2377      	movs	r3, #119	; 0x77
  4043de:	f88d 3014 	strb.w	r3, [sp, #20]
    p_packet.addr[0]      = BME280_CTRL_MEAS_REG;
  4043e2:	23f4      	movs	r3, #244	; 0xf4
  4043e4:	f88d 3004 	strb.w	r3, [sp, #4]
  	p_packet.addr_length  = 1;
  4043e8:	2201      	movs	r2, #1
  4043ea:	9202      	str	r2, [sp, #8]

  	char data = 0b00100111; //BME280_CHIP_ID_REG;
  4043ec:	ab06      	add	r3, sp, #24
  4043ee:	2127      	movs	r1, #39	; 0x27
  4043f0:	f803 1d15 	strb.w	r1, [r3, #-21]!
  	p_packet.buffer       = &data;
  4043f4:	9303      	str	r3, [sp, #12]
  	p_packet.length       = 1;
  4043f6:	9204      	str	r2, [sp, #16]
  	
  	if(twihs_master_write(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  4043f8:	a901      	add	r1, sp, #4
  4043fa:	4804      	ldr	r0, [pc, #16]	; (40440c <bme280_i2c_config_temp+0x34>)
  4043fc:	4b04      	ldr	r3, [pc, #16]	; (404410 <bme280_i2c_config_temp+0x38>)
  4043fe:	4798      	blx	r3
  404400:	b100      	cbz	r0, 404404 <bme280_i2c_config_temp+0x2c>
  	return 1;
  404402:	2001      	movs	r0, #1
}
  404404:	b007      	add	sp, #28
  404406:	f85d fb04 	ldr.w	pc, [sp], #4
  40440a:	bf00      	nop
  40440c:	40018000 	.word	0x40018000
  404410:	004021f5 	.word	0x004021f5

00404414 <bme280_i2c_read_temp>:

int8_t bme280_i2c_read_temp(uint *temp)
{
  404414:	b530      	push	{r4, r5, lr}
  404416:	b083      	sub	sp, #12
  404418:	4605      	mov	r5, r0
	int32_t ierror = 0x00;
  char tmp[3];
  
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_MSB_REG, &tmp[2]);
  40441a:	f10d 0206 	add.w	r2, sp, #6
  40441e:	21fa      	movs	r1, #250	; 0xfa
  404420:	2077      	movs	r0, #119	; 0x77
  404422:	4c0d      	ldr	r4, [pc, #52]	; (404458 <bme280_i2c_read_temp+0x44>)
  404424:	47a0      	blx	r4
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_MSB_REG, &tmp[2]);
  404426:	f10d 0206 	add.w	r2, sp, #6
  40442a:	21fa      	movs	r1, #250	; 0xfa
  40442c:	2077      	movs	r0, #119	; 0x77
  40442e:	47a0      	blx	r4
  
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_LSB_REG, &tmp[1]);
  404430:	f10d 0205 	add.w	r2, sp, #5
  404434:	21fb      	movs	r1, #251	; 0xfb
  404436:	2077      	movs	r0, #119	; 0x77
  404438:	47a0      	blx	r4
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_LSB_REG, &tmp[1]);
  40443a:	f10d 0205 	add.w	r2, sp, #5
  40443e:	21fb      	movs	r1, #251	; 0xfb
  404440:	2077      	movs	r0, #119	; 0x77
  404442:	47a0      	blx	r4

  *temp = tmp[2] << 8 | tmp[1];
  404444:	f89d 2006 	ldrb.w	r2, [sp, #6]
  404448:	f89d 3005 	ldrb.w	r3, [sp, #5]
  40444c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404450:	602b      	str	r3, [r5, #0]
	return 0;
}
  404452:	2000      	movs	r0, #0
  404454:	b003      	add	sp, #12
  404456:	bd30      	pop	{r4, r5, pc}
  404458:	00404389 	.word	0x00404389

0040445c <bme280_i2c_read_humd>:

int8_t bme280_i2c_read_humd(uint *humd)
{
  40445c:	b530      	push	{r4, r5, lr}
  40445e:	b083      	sub	sp, #12
  404460:	4605      	mov	r5, r0
	int32_t ierror = 0x00;
	char hum[3];
	
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_MSB_REG, &hum[2]);
  404462:	f10d 0206 	add.w	r2, sp, #6
  404466:	21fd      	movs	r1, #253	; 0xfd
  404468:	2077      	movs	r0, #119	; 0x77
  40446a:	4c0d      	ldr	r4, [pc, #52]	; (4044a0 <bme280_i2c_read_humd+0x44>)
  40446c:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_MSB_REG, &hum[2]);
  40446e:	f10d 0206 	add.w	r2, sp, #6
  404472:	21fd      	movs	r1, #253	; 0xfd
  404474:	2077      	movs	r0, #119	; 0x77
  404476:	47a0      	blx	r4
	
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_LSB_REG, &hum[1]);
  404478:	f10d 0205 	add.w	r2, sp, #5
  40447c:	21fe      	movs	r1, #254	; 0xfe
  40447e:	2077      	movs	r0, #119	; 0x77
  404480:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_LSB_REG, &hum[1]);
  404482:	f10d 0205 	add.w	r2, sp, #5
  404486:	21fe      	movs	r1, #254	; 0xfe
  404488:	2077      	movs	r0, #119	; 0x77
  40448a:	47a0      	blx	r4

	*humd = hum[2] << 8 | hum[1];
  40448c:	f89d 2006 	ldrb.w	r2, [sp, #6]
  404490:	f89d 3005 	ldrb.w	r3, [sp, #5]
  404494:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404498:	602b      	str	r3, [r5, #0]
	return 0;
}
  40449a:	2000      	movs	r0, #0
  40449c:	b003      	add	sp, #12
  40449e:	bd30      	pop	{r4, r5, pc}
  4044a0:	00404389 	.word	0x00404389

004044a4 <bme280_i2c_read_prss>:

int8_t bme280_i2c_read_prss(uint *prss)
{
  4044a4:	b530      	push	{r4, r5, lr}
  4044a6:	b083      	sub	sp, #12
  4044a8:	4605      	mov	r5, r0
	int32_t ierror = 0x00;
	char prs[3];
	
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_MSB_REG, &prs[2]);
  4044aa:	f10d 0206 	add.w	r2, sp, #6
  4044ae:	21f7      	movs	r1, #247	; 0xf7
  4044b0:	2077      	movs	r0, #119	; 0x77
  4044b2:	4c0d      	ldr	r4, [pc, #52]	; (4044e8 <bme280_i2c_read_prss+0x44>)
  4044b4:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_MSB_REG, &prs[2]);
  4044b6:	f10d 0206 	add.w	r2, sp, #6
  4044ba:	21f7      	movs	r1, #247	; 0xf7
  4044bc:	2077      	movs	r0, #119	; 0x77
  4044be:	47a0      	blx	r4
	
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_LSB_REG, &prs[1]);
  4044c0:	f10d 0205 	add.w	r2, sp, #5
  4044c4:	21f8      	movs	r1, #248	; 0xf8
  4044c6:	2077      	movs	r0, #119	; 0x77
  4044c8:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_LSB_REG, &prs[1]);
  4044ca:	f10d 0205 	add.w	r2, sp, #5
  4044ce:	21f8      	movs	r1, #248	; 0xf8
  4044d0:	2077      	movs	r0, #119	; 0x77
  4044d2:	47a0      	blx	r4

	*prss = prs[2] << 8 | prs[1];
  4044d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
  4044d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4044dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4044e0:	602b      	str	r3, [r5, #0]
	return 0;
}
  4044e2:	2000      	movs	r0, #0
  4044e4:	b003      	add	sp, #12
  4044e6:	bd30      	pop	{r4, r5, pc}
  4044e8:	00404389 	.word	0x00404389

004044ec <bme280_validate_id>:

uint8_t bme280_validate_id(void){
  4044ec:	b510      	push	{r4, lr}
  4044ee:	b082      	sub	sp, #8
  char id;
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_CHIP_ID_REG, &id );
  4044f0:	f10d 0207 	add.w	r2, sp, #7
  4044f4:	21d0      	movs	r1, #208	; 0xd0
  4044f6:	2077      	movs	r0, #119	; 0x77
  4044f8:	4c08      	ldr	r4, [pc, #32]	; (40451c <bme280_validate_id+0x30>)
  4044fa:	47a0      	blx	r4
  if (bme280_i2c_read_reg(BME280_ADDRESS, BME280_CHIP_ID_REG, &id )) 
  4044fc:	f10d 0207 	add.w	r2, sp, #7
  404500:	21d0      	movs	r1, #208	; 0xd0
  404502:	2077      	movs	r0, #119	; 0x77
  404504:	47a0      	blx	r4
  404506:	b930      	cbnz	r0, 404516 <bme280_validate_id+0x2a>
    return 1;
  if (id != 0x60)
  404508:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40450c:	3860      	subs	r0, #96	; 0x60
  40450e:	bf18      	it	ne
  404510:	2001      	movne	r0, #1
    return 1;
  return 0; 
}
  404512:	b002      	add	sp, #8
  404514:	bd10      	pop	{r4, pc}
  404516:	2001      	movs	r0, #1
  404518:	e7fb      	b.n	404512 <bme280_validate_id+0x26>
  40451a:	bf00      	nop
  40451c:	00404389 	.word	0x00404389

00404520 <main>:

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  404520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404524:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
  uint8_t bufferTX[100];
  
  uint8_t rtn;

  /* Initialize the SAM system */
  sysclk_init();
  404528:	4b99      	ldr	r3, [pc, #612]	; (404790 <main+0x270>)
  40452a:	4798      	blx	r3
  board_init();
  40452c:	4b99      	ldr	r3, [pc, #612]	; (404794 <main+0x274>)
  40452e:	4798      	blx	r3
   
  /* Disable the watchdog */
  WDT->WDT_MR = WDT_MR_WDDIS;
  404530:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404534:	4b98      	ldr	r3, [pc, #608]	; (404798 <main+0x278>)
  404536:	605a      	str	r2, [r3, #4]
  404538:	200b      	movs	r0, #11
  40453a:	4e98      	ldr	r6, [pc, #608]	; (40479c <main+0x27c>)
  40453c:	47b0      	blx	r6
  40453e:	200a      	movs	r0, #10
  404540:	47b0      	blx	r6
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  404542:	2210      	movs	r2, #16
  404544:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404548:	4895      	ldr	r0, [pc, #596]	; (4047a0 <main+0x280>)
  40454a:	4c96      	ldr	r4, [pc, #600]	; (4047a4 <main+0x284>)
  40454c:	47a0      	blx	r4
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  40454e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  404552:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404556:	4894      	ldr	r0, [pc, #592]	; (4047a8 <main+0x288>)
  404558:	47a0      	blx	r4
 	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40455a:	4a94      	ldr	r2, [pc, #592]	; (4047ac <main+0x28c>)
  40455c:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  404560:	f043 0310 	orr.w	r3, r3, #16
  404564:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  404568:	200e      	movs	r0, #14
  40456a:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40456c:	f8df b304 	ldr.w	fp, [pc, #772]	; 404874 <main+0x354>
  404570:	4d8f      	ldr	r5, [pc, #572]	; (4047b0 <main+0x290>)
  404572:	f8cb 5000 	str.w	r5, [fp]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404576:	4b8f      	ldr	r3, [pc, #572]	; (4047b4 <main+0x294>)
  404578:	4a8f      	ldr	r2, [pc, #572]	; (4047b8 <main+0x298>)
  40457a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40457c:	4b8f      	ldr	r3, [pc, #572]	; (4047bc <main+0x29c>)
  40457e:	4a90      	ldr	r2, [pc, #576]	; (4047c0 <main+0x2a0>)
  404580:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  404582:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  404586:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  404588:	23c0      	movs	r3, #192	; 0xc0
  40458a:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  40458c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404590:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  404592:	2400      	movs	r4, #0
  404594:	9404      	str	r4, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404596:	9405      	str	r4, [sp, #20]
  404598:	200e      	movs	r0, #14
  40459a:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40459c:	4a89      	ldr	r2, [pc, #548]	; (4047c4 <main+0x2a4>)
  40459e:	a901      	add	r1, sp, #4
  4045a0:	4628      	mov	r0, r5
  4045a2:	4b89      	ldr	r3, [pc, #548]	; (4047c8 <main+0x2a8>)
  4045a4:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4045a6:	4628      	mov	r0, r5
  4045a8:	4b88      	ldr	r3, [pc, #544]	; (4047cc <main+0x2ac>)
  4045aa:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4045ac:	4628      	mov	r0, r5
  4045ae:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 404878 <main+0x358>
  4045b2:	47d0      	blx	sl
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4045b4:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 40487c <main+0x35c>
  4045b8:	f8d9 3000 	ldr.w	r3, [r9]
  4045bc:	4621      	mov	r1, r4
  4045be:	6898      	ldr	r0, [r3, #8]
  4045c0:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 404880 <main+0x360>
  4045c4:	47c0      	blx	r8
	setbuf(stdin, NULL);
  4045c6:	f8d9 3000 	ldr.w	r3, [r9]
  4045ca:	4621      	mov	r1, r4
  4045cc:	6858      	ldr	r0, [r3, #4]
  4045ce:	47c0      	blx	r8
  
  /* Inicializa com serial com PC*/
  configure_console();
  printf("Demo do sensor BME280, sem calibracao! \n");
  4045d0:	487f      	ldr	r0, [pc, #508]	; (4047d0 <main+0x2b0>)
  4045d2:	4f80      	ldr	r7, [pc, #512]	; (4047d4 <main+0x2b4>)
  4045d4:	47b8      	blx	r7
  
  /* Configura Leds */
  LED_init(1);
  4045d6:	2001      	movs	r0, #1
  4045d8:	4b7f      	ldr	r3, [pc, #508]	; (4047d8 <main+0x2b8>)
  4045da:	4798      	blx	r3
  
  /* Configura os bot?es */
  BUT_init();  
  4045dc:	4b7f      	ldr	r3, [pc, #508]	; (4047dc <main+0x2bc>)
  4045de:	4798      	blx	r3
  
  /* Inicializa funcao de delay */
  delay_init( sysclk_get_cpu_hz());
  
  /* sd-card */
   char test_file_name[] = "0:sd_mmc_test.txt";
  4045e0:	f50d 7e1f 	add.w	lr, sp, #636	; 0x27c
  4045e4:	f8df c29c 	ldr.w	ip, [pc, #668]	; 404884 <main+0x364>
  4045e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4045ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4045f0:	f8dc 3000 	ldr.w	r3, [ip]
  4045f4:	f8ae 3000 	strh.w	r3, [lr]
	   .paritytype = CONF_TEST_PARITY,
	   .stopbits   = CONF_TEST_STOPBITS,
   };
  
   irq_initialize_vectors();
   cpu_irq_enable();
  4045f8:	2201      	movs	r2, #1
  4045fa:	4b79      	ldr	r3, [pc, #484]	; (4047e0 <main+0x2c0>)
  4045fc:	701a      	strb	r2, [r3, #0]
  4045fe:	f3bf 8f5f 	dmb	sy
  404602:	b662      	cpsie	i
	stdio_base = (void *)usart;
  404604:	f8cb 5000 	str.w	r5, [fp]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404608:	4b6a      	ldr	r3, [pc, #424]	; (4047b4 <main+0x294>)
  40460a:	4a6b      	ldr	r2, [pc, #428]	; (4047b8 <main+0x298>)
  40460c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40460e:	4b6b      	ldr	r3, [pc, #428]	; (4047bc <main+0x29c>)
  404610:	4a6b      	ldr	r2, [pc, #428]	; (4047c0 <main+0x2a0>)
  404612:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  404614:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  404618:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  40461a:	23c0      	movs	r3, #192	; 0xc0
  40461c:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  40461e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404622:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  404624:	9404      	str	r4, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404626:	9405      	str	r4, [sp, #20]
  404628:	200e      	movs	r0, #14
  40462a:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40462c:	4a65      	ldr	r2, [pc, #404]	; (4047c4 <main+0x2a4>)
  40462e:	a901      	add	r1, sp, #4
  404630:	4628      	mov	r0, r5
  404632:	4b65      	ldr	r3, [pc, #404]	; (4047c8 <main+0x2a8>)
  404634:	4798      	blx	r3
		usart_enable_tx(p_usart);
  404636:	4628      	mov	r0, r5
  404638:	4b64      	ldr	r3, [pc, #400]	; (4047cc <main+0x2ac>)
  40463a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40463c:	4628      	mov	r0, r5
  40463e:	47d0      	blx	sl
	setbuf(stdout, NULL);
  404640:	f8d9 3000 	ldr.w	r3, [r9]
  404644:	4621      	mov	r1, r4
  404646:	6898      	ldr	r0, [r3, #8]
  404648:	47c0      	blx	r8
	setbuf(stdin, NULL);
  40464a:	f8d9 3000 	ldr.w	r3, [r9]
  40464e:	4621      	mov	r1, r4
  404650:	6858      	ldr	r0, [r3, #4]
  404652:	47c0      	blx	r8

   stdio_serial_init(CONF_TEST_USART, &usart_serial_options);

   /* Initialize SD MMC stack */
   sd_mmc_init();
  404654:	4b63      	ldr	r3, [pc, #396]	; (4047e4 <main+0x2c4>)
  404656:	4798      	blx	r3

   printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  404658:	4863      	ldr	r0, [pc, #396]	; (4047e8 <main+0x2c8>)
  40465a:	47b8      	blx	r7
   printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  40465c:	4a63      	ldr	r2, [pc, #396]	; (4047ec <main+0x2cc>)
  40465e:	4964      	ldr	r1, [pc, #400]	; (4047f0 <main+0x2d0>)
  404660:	4864      	ldr	r0, [pc, #400]	; (4047f4 <main+0x2d4>)
  404662:	47b8      	blx	r7
  /************************************************************************/
  /* MPU                                                                  */
  /************************************************************************/
  
  /* Inicializa i2c */
  printf("Inicializando bus i2c \n");
  404664:	4864      	ldr	r0, [pc, #400]	; (4047f8 <main+0x2d8>)
  404666:	47b8      	blx	r7
  bme280_i2c_bus_init();
  404668:	4b64      	ldr	r3, [pc, #400]	; (4047fc <main+0x2dc>)
  40466a:	4798      	blx	r3
  delay_ms(10);
  40466c:	4864      	ldr	r0, [pc, #400]	; (404800 <main+0x2e0>)
  40466e:	4b65      	ldr	r3, [pc, #404]	; (404804 <main+0x2e4>)
  404670:	4798      	blx	r3
  
  /* verificando presenca do chip */
  while(bme280_validate_id()){
  404672:	4e65      	ldr	r6, [pc, #404]	; (404808 <main+0x2e8>)
    printf("Chip nao encontrado\n");
  404674:	4d65      	ldr	r5, [pc, #404]	; (40480c <main+0x2ec>)
    delay_ms(200);
  404676:	4c66      	ldr	r4, [pc, #408]	; (404810 <main+0x2f0>)
  while(bme280_validate_id()){
  404678:	47b0      	blx	r6
  40467a:	2800      	cmp	r0, #0
  40467c:	d12a      	bne.n	4046d4 <main+0x1b4>
  }    
   
  printf("Chip encontrado, inicializando temperatura \n");
  40467e:	4865      	ldr	r0, [pc, #404]	; (404814 <main+0x2f4>)
  404680:	4b54      	ldr	r3, [pc, #336]	; (4047d4 <main+0x2b4>)
  404682:	4798      	blx	r3
  bme280_i2c_config_temp();
  404684:	4b64      	ldr	r3, [pc, #400]	; (404818 <main+0x2f8>)
  404686:	4798      	blx	r3
    
	uint temp;
	uint humd;
	uint prss;
	while (1) {
		if (bme280_i2c_read_temp(&temp)){
  404688:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 404888 <main+0x368>
			printf("erro readinG temperature \n");
		}else{
			printf("Temperatura: %d \n", temp/100);
  40468c:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 40488c <main+0x36c>
  404690:	4e50      	ldr	r6, [pc, #320]	; (4047d4 <main+0x2b4>)
		if (bme280_i2c_read_prss(&prss)){
			printf("erro press");
		}else{
			printf("pressao: %d \n", prss/100);
		}
		pin_toggle(LED_PIO, LED_PIN_MASK);
  404692:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 404890 <main+0x370>
		if (bme280_i2c_read_temp(&temp)){
  404696:	a809      	add	r0, sp, #36	; 0x24
  404698:	47d8      	blx	fp
  40469a:	b310      	cbz	r0, 4046e2 <main+0x1c2>
			printf("erro readinG temperature \n");
  40469c:	485f      	ldr	r0, [pc, #380]	; (40481c <main+0x2fc>)
  40469e:	47b0      	blx	r6
		if (bme280_i2c_read_humd(&humd)){
  4046a0:	a808      	add	r0, sp, #32
  4046a2:	4b5f      	ldr	r3, [pc, #380]	; (404820 <main+0x300>)
  4046a4:	4798      	blx	r3
  4046a6:	b318      	cbz	r0, 4046f0 <main+0x1d0>
			printf("erro humidade");
  4046a8:	485e      	ldr	r0, [pc, #376]	; (404824 <main+0x304>)
  4046aa:	47b0      	blx	r6
		if (bme280_i2c_read_prss(&prss)){
  4046ac:	a807      	add	r0, sp, #28
  4046ae:	4b5e      	ldr	r3, [pc, #376]	; (404828 <main+0x308>)
  4046b0:	4798      	blx	r3
  4046b2:	b320      	cbz	r0, 4046fe <main+0x1de>
			printf("erro press");
  4046b4:	485d      	ldr	r0, [pc, #372]	; (40482c <main+0x30c>)
  4046b6:	47b0      	blx	r6
		pin_toggle(LED_PIO, LED_PIN_MASK);
  4046b8:	f44f 7180 	mov.w	r1, #256	; 0x100
  4046bc:	4650      	mov	r0, sl
  4046be:	4b5c      	ldr	r3, [pc, #368]	; (404830 <main+0x310>)
  4046c0:	4798      	blx	r3
		delay_ms(1000);
  4046c2:	485c      	ldr	r0, [pc, #368]	; (404834 <main+0x314>)
  4046c4:	4b4f      	ldr	r3, [pc, #316]	; (404804 <main+0x2e4>)
  4046c6:	4798      	blx	r3
		
		/* sd-card */
		
		printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  4046c8:	485b      	ldr	r0, [pc, #364]	; (404838 <main+0x318>)
  4046ca:	47b0      	blx	r6

		/* Wait card present and ready */
		do {
			status = sd_mmc_test_unit_ready(0);
  4046cc:	4f5b      	ldr	r7, [pc, #364]	; (40483c <main+0x31c>)
			if (CTRL_FAIL == status) {
				printf("Card install FAIL\n\r");
  4046ce:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 404894 <main+0x374>
  4046d2:	e025      	b.n	404720 <main+0x200>
    printf("Chip nao encontrado\n");
  4046d4:	4628      	mov	r0, r5
  4046d6:	4b3f      	ldr	r3, [pc, #252]	; (4047d4 <main+0x2b4>)
  4046d8:	4798      	blx	r3
    delay_ms(200);
  4046da:	4620      	mov	r0, r4
  4046dc:	4b49      	ldr	r3, [pc, #292]	; (404804 <main+0x2e4>)
  4046de:	4798      	blx	r3
  4046e0:	e7ca      	b.n	404678 <main+0x158>
			printf("Temperatura: %d \n", temp/100);
  4046e2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4046e4:	fba9 3101 	umull	r3, r1, r9, r1
  4046e8:	0949      	lsrs	r1, r1, #5
  4046ea:	4855      	ldr	r0, [pc, #340]	; (404840 <main+0x320>)
  4046ec:	47b0      	blx	r6
  4046ee:	e7d7      	b.n	4046a0 <main+0x180>
			printf("Humidade: %d \n", humd/100);
  4046f0:	9908      	ldr	r1, [sp, #32]
  4046f2:	fba9 3101 	umull	r3, r1, r9, r1
  4046f6:	0949      	lsrs	r1, r1, #5
  4046f8:	4852      	ldr	r0, [pc, #328]	; (404844 <main+0x324>)
  4046fa:	47b0      	blx	r6
  4046fc:	e7d6      	b.n	4046ac <main+0x18c>
			printf("pressao: %d \n", prss/100);
  4046fe:	9907      	ldr	r1, [sp, #28]
  404700:	fba9 3101 	umull	r3, r1, r9, r1
  404704:	0949      	lsrs	r1, r1, #5
  404706:	4850      	ldr	r0, [pc, #320]	; (404848 <main+0x328>)
  404708:	47b0      	blx	r6
  40470a:	e7d5      	b.n	4046b8 <main+0x198>
				printf("Card install FAIL\n\r");
  40470c:	4640      	mov	r0, r8
  40470e:	47b0      	blx	r6
				printf("Please unplug and re-plug the card.\n\r");
  404710:	484e      	ldr	r0, [pc, #312]	; (40484c <main+0x32c>)
  404712:	47b0      	blx	r6
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  404714:	2500      	movs	r5, #0
  404716:	4c4e      	ldr	r4, [pc, #312]	; (404850 <main+0x330>)
  404718:	4628      	mov	r0, r5
  40471a:	47a0      	blx	r4
  40471c:	2802      	cmp	r0, #2
  40471e:	d1fb      	bne.n	404718 <main+0x1f8>
			status = sd_mmc_test_unit_ready(0);
  404720:	2000      	movs	r0, #0
  404722:	47b8      	blx	r7
			if (CTRL_FAIL == status) {
  404724:	2801      	cmp	r0, #1
  404726:	d0f1      	beq.n	40470c <main+0x1ec>
				}
			}
		} while (CTRL_GOOD != status);
  404728:	2800      	cmp	r0, #0
  40472a:	d1f9      	bne.n	404720 <main+0x200>

		printf("Mount disk (f_mount)...\r\n");
  40472c:	4849      	ldr	r0, [pc, #292]	; (404854 <main+0x334>)
  40472e:	47b0      	blx	r6
		memset(&fs, 0, sizeof(FATFS));
  404730:	f44f 720c 	mov.w	r2, #560	; 0x230
  404734:	2100      	movs	r1, #0
  404736:	a813      	add	r0, sp, #76	; 0x4c
  404738:	4b47      	ldr	r3, [pc, #284]	; (404858 <main+0x338>)
  40473a:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  40473c:	a913      	add	r1, sp, #76	; 0x4c
  40473e:	2000      	movs	r0, #0
  404740:	4b46      	ldr	r3, [pc, #280]	; (40485c <main+0x33c>)
  404742:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
  404744:	280b      	cmp	r0, #11
  404746:	d01f      	beq.n	404788 <main+0x268>
			printf("[FAIL] res %d\r\n", res);
			goto main_end_of_test;
		}
		printf("[OK]\r\n");
  404748:	4845      	ldr	r0, [pc, #276]	; (404860 <main+0x340>)
  40474a:	47b0      	blx	r6

		printf("Create a file (f_open)...\r\n");
  40474c:	4845      	ldr	r0, [pc, #276]	; (404864 <main+0x344>)
  40474e:	47b0      	blx	r6
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  404750:	a9a4      	add	r1, sp, #656	; 0x290
  404752:	2330      	movs	r3, #48	; 0x30
  404754:	f801 3d14 	strb.w	r3, [r1, #-20]!
		res = f_open(&file_object,
  404758:	220a      	movs	r2, #10
  40475a:	a80a      	add	r0, sp, #40	; 0x28
  40475c:	4b42      	ldr	r3, [pc, #264]	; (404868 <main+0x348>)
  40475e:	4798      	blx	r3
		(char const *)test_file_name,
		FA_CREATE_ALWAYS | FA_WRITE);
		if (res != FR_OK) {
  404760:	4601      	mov	r1, r0
  404762:	2800      	cmp	r0, #0
  404764:	f000 8098 	beq.w	404898 <main+0x378>
			printf("[FAIL] res %d\r\n", res);
  404768:	4840      	ldr	r0, [pc, #256]	; (40486c <main+0x34c>)
  40476a:	47b0      	blx	r6
		printf("[OK]\r\n");
		f_close(&file_object);
		printf("Test is successful.\n\r");

		main_end_of_test:
		printf("Please unplug the card.\n\r");
  40476c:	4840      	ldr	r0, [pc, #256]	; (404870 <main+0x350>)
  40476e:	47b0      	blx	r6
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  404770:	4c37      	ldr	r4, [pc, #220]	; (404850 <main+0x330>)
			printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  404772:	4f1e      	ldr	r7, [pc, #120]	; (4047ec <main+0x2cc>)
  404774:	4d1e      	ldr	r5, [pc, #120]	; (4047f0 <main+0x2d0>)
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  404776:	2000      	movs	r0, #0
  404778:	47a0      	blx	r4
  40477a:	2802      	cmp	r0, #2
  40477c:	d08b      	beq.n	404696 <main+0x176>
			printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  40477e:	463a      	mov	r2, r7
  404780:	4629      	mov	r1, r5
  404782:	481c      	ldr	r0, [pc, #112]	; (4047f4 <main+0x2d4>)
  404784:	47b0      	blx	r6
  404786:	e7f6      	b.n	404776 <main+0x256>
			printf("[FAIL] res %d\r\n", res);
  404788:	210b      	movs	r1, #11
  40478a:	4838      	ldr	r0, [pc, #224]	; (40486c <main+0x34c>)
  40478c:	47b0      	blx	r6
			goto main_end_of_test;
  40478e:	e7ed      	b.n	40476c <main+0x24c>
  404790:	00401015 	.word	0x00401015
  404794:	00401185 	.word	0x00401185
  404798:	400e1850 	.word	0x400e1850
  40479c:	00401f59 	.word	0x00401f59
  4047a0:	400e1000 	.word	0x400e1000
  4047a4:	00401bd9 	.word	0x00401bd9
  4047a8:	400e0e00 	.word	0x400e0e00
  4047ac:	40088000 	.word	0x40088000
  4047b0:	40028000 	.word	0x40028000
  4047b4:	20400af4 	.word	0x20400af4
  4047b8:	004041a1 	.word	0x004041a1
  4047bc:	20400af0 	.word	0x20400af0
  4047c0:	004040c5 	.word	0x004040c5
  4047c4:	08f0d180 	.word	0x08f0d180
  4047c8:	0040233d 	.word	0x0040233d
  4047cc:	00402391 	.word	0x00402391
  4047d0:	00407e88 	.word	0x00407e88
  4047d4:	00404935 	.word	0x00404935
  4047d8:	00404329 	.word	0x00404329
  4047dc:	004042c5 	.word	0x004042c5
  4047e0:	20400030 	.word	0x20400030
  4047e4:	0040035d 	.word	0x0040035d
  4047e8:	00407eb4 	.word	0x00407eb4
  4047ec:	00407ee4 	.word	0x00407ee4
  4047f0:	00407ef0 	.word	0x00407ef0
  4047f4:	00407efc 	.word	0x00407efc
  4047f8:	00407f14 	.word	0x00407f14
  4047fc:	00404355 	.word	0x00404355
  404800:	0007b784 	.word	0x0007b784
  404804:	20400001 	.word	0x20400001
  404808:	004044ed 	.word	0x004044ed
  40480c:	00407f2c 	.word	0x00407f2c
  404810:	009a5649 	.word	0x009a5649
  404814:	00407f44 	.word	0x00407f44
  404818:	004043d9 	.word	0x004043d9
  40481c:	00407f74 	.word	0x00407f74
  404820:	0040445d 	.word	0x0040445d
  404824:	00407fa4 	.word	0x00407fa4
  404828:	004044a5 	.word	0x004044a5
  40482c:	00407fc4 	.word	0x00407fc4
  404830:	00404275 	.word	0x00404275
  404834:	0303af6b 	.word	0x0303af6b
  404838:	00407fe0 	.word	0x00407fe0
  40483c:	00400ed5 	.word	0x00400ed5
  404840:	00407f90 	.word	0x00407f90
  404844:	00407fb4 	.word	0x00407fb4
  404848:	00407fd0 	.word	0x00407fd0
  40484c:	00408024 	.word	0x00408024
  404850:	00400389 	.word	0x00400389
  404854:	0040804c 	.word	0x0040804c
  404858:	0040495d 	.word	0x0040495d
  40485c:	00403b81 	.word	0x00403b81
  404860:	00408078 	.word	0x00408078
  404864:	00408080 	.word	0x00408080
  404868:	00403ba9 	.word	0x00403ba9
  40486c:	00408068 	.word	0x00408068
  404870:	004080f8 	.word	0x004080f8
  404874:	20400af8 	.word	0x20400af8
  404878:	00402397 	.word	0x00402397
  40487c:	20400038 	.word	0x20400038
  404880:	004049f9 	.word	0x004049f9
  404884:	00408114 	.word	0x00408114
  404888:	00404415 	.word	0x00404415
  40488c:	51eb851f 	.word	0x51eb851f
  404890:	400e1200 	.word	0x400e1200
  404894:	00408010 	.word	0x00408010
		printf("[OK]\r\n");
  404898:	480b      	ldr	r0, [pc, #44]	; (4048c8 <main+0x3a8>)
  40489a:	47b0      	blx	r6
		printf("Write to test file (f_puts)...\r\n");
  40489c:	480b      	ldr	r0, [pc, #44]	; (4048cc <main+0x3ac>)
  40489e:	47b0      	blx	r6
		if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
  4048a0:	a90a      	add	r1, sp, #40	; 0x28
  4048a2:	480b      	ldr	r0, [pc, #44]	; (4048d0 <main+0x3b0>)
  4048a4:	4b0b      	ldr	r3, [pc, #44]	; (4048d4 <main+0x3b4>)
  4048a6:	4798      	blx	r3
  4048a8:	b928      	cbnz	r0, 4048b6 <main+0x396>
			f_close(&file_object);
  4048aa:	a80a      	add	r0, sp, #40	; 0x28
  4048ac:	4b0a      	ldr	r3, [pc, #40]	; (4048d8 <main+0x3b8>)
  4048ae:	4798      	blx	r3
			printf("[FAIL]\r\n");
  4048b0:	480a      	ldr	r0, [pc, #40]	; (4048dc <main+0x3bc>)
  4048b2:	47b0      	blx	r6
			goto main_end_of_test;
  4048b4:	e75a      	b.n	40476c <main+0x24c>
		printf("[OK]\r\n");
  4048b6:	4804      	ldr	r0, [pc, #16]	; (4048c8 <main+0x3a8>)
  4048b8:	47b0      	blx	r6
		f_close(&file_object);
  4048ba:	a80a      	add	r0, sp, #40	; 0x28
  4048bc:	4b06      	ldr	r3, [pc, #24]	; (4048d8 <main+0x3b8>)
  4048be:	4798      	blx	r3
		printf("Test is successful.\n\r");
  4048c0:	4807      	ldr	r0, [pc, #28]	; (4048e0 <main+0x3c0>)
  4048c2:	47b0      	blx	r6
  4048c4:	e752      	b.n	40476c <main+0x24c>
  4048c6:	bf00      	nop
  4048c8:	00408078 	.word	0x00408078
  4048cc:	0040809c 	.word	0x0040809c
  4048d0:	004080c0 	.word	0x004080c0
  4048d4:	00404025 	.word	0x00404025
  4048d8:	00403fe1 	.word	0x00403fe1
  4048dc:	004080d4 	.word	0x004080d4
  4048e0:	004080e0 	.word	0x004080e0

004048e4 <__libc_init_array>:
  4048e4:	b570      	push	{r4, r5, r6, lr}
  4048e6:	4e0f      	ldr	r6, [pc, #60]	; (404924 <__libc_init_array+0x40>)
  4048e8:	4d0f      	ldr	r5, [pc, #60]	; (404928 <__libc_init_array+0x44>)
  4048ea:	1b76      	subs	r6, r6, r5
  4048ec:	10b6      	asrs	r6, r6, #2
  4048ee:	bf18      	it	ne
  4048f0:	2400      	movne	r4, #0
  4048f2:	d005      	beq.n	404900 <__libc_init_array+0x1c>
  4048f4:	3401      	adds	r4, #1
  4048f6:	f855 3b04 	ldr.w	r3, [r5], #4
  4048fa:	4798      	blx	r3
  4048fc:	42a6      	cmp	r6, r4
  4048fe:	d1f9      	bne.n	4048f4 <__libc_init_array+0x10>
  404900:	4e0a      	ldr	r6, [pc, #40]	; (40492c <__libc_init_array+0x48>)
  404902:	4d0b      	ldr	r5, [pc, #44]	; (404930 <__libc_init_array+0x4c>)
  404904:	1b76      	subs	r6, r6, r5
  404906:	f003 fcc3 	bl	408290 <_init>
  40490a:	10b6      	asrs	r6, r6, #2
  40490c:	bf18      	it	ne
  40490e:	2400      	movne	r4, #0
  404910:	d006      	beq.n	404920 <__libc_init_array+0x3c>
  404912:	3401      	adds	r4, #1
  404914:	f855 3b04 	ldr.w	r3, [r5], #4
  404918:	4798      	blx	r3
  40491a:	42a6      	cmp	r6, r4
  40491c:	d1f9      	bne.n	404912 <__libc_init_array+0x2e>
  40491e:	bd70      	pop	{r4, r5, r6, pc}
  404920:	bd70      	pop	{r4, r5, r6, pc}
  404922:	bf00      	nop
  404924:	0040829c 	.word	0x0040829c
  404928:	0040829c 	.word	0x0040829c
  40492c:	004082a4 	.word	0x004082a4
  404930:	0040829c 	.word	0x0040829c

00404934 <iprintf>:
  404934:	b40f      	push	{r0, r1, r2, r3}
  404936:	b500      	push	{lr}
  404938:	4907      	ldr	r1, [pc, #28]	; (404958 <iprintf+0x24>)
  40493a:	b083      	sub	sp, #12
  40493c:	ab04      	add	r3, sp, #16
  40493e:	6808      	ldr	r0, [r1, #0]
  404940:	f853 2b04 	ldr.w	r2, [r3], #4
  404944:	6881      	ldr	r1, [r0, #8]
  404946:	9301      	str	r3, [sp, #4]
  404948:	f000 f966 	bl	404c18 <_vfiprintf_r>
  40494c:	b003      	add	sp, #12
  40494e:	f85d eb04 	ldr.w	lr, [sp], #4
  404952:	b004      	add	sp, #16
  404954:	4770      	bx	lr
  404956:	bf00      	nop
  404958:	20400038 	.word	0x20400038

0040495c <memset>:
  40495c:	b470      	push	{r4, r5, r6}
  40495e:	0786      	lsls	r6, r0, #30
  404960:	d046      	beq.n	4049f0 <memset+0x94>
  404962:	1e54      	subs	r4, r2, #1
  404964:	2a00      	cmp	r2, #0
  404966:	d041      	beq.n	4049ec <memset+0x90>
  404968:	b2ca      	uxtb	r2, r1
  40496a:	4603      	mov	r3, r0
  40496c:	e002      	b.n	404974 <memset+0x18>
  40496e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404972:	d33b      	bcc.n	4049ec <memset+0x90>
  404974:	f803 2b01 	strb.w	r2, [r3], #1
  404978:	079d      	lsls	r5, r3, #30
  40497a:	d1f8      	bne.n	40496e <memset+0x12>
  40497c:	2c03      	cmp	r4, #3
  40497e:	d92e      	bls.n	4049de <memset+0x82>
  404980:	b2cd      	uxtb	r5, r1
  404982:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404986:	2c0f      	cmp	r4, #15
  404988:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40498c:	d919      	bls.n	4049c2 <memset+0x66>
  40498e:	f103 0210 	add.w	r2, r3, #16
  404992:	4626      	mov	r6, r4
  404994:	3e10      	subs	r6, #16
  404996:	2e0f      	cmp	r6, #15
  404998:	f842 5c10 	str.w	r5, [r2, #-16]
  40499c:	f842 5c0c 	str.w	r5, [r2, #-12]
  4049a0:	f842 5c08 	str.w	r5, [r2, #-8]
  4049a4:	f842 5c04 	str.w	r5, [r2, #-4]
  4049a8:	f102 0210 	add.w	r2, r2, #16
  4049ac:	d8f2      	bhi.n	404994 <memset+0x38>
  4049ae:	f1a4 0210 	sub.w	r2, r4, #16
  4049b2:	f022 020f 	bic.w	r2, r2, #15
  4049b6:	f004 040f 	and.w	r4, r4, #15
  4049ba:	3210      	adds	r2, #16
  4049bc:	2c03      	cmp	r4, #3
  4049be:	4413      	add	r3, r2
  4049c0:	d90d      	bls.n	4049de <memset+0x82>
  4049c2:	461e      	mov	r6, r3
  4049c4:	4622      	mov	r2, r4
  4049c6:	3a04      	subs	r2, #4
  4049c8:	2a03      	cmp	r2, #3
  4049ca:	f846 5b04 	str.w	r5, [r6], #4
  4049ce:	d8fa      	bhi.n	4049c6 <memset+0x6a>
  4049d0:	1f22      	subs	r2, r4, #4
  4049d2:	f022 0203 	bic.w	r2, r2, #3
  4049d6:	3204      	adds	r2, #4
  4049d8:	4413      	add	r3, r2
  4049da:	f004 0403 	and.w	r4, r4, #3
  4049de:	b12c      	cbz	r4, 4049ec <memset+0x90>
  4049e0:	b2c9      	uxtb	r1, r1
  4049e2:	441c      	add	r4, r3
  4049e4:	f803 1b01 	strb.w	r1, [r3], #1
  4049e8:	429c      	cmp	r4, r3
  4049ea:	d1fb      	bne.n	4049e4 <memset+0x88>
  4049ec:	bc70      	pop	{r4, r5, r6}
  4049ee:	4770      	bx	lr
  4049f0:	4614      	mov	r4, r2
  4049f2:	4603      	mov	r3, r0
  4049f4:	e7c2      	b.n	40497c <memset+0x20>
  4049f6:	bf00      	nop

004049f8 <setbuf>:
  4049f8:	2900      	cmp	r1, #0
  4049fa:	bf0c      	ite	eq
  4049fc:	2202      	moveq	r2, #2
  4049fe:	2200      	movne	r2, #0
  404a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a04:	f000 b800 	b.w	404a08 <setvbuf>

00404a08 <setvbuf>:
  404a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404a0c:	4c61      	ldr	r4, [pc, #388]	; (404b94 <setvbuf+0x18c>)
  404a0e:	6825      	ldr	r5, [r4, #0]
  404a10:	b083      	sub	sp, #12
  404a12:	4604      	mov	r4, r0
  404a14:	460f      	mov	r7, r1
  404a16:	4690      	mov	r8, r2
  404a18:	461e      	mov	r6, r3
  404a1a:	b115      	cbz	r5, 404a22 <setvbuf+0x1a>
  404a1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404a1e:	2b00      	cmp	r3, #0
  404a20:	d064      	beq.n	404aec <setvbuf+0xe4>
  404a22:	f1b8 0f02 	cmp.w	r8, #2
  404a26:	d006      	beq.n	404a36 <setvbuf+0x2e>
  404a28:	f1b8 0f01 	cmp.w	r8, #1
  404a2c:	f200 809f 	bhi.w	404b6e <setvbuf+0x166>
  404a30:	2e00      	cmp	r6, #0
  404a32:	f2c0 809c 	blt.w	404b6e <setvbuf+0x166>
  404a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404a38:	07d8      	lsls	r0, r3, #31
  404a3a:	d534      	bpl.n	404aa6 <setvbuf+0x9e>
  404a3c:	4621      	mov	r1, r4
  404a3e:	4628      	mov	r0, r5
  404a40:	f001 f888 	bl	405b54 <_fflush_r>
  404a44:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a46:	b141      	cbz	r1, 404a5a <setvbuf+0x52>
  404a48:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a4c:	4299      	cmp	r1, r3
  404a4e:	d002      	beq.n	404a56 <setvbuf+0x4e>
  404a50:	4628      	mov	r0, r5
  404a52:	f001 f9fd 	bl	405e50 <_free_r>
  404a56:	2300      	movs	r3, #0
  404a58:	6323      	str	r3, [r4, #48]	; 0x30
  404a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a5e:	2200      	movs	r2, #0
  404a60:	61a2      	str	r2, [r4, #24]
  404a62:	6062      	str	r2, [r4, #4]
  404a64:	061a      	lsls	r2, r3, #24
  404a66:	d43a      	bmi.n	404ade <setvbuf+0xd6>
  404a68:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404a6c:	f023 0303 	bic.w	r3, r3, #3
  404a70:	f1b8 0f02 	cmp.w	r8, #2
  404a74:	81a3      	strh	r3, [r4, #12]
  404a76:	d01d      	beq.n	404ab4 <setvbuf+0xac>
  404a78:	ab01      	add	r3, sp, #4
  404a7a:	466a      	mov	r2, sp
  404a7c:	4621      	mov	r1, r4
  404a7e:	4628      	mov	r0, r5
  404a80:	f001 fc84 	bl	40638c <__swhatbuf_r>
  404a84:	89a3      	ldrh	r3, [r4, #12]
  404a86:	4318      	orrs	r0, r3
  404a88:	81a0      	strh	r0, [r4, #12]
  404a8a:	2e00      	cmp	r6, #0
  404a8c:	d132      	bne.n	404af4 <setvbuf+0xec>
  404a8e:	9e00      	ldr	r6, [sp, #0]
  404a90:	4630      	mov	r0, r6
  404a92:	f001 fcf3 	bl	40647c <malloc>
  404a96:	4607      	mov	r7, r0
  404a98:	2800      	cmp	r0, #0
  404a9a:	d06b      	beq.n	404b74 <setvbuf+0x16c>
  404a9c:	89a3      	ldrh	r3, [r4, #12]
  404a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404aa2:	81a3      	strh	r3, [r4, #12]
  404aa4:	e028      	b.n	404af8 <setvbuf+0xf0>
  404aa6:	89a3      	ldrh	r3, [r4, #12]
  404aa8:	0599      	lsls	r1, r3, #22
  404aaa:	d4c7      	bmi.n	404a3c <setvbuf+0x34>
  404aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404aae:	f001 fc69 	bl	406384 <__retarget_lock_acquire_recursive>
  404ab2:	e7c3      	b.n	404a3c <setvbuf+0x34>
  404ab4:	2500      	movs	r5, #0
  404ab6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404ab8:	2600      	movs	r6, #0
  404aba:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404abe:	f043 0302 	orr.w	r3, r3, #2
  404ac2:	2001      	movs	r0, #1
  404ac4:	60a6      	str	r6, [r4, #8]
  404ac6:	07ce      	lsls	r6, r1, #31
  404ac8:	81a3      	strh	r3, [r4, #12]
  404aca:	6022      	str	r2, [r4, #0]
  404acc:	6122      	str	r2, [r4, #16]
  404ace:	6160      	str	r0, [r4, #20]
  404ad0:	d401      	bmi.n	404ad6 <setvbuf+0xce>
  404ad2:	0598      	lsls	r0, r3, #22
  404ad4:	d53e      	bpl.n	404b54 <setvbuf+0x14c>
  404ad6:	4628      	mov	r0, r5
  404ad8:	b003      	add	sp, #12
  404ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404ade:	6921      	ldr	r1, [r4, #16]
  404ae0:	4628      	mov	r0, r5
  404ae2:	f001 f9b5 	bl	405e50 <_free_r>
  404ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404aea:	e7bd      	b.n	404a68 <setvbuf+0x60>
  404aec:	4628      	mov	r0, r5
  404aee:	f001 f889 	bl	405c04 <__sinit>
  404af2:	e796      	b.n	404a22 <setvbuf+0x1a>
  404af4:	2f00      	cmp	r7, #0
  404af6:	d0cb      	beq.n	404a90 <setvbuf+0x88>
  404af8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404afa:	2b00      	cmp	r3, #0
  404afc:	d033      	beq.n	404b66 <setvbuf+0x15e>
  404afe:	9b00      	ldr	r3, [sp, #0]
  404b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404b04:	6027      	str	r7, [r4, #0]
  404b06:	429e      	cmp	r6, r3
  404b08:	bf1c      	itt	ne
  404b0a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404b0e:	81a2      	strhne	r2, [r4, #12]
  404b10:	f1b8 0f01 	cmp.w	r8, #1
  404b14:	bf04      	itt	eq
  404b16:	f042 0201 	orreq.w	r2, r2, #1
  404b1a:	81a2      	strheq	r2, [r4, #12]
  404b1c:	b292      	uxth	r2, r2
  404b1e:	f012 0308 	ands.w	r3, r2, #8
  404b22:	6127      	str	r7, [r4, #16]
  404b24:	6166      	str	r6, [r4, #20]
  404b26:	d00e      	beq.n	404b46 <setvbuf+0x13e>
  404b28:	07d1      	lsls	r1, r2, #31
  404b2a:	d51a      	bpl.n	404b62 <setvbuf+0x15a>
  404b2c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b2e:	4276      	negs	r6, r6
  404b30:	2300      	movs	r3, #0
  404b32:	f015 0501 	ands.w	r5, r5, #1
  404b36:	61a6      	str	r6, [r4, #24]
  404b38:	60a3      	str	r3, [r4, #8]
  404b3a:	d009      	beq.n	404b50 <setvbuf+0x148>
  404b3c:	2500      	movs	r5, #0
  404b3e:	4628      	mov	r0, r5
  404b40:	b003      	add	sp, #12
  404b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b46:	60a3      	str	r3, [r4, #8]
  404b48:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b4a:	f015 0501 	ands.w	r5, r5, #1
  404b4e:	d1f5      	bne.n	404b3c <setvbuf+0x134>
  404b50:	0593      	lsls	r3, r2, #22
  404b52:	d4c0      	bmi.n	404ad6 <setvbuf+0xce>
  404b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b56:	f001 fc17 	bl	406388 <__retarget_lock_release_recursive>
  404b5a:	4628      	mov	r0, r5
  404b5c:	b003      	add	sp, #12
  404b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b62:	60a6      	str	r6, [r4, #8]
  404b64:	e7f0      	b.n	404b48 <setvbuf+0x140>
  404b66:	4628      	mov	r0, r5
  404b68:	f001 f84c 	bl	405c04 <__sinit>
  404b6c:	e7c7      	b.n	404afe <setvbuf+0xf6>
  404b6e:	f04f 35ff 	mov.w	r5, #4294967295
  404b72:	e7b0      	b.n	404ad6 <setvbuf+0xce>
  404b74:	f8dd 9000 	ldr.w	r9, [sp]
  404b78:	45b1      	cmp	r9, r6
  404b7a:	d004      	beq.n	404b86 <setvbuf+0x17e>
  404b7c:	4648      	mov	r0, r9
  404b7e:	f001 fc7d 	bl	40647c <malloc>
  404b82:	4607      	mov	r7, r0
  404b84:	b920      	cbnz	r0, 404b90 <setvbuf+0x188>
  404b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b8a:	f04f 35ff 	mov.w	r5, #4294967295
  404b8e:	e792      	b.n	404ab6 <setvbuf+0xae>
  404b90:	464e      	mov	r6, r9
  404b92:	e783      	b.n	404a9c <setvbuf+0x94>
  404b94:	20400038 	.word	0x20400038

00404b98 <__sprint_r.part.0>:
  404b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b9c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404b9e:	049c      	lsls	r4, r3, #18
  404ba0:	4693      	mov	fp, r2
  404ba2:	d52f      	bpl.n	404c04 <__sprint_r.part.0+0x6c>
  404ba4:	6893      	ldr	r3, [r2, #8]
  404ba6:	6812      	ldr	r2, [r2, #0]
  404ba8:	b353      	cbz	r3, 404c00 <__sprint_r.part.0+0x68>
  404baa:	460e      	mov	r6, r1
  404bac:	4607      	mov	r7, r0
  404bae:	f102 0908 	add.w	r9, r2, #8
  404bb2:	e919 0420 	ldmdb	r9, {r5, sl}
  404bb6:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404bba:	d017      	beq.n	404bec <__sprint_r.part.0+0x54>
  404bbc:	3d04      	subs	r5, #4
  404bbe:	2400      	movs	r4, #0
  404bc0:	e001      	b.n	404bc6 <__sprint_r.part.0+0x2e>
  404bc2:	45a0      	cmp	r8, r4
  404bc4:	d010      	beq.n	404be8 <__sprint_r.part.0+0x50>
  404bc6:	4632      	mov	r2, r6
  404bc8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404bcc:	4638      	mov	r0, r7
  404bce:	f001 f8bb 	bl	405d48 <_fputwc_r>
  404bd2:	1c43      	adds	r3, r0, #1
  404bd4:	f104 0401 	add.w	r4, r4, #1
  404bd8:	d1f3      	bne.n	404bc2 <__sprint_r.part.0+0x2a>
  404bda:	2300      	movs	r3, #0
  404bdc:	f8cb 3008 	str.w	r3, [fp, #8]
  404be0:	f8cb 3004 	str.w	r3, [fp, #4]
  404be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404be8:	f8db 3008 	ldr.w	r3, [fp, #8]
  404bec:	f02a 0a03 	bic.w	sl, sl, #3
  404bf0:	eba3 030a 	sub.w	r3, r3, sl
  404bf4:	f8cb 3008 	str.w	r3, [fp, #8]
  404bf8:	f109 0908 	add.w	r9, r9, #8
  404bfc:	2b00      	cmp	r3, #0
  404bfe:	d1d8      	bne.n	404bb2 <__sprint_r.part.0+0x1a>
  404c00:	2000      	movs	r0, #0
  404c02:	e7ea      	b.n	404bda <__sprint_r.part.0+0x42>
  404c04:	f001 fa0a 	bl	40601c <__sfvwrite_r>
  404c08:	2300      	movs	r3, #0
  404c0a:	f8cb 3008 	str.w	r3, [fp, #8]
  404c0e:	f8cb 3004 	str.w	r3, [fp, #4]
  404c12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c16:	bf00      	nop

00404c18 <_vfiprintf_r>:
  404c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c1c:	b0ad      	sub	sp, #180	; 0xb4
  404c1e:	461d      	mov	r5, r3
  404c20:	468b      	mov	fp, r1
  404c22:	4690      	mov	r8, r2
  404c24:	9307      	str	r3, [sp, #28]
  404c26:	9006      	str	r0, [sp, #24]
  404c28:	b118      	cbz	r0, 404c32 <_vfiprintf_r+0x1a>
  404c2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404c2c:	2b00      	cmp	r3, #0
  404c2e:	f000 80f3 	beq.w	404e18 <_vfiprintf_r+0x200>
  404c32:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c36:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404c3a:	07df      	lsls	r7, r3, #31
  404c3c:	b281      	uxth	r1, r0
  404c3e:	d402      	bmi.n	404c46 <_vfiprintf_r+0x2e>
  404c40:	058e      	lsls	r6, r1, #22
  404c42:	f140 80fc 	bpl.w	404e3e <_vfiprintf_r+0x226>
  404c46:	048c      	lsls	r4, r1, #18
  404c48:	d40a      	bmi.n	404c60 <_vfiprintf_r+0x48>
  404c4a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c4e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404c56:	f8ab 100c 	strh.w	r1, [fp, #12]
  404c5a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404c5e:	b289      	uxth	r1, r1
  404c60:	0708      	lsls	r0, r1, #28
  404c62:	f140 80b3 	bpl.w	404dcc <_vfiprintf_r+0x1b4>
  404c66:	f8db 3010 	ldr.w	r3, [fp, #16]
  404c6a:	2b00      	cmp	r3, #0
  404c6c:	f000 80ae 	beq.w	404dcc <_vfiprintf_r+0x1b4>
  404c70:	f001 031a 	and.w	r3, r1, #26
  404c74:	2b0a      	cmp	r3, #10
  404c76:	f000 80b5 	beq.w	404de4 <_vfiprintf_r+0x1cc>
  404c7a:	2300      	movs	r3, #0
  404c7c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404c80:	930b      	str	r3, [sp, #44]	; 0x2c
  404c82:	9311      	str	r3, [sp, #68]	; 0x44
  404c84:	9310      	str	r3, [sp, #64]	; 0x40
  404c86:	9303      	str	r3, [sp, #12]
  404c88:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404c8c:	46ca      	mov	sl, r9
  404c8e:	f8cd b010 	str.w	fp, [sp, #16]
  404c92:	f898 3000 	ldrb.w	r3, [r8]
  404c96:	4644      	mov	r4, r8
  404c98:	b1fb      	cbz	r3, 404cda <_vfiprintf_r+0xc2>
  404c9a:	2b25      	cmp	r3, #37	; 0x25
  404c9c:	d102      	bne.n	404ca4 <_vfiprintf_r+0x8c>
  404c9e:	e01c      	b.n	404cda <_vfiprintf_r+0xc2>
  404ca0:	2b25      	cmp	r3, #37	; 0x25
  404ca2:	d003      	beq.n	404cac <_vfiprintf_r+0x94>
  404ca4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404ca8:	2b00      	cmp	r3, #0
  404caa:	d1f9      	bne.n	404ca0 <_vfiprintf_r+0x88>
  404cac:	eba4 0508 	sub.w	r5, r4, r8
  404cb0:	b19d      	cbz	r5, 404cda <_vfiprintf_r+0xc2>
  404cb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404cb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cb6:	f8ca 8000 	str.w	r8, [sl]
  404cba:	3301      	adds	r3, #1
  404cbc:	442a      	add	r2, r5
  404cbe:	2b07      	cmp	r3, #7
  404cc0:	f8ca 5004 	str.w	r5, [sl, #4]
  404cc4:	9211      	str	r2, [sp, #68]	; 0x44
  404cc6:	9310      	str	r3, [sp, #64]	; 0x40
  404cc8:	dd7a      	ble.n	404dc0 <_vfiprintf_r+0x1a8>
  404cca:	2a00      	cmp	r2, #0
  404ccc:	f040 84b0 	bne.w	405630 <_vfiprintf_r+0xa18>
  404cd0:	9b03      	ldr	r3, [sp, #12]
  404cd2:	9210      	str	r2, [sp, #64]	; 0x40
  404cd4:	442b      	add	r3, r5
  404cd6:	46ca      	mov	sl, r9
  404cd8:	9303      	str	r3, [sp, #12]
  404cda:	7823      	ldrb	r3, [r4, #0]
  404cdc:	2b00      	cmp	r3, #0
  404cde:	f000 83e0 	beq.w	4054a2 <_vfiprintf_r+0x88a>
  404ce2:	2000      	movs	r0, #0
  404ce4:	f04f 0300 	mov.w	r3, #0
  404ce8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404cec:	f104 0801 	add.w	r8, r4, #1
  404cf0:	7862      	ldrb	r2, [r4, #1]
  404cf2:	4605      	mov	r5, r0
  404cf4:	4606      	mov	r6, r0
  404cf6:	4603      	mov	r3, r0
  404cf8:	f04f 34ff 	mov.w	r4, #4294967295
  404cfc:	f108 0801 	add.w	r8, r8, #1
  404d00:	f1a2 0120 	sub.w	r1, r2, #32
  404d04:	2958      	cmp	r1, #88	; 0x58
  404d06:	f200 82de 	bhi.w	4052c6 <_vfiprintf_r+0x6ae>
  404d0a:	e8df f011 	tbh	[pc, r1, lsl #1]
  404d0e:	0221      	.short	0x0221
  404d10:	02dc02dc 	.word	0x02dc02dc
  404d14:	02dc0229 	.word	0x02dc0229
  404d18:	02dc02dc 	.word	0x02dc02dc
  404d1c:	02dc02dc 	.word	0x02dc02dc
  404d20:	028902dc 	.word	0x028902dc
  404d24:	02dc0295 	.word	0x02dc0295
  404d28:	02bd00a2 	.word	0x02bd00a2
  404d2c:	019f02dc 	.word	0x019f02dc
  404d30:	01a401a4 	.word	0x01a401a4
  404d34:	01a401a4 	.word	0x01a401a4
  404d38:	01a401a4 	.word	0x01a401a4
  404d3c:	01a401a4 	.word	0x01a401a4
  404d40:	02dc01a4 	.word	0x02dc01a4
  404d44:	02dc02dc 	.word	0x02dc02dc
  404d48:	02dc02dc 	.word	0x02dc02dc
  404d4c:	02dc02dc 	.word	0x02dc02dc
  404d50:	02dc02dc 	.word	0x02dc02dc
  404d54:	01b202dc 	.word	0x01b202dc
  404d58:	02dc02dc 	.word	0x02dc02dc
  404d5c:	02dc02dc 	.word	0x02dc02dc
  404d60:	02dc02dc 	.word	0x02dc02dc
  404d64:	02dc02dc 	.word	0x02dc02dc
  404d68:	02dc02dc 	.word	0x02dc02dc
  404d6c:	02dc0197 	.word	0x02dc0197
  404d70:	02dc02dc 	.word	0x02dc02dc
  404d74:	02dc02dc 	.word	0x02dc02dc
  404d78:	02dc019b 	.word	0x02dc019b
  404d7c:	025302dc 	.word	0x025302dc
  404d80:	02dc02dc 	.word	0x02dc02dc
  404d84:	02dc02dc 	.word	0x02dc02dc
  404d88:	02dc02dc 	.word	0x02dc02dc
  404d8c:	02dc02dc 	.word	0x02dc02dc
  404d90:	02dc02dc 	.word	0x02dc02dc
  404d94:	021b025a 	.word	0x021b025a
  404d98:	02dc02dc 	.word	0x02dc02dc
  404d9c:	026e02dc 	.word	0x026e02dc
  404da0:	02dc021b 	.word	0x02dc021b
  404da4:	027302dc 	.word	0x027302dc
  404da8:	01f502dc 	.word	0x01f502dc
  404dac:	02090182 	.word	0x02090182
  404db0:	02dc02d7 	.word	0x02dc02d7
  404db4:	02dc029a 	.word	0x02dc029a
  404db8:	02dc00a7 	.word	0x02dc00a7
  404dbc:	022e02dc 	.word	0x022e02dc
  404dc0:	f10a 0a08 	add.w	sl, sl, #8
  404dc4:	9b03      	ldr	r3, [sp, #12]
  404dc6:	442b      	add	r3, r5
  404dc8:	9303      	str	r3, [sp, #12]
  404dca:	e786      	b.n	404cda <_vfiprintf_r+0xc2>
  404dcc:	4659      	mov	r1, fp
  404dce:	9806      	ldr	r0, [sp, #24]
  404dd0:	f000 fdac 	bl	40592c <__swsetup_r>
  404dd4:	bb18      	cbnz	r0, 404e1e <_vfiprintf_r+0x206>
  404dd6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404dda:	f001 031a 	and.w	r3, r1, #26
  404dde:	2b0a      	cmp	r3, #10
  404de0:	f47f af4b 	bne.w	404c7a <_vfiprintf_r+0x62>
  404de4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404de8:	2b00      	cmp	r3, #0
  404dea:	f6ff af46 	blt.w	404c7a <_vfiprintf_r+0x62>
  404dee:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404df2:	07db      	lsls	r3, r3, #31
  404df4:	d405      	bmi.n	404e02 <_vfiprintf_r+0x1ea>
  404df6:	058f      	lsls	r7, r1, #22
  404df8:	d403      	bmi.n	404e02 <_vfiprintf_r+0x1ea>
  404dfa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404dfe:	f001 fac3 	bl	406388 <__retarget_lock_release_recursive>
  404e02:	462b      	mov	r3, r5
  404e04:	4642      	mov	r2, r8
  404e06:	4659      	mov	r1, fp
  404e08:	9806      	ldr	r0, [sp, #24]
  404e0a:	f000 fd4d 	bl	4058a8 <__sbprintf>
  404e0e:	9003      	str	r0, [sp, #12]
  404e10:	9803      	ldr	r0, [sp, #12]
  404e12:	b02d      	add	sp, #180	; 0xb4
  404e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e18:	f000 fef4 	bl	405c04 <__sinit>
  404e1c:	e709      	b.n	404c32 <_vfiprintf_r+0x1a>
  404e1e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404e22:	07d9      	lsls	r1, r3, #31
  404e24:	d404      	bmi.n	404e30 <_vfiprintf_r+0x218>
  404e26:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404e2a:	059a      	lsls	r2, r3, #22
  404e2c:	f140 84aa 	bpl.w	405784 <_vfiprintf_r+0xb6c>
  404e30:	f04f 33ff 	mov.w	r3, #4294967295
  404e34:	9303      	str	r3, [sp, #12]
  404e36:	9803      	ldr	r0, [sp, #12]
  404e38:	b02d      	add	sp, #180	; 0xb4
  404e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e3e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e42:	f001 fa9f 	bl	406384 <__retarget_lock_acquire_recursive>
  404e46:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404e4a:	b281      	uxth	r1, r0
  404e4c:	e6fb      	b.n	404c46 <_vfiprintf_r+0x2e>
  404e4e:	4276      	negs	r6, r6
  404e50:	9207      	str	r2, [sp, #28]
  404e52:	f043 0304 	orr.w	r3, r3, #4
  404e56:	f898 2000 	ldrb.w	r2, [r8]
  404e5a:	e74f      	b.n	404cfc <_vfiprintf_r+0xe4>
  404e5c:	9608      	str	r6, [sp, #32]
  404e5e:	069e      	lsls	r6, r3, #26
  404e60:	f100 8450 	bmi.w	405704 <_vfiprintf_r+0xaec>
  404e64:	9907      	ldr	r1, [sp, #28]
  404e66:	06dd      	lsls	r5, r3, #27
  404e68:	460a      	mov	r2, r1
  404e6a:	f100 83ef 	bmi.w	40564c <_vfiprintf_r+0xa34>
  404e6e:	0658      	lsls	r0, r3, #25
  404e70:	f140 83ec 	bpl.w	40564c <_vfiprintf_r+0xa34>
  404e74:	880e      	ldrh	r6, [r1, #0]
  404e76:	3104      	adds	r1, #4
  404e78:	2700      	movs	r7, #0
  404e7a:	2201      	movs	r2, #1
  404e7c:	9107      	str	r1, [sp, #28]
  404e7e:	f04f 0100 	mov.w	r1, #0
  404e82:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404e86:	2500      	movs	r5, #0
  404e88:	1c61      	adds	r1, r4, #1
  404e8a:	f000 8116 	beq.w	4050ba <_vfiprintf_r+0x4a2>
  404e8e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404e92:	9102      	str	r1, [sp, #8]
  404e94:	ea56 0107 	orrs.w	r1, r6, r7
  404e98:	f040 8114 	bne.w	4050c4 <_vfiprintf_r+0x4ac>
  404e9c:	2c00      	cmp	r4, #0
  404e9e:	f040 835c 	bne.w	40555a <_vfiprintf_r+0x942>
  404ea2:	2a00      	cmp	r2, #0
  404ea4:	f040 83b7 	bne.w	405616 <_vfiprintf_r+0x9fe>
  404ea8:	f013 0301 	ands.w	r3, r3, #1
  404eac:	9305      	str	r3, [sp, #20]
  404eae:	f000 8457 	beq.w	405760 <_vfiprintf_r+0xb48>
  404eb2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404eb6:	2330      	movs	r3, #48	; 0x30
  404eb8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404ebc:	9b05      	ldr	r3, [sp, #20]
  404ebe:	42a3      	cmp	r3, r4
  404ec0:	bfb8      	it	lt
  404ec2:	4623      	movlt	r3, r4
  404ec4:	9301      	str	r3, [sp, #4]
  404ec6:	b10d      	cbz	r5, 404ecc <_vfiprintf_r+0x2b4>
  404ec8:	3301      	adds	r3, #1
  404eca:	9301      	str	r3, [sp, #4]
  404ecc:	9b02      	ldr	r3, [sp, #8]
  404ece:	f013 0302 	ands.w	r3, r3, #2
  404ed2:	9309      	str	r3, [sp, #36]	; 0x24
  404ed4:	d002      	beq.n	404edc <_vfiprintf_r+0x2c4>
  404ed6:	9b01      	ldr	r3, [sp, #4]
  404ed8:	3302      	adds	r3, #2
  404eda:	9301      	str	r3, [sp, #4]
  404edc:	9b02      	ldr	r3, [sp, #8]
  404ede:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404ee2:	930a      	str	r3, [sp, #40]	; 0x28
  404ee4:	f040 8217 	bne.w	405316 <_vfiprintf_r+0x6fe>
  404ee8:	9b08      	ldr	r3, [sp, #32]
  404eea:	9a01      	ldr	r2, [sp, #4]
  404eec:	1a9d      	subs	r5, r3, r2
  404eee:	2d00      	cmp	r5, #0
  404ef0:	f340 8211 	ble.w	405316 <_vfiprintf_r+0x6fe>
  404ef4:	2d10      	cmp	r5, #16
  404ef6:	f340 8490 	ble.w	40581a <_vfiprintf_r+0xc02>
  404efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404efc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404efe:	4ec4      	ldr	r6, [pc, #784]	; (405210 <_vfiprintf_r+0x5f8>)
  404f00:	46d6      	mov	lr, sl
  404f02:	2710      	movs	r7, #16
  404f04:	46a2      	mov	sl, r4
  404f06:	4619      	mov	r1, r3
  404f08:	9c06      	ldr	r4, [sp, #24]
  404f0a:	e007      	b.n	404f1c <_vfiprintf_r+0x304>
  404f0c:	f101 0c02 	add.w	ip, r1, #2
  404f10:	f10e 0e08 	add.w	lr, lr, #8
  404f14:	4601      	mov	r1, r0
  404f16:	3d10      	subs	r5, #16
  404f18:	2d10      	cmp	r5, #16
  404f1a:	dd11      	ble.n	404f40 <_vfiprintf_r+0x328>
  404f1c:	1c48      	adds	r0, r1, #1
  404f1e:	3210      	adds	r2, #16
  404f20:	2807      	cmp	r0, #7
  404f22:	9211      	str	r2, [sp, #68]	; 0x44
  404f24:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404f28:	9010      	str	r0, [sp, #64]	; 0x40
  404f2a:	ddef      	ble.n	404f0c <_vfiprintf_r+0x2f4>
  404f2c:	2a00      	cmp	r2, #0
  404f2e:	f040 81e4 	bne.w	4052fa <_vfiprintf_r+0x6e2>
  404f32:	3d10      	subs	r5, #16
  404f34:	2d10      	cmp	r5, #16
  404f36:	4611      	mov	r1, r2
  404f38:	f04f 0c01 	mov.w	ip, #1
  404f3c:	46ce      	mov	lr, r9
  404f3e:	dced      	bgt.n	404f1c <_vfiprintf_r+0x304>
  404f40:	4654      	mov	r4, sl
  404f42:	4661      	mov	r1, ip
  404f44:	46f2      	mov	sl, lr
  404f46:	442a      	add	r2, r5
  404f48:	2907      	cmp	r1, #7
  404f4a:	9211      	str	r2, [sp, #68]	; 0x44
  404f4c:	f8ca 6000 	str.w	r6, [sl]
  404f50:	f8ca 5004 	str.w	r5, [sl, #4]
  404f54:	9110      	str	r1, [sp, #64]	; 0x40
  404f56:	f300 82ec 	bgt.w	405532 <_vfiprintf_r+0x91a>
  404f5a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404f5e:	f10a 0a08 	add.w	sl, sl, #8
  404f62:	1c48      	adds	r0, r1, #1
  404f64:	2d00      	cmp	r5, #0
  404f66:	f040 81de 	bne.w	405326 <_vfiprintf_r+0x70e>
  404f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f6c:	2b00      	cmp	r3, #0
  404f6e:	f000 81f8 	beq.w	405362 <_vfiprintf_r+0x74a>
  404f72:	3202      	adds	r2, #2
  404f74:	a90e      	add	r1, sp, #56	; 0x38
  404f76:	2302      	movs	r3, #2
  404f78:	2807      	cmp	r0, #7
  404f7a:	9211      	str	r2, [sp, #68]	; 0x44
  404f7c:	9010      	str	r0, [sp, #64]	; 0x40
  404f7e:	e88a 000a 	stmia.w	sl, {r1, r3}
  404f82:	f340 81ea 	ble.w	40535a <_vfiprintf_r+0x742>
  404f86:	2a00      	cmp	r2, #0
  404f88:	f040 838c 	bne.w	4056a4 <_vfiprintf_r+0xa8c>
  404f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f8e:	2b80      	cmp	r3, #128	; 0x80
  404f90:	f04f 0001 	mov.w	r0, #1
  404f94:	4611      	mov	r1, r2
  404f96:	46ca      	mov	sl, r9
  404f98:	f040 81e7 	bne.w	40536a <_vfiprintf_r+0x752>
  404f9c:	9b08      	ldr	r3, [sp, #32]
  404f9e:	9d01      	ldr	r5, [sp, #4]
  404fa0:	1b5e      	subs	r6, r3, r5
  404fa2:	2e00      	cmp	r6, #0
  404fa4:	f340 81e1 	ble.w	40536a <_vfiprintf_r+0x752>
  404fa8:	2e10      	cmp	r6, #16
  404faa:	4d9a      	ldr	r5, [pc, #616]	; (405214 <_vfiprintf_r+0x5fc>)
  404fac:	f340 8450 	ble.w	405850 <_vfiprintf_r+0xc38>
  404fb0:	46d4      	mov	ip, sl
  404fb2:	2710      	movs	r7, #16
  404fb4:	46a2      	mov	sl, r4
  404fb6:	9c06      	ldr	r4, [sp, #24]
  404fb8:	e007      	b.n	404fca <_vfiprintf_r+0x3b2>
  404fba:	f101 0e02 	add.w	lr, r1, #2
  404fbe:	f10c 0c08 	add.w	ip, ip, #8
  404fc2:	4601      	mov	r1, r0
  404fc4:	3e10      	subs	r6, #16
  404fc6:	2e10      	cmp	r6, #16
  404fc8:	dd11      	ble.n	404fee <_vfiprintf_r+0x3d6>
  404fca:	1c48      	adds	r0, r1, #1
  404fcc:	3210      	adds	r2, #16
  404fce:	2807      	cmp	r0, #7
  404fd0:	9211      	str	r2, [sp, #68]	; 0x44
  404fd2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404fd6:	9010      	str	r0, [sp, #64]	; 0x40
  404fd8:	ddef      	ble.n	404fba <_vfiprintf_r+0x3a2>
  404fda:	2a00      	cmp	r2, #0
  404fdc:	f040 829d 	bne.w	40551a <_vfiprintf_r+0x902>
  404fe0:	3e10      	subs	r6, #16
  404fe2:	2e10      	cmp	r6, #16
  404fe4:	f04f 0e01 	mov.w	lr, #1
  404fe8:	4611      	mov	r1, r2
  404fea:	46cc      	mov	ip, r9
  404fec:	dced      	bgt.n	404fca <_vfiprintf_r+0x3b2>
  404fee:	4654      	mov	r4, sl
  404ff0:	46e2      	mov	sl, ip
  404ff2:	4432      	add	r2, r6
  404ff4:	f1be 0f07 	cmp.w	lr, #7
  404ff8:	9211      	str	r2, [sp, #68]	; 0x44
  404ffa:	e88a 0060 	stmia.w	sl, {r5, r6}
  404ffe:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405002:	f300 8369 	bgt.w	4056d8 <_vfiprintf_r+0xac0>
  405006:	f10a 0a08 	add.w	sl, sl, #8
  40500a:	f10e 0001 	add.w	r0, lr, #1
  40500e:	4671      	mov	r1, lr
  405010:	e1ab      	b.n	40536a <_vfiprintf_r+0x752>
  405012:	9608      	str	r6, [sp, #32]
  405014:	f013 0220 	ands.w	r2, r3, #32
  405018:	f040 838c 	bne.w	405734 <_vfiprintf_r+0xb1c>
  40501c:	f013 0110 	ands.w	r1, r3, #16
  405020:	f040 831a 	bne.w	405658 <_vfiprintf_r+0xa40>
  405024:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405028:	f000 8316 	beq.w	405658 <_vfiprintf_r+0xa40>
  40502c:	9807      	ldr	r0, [sp, #28]
  40502e:	460a      	mov	r2, r1
  405030:	4601      	mov	r1, r0
  405032:	3104      	adds	r1, #4
  405034:	8806      	ldrh	r6, [r0, #0]
  405036:	9107      	str	r1, [sp, #28]
  405038:	2700      	movs	r7, #0
  40503a:	e720      	b.n	404e7e <_vfiprintf_r+0x266>
  40503c:	9608      	str	r6, [sp, #32]
  40503e:	f043 0310 	orr.w	r3, r3, #16
  405042:	e7e7      	b.n	405014 <_vfiprintf_r+0x3fc>
  405044:	9608      	str	r6, [sp, #32]
  405046:	f043 0310 	orr.w	r3, r3, #16
  40504a:	e708      	b.n	404e5e <_vfiprintf_r+0x246>
  40504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405050:	f898 2000 	ldrb.w	r2, [r8]
  405054:	e652      	b.n	404cfc <_vfiprintf_r+0xe4>
  405056:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40505a:	2600      	movs	r6, #0
  40505c:	f818 2b01 	ldrb.w	r2, [r8], #1
  405060:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405064:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405068:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40506c:	2909      	cmp	r1, #9
  40506e:	d9f5      	bls.n	40505c <_vfiprintf_r+0x444>
  405070:	e646      	b.n	404d00 <_vfiprintf_r+0xe8>
  405072:	9608      	str	r6, [sp, #32]
  405074:	2800      	cmp	r0, #0
  405076:	f040 8408 	bne.w	40588a <_vfiprintf_r+0xc72>
  40507a:	f043 0310 	orr.w	r3, r3, #16
  40507e:	069e      	lsls	r6, r3, #26
  405080:	f100 834c 	bmi.w	40571c <_vfiprintf_r+0xb04>
  405084:	06dd      	lsls	r5, r3, #27
  405086:	f100 82f3 	bmi.w	405670 <_vfiprintf_r+0xa58>
  40508a:	0658      	lsls	r0, r3, #25
  40508c:	f140 82f0 	bpl.w	405670 <_vfiprintf_r+0xa58>
  405090:	9d07      	ldr	r5, [sp, #28]
  405092:	f9b5 6000 	ldrsh.w	r6, [r5]
  405096:	462a      	mov	r2, r5
  405098:	17f7      	asrs	r7, r6, #31
  40509a:	3204      	adds	r2, #4
  40509c:	4630      	mov	r0, r6
  40509e:	4639      	mov	r1, r7
  4050a0:	9207      	str	r2, [sp, #28]
  4050a2:	2800      	cmp	r0, #0
  4050a4:	f171 0200 	sbcs.w	r2, r1, #0
  4050a8:	f2c0 835d 	blt.w	405766 <_vfiprintf_r+0xb4e>
  4050ac:	1c61      	adds	r1, r4, #1
  4050ae:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4050b2:	f04f 0201 	mov.w	r2, #1
  4050b6:	f47f aeea 	bne.w	404e8e <_vfiprintf_r+0x276>
  4050ba:	ea56 0107 	orrs.w	r1, r6, r7
  4050be:	f000 824d 	beq.w	40555c <_vfiprintf_r+0x944>
  4050c2:	9302      	str	r3, [sp, #8]
  4050c4:	2a01      	cmp	r2, #1
  4050c6:	f000 828c 	beq.w	4055e2 <_vfiprintf_r+0x9ca>
  4050ca:	2a02      	cmp	r2, #2
  4050cc:	f040 825c 	bne.w	405588 <_vfiprintf_r+0x970>
  4050d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4050d2:	46cb      	mov	fp, r9
  4050d4:	0933      	lsrs	r3, r6, #4
  4050d6:	f006 010f 	and.w	r1, r6, #15
  4050da:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4050de:	093a      	lsrs	r2, r7, #4
  4050e0:	461e      	mov	r6, r3
  4050e2:	4617      	mov	r7, r2
  4050e4:	5c43      	ldrb	r3, [r0, r1]
  4050e6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4050ea:	ea56 0307 	orrs.w	r3, r6, r7
  4050ee:	d1f1      	bne.n	4050d4 <_vfiprintf_r+0x4bc>
  4050f0:	eba9 030b 	sub.w	r3, r9, fp
  4050f4:	9305      	str	r3, [sp, #20]
  4050f6:	e6e1      	b.n	404ebc <_vfiprintf_r+0x2a4>
  4050f8:	2800      	cmp	r0, #0
  4050fa:	f040 83c0 	bne.w	40587e <_vfiprintf_r+0xc66>
  4050fe:	0699      	lsls	r1, r3, #26
  405100:	f100 8367 	bmi.w	4057d2 <_vfiprintf_r+0xbba>
  405104:	06da      	lsls	r2, r3, #27
  405106:	f100 80f1 	bmi.w	4052ec <_vfiprintf_r+0x6d4>
  40510a:	065b      	lsls	r3, r3, #25
  40510c:	f140 80ee 	bpl.w	4052ec <_vfiprintf_r+0x6d4>
  405110:	9a07      	ldr	r2, [sp, #28]
  405112:	6813      	ldr	r3, [r2, #0]
  405114:	3204      	adds	r2, #4
  405116:	9207      	str	r2, [sp, #28]
  405118:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40511c:	801a      	strh	r2, [r3, #0]
  40511e:	e5b8      	b.n	404c92 <_vfiprintf_r+0x7a>
  405120:	9807      	ldr	r0, [sp, #28]
  405122:	4a3d      	ldr	r2, [pc, #244]	; (405218 <_vfiprintf_r+0x600>)
  405124:	9608      	str	r6, [sp, #32]
  405126:	920b      	str	r2, [sp, #44]	; 0x2c
  405128:	6806      	ldr	r6, [r0, #0]
  40512a:	2278      	movs	r2, #120	; 0x78
  40512c:	2130      	movs	r1, #48	; 0x30
  40512e:	3004      	adds	r0, #4
  405130:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405134:	f043 0302 	orr.w	r3, r3, #2
  405138:	9007      	str	r0, [sp, #28]
  40513a:	2700      	movs	r7, #0
  40513c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405140:	2202      	movs	r2, #2
  405142:	e69c      	b.n	404e7e <_vfiprintf_r+0x266>
  405144:	9608      	str	r6, [sp, #32]
  405146:	2800      	cmp	r0, #0
  405148:	d099      	beq.n	40507e <_vfiprintf_r+0x466>
  40514a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40514e:	e796      	b.n	40507e <_vfiprintf_r+0x466>
  405150:	f898 2000 	ldrb.w	r2, [r8]
  405154:	2d00      	cmp	r5, #0
  405156:	f47f add1 	bne.w	404cfc <_vfiprintf_r+0xe4>
  40515a:	2001      	movs	r0, #1
  40515c:	2520      	movs	r5, #32
  40515e:	e5cd      	b.n	404cfc <_vfiprintf_r+0xe4>
  405160:	f043 0301 	orr.w	r3, r3, #1
  405164:	f898 2000 	ldrb.w	r2, [r8]
  405168:	e5c8      	b.n	404cfc <_vfiprintf_r+0xe4>
  40516a:	9608      	str	r6, [sp, #32]
  40516c:	2800      	cmp	r0, #0
  40516e:	f040 8393 	bne.w	405898 <_vfiprintf_r+0xc80>
  405172:	4929      	ldr	r1, [pc, #164]	; (405218 <_vfiprintf_r+0x600>)
  405174:	910b      	str	r1, [sp, #44]	; 0x2c
  405176:	069f      	lsls	r7, r3, #26
  405178:	f100 82e8 	bmi.w	40574c <_vfiprintf_r+0xb34>
  40517c:	9807      	ldr	r0, [sp, #28]
  40517e:	06de      	lsls	r6, r3, #27
  405180:	4601      	mov	r1, r0
  405182:	f100 8270 	bmi.w	405666 <_vfiprintf_r+0xa4e>
  405186:	065d      	lsls	r5, r3, #25
  405188:	f140 826d 	bpl.w	405666 <_vfiprintf_r+0xa4e>
  40518c:	3104      	adds	r1, #4
  40518e:	8806      	ldrh	r6, [r0, #0]
  405190:	9107      	str	r1, [sp, #28]
  405192:	2700      	movs	r7, #0
  405194:	07d8      	lsls	r0, r3, #31
  405196:	f140 8222 	bpl.w	4055de <_vfiprintf_r+0x9c6>
  40519a:	ea56 0107 	orrs.w	r1, r6, r7
  40519e:	f000 821e 	beq.w	4055de <_vfiprintf_r+0x9c6>
  4051a2:	2130      	movs	r1, #48	; 0x30
  4051a4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4051a8:	f043 0302 	orr.w	r3, r3, #2
  4051ac:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4051b0:	2202      	movs	r2, #2
  4051b2:	e664      	b.n	404e7e <_vfiprintf_r+0x266>
  4051b4:	9608      	str	r6, [sp, #32]
  4051b6:	2800      	cmp	r0, #0
  4051b8:	f040 836b 	bne.w	405892 <_vfiprintf_r+0xc7a>
  4051bc:	4917      	ldr	r1, [pc, #92]	; (40521c <_vfiprintf_r+0x604>)
  4051be:	910b      	str	r1, [sp, #44]	; 0x2c
  4051c0:	e7d9      	b.n	405176 <_vfiprintf_r+0x55e>
  4051c2:	9907      	ldr	r1, [sp, #28]
  4051c4:	9608      	str	r6, [sp, #32]
  4051c6:	680a      	ldr	r2, [r1, #0]
  4051c8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4051cc:	f04f 0000 	mov.w	r0, #0
  4051d0:	460a      	mov	r2, r1
  4051d2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4051d6:	3204      	adds	r2, #4
  4051d8:	2001      	movs	r0, #1
  4051da:	9001      	str	r0, [sp, #4]
  4051dc:	9207      	str	r2, [sp, #28]
  4051de:	9005      	str	r0, [sp, #20]
  4051e0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4051e4:	9302      	str	r3, [sp, #8]
  4051e6:	2400      	movs	r4, #0
  4051e8:	e670      	b.n	404ecc <_vfiprintf_r+0x2b4>
  4051ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051ee:	f898 2000 	ldrb.w	r2, [r8]
  4051f2:	e583      	b.n	404cfc <_vfiprintf_r+0xe4>
  4051f4:	f898 2000 	ldrb.w	r2, [r8]
  4051f8:	2a6c      	cmp	r2, #108	; 0x6c
  4051fa:	bf03      	ittte	eq
  4051fc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405200:	f043 0320 	orreq.w	r3, r3, #32
  405204:	f108 0801 	addeq.w	r8, r8, #1
  405208:	f043 0310 	orrne.w	r3, r3, #16
  40520c:	e576      	b.n	404cfc <_vfiprintf_r+0xe4>
  40520e:	bf00      	nop
  405210:	0040815c 	.word	0x0040815c
  405214:	0040816c 	.word	0x0040816c
  405218:	00408140 	.word	0x00408140
  40521c:	0040812c 	.word	0x0040812c
  405220:	9907      	ldr	r1, [sp, #28]
  405222:	680e      	ldr	r6, [r1, #0]
  405224:	460a      	mov	r2, r1
  405226:	2e00      	cmp	r6, #0
  405228:	f102 0204 	add.w	r2, r2, #4
  40522c:	f6ff ae0f 	blt.w	404e4e <_vfiprintf_r+0x236>
  405230:	9207      	str	r2, [sp, #28]
  405232:	f898 2000 	ldrb.w	r2, [r8]
  405236:	e561      	b.n	404cfc <_vfiprintf_r+0xe4>
  405238:	f898 2000 	ldrb.w	r2, [r8]
  40523c:	2001      	movs	r0, #1
  40523e:	252b      	movs	r5, #43	; 0x2b
  405240:	e55c      	b.n	404cfc <_vfiprintf_r+0xe4>
  405242:	9907      	ldr	r1, [sp, #28]
  405244:	9608      	str	r6, [sp, #32]
  405246:	f8d1 b000 	ldr.w	fp, [r1]
  40524a:	f04f 0200 	mov.w	r2, #0
  40524e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405252:	1d0e      	adds	r6, r1, #4
  405254:	f1bb 0f00 	cmp.w	fp, #0
  405258:	f000 82e5 	beq.w	405826 <_vfiprintf_r+0xc0e>
  40525c:	1c67      	adds	r7, r4, #1
  40525e:	f000 82c4 	beq.w	4057ea <_vfiprintf_r+0xbd2>
  405262:	4622      	mov	r2, r4
  405264:	2100      	movs	r1, #0
  405266:	4658      	mov	r0, fp
  405268:	9301      	str	r3, [sp, #4]
  40526a:	f001 fbd9 	bl	406a20 <memchr>
  40526e:	9b01      	ldr	r3, [sp, #4]
  405270:	2800      	cmp	r0, #0
  405272:	f000 82e5 	beq.w	405840 <_vfiprintf_r+0xc28>
  405276:	eba0 020b 	sub.w	r2, r0, fp
  40527a:	9205      	str	r2, [sp, #20]
  40527c:	9607      	str	r6, [sp, #28]
  40527e:	9302      	str	r3, [sp, #8]
  405280:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405284:	2400      	movs	r4, #0
  405286:	e619      	b.n	404ebc <_vfiprintf_r+0x2a4>
  405288:	f898 2000 	ldrb.w	r2, [r8]
  40528c:	2a2a      	cmp	r2, #42	; 0x2a
  40528e:	f108 0701 	add.w	r7, r8, #1
  405292:	f000 82e9 	beq.w	405868 <_vfiprintf_r+0xc50>
  405296:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40529a:	2909      	cmp	r1, #9
  40529c:	46b8      	mov	r8, r7
  40529e:	f04f 0400 	mov.w	r4, #0
  4052a2:	f63f ad2d 	bhi.w	404d00 <_vfiprintf_r+0xe8>
  4052a6:	f818 2b01 	ldrb.w	r2, [r8], #1
  4052aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4052ae:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4052b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4052b6:	2909      	cmp	r1, #9
  4052b8:	d9f5      	bls.n	4052a6 <_vfiprintf_r+0x68e>
  4052ba:	e521      	b.n	404d00 <_vfiprintf_r+0xe8>
  4052bc:	f043 0320 	orr.w	r3, r3, #32
  4052c0:	f898 2000 	ldrb.w	r2, [r8]
  4052c4:	e51a      	b.n	404cfc <_vfiprintf_r+0xe4>
  4052c6:	9608      	str	r6, [sp, #32]
  4052c8:	2800      	cmp	r0, #0
  4052ca:	f040 82db 	bne.w	405884 <_vfiprintf_r+0xc6c>
  4052ce:	2a00      	cmp	r2, #0
  4052d0:	f000 80e7 	beq.w	4054a2 <_vfiprintf_r+0x88a>
  4052d4:	2101      	movs	r1, #1
  4052d6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4052da:	f04f 0200 	mov.w	r2, #0
  4052de:	9101      	str	r1, [sp, #4]
  4052e0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4052e4:	9105      	str	r1, [sp, #20]
  4052e6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4052ea:	e77b      	b.n	4051e4 <_vfiprintf_r+0x5cc>
  4052ec:	9a07      	ldr	r2, [sp, #28]
  4052ee:	6813      	ldr	r3, [r2, #0]
  4052f0:	3204      	adds	r2, #4
  4052f2:	9207      	str	r2, [sp, #28]
  4052f4:	9a03      	ldr	r2, [sp, #12]
  4052f6:	601a      	str	r2, [r3, #0]
  4052f8:	e4cb      	b.n	404c92 <_vfiprintf_r+0x7a>
  4052fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4052fc:	9904      	ldr	r1, [sp, #16]
  4052fe:	4620      	mov	r0, r4
  405300:	f7ff fc4a 	bl	404b98 <__sprint_r.part.0>
  405304:	2800      	cmp	r0, #0
  405306:	f040 8139 	bne.w	40557c <_vfiprintf_r+0x964>
  40530a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40530c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40530e:	f101 0c01 	add.w	ip, r1, #1
  405312:	46ce      	mov	lr, r9
  405314:	e5ff      	b.n	404f16 <_vfiprintf_r+0x2fe>
  405316:	9910      	ldr	r1, [sp, #64]	; 0x40
  405318:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40531a:	1c48      	adds	r0, r1, #1
  40531c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405320:	2d00      	cmp	r5, #0
  405322:	f43f ae22 	beq.w	404f6a <_vfiprintf_r+0x352>
  405326:	3201      	adds	r2, #1
  405328:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40532c:	2101      	movs	r1, #1
  40532e:	2807      	cmp	r0, #7
  405330:	9211      	str	r2, [sp, #68]	; 0x44
  405332:	9010      	str	r0, [sp, #64]	; 0x40
  405334:	f8ca 5000 	str.w	r5, [sl]
  405338:	f8ca 1004 	str.w	r1, [sl, #4]
  40533c:	f340 8108 	ble.w	405550 <_vfiprintf_r+0x938>
  405340:	2a00      	cmp	r2, #0
  405342:	f040 81bc 	bne.w	4056be <_vfiprintf_r+0xaa6>
  405346:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405348:	2b00      	cmp	r3, #0
  40534a:	f43f ae1f 	beq.w	404f8c <_vfiprintf_r+0x374>
  40534e:	ab0e      	add	r3, sp, #56	; 0x38
  405350:	2202      	movs	r2, #2
  405352:	4608      	mov	r0, r1
  405354:	931c      	str	r3, [sp, #112]	; 0x70
  405356:	921d      	str	r2, [sp, #116]	; 0x74
  405358:	46ca      	mov	sl, r9
  40535a:	4601      	mov	r1, r0
  40535c:	f10a 0a08 	add.w	sl, sl, #8
  405360:	3001      	adds	r0, #1
  405362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405364:	2b80      	cmp	r3, #128	; 0x80
  405366:	f43f ae19 	beq.w	404f9c <_vfiprintf_r+0x384>
  40536a:	9b05      	ldr	r3, [sp, #20]
  40536c:	1ae4      	subs	r4, r4, r3
  40536e:	2c00      	cmp	r4, #0
  405370:	dd2e      	ble.n	4053d0 <_vfiprintf_r+0x7b8>
  405372:	2c10      	cmp	r4, #16
  405374:	4db3      	ldr	r5, [pc, #716]	; (405644 <_vfiprintf_r+0xa2c>)
  405376:	dd1e      	ble.n	4053b6 <_vfiprintf_r+0x79e>
  405378:	46d6      	mov	lr, sl
  40537a:	2610      	movs	r6, #16
  40537c:	9f06      	ldr	r7, [sp, #24]
  40537e:	f8dd a010 	ldr.w	sl, [sp, #16]
  405382:	e006      	b.n	405392 <_vfiprintf_r+0x77a>
  405384:	1c88      	adds	r0, r1, #2
  405386:	f10e 0e08 	add.w	lr, lr, #8
  40538a:	4619      	mov	r1, r3
  40538c:	3c10      	subs	r4, #16
  40538e:	2c10      	cmp	r4, #16
  405390:	dd10      	ble.n	4053b4 <_vfiprintf_r+0x79c>
  405392:	1c4b      	adds	r3, r1, #1
  405394:	3210      	adds	r2, #16
  405396:	2b07      	cmp	r3, #7
  405398:	9211      	str	r2, [sp, #68]	; 0x44
  40539a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40539e:	9310      	str	r3, [sp, #64]	; 0x40
  4053a0:	ddf0      	ble.n	405384 <_vfiprintf_r+0x76c>
  4053a2:	2a00      	cmp	r2, #0
  4053a4:	d165      	bne.n	405472 <_vfiprintf_r+0x85a>
  4053a6:	3c10      	subs	r4, #16
  4053a8:	2c10      	cmp	r4, #16
  4053aa:	f04f 0001 	mov.w	r0, #1
  4053ae:	4611      	mov	r1, r2
  4053b0:	46ce      	mov	lr, r9
  4053b2:	dcee      	bgt.n	405392 <_vfiprintf_r+0x77a>
  4053b4:	46f2      	mov	sl, lr
  4053b6:	4422      	add	r2, r4
  4053b8:	2807      	cmp	r0, #7
  4053ba:	9211      	str	r2, [sp, #68]	; 0x44
  4053bc:	f8ca 5000 	str.w	r5, [sl]
  4053c0:	f8ca 4004 	str.w	r4, [sl, #4]
  4053c4:	9010      	str	r0, [sp, #64]	; 0x40
  4053c6:	f300 8085 	bgt.w	4054d4 <_vfiprintf_r+0x8bc>
  4053ca:	f10a 0a08 	add.w	sl, sl, #8
  4053ce:	3001      	adds	r0, #1
  4053d0:	9905      	ldr	r1, [sp, #20]
  4053d2:	f8ca b000 	str.w	fp, [sl]
  4053d6:	440a      	add	r2, r1
  4053d8:	2807      	cmp	r0, #7
  4053da:	9211      	str	r2, [sp, #68]	; 0x44
  4053dc:	f8ca 1004 	str.w	r1, [sl, #4]
  4053e0:	9010      	str	r0, [sp, #64]	; 0x40
  4053e2:	f340 8082 	ble.w	4054ea <_vfiprintf_r+0x8d2>
  4053e6:	2a00      	cmp	r2, #0
  4053e8:	f040 8118 	bne.w	40561c <_vfiprintf_r+0xa04>
  4053ec:	9b02      	ldr	r3, [sp, #8]
  4053ee:	9210      	str	r2, [sp, #64]	; 0x40
  4053f0:	0758      	lsls	r0, r3, #29
  4053f2:	d535      	bpl.n	405460 <_vfiprintf_r+0x848>
  4053f4:	9b08      	ldr	r3, [sp, #32]
  4053f6:	9901      	ldr	r1, [sp, #4]
  4053f8:	1a5c      	subs	r4, r3, r1
  4053fa:	2c00      	cmp	r4, #0
  4053fc:	f340 80e7 	ble.w	4055ce <_vfiprintf_r+0x9b6>
  405400:	46ca      	mov	sl, r9
  405402:	2c10      	cmp	r4, #16
  405404:	f340 8218 	ble.w	405838 <_vfiprintf_r+0xc20>
  405408:	9910      	ldr	r1, [sp, #64]	; 0x40
  40540a:	4e8f      	ldr	r6, [pc, #572]	; (405648 <_vfiprintf_r+0xa30>)
  40540c:	9f06      	ldr	r7, [sp, #24]
  40540e:	f8dd b010 	ldr.w	fp, [sp, #16]
  405412:	2510      	movs	r5, #16
  405414:	e006      	b.n	405424 <_vfiprintf_r+0x80c>
  405416:	1c88      	adds	r0, r1, #2
  405418:	f10a 0a08 	add.w	sl, sl, #8
  40541c:	4619      	mov	r1, r3
  40541e:	3c10      	subs	r4, #16
  405420:	2c10      	cmp	r4, #16
  405422:	dd11      	ble.n	405448 <_vfiprintf_r+0x830>
  405424:	1c4b      	adds	r3, r1, #1
  405426:	3210      	adds	r2, #16
  405428:	2b07      	cmp	r3, #7
  40542a:	9211      	str	r2, [sp, #68]	; 0x44
  40542c:	f8ca 6000 	str.w	r6, [sl]
  405430:	f8ca 5004 	str.w	r5, [sl, #4]
  405434:	9310      	str	r3, [sp, #64]	; 0x40
  405436:	ddee      	ble.n	405416 <_vfiprintf_r+0x7fe>
  405438:	bb42      	cbnz	r2, 40548c <_vfiprintf_r+0x874>
  40543a:	3c10      	subs	r4, #16
  40543c:	2c10      	cmp	r4, #16
  40543e:	f04f 0001 	mov.w	r0, #1
  405442:	4611      	mov	r1, r2
  405444:	46ca      	mov	sl, r9
  405446:	dced      	bgt.n	405424 <_vfiprintf_r+0x80c>
  405448:	4422      	add	r2, r4
  40544a:	2807      	cmp	r0, #7
  40544c:	9211      	str	r2, [sp, #68]	; 0x44
  40544e:	f8ca 6000 	str.w	r6, [sl]
  405452:	f8ca 4004 	str.w	r4, [sl, #4]
  405456:	9010      	str	r0, [sp, #64]	; 0x40
  405458:	dd51      	ble.n	4054fe <_vfiprintf_r+0x8e6>
  40545a:	2a00      	cmp	r2, #0
  40545c:	f040 819b 	bne.w	405796 <_vfiprintf_r+0xb7e>
  405460:	9b03      	ldr	r3, [sp, #12]
  405462:	9a08      	ldr	r2, [sp, #32]
  405464:	9901      	ldr	r1, [sp, #4]
  405466:	428a      	cmp	r2, r1
  405468:	bfac      	ite	ge
  40546a:	189b      	addge	r3, r3, r2
  40546c:	185b      	addlt	r3, r3, r1
  40546e:	9303      	str	r3, [sp, #12]
  405470:	e04e      	b.n	405510 <_vfiprintf_r+0x8f8>
  405472:	aa0f      	add	r2, sp, #60	; 0x3c
  405474:	4651      	mov	r1, sl
  405476:	4638      	mov	r0, r7
  405478:	f7ff fb8e 	bl	404b98 <__sprint_r.part.0>
  40547c:	2800      	cmp	r0, #0
  40547e:	f040 813f 	bne.w	405700 <_vfiprintf_r+0xae8>
  405482:	9910      	ldr	r1, [sp, #64]	; 0x40
  405484:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405486:	1c48      	adds	r0, r1, #1
  405488:	46ce      	mov	lr, r9
  40548a:	e77f      	b.n	40538c <_vfiprintf_r+0x774>
  40548c:	aa0f      	add	r2, sp, #60	; 0x3c
  40548e:	4659      	mov	r1, fp
  405490:	4638      	mov	r0, r7
  405492:	f7ff fb81 	bl	404b98 <__sprint_r.part.0>
  405496:	b960      	cbnz	r0, 4054b2 <_vfiprintf_r+0x89a>
  405498:	9910      	ldr	r1, [sp, #64]	; 0x40
  40549a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40549c:	1c48      	adds	r0, r1, #1
  40549e:	46ca      	mov	sl, r9
  4054a0:	e7bd      	b.n	40541e <_vfiprintf_r+0x806>
  4054a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4054a4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4054a8:	2b00      	cmp	r3, #0
  4054aa:	f040 81d4 	bne.w	405856 <_vfiprintf_r+0xc3e>
  4054ae:	2300      	movs	r3, #0
  4054b0:	9310      	str	r3, [sp, #64]	; 0x40
  4054b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4054b6:	f013 0f01 	tst.w	r3, #1
  4054ba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4054be:	d102      	bne.n	4054c6 <_vfiprintf_r+0x8ae>
  4054c0:	059a      	lsls	r2, r3, #22
  4054c2:	f140 80de 	bpl.w	405682 <_vfiprintf_r+0xa6a>
  4054c6:	065b      	lsls	r3, r3, #25
  4054c8:	f53f acb2 	bmi.w	404e30 <_vfiprintf_r+0x218>
  4054cc:	9803      	ldr	r0, [sp, #12]
  4054ce:	b02d      	add	sp, #180	; 0xb4
  4054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054d4:	2a00      	cmp	r2, #0
  4054d6:	f040 8106 	bne.w	4056e6 <_vfiprintf_r+0xace>
  4054da:	9a05      	ldr	r2, [sp, #20]
  4054dc:	921d      	str	r2, [sp, #116]	; 0x74
  4054de:	2301      	movs	r3, #1
  4054e0:	9211      	str	r2, [sp, #68]	; 0x44
  4054e2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4054e6:	9310      	str	r3, [sp, #64]	; 0x40
  4054e8:	46ca      	mov	sl, r9
  4054ea:	f10a 0a08 	add.w	sl, sl, #8
  4054ee:	9b02      	ldr	r3, [sp, #8]
  4054f0:	0759      	lsls	r1, r3, #29
  4054f2:	d504      	bpl.n	4054fe <_vfiprintf_r+0x8e6>
  4054f4:	9b08      	ldr	r3, [sp, #32]
  4054f6:	9901      	ldr	r1, [sp, #4]
  4054f8:	1a5c      	subs	r4, r3, r1
  4054fa:	2c00      	cmp	r4, #0
  4054fc:	dc81      	bgt.n	405402 <_vfiprintf_r+0x7ea>
  4054fe:	9b03      	ldr	r3, [sp, #12]
  405500:	9908      	ldr	r1, [sp, #32]
  405502:	9801      	ldr	r0, [sp, #4]
  405504:	4281      	cmp	r1, r0
  405506:	bfac      	ite	ge
  405508:	185b      	addge	r3, r3, r1
  40550a:	181b      	addlt	r3, r3, r0
  40550c:	9303      	str	r3, [sp, #12]
  40550e:	bb72      	cbnz	r2, 40556e <_vfiprintf_r+0x956>
  405510:	2300      	movs	r3, #0
  405512:	9310      	str	r3, [sp, #64]	; 0x40
  405514:	46ca      	mov	sl, r9
  405516:	f7ff bbbc 	b.w	404c92 <_vfiprintf_r+0x7a>
  40551a:	aa0f      	add	r2, sp, #60	; 0x3c
  40551c:	9904      	ldr	r1, [sp, #16]
  40551e:	4620      	mov	r0, r4
  405520:	f7ff fb3a 	bl	404b98 <__sprint_r.part.0>
  405524:	bb50      	cbnz	r0, 40557c <_vfiprintf_r+0x964>
  405526:	9910      	ldr	r1, [sp, #64]	; 0x40
  405528:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40552a:	f101 0e01 	add.w	lr, r1, #1
  40552e:	46cc      	mov	ip, r9
  405530:	e548      	b.n	404fc4 <_vfiprintf_r+0x3ac>
  405532:	2a00      	cmp	r2, #0
  405534:	f040 8140 	bne.w	4057b8 <_vfiprintf_r+0xba0>
  405538:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40553c:	2900      	cmp	r1, #0
  40553e:	f000 811b 	beq.w	405778 <_vfiprintf_r+0xb60>
  405542:	2201      	movs	r2, #1
  405544:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405548:	4610      	mov	r0, r2
  40554a:	921d      	str	r2, [sp, #116]	; 0x74
  40554c:	911c      	str	r1, [sp, #112]	; 0x70
  40554e:	46ca      	mov	sl, r9
  405550:	4601      	mov	r1, r0
  405552:	f10a 0a08 	add.w	sl, sl, #8
  405556:	3001      	adds	r0, #1
  405558:	e507      	b.n	404f6a <_vfiprintf_r+0x352>
  40555a:	9b02      	ldr	r3, [sp, #8]
  40555c:	2a01      	cmp	r2, #1
  40555e:	f000 8098 	beq.w	405692 <_vfiprintf_r+0xa7a>
  405562:	2a02      	cmp	r2, #2
  405564:	d10d      	bne.n	405582 <_vfiprintf_r+0x96a>
  405566:	9302      	str	r3, [sp, #8]
  405568:	2600      	movs	r6, #0
  40556a:	2700      	movs	r7, #0
  40556c:	e5b0      	b.n	4050d0 <_vfiprintf_r+0x4b8>
  40556e:	aa0f      	add	r2, sp, #60	; 0x3c
  405570:	9904      	ldr	r1, [sp, #16]
  405572:	9806      	ldr	r0, [sp, #24]
  405574:	f7ff fb10 	bl	404b98 <__sprint_r.part.0>
  405578:	2800      	cmp	r0, #0
  40557a:	d0c9      	beq.n	405510 <_vfiprintf_r+0x8f8>
  40557c:	f8dd b010 	ldr.w	fp, [sp, #16]
  405580:	e797      	b.n	4054b2 <_vfiprintf_r+0x89a>
  405582:	9302      	str	r3, [sp, #8]
  405584:	2600      	movs	r6, #0
  405586:	2700      	movs	r7, #0
  405588:	4649      	mov	r1, r9
  40558a:	e000      	b.n	40558e <_vfiprintf_r+0x976>
  40558c:	4659      	mov	r1, fp
  40558e:	08f2      	lsrs	r2, r6, #3
  405590:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405594:	08f8      	lsrs	r0, r7, #3
  405596:	f006 0307 	and.w	r3, r6, #7
  40559a:	4607      	mov	r7, r0
  40559c:	4616      	mov	r6, r2
  40559e:	3330      	adds	r3, #48	; 0x30
  4055a0:	ea56 0207 	orrs.w	r2, r6, r7
  4055a4:	f801 3c01 	strb.w	r3, [r1, #-1]
  4055a8:	f101 3bff 	add.w	fp, r1, #4294967295
  4055ac:	d1ee      	bne.n	40558c <_vfiprintf_r+0x974>
  4055ae:	9a02      	ldr	r2, [sp, #8]
  4055b0:	07d6      	lsls	r6, r2, #31
  4055b2:	f57f ad9d 	bpl.w	4050f0 <_vfiprintf_r+0x4d8>
  4055b6:	2b30      	cmp	r3, #48	; 0x30
  4055b8:	f43f ad9a 	beq.w	4050f0 <_vfiprintf_r+0x4d8>
  4055bc:	3902      	subs	r1, #2
  4055be:	2330      	movs	r3, #48	; 0x30
  4055c0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4055c4:	eba9 0301 	sub.w	r3, r9, r1
  4055c8:	9305      	str	r3, [sp, #20]
  4055ca:	468b      	mov	fp, r1
  4055cc:	e476      	b.n	404ebc <_vfiprintf_r+0x2a4>
  4055ce:	9b03      	ldr	r3, [sp, #12]
  4055d0:	9a08      	ldr	r2, [sp, #32]
  4055d2:	428a      	cmp	r2, r1
  4055d4:	bfac      	ite	ge
  4055d6:	189b      	addge	r3, r3, r2
  4055d8:	185b      	addlt	r3, r3, r1
  4055da:	9303      	str	r3, [sp, #12]
  4055dc:	e798      	b.n	405510 <_vfiprintf_r+0x8f8>
  4055de:	2202      	movs	r2, #2
  4055e0:	e44d      	b.n	404e7e <_vfiprintf_r+0x266>
  4055e2:	2f00      	cmp	r7, #0
  4055e4:	bf08      	it	eq
  4055e6:	2e0a      	cmpeq	r6, #10
  4055e8:	d352      	bcc.n	405690 <_vfiprintf_r+0xa78>
  4055ea:	46cb      	mov	fp, r9
  4055ec:	4630      	mov	r0, r6
  4055ee:	4639      	mov	r1, r7
  4055f0:	220a      	movs	r2, #10
  4055f2:	2300      	movs	r3, #0
  4055f4:	f001 ffc0 	bl	407578 <__aeabi_uldivmod>
  4055f8:	3230      	adds	r2, #48	; 0x30
  4055fa:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4055fe:	4630      	mov	r0, r6
  405600:	4639      	mov	r1, r7
  405602:	2300      	movs	r3, #0
  405604:	220a      	movs	r2, #10
  405606:	f001 ffb7 	bl	407578 <__aeabi_uldivmod>
  40560a:	4606      	mov	r6, r0
  40560c:	460f      	mov	r7, r1
  40560e:	ea56 0307 	orrs.w	r3, r6, r7
  405612:	d1eb      	bne.n	4055ec <_vfiprintf_r+0x9d4>
  405614:	e56c      	b.n	4050f0 <_vfiprintf_r+0x4d8>
  405616:	9405      	str	r4, [sp, #20]
  405618:	46cb      	mov	fp, r9
  40561a:	e44f      	b.n	404ebc <_vfiprintf_r+0x2a4>
  40561c:	aa0f      	add	r2, sp, #60	; 0x3c
  40561e:	9904      	ldr	r1, [sp, #16]
  405620:	9806      	ldr	r0, [sp, #24]
  405622:	f7ff fab9 	bl	404b98 <__sprint_r.part.0>
  405626:	2800      	cmp	r0, #0
  405628:	d1a8      	bne.n	40557c <_vfiprintf_r+0x964>
  40562a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40562c:	46ca      	mov	sl, r9
  40562e:	e75e      	b.n	4054ee <_vfiprintf_r+0x8d6>
  405630:	aa0f      	add	r2, sp, #60	; 0x3c
  405632:	9904      	ldr	r1, [sp, #16]
  405634:	9806      	ldr	r0, [sp, #24]
  405636:	f7ff faaf 	bl	404b98 <__sprint_r.part.0>
  40563a:	2800      	cmp	r0, #0
  40563c:	d19e      	bne.n	40557c <_vfiprintf_r+0x964>
  40563e:	46ca      	mov	sl, r9
  405640:	f7ff bbc0 	b.w	404dc4 <_vfiprintf_r+0x1ac>
  405644:	0040816c 	.word	0x0040816c
  405648:	0040815c 	.word	0x0040815c
  40564c:	3104      	adds	r1, #4
  40564e:	6816      	ldr	r6, [r2, #0]
  405650:	9107      	str	r1, [sp, #28]
  405652:	2201      	movs	r2, #1
  405654:	2700      	movs	r7, #0
  405656:	e412      	b.n	404e7e <_vfiprintf_r+0x266>
  405658:	9807      	ldr	r0, [sp, #28]
  40565a:	4601      	mov	r1, r0
  40565c:	3104      	adds	r1, #4
  40565e:	6806      	ldr	r6, [r0, #0]
  405660:	9107      	str	r1, [sp, #28]
  405662:	2700      	movs	r7, #0
  405664:	e40b      	b.n	404e7e <_vfiprintf_r+0x266>
  405666:	680e      	ldr	r6, [r1, #0]
  405668:	3104      	adds	r1, #4
  40566a:	9107      	str	r1, [sp, #28]
  40566c:	2700      	movs	r7, #0
  40566e:	e591      	b.n	405194 <_vfiprintf_r+0x57c>
  405670:	9907      	ldr	r1, [sp, #28]
  405672:	680e      	ldr	r6, [r1, #0]
  405674:	460a      	mov	r2, r1
  405676:	17f7      	asrs	r7, r6, #31
  405678:	3204      	adds	r2, #4
  40567a:	9207      	str	r2, [sp, #28]
  40567c:	4630      	mov	r0, r6
  40567e:	4639      	mov	r1, r7
  405680:	e50f      	b.n	4050a2 <_vfiprintf_r+0x48a>
  405682:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405686:	f000 fe7f 	bl	406388 <__retarget_lock_release_recursive>
  40568a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40568e:	e71a      	b.n	4054c6 <_vfiprintf_r+0x8ae>
  405690:	9b02      	ldr	r3, [sp, #8]
  405692:	9302      	str	r3, [sp, #8]
  405694:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405698:	3630      	adds	r6, #48	; 0x30
  40569a:	2301      	movs	r3, #1
  40569c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4056a0:	9305      	str	r3, [sp, #20]
  4056a2:	e40b      	b.n	404ebc <_vfiprintf_r+0x2a4>
  4056a4:	aa0f      	add	r2, sp, #60	; 0x3c
  4056a6:	9904      	ldr	r1, [sp, #16]
  4056a8:	9806      	ldr	r0, [sp, #24]
  4056aa:	f7ff fa75 	bl	404b98 <__sprint_r.part.0>
  4056ae:	2800      	cmp	r0, #0
  4056b0:	f47f af64 	bne.w	40557c <_vfiprintf_r+0x964>
  4056b4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056b8:	1c48      	adds	r0, r1, #1
  4056ba:	46ca      	mov	sl, r9
  4056bc:	e651      	b.n	405362 <_vfiprintf_r+0x74a>
  4056be:	aa0f      	add	r2, sp, #60	; 0x3c
  4056c0:	9904      	ldr	r1, [sp, #16]
  4056c2:	9806      	ldr	r0, [sp, #24]
  4056c4:	f7ff fa68 	bl	404b98 <__sprint_r.part.0>
  4056c8:	2800      	cmp	r0, #0
  4056ca:	f47f af57 	bne.w	40557c <_vfiprintf_r+0x964>
  4056ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056d2:	1c48      	adds	r0, r1, #1
  4056d4:	46ca      	mov	sl, r9
  4056d6:	e448      	b.n	404f6a <_vfiprintf_r+0x352>
  4056d8:	2a00      	cmp	r2, #0
  4056da:	f040 8091 	bne.w	405800 <_vfiprintf_r+0xbe8>
  4056de:	2001      	movs	r0, #1
  4056e0:	4611      	mov	r1, r2
  4056e2:	46ca      	mov	sl, r9
  4056e4:	e641      	b.n	40536a <_vfiprintf_r+0x752>
  4056e6:	aa0f      	add	r2, sp, #60	; 0x3c
  4056e8:	9904      	ldr	r1, [sp, #16]
  4056ea:	9806      	ldr	r0, [sp, #24]
  4056ec:	f7ff fa54 	bl	404b98 <__sprint_r.part.0>
  4056f0:	2800      	cmp	r0, #0
  4056f2:	f47f af43 	bne.w	40557c <_vfiprintf_r+0x964>
  4056f6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4056f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056fa:	3001      	adds	r0, #1
  4056fc:	46ca      	mov	sl, r9
  4056fe:	e667      	b.n	4053d0 <_vfiprintf_r+0x7b8>
  405700:	46d3      	mov	fp, sl
  405702:	e6d6      	b.n	4054b2 <_vfiprintf_r+0x89a>
  405704:	9e07      	ldr	r6, [sp, #28]
  405706:	3607      	adds	r6, #7
  405708:	f026 0207 	bic.w	r2, r6, #7
  40570c:	f102 0108 	add.w	r1, r2, #8
  405710:	e9d2 6700 	ldrd	r6, r7, [r2]
  405714:	9107      	str	r1, [sp, #28]
  405716:	2201      	movs	r2, #1
  405718:	f7ff bbb1 	b.w	404e7e <_vfiprintf_r+0x266>
  40571c:	9e07      	ldr	r6, [sp, #28]
  40571e:	3607      	adds	r6, #7
  405720:	f026 0607 	bic.w	r6, r6, #7
  405724:	e9d6 0100 	ldrd	r0, r1, [r6]
  405728:	f106 0208 	add.w	r2, r6, #8
  40572c:	9207      	str	r2, [sp, #28]
  40572e:	4606      	mov	r6, r0
  405730:	460f      	mov	r7, r1
  405732:	e4b6      	b.n	4050a2 <_vfiprintf_r+0x48a>
  405734:	9e07      	ldr	r6, [sp, #28]
  405736:	3607      	adds	r6, #7
  405738:	f026 0207 	bic.w	r2, r6, #7
  40573c:	f102 0108 	add.w	r1, r2, #8
  405740:	e9d2 6700 	ldrd	r6, r7, [r2]
  405744:	9107      	str	r1, [sp, #28]
  405746:	2200      	movs	r2, #0
  405748:	f7ff bb99 	b.w	404e7e <_vfiprintf_r+0x266>
  40574c:	9e07      	ldr	r6, [sp, #28]
  40574e:	3607      	adds	r6, #7
  405750:	f026 0107 	bic.w	r1, r6, #7
  405754:	f101 0008 	add.w	r0, r1, #8
  405758:	9007      	str	r0, [sp, #28]
  40575a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40575e:	e519      	b.n	405194 <_vfiprintf_r+0x57c>
  405760:	46cb      	mov	fp, r9
  405762:	f7ff bbab 	b.w	404ebc <_vfiprintf_r+0x2a4>
  405766:	252d      	movs	r5, #45	; 0x2d
  405768:	4276      	negs	r6, r6
  40576a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40576e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405772:	2201      	movs	r2, #1
  405774:	f7ff bb88 	b.w	404e88 <_vfiprintf_r+0x270>
  405778:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40577a:	b9b3      	cbnz	r3, 4057aa <_vfiprintf_r+0xb92>
  40577c:	4611      	mov	r1, r2
  40577e:	2001      	movs	r0, #1
  405780:	46ca      	mov	sl, r9
  405782:	e5f2      	b.n	40536a <_vfiprintf_r+0x752>
  405784:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405788:	f000 fdfe 	bl	406388 <__retarget_lock_release_recursive>
  40578c:	f04f 33ff 	mov.w	r3, #4294967295
  405790:	9303      	str	r3, [sp, #12]
  405792:	f7ff bb50 	b.w	404e36 <_vfiprintf_r+0x21e>
  405796:	aa0f      	add	r2, sp, #60	; 0x3c
  405798:	9904      	ldr	r1, [sp, #16]
  40579a:	9806      	ldr	r0, [sp, #24]
  40579c:	f7ff f9fc 	bl	404b98 <__sprint_r.part.0>
  4057a0:	2800      	cmp	r0, #0
  4057a2:	f47f aeeb 	bne.w	40557c <_vfiprintf_r+0x964>
  4057a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057a8:	e6a9      	b.n	4054fe <_vfiprintf_r+0x8e6>
  4057aa:	ab0e      	add	r3, sp, #56	; 0x38
  4057ac:	2202      	movs	r2, #2
  4057ae:	931c      	str	r3, [sp, #112]	; 0x70
  4057b0:	921d      	str	r2, [sp, #116]	; 0x74
  4057b2:	2001      	movs	r0, #1
  4057b4:	46ca      	mov	sl, r9
  4057b6:	e5d0      	b.n	40535a <_vfiprintf_r+0x742>
  4057b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4057ba:	9904      	ldr	r1, [sp, #16]
  4057bc:	9806      	ldr	r0, [sp, #24]
  4057be:	f7ff f9eb 	bl	404b98 <__sprint_r.part.0>
  4057c2:	2800      	cmp	r0, #0
  4057c4:	f47f aeda 	bne.w	40557c <_vfiprintf_r+0x964>
  4057c8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057cc:	1c48      	adds	r0, r1, #1
  4057ce:	46ca      	mov	sl, r9
  4057d0:	e5a4      	b.n	40531c <_vfiprintf_r+0x704>
  4057d2:	9a07      	ldr	r2, [sp, #28]
  4057d4:	9903      	ldr	r1, [sp, #12]
  4057d6:	6813      	ldr	r3, [r2, #0]
  4057d8:	17cd      	asrs	r5, r1, #31
  4057da:	4608      	mov	r0, r1
  4057dc:	3204      	adds	r2, #4
  4057de:	4629      	mov	r1, r5
  4057e0:	9207      	str	r2, [sp, #28]
  4057e2:	e9c3 0100 	strd	r0, r1, [r3]
  4057e6:	f7ff ba54 	b.w	404c92 <_vfiprintf_r+0x7a>
  4057ea:	4658      	mov	r0, fp
  4057ec:	9607      	str	r6, [sp, #28]
  4057ee:	9302      	str	r3, [sp, #8]
  4057f0:	f001 fc86 	bl	407100 <strlen>
  4057f4:	2400      	movs	r4, #0
  4057f6:	9005      	str	r0, [sp, #20]
  4057f8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4057fc:	f7ff bb5e 	b.w	404ebc <_vfiprintf_r+0x2a4>
  405800:	aa0f      	add	r2, sp, #60	; 0x3c
  405802:	9904      	ldr	r1, [sp, #16]
  405804:	9806      	ldr	r0, [sp, #24]
  405806:	f7ff f9c7 	bl	404b98 <__sprint_r.part.0>
  40580a:	2800      	cmp	r0, #0
  40580c:	f47f aeb6 	bne.w	40557c <_vfiprintf_r+0x964>
  405810:	9910      	ldr	r1, [sp, #64]	; 0x40
  405812:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405814:	1c48      	adds	r0, r1, #1
  405816:	46ca      	mov	sl, r9
  405818:	e5a7      	b.n	40536a <_vfiprintf_r+0x752>
  40581a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40581c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40581e:	4e20      	ldr	r6, [pc, #128]	; (4058a0 <_vfiprintf_r+0xc88>)
  405820:	3101      	adds	r1, #1
  405822:	f7ff bb90 	b.w	404f46 <_vfiprintf_r+0x32e>
  405826:	2c06      	cmp	r4, #6
  405828:	bf28      	it	cs
  40582a:	2406      	movcs	r4, #6
  40582c:	9405      	str	r4, [sp, #20]
  40582e:	9607      	str	r6, [sp, #28]
  405830:	9401      	str	r4, [sp, #4]
  405832:	f8df b070 	ldr.w	fp, [pc, #112]	; 4058a4 <_vfiprintf_r+0xc8c>
  405836:	e4d5      	b.n	4051e4 <_vfiprintf_r+0x5cc>
  405838:	9810      	ldr	r0, [sp, #64]	; 0x40
  40583a:	4e19      	ldr	r6, [pc, #100]	; (4058a0 <_vfiprintf_r+0xc88>)
  40583c:	3001      	adds	r0, #1
  40583e:	e603      	b.n	405448 <_vfiprintf_r+0x830>
  405840:	9405      	str	r4, [sp, #20]
  405842:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405846:	9607      	str	r6, [sp, #28]
  405848:	9302      	str	r3, [sp, #8]
  40584a:	4604      	mov	r4, r0
  40584c:	f7ff bb36 	b.w	404ebc <_vfiprintf_r+0x2a4>
  405850:	4686      	mov	lr, r0
  405852:	f7ff bbce 	b.w	404ff2 <_vfiprintf_r+0x3da>
  405856:	9806      	ldr	r0, [sp, #24]
  405858:	aa0f      	add	r2, sp, #60	; 0x3c
  40585a:	4659      	mov	r1, fp
  40585c:	f7ff f99c 	bl	404b98 <__sprint_r.part.0>
  405860:	2800      	cmp	r0, #0
  405862:	f43f ae24 	beq.w	4054ae <_vfiprintf_r+0x896>
  405866:	e624      	b.n	4054b2 <_vfiprintf_r+0x89a>
  405868:	9907      	ldr	r1, [sp, #28]
  40586a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40586e:	680c      	ldr	r4, [r1, #0]
  405870:	3104      	adds	r1, #4
  405872:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405876:	46b8      	mov	r8, r7
  405878:	9107      	str	r1, [sp, #28]
  40587a:	f7ff ba3f 	b.w	404cfc <_vfiprintf_r+0xe4>
  40587e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405882:	e43c      	b.n	4050fe <_vfiprintf_r+0x4e6>
  405884:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405888:	e521      	b.n	4052ce <_vfiprintf_r+0x6b6>
  40588a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40588e:	f7ff bbf4 	b.w	40507a <_vfiprintf_r+0x462>
  405892:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405896:	e491      	b.n	4051bc <_vfiprintf_r+0x5a4>
  405898:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40589c:	e469      	b.n	405172 <_vfiprintf_r+0x55a>
  40589e:	bf00      	nop
  4058a0:	0040815c 	.word	0x0040815c
  4058a4:	00408154 	.word	0x00408154

004058a8 <__sbprintf>:
  4058a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4058ac:	460c      	mov	r4, r1
  4058ae:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4058b2:	8989      	ldrh	r1, [r1, #12]
  4058b4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4058b6:	89e5      	ldrh	r5, [r4, #14]
  4058b8:	9619      	str	r6, [sp, #100]	; 0x64
  4058ba:	f021 0102 	bic.w	r1, r1, #2
  4058be:	4606      	mov	r6, r0
  4058c0:	69e0      	ldr	r0, [r4, #28]
  4058c2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4058c6:	4617      	mov	r7, r2
  4058c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4058cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4058ce:	f8ad 500e 	strh.w	r5, [sp, #14]
  4058d2:	4698      	mov	r8, r3
  4058d4:	ad1a      	add	r5, sp, #104	; 0x68
  4058d6:	2300      	movs	r3, #0
  4058d8:	9007      	str	r0, [sp, #28]
  4058da:	a816      	add	r0, sp, #88	; 0x58
  4058dc:	9209      	str	r2, [sp, #36]	; 0x24
  4058de:	9306      	str	r3, [sp, #24]
  4058e0:	9500      	str	r5, [sp, #0]
  4058e2:	9504      	str	r5, [sp, #16]
  4058e4:	9102      	str	r1, [sp, #8]
  4058e6:	9105      	str	r1, [sp, #20]
  4058e8:	f000 fd48 	bl	40637c <__retarget_lock_init_recursive>
  4058ec:	4643      	mov	r3, r8
  4058ee:	463a      	mov	r2, r7
  4058f0:	4669      	mov	r1, sp
  4058f2:	4630      	mov	r0, r6
  4058f4:	f7ff f990 	bl	404c18 <_vfiprintf_r>
  4058f8:	1e05      	subs	r5, r0, #0
  4058fa:	db07      	blt.n	40590c <__sbprintf+0x64>
  4058fc:	4630      	mov	r0, r6
  4058fe:	4669      	mov	r1, sp
  405900:	f000 f928 	bl	405b54 <_fflush_r>
  405904:	2800      	cmp	r0, #0
  405906:	bf18      	it	ne
  405908:	f04f 35ff 	movne.w	r5, #4294967295
  40590c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405910:	065b      	lsls	r3, r3, #25
  405912:	d503      	bpl.n	40591c <__sbprintf+0x74>
  405914:	89a3      	ldrh	r3, [r4, #12]
  405916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40591a:	81a3      	strh	r3, [r4, #12]
  40591c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40591e:	f000 fd2f 	bl	406380 <__retarget_lock_close_recursive>
  405922:	4628      	mov	r0, r5
  405924:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040592c <__swsetup_r>:
  40592c:	b538      	push	{r3, r4, r5, lr}
  40592e:	4b30      	ldr	r3, [pc, #192]	; (4059f0 <__swsetup_r+0xc4>)
  405930:	681b      	ldr	r3, [r3, #0]
  405932:	4605      	mov	r5, r0
  405934:	460c      	mov	r4, r1
  405936:	b113      	cbz	r3, 40593e <__swsetup_r+0x12>
  405938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40593a:	2a00      	cmp	r2, #0
  40593c:	d038      	beq.n	4059b0 <__swsetup_r+0x84>
  40593e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405942:	b293      	uxth	r3, r2
  405944:	0718      	lsls	r0, r3, #28
  405946:	d50c      	bpl.n	405962 <__swsetup_r+0x36>
  405948:	6920      	ldr	r0, [r4, #16]
  40594a:	b1a8      	cbz	r0, 405978 <__swsetup_r+0x4c>
  40594c:	f013 0201 	ands.w	r2, r3, #1
  405950:	d01e      	beq.n	405990 <__swsetup_r+0x64>
  405952:	6963      	ldr	r3, [r4, #20]
  405954:	2200      	movs	r2, #0
  405956:	425b      	negs	r3, r3
  405958:	61a3      	str	r3, [r4, #24]
  40595a:	60a2      	str	r2, [r4, #8]
  40595c:	b1f0      	cbz	r0, 40599c <__swsetup_r+0x70>
  40595e:	2000      	movs	r0, #0
  405960:	bd38      	pop	{r3, r4, r5, pc}
  405962:	06d9      	lsls	r1, r3, #27
  405964:	d53c      	bpl.n	4059e0 <__swsetup_r+0xb4>
  405966:	0758      	lsls	r0, r3, #29
  405968:	d426      	bmi.n	4059b8 <__swsetup_r+0x8c>
  40596a:	6920      	ldr	r0, [r4, #16]
  40596c:	f042 0308 	orr.w	r3, r2, #8
  405970:	81a3      	strh	r3, [r4, #12]
  405972:	b29b      	uxth	r3, r3
  405974:	2800      	cmp	r0, #0
  405976:	d1e9      	bne.n	40594c <__swsetup_r+0x20>
  405978:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40597c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405980:	d0e4      	beq.n	40594c <__swsetup_r+0x20>
  405982:	4628      	mov	r0, r5
  405984:	4621      	mov	r1, r4
  405986:	f000 fd2f 	bl	4063e8 <__smakebuf_r>
  40598a:	89a3      	ldrh	r3, [r4, #12]
  40598c:	6920      	ldr	r0, [r4, #16]
  40598e:	e7dd      	b.n	40594c <__swsetup_r+0x20>
  405990:	0799      	lsls	r1, r3, #30
  405992:	bf58      	it	pl
  405994:	6962      	ldrpl	r2, [r4, #20]
  405996:	60a2      	str	r2, [r4, #8]
  405998:	2800      	cmp	r0, #0
  40599a:	d1e0      	bne.n	40595e <__swsetup_r+0x32>
  40599c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059a0:	061a      	lsls	r2, r3, #24
  4059a2:	d5dd      	bpl.n	405960 <__swsetup_r+0x34>
  4059a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4059a8:	81a3      	strh	r3, [r4, #12]
  4059aa:	f04f 30ff 	mov.w	r0, #4294967295
  4059ae:	bd38      	pop	{r3, r4, r5, pc}
  4059b0:	4618      	mov	r0, r3
  4059b2:	f000 f927 	bl	405c04 <__sinit>
  4059b6:	e7c2      	b.n	40593e <__swsetup_r+0x12>
  4059b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4059ba:	b151      	cbz	r1, 4059d2 <__swsetup_r+0xa6>
  4059bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4059c0:	4299      	cmp	r1, r3
  4059c2:	d004      	beq.n	4059ce <__swsetup_r+0xa2>
  4059c4:	4628      	mov	r0, r5
  4059c6:	f000 fa43 	bl	405e50 <_free_r>
  4059ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4059ce:	2300      	movs	r3, #0
  4059d0:	6323      	str	r3, [r4, #48]	; 0x30
  4059d2:	2300      	movs	r3, #0
  4059d4:	6920      	ldr	r0, [r4, #16]
  4059d6:	6063      	str	r3, [r4, #4]
  4059d8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4059dc:	6020      	str	r0, [r4, #0]
  4059de:	e7c5      	b.n	40596c <__swsetup_r+0x40>
  4059e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4059e4:	2309      	movs	r3, #9
  4059e6:	602b      	str	r3, [r5, #0]
  4059e8:	f04f 30ff 	mov.w	r0, #4294967295
  4059ec:	81a2      	strh	r2, [r4, #12]
  4059ee:	bd38      	pop	{r3, r4, r5, pc}
  4059f0:	20400038 	.word	0x20400038

004059f4 <register_fini>:
  4059f4:	4b02      	ldr	r3, [pc, #8]	; (405a00 <register_fini+0xc>)
  4059f6:	b113      	cbz	r3, 4059fe <register_fini+0xa>
  4059f8:	4802      	ldr	r0, [pc, #8]	; (405a04 <register_fini+0x10>)
  4059fa:	f000 b805 	b.w	405a08 <atexit>
  4059fe:	4770      	bx	lr
  405a00:	00000000 	.word	0x00000000
  405a04:	00405c75 	.word	0x00405c75

00405a08 <atexit>:
  405a08:	2300      	movs	r3, #0
  405a0a:	4601      	mov	r1, r0
  405a0c:	461a      	mov	r2, r3
  405a0e:	4618      	mov	r0, r3
  405a10:	f001 bc8a 	b.w	407328 <__register_exitproc>

00405a14 <__sflush_r>:
  405a14:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405a18:	b29a      	uxth	r2, r3
  405a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a1e:	460d      	mov	r5, r1
  405a20:	0711      	lsls	r1, r2, #28
  405a22:	4680      	mov	r8, r0
  405a24:	d43a      	bmi.n	405a9c <__sflush_r+0x88>
  405a26:	686a      	ldr	r2, [r5, #4]
  405a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405a2c:	2a00      	cmp	r2, #0
  405a2e:	81ab      	strh	r3, [r5, #12]
  405a30:	dd6f      	ble.n	405b12 <__sflush_r+0xfe>
  405a32:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405a34:	2c00      	cmp	r4, #0
  405a36:	d049      	beq.n	405acc <__sflush_r+0xb8>
  405a38:	2200      	movs	r2, #0
  405a3a:	b29b      	uxth	r3, r3
  405a3c:	f8d8 6000 	ldr.w	r6, [r8]
  405a40:	f8c8 2000 	str.w	r2, [r8]
  405a44:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405a48:	d067      	beq.n	405b1a <__sflush_r+0x106>
  405a4a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405a4c:	075f      	lsls	r7, r3, #29
  405a4e:	d505      	bpl.n	405a5c <__sflush_r+0x48>
  405a50:	6869      	ldr	r1, [r5, #4]
  405a52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405a54:	1a52      	subs	r2, r2, r1
  405a56:	b10b      	cbz	r3, 405a5c <__sflush_r+0x48>
  405a58:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405a5a:	1ad2      	subs	r2, r2, r3
  405a5c:	2300      	movs	r3, #0
  405a5e:	69e9      	ldr	r1, [r5, #28]
  405a60:	4640      	mov	r0, r8
  405a62:	47a0      	blx	r4
  405a64:	1c44      	adds	r4, r0, #1
  405a66:	d03c      	beq.n	405ae2 <__sflush_r+0xce>
  405a68:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405a6c:	692a      	ldr	r2, [r5, #16]
  405a6e:	602a      	str	r2, [r5, #0]
  405a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405a74:	2200      	movs	r2, #0
  405a76:	81ab      	strh	r3, [r5, #12]
  405a78:	04db      	lsls	r3, r3, #19
  405a7a:	606a      	str	r2, [r5, #4]
  405a7c:	d447      	bmi.n	405b0e <__sflush_r+0xfa>
  405a7e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405a80:	f8c8 6000 	str.w	r6, [r8]
  405a84:	b311      	cbz	r1, 405acc <__sflush_r+0xb8>
  405a86:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405a8a:	4299      	cmp	r1, r3
  405a8c:	d002      	beq.n	405a94 <__sflush_r+0x80>
  405a8e:	4640      	mov	r0, r8
  405a90:	f000 f9de 	bl	405e50 <_free_r>
  405a94:	2000      	movs	r0, #0
  405a96:	6328      	str	r0, [r5, #48]	; 0x30
  405a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a9c:	692e      	ldr	r6, [r5, #16]
  405a9e:	b1ae      	cbz	r6, 405acc <__sflush_r+0xb8>
  405aa0:	682c      	ldr	r4, [r5, #0]
  405aa2:	602e      	str	r6, [r5, #0]
  405aa4:	0791      	lsls	r1, r2, #30
  405aa6:	bf0c      	ite	eq
  405aa8:	696b      	ldreq	r3, [r5, #20]
  405aaa:	2300      	movne	r3, #0
  405aac:	1ba4      	subs	r4, r4, r6
  405aae:	60ab      	str	r3, [r5, #8]
  405ab0:	e00a      	b.n	405ac8 <__sflush_r+0xb4>
  405ab2:	4623      	mov	r3, r4
  405ab4:	4632      	mov	r2, r6
  405ab6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405ab8:	69e9      	ldr	r1, [r5, #28]
  405aba:	4640      	mov	r0, r8
  405abc:	47b8      	blx	r7
  405abe:	2800      	cmp	r0, #0
  405ac0:	eba4 0400 	sub.w	r4, r4, r0
  405ac4:	4406      	add	r6, r0
  405ac6:	dd04      	ble.n	405ad2 <__sflush_r+0xbe>
  405ac8:	2c00      	cmp	r4, #0
  405aca:	dcf2      	bgt.n	405ab2 <__sflush_r+0x9e>
  405acc:	2000      	movs	r0, #0
  405ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ad2:	89ab      	ldrh	r3, [r5, #12]
  405ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ad8:	81ab      	strh	r3, [r5, #12]
  405ada:	f04f 30ff 	mov.w	r0, #4294967295
  405ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ae2:	f8d8 4000 	ldr.w	r4, [r8]
  405ae6:	2c1d      	cmp	r4, #29
  405ae8:	d8f3      	bhi.n	405ad2 <__sflush_r+0xbe>
  405aea:	4b19      	ldr	r3, [pc, #100]	; (405b50 <__sflush_r+0x13c>)
  405aec:	40e3      	lsrs	r3, r4
  405aee:	43db      	mvns	r3, r3
  405af0:	f013 0301 	ands.w	r3, r3, #1
  405af4:	d1ed      	bne.n	405ad2 <__sflush_r+0xbe>
  405af6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  405afa:	606b      	str	r3, [r5, #4]
  405afc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405b00:	6929      	ldr	r1, [r5, #16]
  405b02:	81ab      	strh	r3, [r5, #12]
  405b04:	04da      	lsls	r2, r3, #19
  405b06:	6029      	str	r1, [r5, #0]
  405b08:	d5b9      	bpl.n	405a7e <__sflush_r+0x6a>
  405b0a:	2c00      	cmp	r4, #0
  405b0c:	d1b7      	bne.n	405a7e <__sflush_r+0x6a>
  405b0e:	6528      	str	r0, [r5, #80]	; 0x50
  405b10:	e7b5      	b.n	405a7e <__sflush_r+0x6a>
  405b12:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405b14:	2a00      	cmp	r2, #0
  405b16:	dc8c      	bgt.n	405a32 <__sflush_r+0x1e>
  405b18:	e7d8      	b.n	405acc <__sflush_r+0xb8>
  405b1a:	2301      	movs	r3, #1
  405b1c:	69e9      	ldr	r1, [r5, #28]
  405b1e:	4640      	mov	r0, r8
  405b20:	47a0      	blx	r4
  405b22:	1c43      	adds	r3, r0, #1
  405b24:	4602      	mov	r2, r0
  405b26:	d002      	beq.n	405b2e <__sflush_r+0x11a>
  405b28:	89ab      	ldrh	r3, [r5, #12]
  405b2a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405b2c:	e78e      	b.n	405a4c <__sflush_r+0x38>
  405b2e:	f8d8 3000 	ldr.w	r3, [r8]
  405b32:	2b00      	cmp	r3, #0
  405b34:	d0f8      	beq.n	405b28 <__sflush_r+0x114>
  405b36:	2b1d      	cmp	r3, #29
  405b38:	d001      	beq.n	405b3e <__sflush_r+0x12a>
  405b3a:	2b16      	cmp	r3, #22
  405b3c:	d102      	bne.n	405b44 <__sflush_r+0x130>
  405b3e:	f8c8 6000 	str.w	r6, [r8]
  405b42:	e7c3      	b.n	405acc <__sflush_r+0xb8>
  405b44:	89ab      	ldrh	r3, [r5, #12]
  405b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b4a:	81ab      	strh	r3, [r5, #12]
  405b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b50:	20400001 	.word	0x20400001

00405b54 <_fflush_r>:
  405b54:	b538      	push	{r3, r4, r5, lr}
  405b56:	460d      	mov	r5, r1
  405b58:	4604      	mov	r4, r0
  405b5a:	b108      	cbz	r0, 405b60 <_fflush_r+0xc>
  405b5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405b5e:	b1bb      	cbz	r3, 405b90 <_fflush_r+0x3c>
  405b60:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405b64:	b188      	cbz	r0, 405b8a <_fflush_r+0x36>
  405b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405b68:	07db      	lsls	r3, r3, #31
  405b6a:	d401      	bmi.n	405b70 <_fflush_r+0x1c>
  405b6c:	0581      	lsls	r1, r0, #22
  405b6e:	d517      	bpl.n	405ba0 <_fflush_r+0x4c>
  405b70:	4620      	mov	r0, r4
  405b72:	4629      	mov	r1, r5
  405b74:	f7ff ff4e 	bl	405a14 <__sflush_r>
  405b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405b7a:	07da      	lsls	r2, r3, #31
  405b7c:	4604      	mov	r4, r0
  405b7e:	d402      	bmi.n	405b86 <_fflush_r+0x32>
  405b80:	89ab      	ldrh	r3, [r5, #12]
  405b82:	059b      	lsls	r3, r3, #22
  405b84:	d507      	bpl.n	405b96 <_fflush_r+0x42>
  405b86:	4620      	mov	r0, r4
  405b88:	bd38      	pop	{r3, r4, r5, pc}
  405b8a:	4604      	mov	r4, r0
  405b8c:	4620      	mov	r0, r4
  405b8e:	bd38      	pop	{r3, r4, r5, pc}
  405b90:	f000 f838 	bl	405c04 <__sinit>
  405b94:	e7e4      	b.n	405b60 <_fflush_r+0xc>
  405b96:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405b98:	f000 fbf6 	bl	406388 <__retarget_lock_release_recursive>
  405b9c:	4620      	mov	r0, r4
  405b9e:	bd38      	pop	{r3, r4, r5, pc}
  405ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405ba2:	f000 fbef 	bl	406384 <__retarget_lock_acquire_recursive>
  405ba6:	e7e3      	b.n	405b70 <_fflush_r+0x1c>

00405ba8 <_cleanup_r>:
  405ba8:	4901      	ldr	r1, [pc, #4]	; (405bb0 <_cleanup_r+0x8>)
  405baa:	f000 bbaf 	b.w	40630c <_fwalk_reent>
  405bae:	bf00      	nop
  405bb0:	00407411 	.word	0x00407411

00405bb4 <std.isra.0>:
  405bb4:	b510      	push	{r4, lr}
  405bb6:	2300      	movs	r3, #0
  405bb8:	4604      	mov	r4, r0
  405bba:	8181      	strh	r1, [r0, #12]
  405bbc:	81c2      	strh	r2, [r0, #14]
  405bbe:	6003      	str	r3, [r0, #0]
  405bc0:	6043      	str	r3, [r0, #4]
  405bc2:	6083      	str	r3, [r0, #8]
  405bc4:	6643      	str	r3, [r0, #100]	; 0x64
  405bc6:	6103      	str	r3, [r0, #16]
  405bc8:	6143      	str	r3, [r0, #20]
  405bca:	6183      	str	r3, [r0, #24]
  405bcc:	4619      	mov	r1, r3
  405bce:	2208      	movs	r2, #8
  405bd0:	305c      	adds	r0, #92	; 0x5c
  405bd2:	f7fe fec3 	bl	40495c <memset>
  405bd6:	4807      	ldr	r0, [pc, #28]	; (405bf4 <std.isra.0+0x40>)
  405bd8:	4907      	ldr	r1, [pc, #28]	; (405bf8 <std.isra.0+0x44>)
  405bda:	4a08      	ldr	r2, [pc, #32]	; (405bfc <std.isra.0+0x48>)
  405bdc:	4b08      	ldr	r3, [pc, #32]	; (405c00 <std.isra.0+0x4c>)
  405bde:	6220      	str	r0, [r4, #32]
  405be0:	61e4      	str	r4, [r4, #28]
  405be2:	6261      	str	r1, [r4, #36]	; 0x24
  405be4:	62a2      	str	r2, [r4, #40]	; 0x28
  405be6:	62e3      	str	r3, [r4, #44]	; 0x2c
  405be8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405bf0:	f000 bbc4 	b.w	40637c <__retarget_lock_init_recursive>
  405bf4:	00407045 	.word	0x00407045
  405bf8:	00407069 	.word	0x00407069
  405bfc:	004070a5 	.word	0x004070a5
  405c00:	004070c5 	.word	0x004070c5

00405c04 <__sinit>:
  405c04:	b510      	push	{r4, lr}
  405c06:	4604      	mov	r4, r0
  405c08:	4812      	ldr	r0, [pc, #72]	; (405c54 <__sinit+0x50>)
  405c0a:	f000 fbbb 	bl	406384 <__retarget_lock_acquire_recursive>
  405c0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405c10:	b9d2      	cbnz	r2, 405c48 <__sinit+0x44>
  405c12:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  405c16:	4810      	ldr	r0, [pc, #64]	; (405c58 <__sinit+0x54>)
  405c18:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  405c1c:	2103      	movs	r1, #3
  405c1e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  405c22:	63e0      	str	r0, [r4, #60]	; 0x3c
  405c24:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  405c28:	6860      	ldr	r0, [r4, #4]
  405c2a:	2104      	movs	r1, #4
  405c2c:	f7ff ffc2 	bl	405bb4 <std.isra.0>
  405c30:	2201      	movs	r2, #1
  405c32:	2109      	movs	r1, #9
  405c34:	68a0      	ldr	r0, [r4, #8]
  405c36:	f7ff ffbd 	bl	405bb4 <std.isra.0>
  405c3a:	2202      	movs	r2, #2
  405c3c:	2112      	movs	r1, #18
  405c3e:	68e0      	ldr	r0, [r4, #12]
  405c40:	f7ff ffb8 	bl	405bb4 <std.isra.0>
  405c44:	2301      	movs	r3, #1
  405c46:	63a3      	str	r3, [r4, #56]	; 0x38
  405c48:	4802      	ldr	r0, [pc, #8]	; (405c54 <__sinit+0x50>)
  405c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405c4e:	f000 bb9b 	b.w	406388 <__retarget_lock_release_recursive>
  405c52:	bf00      	nop
  405c54:	20400b08 	.word	0x20400b08
  405c58:	00405ba9 	.word	0x00405ba9

00405c5c <__sfp_lock_acquire>:
  405c5c:	4801      	ldr	r0, [pc, #4]	; (405c64 <__sfp_lock_acquire+0x8>)
  405c5e:	f000 bb91 	b.w	406384 <__retarget_lock_acquire_recursive>
  405c62:	bf00      	nop
  405c64:	20400b1c 	.word	0x20400b1c

00405c68 <__sfp_lock_release>:
  405c68:	4801      	ldr	r0, [pc, #4]	; (405c70 <__sfp_lock_release+0x8>)
  405c6a:	f000 bb8d 	b.w	406388 <__retarget_lock_release_recursive>
  405c6e:	bf00      	nop
  405c70:	20400b1c 	.word	0x20400b1c

00405c74 <__libc_fini_array>:
  405c74:	b538      	push	{r3, r4, r5, lr}
  405c76:	4c0a      	ldr	r4, [pc, #40]	; (405ca0 <__libc_fini_array+0x2c>)
  405c78:	4d0a      	ldr	r5, [pc, #40]	; (405ca4 <__libc_fini_array+0x30>)
  405c7a:	1b64      	subs	r4, r4, r5
  405c7c:	10a4      	asrs	r4, r4, #2
  405c7e:	d00a      	beq.n	405c96 <__libc_fini_array+0x22>
  405c80:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405c84:	3b01      	subs	r3, #1
  405c86:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405c8a:	3c01      	subs	r4, #1
  405c8c:	f855 3904 	ldr.w	r3, [r5], #-4
  405c90:	4798      	blx	r3
  405c92:	2c00      	cmp	r4, #0
  405c94:	d1f9      	bne.n	405c8a <__libc_fini_array+0x16>
  405c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405c9a:	f002 bb03 	b.w	4082a4 <_fini>
  405c9e:	bf00      	nop
  405ca0:	004082b4 	.word	0x004082b4
  405ca4:	004082b0 	.word	0x004082b0

00405ca8 <__fputwc>:
  405ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405cac:	b082      	sub	sp, #8
  405cae:	4680      	mov	r8, r0
  405cb0:	4689      	mov	r9, r1
  405cb2:	4614      	mov	r4, r2
  405cb4:	f000 fb54 	bl	406360 <__locale_mb_cur_max>
  405cb8:	2801      	cmp	r0, #1
  405cba:	d036      	beq.n	405d2a <__fputwc+0x82>
  405cbc:	464a      	mov	r2, r9
  405cbe:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405cc2:	a901      	add	r1, sp, #4
  405cc4:	4640      	mov	r0, r8
  405cc6:	f001 fae1 	bl	40728c <_wcrtomb_r>
  405cca:	1c42      	adds	r2, r0, #1
  405ccc:	4606      	mov	r6, r0
  405cce:	d025      	beq.n	405d1c <__fputwc+0x74>
  405cd0:	b3a8      	cbz	r0, 405d3e <__fputwc+0x96>
  405cd2:	f89d e004 	ldrb.w	lr, [sp, #4]
  405cd6:	2500      	movs	r5, #0
  405cd8:	f10d 0a04 	add.w	sl, sp, #4
  405cdc:	e009      	b.n	405cf2 <__fputwc+0x4a>
  405cde:	6823      	ldr	r3, [r4, #0]
  405ce0:	1c5a      	adds	r2, r3, #1
  405ce2:	6022      	str	r2, [r4, #0]
  405ce4:	f883 e000 	strb.w	lr, [r3]
  405ce8:	3501      	adds	r5, #1
  405cea:	42b5      	cmp	r5, r6
  405cec:	d227      	bcs.n	405d3e <__fputwc+0x96>
  405cee:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405cf2:	68a3      	ldr	r3, [r4, #8]
  405cf4:	3b01      	subs	r3, #1
  405cf6:	2b00      	cmp	r3, #0
  405cf8:	60a3      	str	r3, [r4, #8]
  405cfa:	daf0      	bge.n	405cde <__fputwc+0x36>
  405cfc:	69a7      	ldr	r7, [r4, #24]
  405cfe:	42bb      	cmp	r3, r7
  405d00:	4671      	mov	r1, lr
  405d02:	4622      	mov	r2, r4
  405d04:	4640      	mov	r0, r8
  405d06:	db02      	blt.n	405d0e <__fputwc+0x66>
  405d08:	f1be 0f0a 	cmp.w	lr, #10
  405d0c:	d1e7      	bne.n	405cde <__fputwc+0x36>
  405d0e:	f001 fa65 	bl	4071dc <__swbuf_r>
  405d12:	1c43      	adds	r3, r0, #1
  405d14:	d1e8      	bne.n	405ce8 <__fputwc+0x40>
  405d16:	b002      	add	sp, #8
  405d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d1c:	89a3      	ldrh	r3, [r4, #12]
  405d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405d22:	81a3      	strh	r3, [r4, #12]
  405d24:	b002      	add	sp, #8
  405d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d2a:	f109 33ff 	add.w	r3, r9, #4294967295
  405d2e:	2bfe      	cmp	r3, #254	; 0xfe
  405d30:	d8c4      	bhi.n	405cbc <__fputwc+0x14>
  405d32:	fa5f fe89 	uxtb.w	lr, r9
  405d36:	4606      	mov	r6, r0
  405d38:	f88d e004 	strb.w	lr, [sp, #4]
  405d3c:	e7cb      	b.n	405cd6 <__fputwc+0x2e>
  405d3e:	4648      	mov	r0, r9
  405d40:	b002      	add	sp, #8
  405d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d46:	bf00      	nop

00405d48 <_fputwc_r>:
  405d48:	b530      	push	{r4, r5, lr}
  405d4a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405d4c:	f013 0f01 	tst.w	r3, #1
  405d50:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405d54:	4614      	mov	r4, r2
  405d56:	b083      	sub	sp, #12
  405d58:	4605      	mov	r5, r0
  405d5a:	b29a      	uxth	r2, r3
  405d5c:	d101      	bne.n	405d62 <_fputwc_r+0x1a>
  405d5e:	0590      	lsls	r0, r2, #22
  405d60:	d51c      	bpl.n	405d9c <_fputwc_r+0x54>
  405d62:	0490      	lsls	r0, r2, #18
  405d64:	d406      	bmi.n	405d74 <_fputwc_r+0x2c>
  405d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405d68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405d70:	81a3      	strh	r3, [r4, #12]
  405d72:	6662      	str	r2, [r4, #100]	; 0x64
  405d74:	4628      	mov	r0, r5
  405d76:	4622      	mov	r2, r4
  405d78:	f7ff ff96 	bl	405ca8 <__fputwc>
  405d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405d7e:	07da      	lsls	r2, r3, #31
  405d80:	4605      	mov	r5, r0
  405d82:	d402      	bmi.n	405d8a <_fputwc_r+0x42>
  405d84:	89a3      	ldrh	r3, [r4, #12]
  405d86:	059b      	lsls	r3, r3, #22
  405d88:	d502      	bpl.n	405d90 <_fputwc_r+0x48>
  405d8a:	4628      	mov	r0, r5
  405d8c:	b003      	add	sp, #12
  405d8e:	bd30      	pop	{r4, r5, pc}
  405d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405d92:	f000 faf9 	bl	406388 <__retarget_lock_release_recursive>
  405d96:	4628      	mov	r0, r5
  405d98:	b003      	add	sp, #12
  405d9a:	bd30      	pop	{r4, r5, pc}
  405d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405d9e:	9101      	str	r1, [sp, #4]
  405da0:	f000 faf0 	bl	406384 <__retarget_lock_acquire_recursive>
  405da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405da8:	9901      	ldr	r1, [sp, #4]
  405daa:	b29a      	uxth	r2, r3
  405dac:	e7d9      	b.n	405d62 <_fputwc_r+0x1a>
  405dae:	bf00      	nop

00405db0 <_malloc_trim_r>:
  405db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405db2:	4f24      	ldr	r7, [pc, #144]	; (405e44 <_malloc_trim_r+0x94>)
  405db4:	460c      	mov	r4, r1
  405db6:	4606      	mov	r6, r0
  405db8:	f000 ff80 	bl	406cbc <__malloc_lock>
  405dbc:	68bb      	ldr	r3, [r7, #8]
  405dbe:	685d      	ldr	r5, [r3, #4]
  405dc0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405dc4:	310f      	adds	r1, #15
  405dc6:	f025 0503 	bic.w	r5, r5, #3
  405dca:	4429      	add	r1, r5
  405dcc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405dd0:	f021 010f 	bic.w	r1, r1, #15
  405dd4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405dd8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405ddc:	db07      	blt.n	405dee <_malloc_trim_r+0x3e>
  405dde:	2100      	movs	r1, #0
  405de0:	4630      	mov	r0, r6
  405de2:	f001 f91d 	bl	407020 <_sbrk_r>
  405de6:	68bb      	ldr	r3, [r7, #8]
  405de8:	442b      	add	r3, r5
  405dea:	4298      	cmp	r0, r3
  405dec:	d004      	beq.n	405df8 <_malloc_trim_r+0x48>
  405dee:	4630      	mov	r0, r6
  405df0:	f000 ff6a 	bl	406cc8 <__malloc_unlock>
  405df4:	2000      	movs	r0, #0
  405df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405df8:	4261      	negs	r1, r4
  405dfa:	4630      	mov	r0, r6
  405dfc:	f001 f910 	bl	407020 <_sbrk_r>
  405e00:	3001      	adds	r0, #1
  405e02:	d00d      	beq.n	405e20 <_malloc_trim_r+0x70>
  405e04:	4b10      	ldr	r3, [pc, #64]	; (405e48 <_malloc_trim_r+0x98>)
  405e06:	68ba      	ldr	r2, [r7, #8]
  405e08:	6819      	ldr	r1, [r3, #0]
  405e0a:	1b2d      	subs	r5, r5, r4
  405e0c:	f045 0501 	orr.w	r5, r5, #1
  405e10:	4630      	mov	r0, r6
  405e12:	1b09      	subs	r1, r1, r4
  405e14:	6055      	str	r5, [r2, #4]
  405e16:	6019      	str	r1, [r3, #0]
  405e18:	f000 ff56 	bl	406cc8 <__malloc_unlock>
  405e1c:	2001      	movs	r0, #1
  405e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405e20:	2100      	movs	r1, #0
  405e22:	4630      	mov	r0, r6
  405e24:	f001 f8fc 	bl	407020 <_sbrk_r>
  405e28:	68ba      	ldr	r2, [r7, #8]
  405e2a:	1a83      	subs	r3, r0, r2
  405e2c:	2b0f      	cmp	r3, #15
  405e2e:	ddde      	ble.n	405dee <_malloc_trim_r+0x3e>
  405e30:	4c06      	ldr	r4, [pc, #24]	; (405e4c <_malloc_trim_r+0x9c>)
  405e32:	4905      	ldr	r1, [pc, #20]	; (405e48 <_malloc_trim_r+0x98>)
  405e34:	6824      	ldr	r4, [r4, #0]
  405e36:	f043 0301 	orr.w	r3, r3, #1
  405e3a:	1b00      	subs	r0, r0, r4
  405e3c:	6053      	str	r3, [r2, #4]
  405e3e:	6008      	str	r0, [r1, #0]
  405e40:	e7d5      	b.n	405dee <_malloc_trim_r+0x3e>
  405e42:	bf00      	nop
  405e44:	204005d8 	.word	0x204005d8
  405e48:	20400abc 	.word	0x20400abc
  405e4c:	204009e0 	.word	0x204009e0

00405e50 <_free_r>:
  405e50:	2900      	cmp	r1, #0
  405e52:	d044      	beq.n	405ede <_free_r+0x8e>
  405e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405e58:	460d      	mov	r5, r1
  405e5a:	4680      	mov	r8, r0
  405e5c:	f000 ff2e 	bl	406cbc <__malloc_lock>
  405e60:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405e64:	4969      	ldr	r1, [pc, #420]	; (40600c <_free_r+0x1bc>)
  405e66:	f027 0301 	bic.w	r3, r7, #1
  405e6a:	f1a5 0408 	sub.w	r4, r5, #8
  405e6e:	18e2      	adds	r2, r4, r3
  405e70:	688e      	ldr	r6, [r1, #8]
  405e72:	6850      	ldr	r0, [r2, #4]
  405e74:	42b2      	cmp	r2, r6
  405e76:	f020 0003 	bic.w	r0, r0, #3
  405e7a:	d05e      	beq.n	405f3a <_free_r+0xea>
  405e7c:	07fe      	lsls	r6, r7, #31
  405e7e:	6050      	str	r0, [r2, #4]
  405e80:	d40b      	bmi.n	405e9a <_free_r+0x4a>
  405e82:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405e86:	1be4      	subs	r4, r4, r7
  405e88:	f101 0e08 	add.w	lr, r1, #8
  405e8c:	68a5      	ldr	r5, [r4, #8]
  405e8e:	4575      	cmp	r5, lr
  405e90:	443b      	add	r3, r7
  405e92:	d06d      	beq.n	405f70 <_free_r+0x120>
  405e94:	68e7      	ldr	r7, [r4, #12]
  405e96:	60ef      	str	r7, [r5, #12]
  405e98:	60bd      	str	r5, [r7, #8]
  405e9a:	1815      	adds	r5, r2, r0
  405e9c:	686d      	ldr	r5, [r5, #4]
  405e9e:	07ed      	lsls	r5, r5, #31
  405ea0:	d53e      	bpl.n	405f20 <_free_r+0xd0>
  405ea2:	f043 0201 	orr.w	r2, r3, #1
  405ea6:	6062      	str	r2, [r4, #4]
  405ea8:	50e3      	str	r3, [r4, r3]
  405eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405eae:	d217      	bcs.n	405ee0 <_free_r+0x90>
  405eb0:	08db      	lsrs	r3, r3, #3
  405eb2:	1c58      	adds	r0, r3, #1
  405eb4:	109a      	asrs	r2, r3, #2
  405eb6:	684d      	ldr	r5, [r1, #4]
  405eb8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405ebc:	60a7      	str	r7, [r4, #8]
  405ebe:	2301      	movs	r3, #1
  405ec0:	4093      	lsls	r3, r2
  405ec2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405ec6:	432b      	orrs	r3, r5
  405ec8:	3a08      	subs	r2, #8
  405eca:	60e2      	str	r2, [r4, #12]
  405ecc:	604b      	str	r3, [r1, #4]
  405ece:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405ed2:	60fc      	str	r4, [r7, #12]
  405ed4:	4640      	mov	r0, r8
  405ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405eda:	f000 bef5 	b.w	406cc8 <__malloc_unlock>
  405ede:	4770      	bx	lr
  405ee0:	0a5a      	lsrs	r2, r3, #9
  405ee2:	2a04      	cmp	r2, #4
  405ee4:	d852      	bhi.n	405f8c <_free_r+0x13c>
  405ee6:	099a      	lsrs	r2, r3, #6
  405ee8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405eec:	00ff      	lsls	r7, r7, #3
  405eee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405ef2:	19c8      	adds	r0, r1, r7
  405ef4:	59ca      	ldr	r2, [r1, r7]
  405ef6:	3808      	subs	r0, #8
  405ef8:	4290      	cmp	r0, r2
  405efa:	d04f      	beq.n	405f9c <_free_r+0x14c>
  405efc:	6851      	ldr	r1, [r2, #4]
  405efe:	f021 0103 	bic.w	r1, r1, #3
  405f02:	428b      	cmp	r3, r1
  405f04:	d232      	bcs.n	405f6c <_free_r+0x11c>
  405f06:	6892      	ldr	r2, [r2, #8]
  405f08:	4290      	cmp	r0, r2
  405f0a:	d1f7      	bne.n	405efc <_free_r+0xac>
  405f0c:	68c3      	ldr	r3, [r0, #12]
  405f0e:	60a0      	str	r0, [r4, #8]
  405f10:	60e3      	str	r3, [r4, #12]
  405f12:	609c      	str	r4, [r3, #8]
  405f14:	60c4      	str	r4, [r0, #12]
  405f16:	4640      	mov	r0, r8
  405f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405f1c:	f000 bed4 	b.w	406cc8 <__malloc_unlock>
  405f20:	6895      	ldr	r5, [r2, #8]
  405f22:	4f3b      	ldr	r7, [pc, #236]	; (406010 <_free_r+0x1c0>)
  405f24:	42bd      	cmp	r5, r7
  405f26:	4403      	add	r3, r0
  405f28:	d040      	beq.n	405fac <_free_r+0x15c>
  405f2a:	68d0      	ldr	r0, [r2, #12]
  405f2c:	60e8      	str	r0, [r5, #12]
  405f2e:	f043 0201 	orr.w	r2, r3, #1
  405f32:	6085      	str	r5, [r0, #8]
  405f34:	6062      	str	r2, [r4, #4]
  405f36:	50e3      	str	r3, [r4, r3]
  405f38:	e7b7      	b.n	405eaa <_free_r+0x5a>
  405f3a:	07ff      	lsls	r7, r7, #31
  405f3c:	4403      	add	r3, r0
  405f3e:	d407      	bmi.n	405f50 <_free_r+0x100>
  405f40:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405f44:	1aa4      	subs	r4, r4, r2
  405f46:	4413      	add	r3, r2
  405f48:	68a0      	ldr	r0, [r4, #8]
  405f4a:	68e2      	ldr	r2, [r4, #12]
  405f4c:	60c2      	str	r2, [r0, #12]
  405f4e:	6090      	str	r0, [r2, #8]
  405f50:	4a30      	ldr	r2, [pc, #192]	; (406014 <_free_r+0x1c4>)
  405f52:	6812      	ldr	r2, [r2, #0]
  405f54:	f043 0001 	orr.w	r0, r3, #1
  405f58:	4293      	cmp	r3, r2
  405f5a:	6060      	str	r0, [r4, #4]
  405f5c:	608c      	str	r4, [r1, #8]
  405f5e:	d3b9      	bcc.n	405ed4 <_free_r+0x84>
  405f60:	4b2d      	ldr	r3, [pc, #180]	; (406018 <_free_r+0x1c8>)
  405f62:	4640      	mov	r0, r8
  405f64:	6819      	ldr	r1, [r3, #0]
  405f66:	f7ff ff23 	bl	405db0 <_malloc_trim_r>
  405f6a:	e7b3      	b.n	405ed4 <_free_r+0x84>
  405f6c:	4610      	mov	r0, r2
  405f6e:	e7cd      	b.n	405f0c <_free_r+0xbc>
  405f70:	1811      	adds	r1, r2, r0
  405f72:	6849      	ldr	r1, [r1, #4]
  405f74:	07c9      	lsls	r1, r1, #31
  405f76:	d444      	bmi.n	406002 <_free_r+0x1b2>
  405f78:	6891      	ldr	r1, [r2, #8]
  405f7a:	68d2      	ldr	r2, [r2, #12]
  405f7c:	60ca      	str	r2, [r1, #12]
  405f7e:	4403      	add	r3, r0
  405f80:	f043 0001 	orr.w	r0, r3, #1
  405f84:	6091      	str	r1, [r2, #8]
  405f86:	6060      	str	r0, [r4, #4]
  405f88:	50e3      	str	r3, [r4, r3]
  405f8a:	e7a3      	b.n	405ed4 <_free_r+0x84>
  405f8c:	2a14      	cmp	r2, #20
  405f8e:	d816      	bhi.n	405fbe <_free_r+0x16e>
  405f90:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405f94:	00ff      	lsls	r7, r7, #3
  405f96:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405f9a:	e7aa      	b.n	405ef2 <_free_r+0xa2>
  405f9c:	10aa      	asrs	r2, r5, #2
  405f9e:	2301      	movs	r3, #1
  405fa0:	684d      	ldr	r5, [r1, #4]
  405fa2:	4093      	lsls	r3, r2
  405fa4:	432b      	orrs	r3, r5
  405fa6:	604b      	str	r3, [r1, #4]
  405fa8:	4603      	mov	r3, r0
  405faa:	e7b0      	b.n	405f0e <_free_r+0xbe>
  405fac:	f043 0201 	orr.w	r2, r3, #1
  405fb0:	614c      	str	r4, [r1, #20]
  405fb2:	610c      	str	r4, [r1, #16]
  405fb4:	60e5      	str	r5, [r4, #12]
  405fb6:	60a5      	str	r5, [r4, #8]
  405fb8:	6062      	str	r2, [r4, #4]
  405fba:	50e3      	str	r3, [r4, r3]
  405fbc:	e78a      	b.n	405ed4 <_free_r+0x84>
  405fbe:	2a54      	cmp	r2, #84	; 0x54
  405fc0:	d806      	bhi.n	405fd0 <_free_r+0x180>
  405fc2:	0b1a      	lsrs	r2, r3, #12
  405fc4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405fc8:	00ff      	lsls	r7, r7, #3
  405fca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405fce:	e790      	b.n	405ef2 <_free_r+0xa2>
  405fd0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405fd4:	d806      	bhi.n	405fe4 <_free_r+0x194>
  405fd6:	0bda      	lsrs	r2, r3, #15
  405fd8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405fdc:	00ff      	lsls	r7, r7, #3
  405fde:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405fe2:	e786      	b.n	405ef2 <_free_r+0xa2>
  405fe4:	f240 5054 	movw	r0, #1364	; 0x554
  405fe8:	4282      	cmp	r2, r0
  405fea:	d806      	bhi.n	405ffa <_free_r+0x1aa>
  405fec:	0c9a      	lsrs	r2, r3, #18
  405fee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405ff2:	00ff      	lsls	r7, r7, #3
  405ff4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405ff8:	e77b      	b.n	405ef2 <_free_r+0xa2>
  405ffa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405ffe:	257e      	movs	r5, #126	; 0x7e
  406000:	e777      	b.n	405ef2 <_free_r+0xa2>
  406002:	f043 0101 	orr.w	r1, r3, #1
  406006:	6061      	str	r1, [r4, #4]
  406008:	6013      	str	r3, [r2, #0]
  40600a:	e763      	b.n	405ed4 <_free_r+0x84>
  40600c:	204005d8 	.word	0x204005d8
  406010:	204005e0 	.word	0x204005e0
  406014:	204009e4 	.word	0x204009e4
  406018:	20400aec 	.word	0x20400aec

0040601c <__sfvwrite_r>:
  40601c:	6893      	ldr	r3, [r2, #8]
  40601e:	2b00      	cmp	r3, #0
  406020:	d073      	beq.n	40610a <__sfvwrite_r+0xee>
  406022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406026:	898b      	ldrh	r3, [r1, #12]
  406028:	b083      	sub	sp, #12
  40602a:	460c      	mov	r4, r1
  40602c:	0719      	lsls	r1, r3, #28
  40602e:	9000      	str	r0, [sp, #0]
  406030:	4616      	mov	r6, r2
  406032:	d526      	bpl.n	406082 <__sfvwrite_r+0x66>
  406034:	6922      	ldr	r2, [r4, #16]
  406036:	b322      	cbz	r2, 406082 <__sfvwrite_r+0x66>
  406038:	f013 0002 	ands.w	r0, r3, #2
  40603c:	6835      	ldr	r5, [r6, #0]
  40603e:	d02c      	beq.n	40609a <__sfvwrite_r+0x7e>
  406040:	f04f 0900 	mov.w	r9, #0
  406044:	4fb0      	ldr	r7, [pc, #704]	; (406308 <__sfvwrite_r+0x2ec>)
  406046:	46c8      	mov	r8, r9
  406048:	46b2      	mov	sl, r6
  40604a:	45b8      	cmp	r8, r7
  40604c:	4643      	mov	r3, r8
  40604e:	464a      	mov	r2, r9
  406050:	bf28      	it	cs
  406052:	463b      	movcs	r3, r7
  406054:	9800      	ldr	r0, [sp, #0]
  406056:	f1b8 0f00 	cmp.w	r8, #0
  40605a:	d050      	beq.n	4060fe <__sfvwrite_r+0xe2>
  40605c:	69e1      	ldr	r1, [r4, #28]
  40605e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406060:	47b0      	blx	r6
  406062:	2800      	cmp	r0, #0
  406064:	dd58      	ble.n	406118 <__sfvwrite_r+0xfc>
  406066:	f8da 3008 	ldr.w	r3, [sl, #8]
  40606a:	1a1b      	subs	r3, r3, r0
  40606c:	4481      	add	r9, r0
  40606e:	eba8 0800 	sub.w	r8, r8, r0
  406072:	f8ca 3008 	str.w	r3, [sl, #8]
  406076:	2b00      	cmp	r3, #0
  406078:	d1e7      	bne.n	40604a <__sfvwrite_r+0x2e>
  40607a:	2000      	movs	r0, #0
  40607c:	b003      	add	sp, #12
  40607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406082:	4621      	mov	r1, r4
  406084:	9800      	ldr	r0, [sp, #0]
  406086:	f7ff fc51 	bl	40592c <__swsetup_r>
  40608a:	2800      	cmp	r0, #0
  40608c:	f040 8133 	bne.w	4062f6 <__sfvwrite_r+0x2da>
  406090:	89a3      	ldrh	r3, [r4, #12]
  406092:	6835      	ldr	r5, [r6, #0]
  406094:	f013 0002 	ands.w	r0, r3, #2
  406098:	d1d2      	bne.n	406040 <__sfvwrite_r+0x24>
  40609a:	f013 0901 	ands.w	r9, r3, #1
  40609e:	d145      	bne.n	40612c <__sfvwrite_r+0x110>
  4060a0:	464f      	mov	r7, r9
  4060a2:	9601      	str	r6, [sp, #4]
  4060a4:	b337      	cbz	r7, 4060f4 <__sfvwrite_r+0xd8>
  4060a6:	059a      	lsls	r2, r3, #22
  4060a8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4060ac:	f140 8083 	bpl.w	4061b6 <__sfvwrite_r+0x19a>
  4060b0:	4547      	cmp	r7, r8
  4060b2:	46c3      	mov	fp, r8
  4060b4:	f0c0 80ab 	bcc.w	40620e <__sfvwrite_r+0x1f2>
  4060b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4060bc:	f040 80ac 	bne.w	406218 <__sfvwrite_r+0x1fc>
  4060c0:	6820      	ldr	r0, [r4, #0]
  4060c2:	46ba      	mov	sl, r7
  4060c4:	465a      	mov	r2, fp
  4060c6:	4649      	mov	r1, r9
  4060c8:	f000 fd94 	bl	406bf4 <memmove>
  4060cc:	68a2      	ldr	r2, [r4, #8]
  4060ce:	6823      	ldr	r3, [r4, #0]
  4060d0:	eba2 0208 	sub.w	r2, r2, r8
  4060d4:	445b      	add	r3, fp
  4060d6:	60a2      	str	r2, [r4, #8]
  4060d8:	6023      	str	r3, [r4, #0]
  4060da:	9a01      	ldr	r2, [sp, #4]
  4060dc:	6893      	ldr	r3, [r2, #8]
  4060de:	eba3 030a 	sub.w	r3, r3, sl
  4060e2:	44d1      	add	r9, sl
  4060e4:	eba7 070a 	sub.w	r7, r7, sl
  4060e8:	6093      	str	r3, [r2, #8]
  4060ea:	2b00      	cmp	r3, #0
  4060ec:	d0c5      	beq.n	40607a <__sfvwrite_r+0x5e>
  4060ee:	89a3      	ldrh	r3, [r4, #12]
  4060f0:	2f00      	cmp	r7, #0
  4060f2:	d1d8      	bne.n	4060a6 <__sfvwrite_r+0x8a>
  4060f4:	f8d5 9000 	ldr.w	r9, [r5]
  4060f8:	686f      	ldr	r7, [r5, #4]
  4060fa:	3508      	adds	r5, #8
  4060fc:	e7d2      	b.n	4060a4 <__sfvwrite_r+0x88>
  4060fe:	f8d5 9000 	ldr.w	r9, [r5]
  406102:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406106:	3508      	adds	r5, #8
  406108:	e79f      	b.n	40604a <__sfvwrite_r+0x2e>
  40610a:	2000      	movs	r0, #0
  40610c:	4770      	bx	lr
  40610e:	4621      	mov	r1, r4
  406110:	9800      	ldr	r0, [sp, #0]
  406112:	f7ff fd1f 	bl	405b54 <_fflush_r>
  406116:	b370      	cbz	r0, 406176 <__sfvwrite_r+0x15a>
  406118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40611c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406120:	f04f 30ff 	mov.w	r0, #4294967295
  406124:	81a3      	strh	r3, [r4, #12]
  406126:	b003      	add	sp, #12
  406128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40612c:	4681      	mov	r9, r0
  40612e:	4633      	mov	r3, r6
  406130:	464e      	mov	r6, r9
  406132:	46a8      	mov	r8, r5
  406134:	469a      	mov	sl, r3
  406136:	464d      	mov	r5, r9
  406138:	b34e      	cbz	r6, 40618e <__sfvwrite_r+0x172>
  40613a:	b380      	cbz	r0, 40619e <__sfvwrite_r+0x182>
  40613c:	6820      	ldr	r0, [r4, #0]
  40613e:	6923      	ldr	r3, [r4, #16]
  406140:	6962      	ldr	r2, [r4, #20]
  406142:	45b1      	cmp	r9, r6
  406144:	46cb      	mov	fp, r9
  406146:	bf28      	it	cs
  406148:	46b3      	movcs	fp, r6
  40614a:	4298      	cmp	r0, r3
  40614c:	465f      	mov	r7, fp
  40614e:	d904      	bls.n	40615a <__sfvwrite_r+0x13e>
  406150:	68a3      	ldr	r3, [r4, #8]
  406152:	4413      	add	r3, r2
  406154:	459b      	cmp	fp, r3
  406156:	f300 80a6 	bgt.w	4062a6 <__sfvwrite_r+0x28a>
  40615a:	4593      	cmp	fp, r2
  40615c:	db4b      	blt.n	4061f6 <__sfvwrite_r+0x1da>
  40615e:	4613      	mov	r3, r2
  406160:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406162:	69e1      	ldr	r1, [r4, #28]
  406164:	9800      	ldr	r0, [sp, #0]
  406166:	462a      	mov	r2, r5
  406168:	47b8      	blx	r7
  40616a:	1e07      	subs	r7, r0, #0
  40616c:	ddd4      	ble.n	406118 <__sfvwrite_r+0xfc>
  40616e:	ebb9 0907 	subs.w	r9, r9, r7
  406172:	d0cc      	beq.n	40610e <__sfvwrite_r+0xf2>
  406174:	2001      	movs	r0, #1
  406176:	f8da 3008 	ldr.w	r3, [sl, #8]
  40617a:	1bdb      	subs	r3, r3, r7
  40617c:	443d      	add	r5, r7
  40617e:	1bf6      	subs	r6, r6, r7
  406180:	f8ca 3008 	str.w	r3, [sl, #8]
  406184:	2b00      	cmp	r3, #0
  406186:	f43f af78 	beq.w	40607a <__sfvwrite_r+0x5e>
  40618a:	2e00      	cmp	r6, #0
  40618c:	d1d5      	bne.n	40613a <__sfvwrite_r+0x11e>
  40618e:	f108 0308 	add.w	r3, r8, #8
  406192:	e913 0060 	ldmdb	r3, {r5, r6}
  406196:	4698      	mov	r8, r3
  406198:	3308      	adds	r3, #8
  40619a:	2e00      	cmp	r6, #0
  40619c:	d0f9      	beq.n	406192 <__sfvwrite_r+0x176>
  40619e:	4632      	mov	r2, r6
  4061a0:	210a      	movs	r1, #10
  4061a2:	4628      	mov	r0, r5
  4061a4:	f000 fc3c 	bl	406a20 <memchr>
  4061a8:	2800      	cmp	r0, #0
  4061aa:	f000 80a1 	beq.w	4062f0 <__sfvwrite_r+0x2d4>
  4061ae:	3001      	adds	r0, #1
  4061b0:	eba0 0905 	sub.w	r9, r0, r5
  4061b4:	e7c2      	b.n	40613c <__sfvwrite_r+0x120>
  4061b6:	6820      	ldr	r0, [r4, #0]
  4061b8:	6923      	ldr	r3, [r4, #16]
  4061ba:	4298      	cmp	r0, r3
  4061bc:	d802      	bhi.n	4061c4 <__sfvwrite_r+0x1a8>
  4061be:	6963      	ldr	r3, [r4, #20]
  4061c0:	429f      	cmp	r7, r3
  4061c2:	d25d      	bcs.n	406280 <__sfvwrite_r+0x264>
  4061c4:	45b8      	cmp	r8, r7
  4061c6:	bf28      	it	cs
  4061c8:	46b8      	movcs	r8, r7
  4061ca:	4642      	mov	r2, r8
  4061cc:	4649      	mov	r1, r9
  4061ce:	f000 fd11 	bl	406bf4 <memmove>
  4061d2:	68a3      	ldr	r3, [r4, #8]
  4061d4:	6822      	ldr	r2, [r4, #0]
  4061d6:	eba3 0308 	sub.w	r3, r3, r8
  4061da:	4442      	add	r2, r8
  4061dc:	60a3      	str	r3, [r4, #8]
  4061de:	6022      	str	r2, [r4, #0]
  4061e0:	b10b      	cbz	r3, 4061e6 <__sfvwrite_r+0x1ca>
  4061e2:	46c2      	mov	sl, r8
  4061e4:	e779      	b.n	4060da <__sfvwrite_r+0xbe>
  4061e6:	4621      	mov	r1, r4
  4061e8:	9800      	ldr	r0, [sp, #0]
  4061ea:	f7ff fcb3 	bl	405b54 <_fflush_r>
  4061ee:	2800      	cmp	r0, #0
  4061f0:	d192      	bne.n	406118 <__sfvwrite_r+0xfc>
  4061f2:	46c2      	mov	sl, r8
  4061f4:	e771      	b.n	4060da <__sfvwrite_r+0xbe>
  4061f6:	465a      	mov	r2, fp
  4061f8:	4629      	mov	r1, r5
  4061fa:	f000 fcfb 	bl	406bf4 <memmove>
  4061fe:	68a2      	ldr	r2, [r4, #8]
  406200:	6823      	ldr	r3, [r4, #0]
  406202:	eba2 020b 	sub.w	r2, r2, fp
  406206:	445b      	add	r3, fp
  406208:	60a2      	str	r2, [r4, #8]
  40620a:	6023      	str	r3, [r4, #0]
  40620c:	e7af      	b.n	40616e <__sfvwrite_r+0x152>
  40620e:	6820      	ldr	r0, [r4, #0]
  406210:	46b8      	mov	r8, r7
  406212:	46ba      	mov	sl, r7
  406214:	46bb      	mov	fp, r7
  406216:	e755      	b.n	4060c4 <__sfvwrite_r+0xa8>
  406218:	6962      	ldr	r2, [r4, #20]
  40621a:	6820      	ldr	r0, [r4, #0]
  40621c:	6921      	ldr	r1, [r4, #16]
  40621e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406222:	eba0 0a01 	sub.w	sl, r0, r1
  406226:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40622a:	f10a 0001 	add.w	r0, sl, #1
  40622e:	ea4f 0868 	mov.w	r8, r8, asr #1
  406232:	4438      	add	r0, r7
  406234:	4540      	cmp	r0, r8
  406236:	4642      	mov	r2, r8
  406238:	bf84      	itt	hi
  40623a:	4680      	movhi	r8, r0
  40623c:	4642      	movhi	r2, r8
  40623e:	055b      	lsls	r3, r3, #21
  406240:	d544      	bpl.n	4062cc <__sfvwrite_r+0x2b0>
  406242:	4611      	mov	r1, r2
  406244:	9800      	ldr	r0, [sp, #0]
  406246:	f000 f921 	bl	40648c <_malloc_r>
  40624a:	4683      	mov	fp, r0
  40624c:	2800      	cmp	r0, #0
  40624e:	d055      	beq.n	4062fc <__sfvwrite_r+0x2e0>
  406250:	4652      	mov	r2, sl
  406252:	6921      	ldr	r1, [r4, #16]
  406254:	f000 fc34 	bl	406ac0 <memcpy>
  406258:	89a3      	ldrh	r3, [r4, #12]
  40625a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406262:	81a3      	strh	r3, [r4, #12]
  406264:	eb0b 000a 	add.w	r0, fp, sl
  406268:	eba8 030a 	sub.w	r3, r8, sl
  40626c:	f8c4 b010 	str.w	fp, [r4, #16]
  406270:	f8c4 8014 	str.w	r8, [r4, #20]
  406274:	6020      	str	r0, [r4, #0]
  406276:	60a3      	str	r3, [r4, #8]
  406278:	46b8      	mov	r8, r7
  40627a:	46ba      	mov	sl, r7
  40627c:	46bb      	mov	fp, r7
  40627e:	e721      	b.n	4060c4 <__sfvwrite_r+0xa8>
  406280:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406284:	42b9      	cmp	r1, r7
  406286:	bf28      	it	cs
  406288:	4639      	movcs	r1, r7
  40628a:	464a      	mov	r2, r9
  40628c:	fb91 f1f3 	sdiv	r1, r1, r3
  406290:	9800      	ldr	r0, [sp, #0]
  406292:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406294:	fb03 f301 	mul.w	r3, r3, r1
  406298:	69e1      	ldr	r1, [r4, #28]
  40629a:	47b0      	blx	r6
  40629c:	f1b0 0a00 	subs.w	sl, r0, #0
  4062a0:	f73f af1b 	bgt.w	4060da <__sfvwrite_r+0xbe>
  4062a4:	e738      	b.n	406118 <__sfvwrite_r+0xfc>
  4062a6:	461a      	mov	r2, r3
  4062a8:	4629      	mov	r1, r5
  4062aa:	9301      	str	r3, [sp, #4]
  4062ac:	f000 fca2 	bl	406bf4 <memmove>
  4062b0:	6822      	ldr	r2, [r4, #0]
  4062b2:	9b01      	ldr	r3, [sp, #4]
  4062b4:	9800      	ldr	r0, [sp, #0]
  4062b6:	441a      	add	r2, r3
  4062b8:	6022      	str	r2, [r4, #0]
  4062ba:	4621      	mov	r1, r4
  4062bc:	f7ff fc4a 	bl	405b54 <_fflush_r>
  4062c0:	9b01      	ldr	r3, [sp, #4]
  4062c2:	2800      	cmp	r0, #0
  4062c4:	f47f af28 	bne.w	406118 <__sfvwrite_r+0xfc>
  4062c8:	461f      	mov	r7, r3
  4062ca:	e750      	b.n	40616e <__sfvwrite_r+0x152>
  4062cc:	9800      	ldr	r0, [sp, #0]
  4062ce:	f000 fd01 	bl	406cd4 <_realloc_r>
  4062d2:	4683      	mov	fp, r0
  4062d4:	2800      	cmp	r0, #0
  4062d6:	d1c5      	bne.n	406264 <__sfvwrite_r+0x248>
  4062d8:	9d00      	ldr	r5, [sp, #0]
  4062da:	6921      	ldr	r1, [r4, #16]
  4062dc:	4628      	mov	r0, r5
  4062de:	f7ff fdb7 	bl	405e50 <_free_r>
  4062e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062e6:	220c      	movs	r2, #12
  4062e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4062ec:	602a      	str	r2, [r5, #0]
  4062ee:	e715      	b.n	40611c <__sfvwrite_r+0x100>
  4062f0:	f106 0901 	add.w	r9, r6, #1
  4062f4:	e722      	b.n	40613c <__sfvwrite_r+0x120>
  4062f6:	f04f 30ff 	mov.w	r0, #4294967295
  4062fa:	e6bf      	b.n	40607c <__sfvwrite_r+0x60>
  4062fc:	9a00      	ldr	r2, [sp, #0]
  4062fe:	230c      	movs	r3, #12
  406300:	6013      	str	r3, [r2, #0]
  406302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406306:	e709      	b.n	40611c <__sfvwrite_r+0x100>
  406308:	7ffffc00 	.word	0x7ffffc00

0040630c <_fwalk_reent>:
  40630c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406310:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406314:	d01f      	beq.n	406356 <_fwalk_reent+0x4a>
  406316:	4688      	mov	r8, r1
  406318:	4606      	mov	r6, r0
  40631a:	f04f 0900 	mov.w	r9, #0
  40631e:	687d      	ldr	r5, [r7, #4]
  406320:	68bc      	ldr	r4, [r7, #8]
  406322:	3d01      	subs	r5, #1
  406324:	d411      	bmi.n	40634a <_fwalk_reent+0x3e>
  406326:	89a3      	ldrh	r3, [r4, #12]
  406328:	2b01      	cmp	r3, #1
  40632a:	f105 35ff 	add.w	r5, r5, #4294967295
  40632e:	d908      	bls.n	406342 <_fwalk_reent+0x36>
  406330:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406334:	3301      	adds	r3, #1
  406336:	4621      	mov	r1, r4
  406338:	4630      	mov	r0, r6
  40633a:	d002      	beq.n	406342 <_fwalk_reent+0x36>
  40633c:	47c0      	blx	r8
  40633e:	ea49 0900 	orr.w	r9, r9, r0
  406342:	1c6b      	adds	r3, r5, #1
  406344:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406348:	d1ed      	bne.n	406326 <_fwalk_reent+0x1a>
  40634a:	683f      	ldr	r7, [r7, #0]
  40634c:	2f00      	cmp	r7, #0
  40634e:	d1e6      	bne.n	40631e <_fwalk_reent+0x12>
  406350:	4648      	mov	r0, r9
  406352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406356:	46b9      	mov	r9, r7
  406358:	4648      	mov	r0, r9
  40635a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40635e:	bf00      	nop

00406360 <__locale_mb_cur_max>:
  406360:	4b04      	ldr	r3, [pc, #16]	; (406374 <__locale_mb_cur_max+0x14>)
  406362:	4a05      	ldr	r2, [pc, #20]	; (406378 <__locale_mb_cur_max+0x18>)
  406364:	681b      	ldr	r3, [r3, #0]
  406366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  406368:	2b00      	cmp	r3, #0
  40636a:	bf08      	it	eq
  40636c:	4613      	moveq	r3, r2
  40636e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406372:	4770      	bx	lr
  406374:	20400038 	.word	0x20400038
  406378:	2040046c 	.word	0x2040046c

0040637c <__retarget_lock_init_recursive>:
  40637c:	4770      	bx	lr
  40637e:	bf00      	nop

00406380 <__retarget_lock_close_recursive>:
  406380:	4770      	bx	lr
  406382:	bf00      	nop

00406384 <__retarget_lock_acquire_recursive>:
  406384:	4770      	bx	lr
  406386:	bf00      	nop

00406388 <__retarget_lock_release_recursive>:
  406388:	4770      	bx	lr
  40638a:	bf00      	nop

0040638c <__swhatbuf_r>:
  40638c:	b570      	push	{r4, r5, r6, lr}
  40638e:	460c      	mov	r4, r1
  406390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406394:	2900      	cmp	r1, #0
  406396:	b090      	sub	sp, #64	; 0x40
  406398:	4615      	mov	r5, r2
  40639a:	461e      	mov	r6, r3
  40639c:	db14      	blt.n	4063c8 <__swhatbuf_r+0x3c>
  40639e:	aa01      	add	r2, sp, #4
  4063a0:	f001 f898 	bl	4074d4 <_fstat_r>
  4063a4:	2800      	cmp	r0, #0
  4063a6:	db0f      	blt.n	4063c8 <__swhatbuf_r+0x3c>
  4063a8:	9a02      	ldr	r2, [sp, #8]
  4063aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4063ae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4063b2:	fab2 f282 	clz	r2, r2
  4063b6:	0952      	lsrs	r2, r2, #5
  4063b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4063bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4063c0:	6032      	str	r2, [r6, #0]
  4063c2:	602b      	str	r3, [r5, #0]
  4063c4:	b010      	add	sp, #64	; 0x40
  4063c6:	bd70      	pop	{r4, r5, r6, pc}
  4063c8:	89a2      	ldrh	r2, [r4, #12]
  4063ca:	2300      	movs	r3, #0
  4063cc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4063d0:	6033      	str	r3, [r6, #0]
  4063d2:	d004      	beq.n	4063de <__swhatbuf_r+0x52>
  4063d4:	2240      	movs	r2, #64	; 0x40
  4063d6:	4618      	mov	r0, r3
  4063d8:	602a      	str	r2, [r5, #0]
  4063da:	b010      	add	sp, #64	; 0x40
  4063dc:	bd70      	pop	{r4, r5, r6, pc}
  4063de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4063e2:	602b      	str	r3, [r5, #0]
  4063e4:	b010      	add	sp, #64	; 0x40
  4063e6:	bd70      	pop	{r4, r5, r6, pc}

004063e8 <__smakebuf_r>:
  4063e8:	898a      	ldrh	r2, [r1, #12]
  4063ea:	0792      	lsls	r2, r2, #30
  4063ec:	460b      	mov	r3, r1
  4063ee:	d506      	bpl.n	4063fe <__smakebuf_r+0x16>
  4063f0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4063f4:	2101      	movs	r1, #1
  4063f6:	601a      	str	r2, [r3, #0]
  4063f8:	611a      	str	r2, [r3, #16]
  4063fa:	6159      	str	r1, [r3, #20]
  4063fc:	4770      	bx	lr
  4063fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  406400:	b083      	sub	sp, #12
  406402:	ab01      	add	r3, sp, #4
  406404:	466a      	mov	r2, sp
  406406:	460c      	mov	r4, r1
  406408:	4606      	mov	r6, r0
  40640a:	f7ff ffbf 	bl	40638c <__swhatbuf_r>
  40640e:	9900      	ldr	r1, [sp, #0]
  406410:	4605      	mov	r5, r0
  406412:	4630      	mov	r0, r6
  406414:	f000 f83a 	bl	40648c <_malloc_r>
  406418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40641c:	b1d8      	cbz	r0, 406456 <__smakebuf_r+0x6e>
  40641e:	9a01      	ldr	r2, [sp, #4]
  406420:	4f15      	ldr	r7, [pc, #84]	; (406478 <__smakebuf_r+0x90>)
  406422:	9900      	ldr	r1, [sp, #0]
  406424:	63f7      	str	r7, [r6, #60]	; 0x3c
  406426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40642a:	81a3      	strh	r3, [r4, #12]
  40642c:	6020      	str	r0, [r4, #0]
  40642e:	6120      	str	r0, [r4, #16]
  406430:	6161      	str	r1, [r4, #20]
  406432:	b91a      	cbnz	r2, 40643c <__smakebuf_r+0x54>
  406434:	432b      	orrs	r3, r5
  406436:	81a3      	strh	r3, [r4, #12]
  406438:	b003      	add	sp, #12
  40643a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40643c:	4630      	mov	r0, r6
  40643e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406442:	f001 f85b 	bl	4074fc <_isatty_r>
  406446:	b1a0      	cbz	r0, 406472 <__smakebuf_r+0x8a>
  406448:	89a3      	ldrh	r3, [r4, #12]
  40644a:	f023 0303 	bic.w	r3, r3, #3
  40644e:	f043 0301 	orr.w	r3, r3, #1
  406452:	b21b      	sxth	r3, r3
  406454:	e7ee      	b.n	406434 <__smakebuf_r+0x4c>
  406456:	059a      	lsls	r2, r3, #22
  406458:	d4ee      	bmi.n	406438 <__smakebuf_r+0x50>
  40645a:	f023 0303 	bic.w	r3, r3, #3
  40645e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406462:	f043 0302 	orr.w	r3, r3, #2
  406466:	2101      	movs	r1, #1
  406468:	81a3      	strh	r3, [r4, #12]
  40646a:	6022      	str	r2, [r4, #0]
  40646c:	6122      	str	r2, [r4, #16]
  40646e:	6161      	str	r1, [r4, #20]
  406470:	e7e2      	b.n	406438 <__smakebuf_r+0x50>
  406472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406476:	e7dd      	b.n	406434 <__smakebuf_r+0x4c>
  406478:	00405ba9 	.word	0x00405ba9

0040647c <malloc>:
  40647c:	4b02      	ldr	r3, [pc, #8]	; (406488 <malloc+0xc>)
  40647e:	4601      	mov	r1, r0
  406480:	6818      	ldr	r0, [r3, #0]
  406482:	f000 b803 	b.w	40648c <_malloc_r>
  406486:	bf00      	nop
  406488:	20400038 	.word	0x20400038

0040648c <_malloc_r>:
  40648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406490:	f101 060b 	add.w	r6, r1, #11
  406494:	2e16      	cmp	r6, #22
  406496:	b083      	sub	sp, #12
  406498:	4605      	mov	r5, r0
  40649a:	f240 809e 	bls.w	4065da <_malloc_r+0x14e>
  40649e:	f036 0607 	bics.w	r6, r6, #7
  4064a2:	f100 80bd 	bmi.w	406620 <_malloc_r+0x194>
  4064a6:	42b1      	cmp	r1, r6
  4064a8:	f200 80ba 	bhi.w	406620 <_malloc_r+0x194>
  4064ac:	f000 fc06 	bl	406cbc <__malloc_lock>
  4064b0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4064b4:	f0c0 8293 	bcc.w	4069de <_malloc_r+0x552>
  4064b8:	0a73      	lsrs	r3, r6, #9
  4064ba:	f000 80b8 	beq.w	40662e <_malloc_r+0x1a2>
  4064be:	2b04      	cmp	r3, #4
  4064c0:	f200 8179 	bhi.w	4067b6 <_malloc_r+0x32a>
  4064c4:	09b3      	lsrs	r3, r6, #6
  4064c6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4064ca:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4064ce:	00c3      	lsls	r3, r0, #3
  4064d0:	4fbf      	ldr	r7, [pc, #764]	; (4067d0 <_malloc_r+0x344>)
  4064d2:	443b      	add	r3, r7
  4064d4:	f1a3 0108 	sub.w	r1, r3, #8
  4064d8:	685c      	ldr	r4, [r3, #4]
  4064da:	42a1      	cmp	r1, r4
  4064dc:	d106      	bne.n	4064ec <_malloc_r+0x60>
  4064de:	e00c      	b.n	4064fa <_malloc_r+0x6e>
  4064e0:	2a00      	cmp	r2, #0
  4064e2:	f280 80aa 	bge.w	40663a <_malloc_r+0x1ae>
  4064e6:	68e4      	ldr	r4, [r4, #12]
  4064e8:	42a1      	cmp	r1, r4
  4064ea:	d006      	beq.n	4064fa <_malloc_r+0x6e>
  4064ec:	6863      	ldr	r3, [r4, #4]
  4064ee:	f023 0303 	bic.w	r3, r3, #3
  4064f2:	1b9a      	subs	r2, r3, r6
  4064f4:	2a0f      	cmp	r2, #15
  4064f6:	ddf3      	ble.n	4064e0 <_malloc_r+0x54>
  4064f8:	4670      	mov	r0, lr
  4064fa:	693c      	ldr	r4, [r7, #16]
  4064fc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4067e4 <_malloc_r+0x358>
  406500:	4574      	cmp	r4, lr
  406502:	f000 81ab 	beq.w	40685c <_malloc_r+0x3d0>
  406506:	6863      	ldr	r3, [r4, #4]
  406508:	f023 0303 	bic.w	r3, r3, #3
  40650c:	1b9a      	subs	r2, r3, r6
  40650e:	2a0f      	cmp	r2, #15
  406510:	f300 8190 	bgt.w	406834 <_malloc_r+0x3a8>
  406514:	2a00      	cmp	r2, #0
  406516:	f8c7 e014 	str.w	lr, [r7, #20]
  40651a:	f8c7 e010 	str.w	lr, [r7, #16]
  40651e:	f280 809d 	bge.w	40665c <_malloc_r+0x1d0>
  406522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406526:	f080 8161 	bcs.w	4067ec <_malloc_r+0x360>
  40652a:	08db      	lsrs	r3, r3, #3
  40652c:	f103 0c01 	add.w	ip, r3, #1
  406530:	1099      	asrs	r1, r3, #2
  406532:	687a      	ldr	r2, [r7, #4]
  406534:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406538:	f8c4 8008 	str.w	r8, [r4, #8]
  40653c:	2301      	movs	r3, #1
  40653e:	408b      	lsls	r3, r1
  406540:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406544:	4313      	orrs	r3, r2
  406546:	3908      	subs	r1, #8
  406548:	60e1      	str	r1, [r4, #12]
  40654a:	607b      	str	r3, [r7, #4]
  40654c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406550:	f8c8 400c 	str.w	r4, [r8, #12]
  406554:	1082      	asrs	r2, r0, #2
  406556:	2401      	movs	r4, #1
  406558:	4094      	lsls	r4, r2
  40655a:	429c      	cmp	r4, r3
  40655c:	f200 808b 	bhi.w	406676 <_malloc_r+0x1ea>
  406560:	421c      	tst	r4, r3
  406562:	d106      	bne.n	406572 <_malloc_r+0xe6>
  406564:	f020 0003 	bic.w	r0, r0, #3
  406568:	0064      	lsls	r4, r4, #1
  40656a:	421c      	tst	r4, r3
  40656c:	f100 0004 	add.w	r0, r0, #4
  406570:	d0fa      	beq.n	406568 <_malloc_r+0xdc>
  406572:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406576:	46cc      	mov	ip, r9
  406578:	4680      	mov	r8, r0
  40657a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40657e:	459c      	cmp	ip, r3
  406580:	d107      	bne.n	406592 <_malloc_r+0x106>
  406582:	e16d      	b.n	406860 <_malloc_r+0x3d4>
  406584:	2a00      	cmp	r2, #0
  406586:	f280 817b 	bge.w	406880 <_malloc_r+0x3f4>
  40658a:	68db      	ldr	r3, [r3, #12]
  40658c:	459c      	cmp	ip, r3
  40658e:	f000 8167 	beq.w	406860 <_malloc_r+0x3d4>
  406592:	6859      	ldr	r1, [r3, #4]
  406594:	f021 0103 	bic.w	r1, r1, #3
  406598:	1b8a      	subs	r2, r1, r6
  40659a:	2a0f      	cmp	r2, #15
  40659c:	ddf2      	ble.n	406584 <_malloc_r+0xf8>
  40659e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4065a2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4065a6:	9300      	str	r3, [sp, #0]
  4065a8:	199c      	adds	r4, r3, r6
  4065aa:	4628      	mov	r0, r5
  4065ac:	f046 0601 	orr.w	r6, r6, #1
  4065b0:	f042 0501 	orr.w	r5, r2, #1
  4065b4:	605e      	str	r6, [r3, #4]
  4065b6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4065ba:	f8cc 8008 	str.w	r8, [ip, #8]
  4065be:	617c      	str	r4, [r7, #20]
  4065c0:	613c      	str	r4, [r7, #16]
  4065c2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4065c6:	f8c4 e008 	str.w	lr, [r4, #8]
  4065ca:	6065      	str	r5, [r4, #4]
  4065cc:	505a      	str	r2, [r3, r1]
  4065ce:	f000 fb7b 	bl	406cc8 <__malloc_unlock>
  4065d2:	9b00      	ldr	r3, [sp, #0]
  4065d4:	f103 0408 	add.w	r4, r3, #8
  4065d8:	e01e      	b.n	406618 <_malloc_r+0x18c>
  4065da:	2910      	cmp	r1, #16
  4065dc:	d820      	bhi.n	406620 <_malloc_r+0x194>
  4065de:	f000 fb6d 	bl	406cbc <__malloc_lock>
  4065e2:	2610      	movs	r6, #16
  4065e4:	2318      	movs	r3, #24
  4065e6:	2002      	movs	r0, #2
  4065e8:	4f79      	ldr	r7, [pc, #484]	; (4067d0 <_malloc_r+0x344>)
  4065ea:	443b      	add	r3, r7
  4065ec:	f1a3 0208 	sub.w	r2, r3, #8
  4065f0:	685c      	ldr	r4, [r3, #4]
  4065f2:	4294      	cmp	r4, r2
  4065f4:	f000 813d 	beq.w	406872 <_malloc_r+0x3e6>
  4065f8:	6863      	ldr	r3, [r4, #4]
  4065fa:	68e1      	ldr	r1, [r4, #12]
  4065fc:	68a6      	ldr	r6, [r4, #8]
  4065fe:	f023 0303 	bic.w	r3, r3, #3
  406602:	4423      	add	r3, r4
  406604:	4628      	mov	r0, r5
  406606:	685a      	ldr	r2, [r3, #4]
  406608:	60f1      	str	r1, [r6, #12]
  40660a:	f042 0201 	orr.w	r2, r2, #1
  40660e:	608e      	str	r6, [r1, #8]
  406610:	605a      	str	r2, [r3, #4]
  406612:	f000 fb59 	bl	406cc8 <__malloc_unlock>
  406616:	3408      	adds	r4, #8
  406618:	4620      	mov	r0, r4
  40661a:	b003      	add	sp, #12
  40661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406620:	2400      	movs	r4, #0
  406622:	230c      	movs	r3, #12
  406624:	4620      	mov	r0, r4
  406626:	602b      	str	r3, [r5, #0]
  406628:	b003      	add	sp, #12
  40662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40662e:	2040      	movs	r0, #64	; 0x40
  406630:	f44f 7300 	mov.w	r3, #512	; 0x200
  406634:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406638:	e74a      	b.n	4064d0 <_malloc_r+0x44>
  40663a:	4423      	add	r3, r4
  40663c:	68e1      	ldr	r1, [r4, #12]
  40663e:	685a      	ldr	r2, [r3, #4]
  406640:	68a6      	ldr	r6, [r4, #8]
  406642:	f042 0201 	orr.w	r2, r2, #1
  406646:	60f1      	str	r1, [r6, #12]
  406648:	4628      	mov	r0, r5
  40664a:	608e      	str	r6, [r1, #8]
  40664c:	605a      	str	r2, [r3, #4]
  40664e:	f000 fb3b 	bl	406cc8 <__malloc_unlock>
  406652:	3408      	adds	r4, #8
  406654:	4620      	mov	r0, r4
  406656:	b003      	add	sp, #12
  406658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40665c:	4423      	add	r3, r4
  40665e:	4628      	mov	r0, r5
  406660:	685a      	ldr	r2, [r3, #4]
  406662:	f042 0201 	orr.w	r2, r2, #1
  406666:	605a      	str	r2, [r3, #4]
  406668:	f000 fb2e 	bl	406cc8 <__malloc_unlock>
  40666c:	3408      	adds	r4, #8
  40666e:	4620      	mov	r0, r4
  406670:	b003      	add	sp, #12
  406672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406676:	68bc      	ldr	r4, [r7, #8]
  406678:	6863      	ldr	r3, [r4, #4]
  40667a:	f023 0803 	bic.w	r8, r3, #3
  40667e:	45b0      	cmp	r8, r6
  406680:	d304      	bcc.n	40668c <_malloc_r+0x200>
  406682:	eba8 0306 	sub.w	r3, r8, r6
  406686:	2b0f      	cmp	r3, #15
  406688:	f300 8085 	bgt.w	406796 <_malloc_r+0x30a>
  40668c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4067e8 <_malloc_r+0x35c>
  406690:	4b50      	ldr	r3, [pc, #320]	; (4067d4 <_malloc_r+0x348>)
  406692:	f8d9 2000 	ldr.w	r2, [r9]
  406696:	681b      	ldr	r3, [r3, #0]
  406698:	3201      	adds	r2, #1
  40669a:	4433      	add	r3, r6
  40669c:	eb04 0a08 	add.w	sl, r4, r8
  4066a0:	f000 8155 	beq.w	40694e <_malloc_r+0x4c2>
  4066a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4066a8:	330f      	adds	r3, #15
  4066aa:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4066ae:	f02b 0b0f 	bic.w	fp, fp, #15
  4066b2:	4659      	mov	r1, fp
  4066b4:	4628      	mov	r0, r5
  4066b6:	f000 fcb3 	bl	407020 <_sbrk_r>
  4066ba:	1c41      	adds	r1, r0, #1
  4066bc:	4602      	mov	r2, r0
  4066be:	f000 80fc 	beq.w	4068ba <_malloc_r+0x42e>
  4066c2:	4582      	cmp	sl, r0
  4066c4:	f200 80f7 	bhi.w	4068b6 <_malloc_r+0x42a>
  4066c8:	4b43      	ldr	r3, [pc, #268]	; (4067d8 <_malloc_r+0x34c>)
  4066ca:	6819      	ldr	r1, [r3, #0]
  4066cc:	4459      	add	r1, fp
  4066ce:	6019      	str	r1, [r3, #0]
  4066d0:	f000 814d 	beq.w	40696e <_malloc_r+0x4e2>
  4066d4:	f8d9 0000 	ldr.w	r0, [r9]
  4066d8:	3001      	adds	r0, #1
  4066da:	bf1b      	ittet	ne
  4066dc:	eba2 0a0a 	subne.w	sl, r2, sl
  4066e0:	4451      	addne	r1, sl
  4066e2:	f8c9 2000 	streq.w	r2, [r9]
  4066e6:	6019      	strne	r1, [r3, #0]
  4066e8:	f012 0107 	ands.w	r1, r2, #7
  4066ec:	f000 8115 	beq.w	40691a <_malloc_r+0x48e>
  4066f0:	f1c1 0008 	rsb	r0, r1, #8
  4066f4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4066f8:	4402      	add	r2, r0
  4066fa:	3108      	adds	r1, #8
  4066fc:	eb02 090b 	add.w	r9, r2, fp
  406700:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406704:	eba1 0909 	sub.w	r9, r1, r9
  406708:	4649      	mov	r1, r9
  40670a:	4628      	mov	r0, r5
  40670c:	9301      	str	r3, [sp, #4]
  40670e:	9200      	str	r2, [sp, #0]
  406710:	f000 fc86 	bl	407020 <_sbrk_r>
  406714:	1c43      	adds	r3, r0, #1
  406716:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40671a:	f000 8143 	beq.w	4069a4 <_malloc_r+0x518>
  40671e:	1a80      	subs	r0, r0, r2
  406720:	4448      	add	r0, r9
  406722:	f040 0001 	orr.w	r0, r0, #1
  406726:	6819      	ldr	r1, [r3, #0]
  406728:	60ba      	str	r2, [r7, #8]
  40672a:	4449      	add	r1, r9
  40672c:	42bc      	cmp	r4, r7
  40672e:	6050      	str	r0, [r2, #4]
  406730:	6019      	str	r1, [r3, #0]
  406732:	d017      	beq.n	406764 <_malloc_r+0x2d8>
  406734:	f1b8 0f0f 	cmp.w	r8, #15
  406738:	f240 80fb 	bls.w	406932 <_malloc_r+0x4a6>
  40673c:	6860      	ldr	r0, [r4, #4]
  40673e:	f1a8 020c 	sub.w	r2, r8, #12
  406742:	f022 0207 	bic.w	r2, r2, #7
  406746:	eb04 0e02 	add.w	lr, r4, r2
  40674a:	f000 0001 	and.w	r0, r0, #1
  40674e:	f04f 0c05 	mov.w	ip, #5
  406752:	4310      	orrs	r0, r2
  406754:	2a0f      	cmp	r2, #15
  406756:	6060      	str	r0, [r4, #4]
  406758:	f8ce c004 	str.w	ip, [lr, #4]
  40675c:	f8ce c008 	str.w	ip, [lr, #8]
  406760:	f200 8117 	bhi.w	406992 <_malloc_r+0x506>
  406764:	4b1d      	ldr	r3, [pc, #116]	; (4067dc <_malloc_r+0x350>)
  406766:	68bc      	ldr	r4, [r7, #8]
  406768:	681a      	ldr	r2, [r3, #0]
  40676a:	4291      	cmp	r1, r2
  40676c:	bf88      	it	hi
  40676e:	6019      	strhi	r1, [r3, #0]
  406770:	4b1b      	ldr	r3, [pc, #108]	; (4067e0 <_malloc_r+0x354>)
  406772:	681a      	ldr	r2, [r3, #0]
  406774:	4291      	cmp	r1, r2
  406776:	6862      	ldr	r2, [r4, #4]
  406778:	bf88      	it	hi
  40677a:	6019      	strhi	r1, [r3, #0]
  40677c:	f022 0203 	bic.w	r2, r2, #3
  406780:	4296      	cmp	r6, r2
  406782:	eba2 0306 	sub.w	r3, r2, r6
  406786:	d801      	bhi.n	40678c <_malloc_r+0x300>
  406788:	2b0f      	cmp	r3, #15
  40678a:	dc04      	bgt.n	406796 <_malloc_r+0x30a>
  40678c:	4628      	mov	r0, r5
  40678e:	f000 fa9b 	bl	406cc8 <__malloc_unlock>
  406792:	2400      	movs	r4, #0
  406794:	e740      	b.n	406618 <_malloc_r+0x18c>
  406796:	19a2      	adds	r2, r4, r6
  406798:	f043 0301 	orr.w	r3, r3, #1
  40679c:	f046 0601 	orr.w	r6, r6, #1
  4067a0:	6066      	str	r6, [r4, #4]
  4067a2:	4628      	mov	r0, r5
  4067a4:	60ba      	str	r2, [r7, #8]
  4067a6:	6053      	str	r3, [r2, #4]
  4067a8:	f000 fa8e 	bl	406cc8 <__malloc_unlock>
  4067ac:	3408      	adds	r4, #8
  4067ae:	4620      	mov	r0, r4
  4067b0:	b003      	add	sp, #12
  4067b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067b6:	2b14      	cmp	r3, #20
  4067b8:	d971      	bls.n	40689e <_malloc_r+0x412>
  4067ba:	2b54      	cmp	r3, #84	; 0x54
  4067bc:	f200 80a3 	bhi.w	406906 <_malloc_r+0x47a>
  4067c0:	0b33      	lsrs	r3, r6, #12
  4067c2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4067c6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4067ca:	00c3      	lsls	r3, r0, #3
  4067cc:	e680      	b.n	4064d0 <_malloc_r+0x44>
  4067ce:	bf00      	nop
  4067d0:	204005d8 	.word	0x204005d8
  4067d4:	20400aec 	.word	0x20400aec
  4067d8:	20400abc 	.word	0x20400abc
  4067dc:	20400ae4 	.word	0x20400ae4
  4067e0:	20400ae8 	.word	0x20400ae8
  4067e4:	204005e0 	.word	0x204005e0
  4067e8:	204009e0 	.word	0x204009e0
  4067ec:	0a5a      	lsrs	r2, r3, #9
  4067ee:	2a04      	cmp	r2, #4
  4067f0:	d95b      	bls.n	4068aa <_malloc_r+0x41e>
  4067f2:	2a14      	cmp	r2, #20
  4067f4:	f200 80ae 	bhi.w	406954 <_malloc_r+0x4c8>
  4067f8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4067fc:	00c9      	lsls	r1, r1, #3
  4067fe:	325b      	adds	r2, #91	; 0x5b
  406800:	eb07 0c01 	add.w	ip, r7, r1
  406804:	5879      	ldr	r1, [r7, r1]
  406806:	f1ac 0c08 	sub.w	ip, ip, #8
  40680a:	458c      	cmp	ip, r1
  40680c:	f000 8088 	beq.w	406920 <_malloc_r+0x494>
  406810:	684a      	ldr	r2, [r1, #4]
  406812:	f022 0203 	bic.w	r2, r2, #3
  406816:	4293      	cmp	r3, r2
  406818:	d273      	bcs.n	406902 <_malloc_r+0x476>
  40681a:	6889      	ldr	r1, [r1, #8]
  40681c:	458c      	cmp	ip, r1
  40681e:	d1f7      	bne.n	406810 <_malloc_r+0x384>
  406820:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406824:	687b      	ldr	r3, [r7, #4]
  406826:	60e2      	str	r2, [r4, #12]
  406828:	f8c4 c008 	str.w	ip, [r4, #8]
  40682c:	6094      	str	r4, [r2, #8]
  40682e:	f8cc 400c 	str.w	r4, [ip, #12]
  406832:	e68f      	b.n	406554 <_malloc_r+0xc8>
  406834:	19a1      	adds	r1, r4, r6
  406836:	f046 0c01 	orr.w	ip, r6, #1
  40683a:	f042 0601 	orr.w	r6, r2, #1
  40683e:	f8c4 c004 	str.w	ip, [r4, #4]
  406842:	4628      	mov	r0, r5
  406844:	6179      	str	r1, [r7, #20]
  406846:	6139      	str	r1, [r7, #16]
  406848:	f8c1 e00c 	str.w	lr, [r1, #12]
  40684c:	f8c1 e008 	str.w	lr, [r1, #8]
  406850:	604e      	str	r6, [r1, #4]
  406852:	50e2      	str	r2, [r4, r3]
  406854:	f000 fa38 	bl	406cc8 <__malloc_unlock>
  406858:	3408      	adds	r4, #8
  40685a:	e6dd      	b.n	406618 <_malloc_r+0x18c>
  40685c:	687b      	ldr	r3, [r7, #4]
  40685e:	e679      	b.n	406554 <_malloc_r+0xc8>
  406860:	f108 0801 	add.w	r8, r8, #1
  406864:	f018 0f03 	tst.w	r8, #3
  406868:	f10c 0c08 	add.w	ip, ip, #8
  40686c:	f47f ae85 	bne.w	40657a <_malloc_r+0xee>
  406870:	e02d      	b.n	4068ce <_malloc_r+0x442>
  406872:	68dc      	ldr	r4, [r3, #12]
  406874:	42a3      	cmp	r3, r4
  406876:	bf08      	it	eq
  406878:	3002      	addeq	r0, #2
  40687a:	f43f ae3e 	beq.w	4064fa <_malloc_r+0x6e>
  40687e:	e6bb      	b.n	4065f8 <_malloc_r+0x16c>
  406880:	4419      	add	r1, r3
  406882:	461c      	mov	r4, r3
  406884:	684a      	ldr	r2, [r1, #4]
  406886:	68db      	ldr	r3, [r3, #12]
  406888:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40688c:	f042 0201 	orr.w	r2, r2, #1
  406890:	604a      	str	r2, [r1, #4]
  406892:	4628      	mov	r0, r5
  406894:	60f3      	str	r3, [r6, #12]
  406896:	609e      	str	r6, [r3, #8]
  406898:	f000 fa16 	bl	406cc8 <__malloc_unlock>
  40689c:	e6bc      	b.n	406618 <_malloc_r+0x18c>
  40689e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4068a2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4068a6:	00c3      	lsls	r3, r0, #3
  4068a8:	e612      	b.n	4064d0 <_malloc_r+0x44>
  4068aa:	099a      	lsrs	r2, r3, #6
  4068ac:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4068b0:	00c9      	lsls	r1, r1, #3
  4068b2:	3238      	adds	r2, #56	; 0x38
  4068b4:	e7a4      	b.n	406800 <_malloc_r+0x374>
  4068b6:	42bc      	cmp	r4, r7
  4068b8:	d054      	beq.n	406964 <_malloc_r+0x4d8>
  4068ba:	68bc      	ldr	r4, [r7, #8]
  4068bc:	6862      	ldr	r2, [r4, #4]
  4068be:	f022 0203 	bic.w	r2, r2, #3
  4068c2:	e75d      	b.n	406780 <_malloc_r+0x2f4>
  4068c4:	f859 3908 	ldr.w	r3, [r9], #-8
  4068c8:	4599      	cmp	r9, r3
  4068ca:	f040 8086 	bne.w	4069da <_malloc_r+0x54e>
  4068ce:	f010 0f03 	tst.w	r0, #3
  4068d2:	f100 30ff 	add.w	r0, r0, #4294967295
  4068d6:	d1f5      	bne.n	4068c4 <_malloc_r+0x438>
  4068d8:	687b      	ldr	r3, [r7, #4]
  4068da:	ea23 0304 	bic.w	r3, r3, r4
  4068de:	607b      	str	r3, [r7, #4]
  4068e0:	0064      	lsls	r4, r4, #1
  4068e2:	429c      	cmp	r4, r3
  4068e4:	f63f aec7 	bhi.w	406676 <_malloc_r+0x1ea>
  4068e8:	2c00      	cmp	r4, #0
  4068ea:	f43f aec4 	beq.w	406676 <_malloc_r+0x1ea>
  4068ee:	421c      	tst	r4, r3
  4068f0:	4640      	mov	r0, r8
  4068f2:	f47f ae3e 	bne.w	406572 <_malloc_r+0xe6>
  4068f6:	0064      	lsls	r4, r4, #1
  4068f8:	421c      	tst	r4, r3
  4068fa:	f100 0004 	add.w	r0, r0, #4
  4068fe:	d0fa      	beq.n	4068f6 <_malloc_r+0x46a>
  406900:	e637      	b.n	406572 <_malloc_r+0xe6>
  406902:	468c      	mov	ip, r1
  406904:	e78c      	b.n	406820 <_malloc_r+0x394>
  406906:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40690a:	d815      	bhi.n	406938 <_malloc_r+0x4ac>
  40690c:	0bf3      	lsrs	r3, r6, #15
  40690e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406912:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406916:	00c3      	lsls	r3, r0, #3
  406918:	e5da      	b.n	4064d0 <_malloc_r+0x44>
  40691a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40691e:	e6ed      	b.n	4066fc <_malloc_r+0x270>
  406920:	687b      	ldr	r3, [r7, #4]
  406922:	1092      	asrs	r2, r2, #2
  406924:	2101      	movs	r1, #1
  406926:	fa01 f202 	lsl.w	r2, r1, r2
  40692a:	4313      	orrs	r3, r2
  40692c:	607b      	str	r3, [r7, #4]
  40692e:	4662      	mov	r2, ip
  406930:	e779      	b.n	406826 <_malloc_r+0x39a>
  406932:	2301      	movs	r3, #1
  406934:	6053      	str	r3, [r2, #4]
  406936:	e729      	b.n	40678c <_malloc_r+0x300>
  406938:	f240 5254 	movw	r2, #1364	; 0x554
  40693c:	4293      	cmp	r3, r2
  40693e:	d822      	bhi.n	406986 <_malloc_r+0x4fa>
  406940:	0cb3      	lsrs	r3, r6, #18
  406942:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406946:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40694a:	00c3      	lsls	r3, r0, #3
  40694c:	e5c0      	b.n	4064d0 <_malloc_r+0x44>
  40694e:	f103 0b10 	add.w	fp, r3, #16
  406952:	e6ae      	b.n	4066b2 <_malloc_r+0x226>
  406954:	2a54      	cmp	r2, #84	; 0x54
  406956:	d829      	bhi.n	4069ac <_malloc_r+0x520>
  406958:	0b1a      	lsrs	r2, r3, #12
  40695a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40695e:	00c9      	lsls	r1, r1, #3
  406960:	326e      	adds	r2, #110	; 0x6e
  406962:	e74d      	b.n	406800 <_malloc_r+0x374>
  406964:	4b20      	ldr	r3, [pc, #128]	; (4069e8 <_malloc_r+0x55c>)
  406966:	6819      	ldr	r1, [r3, #0]
  406968:	4459      	add	r1, fp
  40696a:	6019      	str	r1, [r3, #0]
  40696c:	e6b2      	b.n	4066d4 <_malloc_r+0x248>
  40696e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406972:	2800      	cmp	r0, #0
  406974:	f47f aeae 	bne.w	4066d4 <_malloc_r+0x248>
  406978:	eb08 030b 	add.w	r3, r8, fp
  40697c:	68ba      	ldr	r2, [r7, #8]
  40697e:	f043 0301 	orr.w	r3, r3, #1
  406982:	6053      	str	r3, [r2, #4]
  406984:	e6ee      	b.n	406764 <_malloc_r+0x2d8>
  406986:	207f      	movs	r0, #127	; 0x7f
  406988:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40698c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406990:	e59e      	b.n	4064d0 <_malloc_r+0x44>
  406992:	f104 0108 	add.w	r1, r4, #8
  406996:	4628      	mov	r0, r5
  406998:	9300      	str	r3, [sp, #0]
  40699a:	f7ff fa59 	bl	405e50 <_free_r>
  40699e:	9b00      	ldr	r3, [sp, #0]
  4069a0:	6819      	ldr	r1, [r3, #0]
  4069a2:	e6df      	b.n	406764 <_malloc_r+0x2d8>
  4069a4:	2001      	movs	r0, #1
  4069a6:	f04f 0900 	mov.w	r9, #0
  4069aa:	e6bc      	b.n	406726 <_malloc_r+0x29a>
  4069ac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4069b0:	d805      	bhi.n	4069be <_malloc_r+0x532>
  4069b2:	0bda      	lsrs	r2, r3, #15
  4069b4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4069b8:	00c9      	lsls	r1, r1, #3
  4069ba:	3277      	adds	r2, #119	; 0x77
  4069bc:	e720      	b.n	406800 <_malloc_r+0x374>
  4069be:	f240 5154 	movw	r1, #1364	; 0x554
  4069c2:	428a      	cmp	r2, r1
  4069c4:	d805      	bhi.n	4069d2 <_malloc_r+0x546>
  4069c6:	0c9a      	lsrs	r2, r3, #18
  4069c8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4069cc:	00c9      	lsls	r1, r1, #3
  4069ce:	327c      	adds	r2, #124	; 0x7c
  4069d0:	e716      	b.n	406800 <_malloc_r+0x374>
  4069d2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4069d6:	227e      	movs	r2, #126	; 0x7e
  4069d8:	e712      	b.n	406800 <_malloc_r+0x374>
  4069da:	687b      	ldr	r3, [r7, #4]
  4069dc:	e780      	b.n	4068e0 <_malloc_r+0x454>
  4069de:	08f0      	lsrs	r0, r6, #3
  4069e0:	f106 0308 	add.w	r3, r6, #8
  4069e4:	e600      	b.n	4065e8 <_malloc_r+0x15c>
  4069e6:	bf00      	nop
  4069e8:	20400abc 	.word	0x20400abc

004069ec <__ascii_mbtowc>:
  4069ec:	b082      	sub	sp, #8
  4069ee:	b149      	cbz	r1, 406a04 <__ascii_mbtowc+0x18>
  4069f0:	b15a      	cbz	r2, 406a0a <__ascii_mbtowc+0x1e>
  4069f2:	b16b      	cbz	r3, 406a10 <__ascii_mbtowc+0x24>
  4069f4:	7813      	ldrb	r3, [r2, #0]
  4069f6:	600b      	str	r3, [r1, #0]
  4069f8:	7812      	ldrb	r2, [r2, #0]
  4069fa:	1c10      	adds	r0, r2, #0
  4069fc:	bf18      	it	ne
  4069fe:	2001      	movne	r0, #1
  406a00:	b002      	add	sp, #8
  406a02:	4770      	bx	lr
  406a04:	a901      	add	r1, sp, #4
  406a06:	2a00      	cmp	r2, #0
  406a08:	d1f3      	bne.n	4069f2 <__ascii_mbtowc+0x6>
  406a0a:	4610      	mov	r0, r2
  406a0c:	b002      	add	sp, #8
  406a0e:	4770      	bx	lr
  406a10:	f06f 0001 	mvn.w	r0, #1
  406a14:	e7f4      	b.n	406a00 <__ascii_mbtowc+0x14>
  406a16:	bf00      	nop
	...

00406a20 <memchr>:
  406a20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a24:	2a10      	cmp	r2, #16
  406a26:	db2b      	blt.n	406a80 <memchr+0x60>
  406a28:	f010 0f07 	tst.w	r0, #7
  406a2c:	d008      	beq.n	406a40 <memchr+0x20>
  406a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a32:	3a01      	subs	r2, #1
  406a34:	428b      	cmp	r3, r1
  406a36:	d02d      	beq.n	406a94 <memchr+0x74>
  406a38:	f010 0f07 	tst.w	r0, #7
  406a3c:	b342      	cbz	r2, 406a90 <memchr+0x70>
  406a3e:	d1f6      	bne.n	406a2e <memchr+0xe>
  406a40:	b4f0      	push	{r4, r5, r6, r7}
  406a42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406a46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406a4a:	f022 0407 	bic.w	r4, r2, #7
  406a4e:	f07f 0700 	mvns.w	r7, #0
  406a52:	2300      	movs	r3, #0
  406a54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406a58:	3c08      	subs	r4, #8
  406a5a:	ea85 0501 	eor.w	r5, r5, r1
  406a5e:	ea86 0601 	eor.w	r6, r6, r1
  406a62:	fa85 f547 	uadd8	r5, r5, r7
  406a66:	faa3 f587 	sel	r5, r3, r7
  406a6a:	fa86 f647 	uadd8	r6, r6, r7
  406a6e:	faa5 f687 	sel	r6, r5, r7
  406a72:	b98e      	cbnz	r6, 406a98 <memchr+0x78>
  406a74:	d1ee      	bne.n	406a54 <memchr+0x34>
  406a76:	bcf0      	pop	{r4, r5, r6, r7}
  406a78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a7c:	f002 0207 	and.w	r2, r2, #7
  406a80:	b132      	cbz	r2, 406a90 <memchr+0x70>
  406a82:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a86:	3a01      	subs	r2, #1
  406a88:	ea83 0301 	eor.w	r3, r3, r1
  406a8c:	b113      	cbz	r3, 406a94 <memchr+0x74>
  406a8e:	d1f8      	bne.n	406a82 <memchr+0x62>
  406a90:	2000      	movs	r0, #0
  406a92:	4770      	bx	lr
  406a94:	3801      	subs	r0, #1
  406a96:	4770      	bx	lr
  406a98:	2d00      	cmp	r5, #0
  406a9a:	bf06      	itte	eq
  406a9c:	4635      	moveq	r5, r6
  406a9e:	3803      	subeq	r0, #3
  406aa0:	3807      	subne	r0, #7
  406aa2:	f015 0f01 	tst.w	r5, #1
  406aa6:	d107      	bne.n	406ab8 <memchr+0x98>
  406aa8:	3001      	adds	r0, #1
  406aaa:	f415 7f80 	tst.w	r5, #256	; 0x100
  406aae:	bf02      	ittt	eq
  406ab0:	3001      	addeq	r0, #1
  406ab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406ab6:	3001      	addeq	r0, #1
  406ab8:	bcf0      	pop	{r4, r5, r6, r7}
  406aba:	3801      	subs	r0, #1
  406abc:	4770      	bx	lr
  406abe:	bf00      	nop

00406ac0 <memcpy>:
  406ac0:	4684      	mov	ip, r0
  406ac2:	ea41 0300 	orr.w	r3, r1, r0
  406ac6:	f013 0303 	ands.w	r3, r3, #3
  406aca:	d16d      	bne.n	406ba8 <memcpy+0xe8>
  406acc:	3a40      	subs	r2, #64	; 0x40
  406ace:	d341      	bcc.n	406b54 <memcpy+0x94>
  406ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ad4:	f840 3b04 	str.w	r3, [r0], #4
  406ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  406adc:	f840 3b04 	str.w	r3, [r0], #4
  406ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ae4:	f840 3b04 	str.w	r3, [r0], #4
  406ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  406aec:	f840 3b04 	str.w	r3, [r0], #4
  406af0:	f851 3b04 	ldr.w	r3, [r1], #4
  406af4:	f840 3b04 	str.w	r3, [r0], #4
  406af8:	f851 3b04 	ldr.w	r3, [r1], #4
  406afc:	f840 3b04 	str.w	r3, [r0], #4
  406b00:	f851 3b04 	ldr.w	r3, [r1], #4
  406b04:	f840 3b04 	str.w	r3, [r0], #4
  406b08:	f851 3b04 	ldr.w	r3, [r1], #4
  406b0c:	f840 3b04 	str.w	r3, [r0], #4
  406b10:	f851 3b04 	ldr.w	r3, [r1], #4
  406b14:	f840 3b04 	str.w	r3, [r0], #4
  406b18:	f851 3b04 	ldr.w	r3, [r1], #4
  406b1c:	f840 3b04 	str.w	r3, [r0], #4
  406b20:	f851 3b04 	ldr.w	r3, [r1], #4
  406b24:	f840 3b04 	str.w	r3, [r0], #4
  406b28:	f851 3b04 	ldr.w	r3, [r1], #4
  406b2c:	f840 3b04 	str.w	r3, [r0], #4
  406b30:	f851 3b04 	ldr.w	r3, [r1], #4
  406b34:	f840 3b04 	str.w	r3, [r0], #4
  406b38:	f851 3b04 	ldr.w	r3, [r1], #4
  406b3c:	f840 3b04 	str.w	r3, [r0], #4
  406b40:	f851 3b04 	ldr.w	r3, [r1], #4
  406b44:	f840 3b04 	str.w	r3, [r0], #4
  406b48:	f851 3b04 	ldr.w	r3, [r1], #4
  406b4c:	f840 3b04 	str.w	r3, [r0], #4
  406b50:	3a40      	subs	r2, #64	; 0x40
  406b52:	d2bd      	bcs.n	406ad0 <memcpy+0x10>
  406b54:	3230      	adds	r2, #48	; 0x30
  406b56:	d311      	bcc.n	406b7c <memcpy+0xbc>
  406b58:	f851 3b04 	ldr.w	r3, [r1], #4
  406b5c:	f840 3b04 	str.w	r3, [r0], #4
  406b60:	f851 3b04 	ldr.w	r3, [r1], #4
  406b64:	f840 3b04 	str.w	r3, [r0], #4
  406b68:	f851 3b04 	ldr.w	r3, [r1], #4
  406b6c:	f840 3b04 	str.w	r3, [r0], #4
  406b70:	f851 3b04 	ldr.w	r3, [r1], #4
  406b74:	f840 3b04 	str.w	r3, [r0], #4
  406b78:	3a10      	subs	r2, #16
  406b7a:	d2ed      	bcs.n	406b58 <memcpy+0x98>
  406b7c:	320c      	adds	r2, #12
  406b7e:	d305      	bcc.n	406b8c <memcpy+0xcc>
  406b80:	f851 3b04 	ldr.w	r3, [r1], #4
  406b84:	f840 3b04 	str.w	r3, [r0], #4
  406b88:	3a04      	subs	r2, #4
  406b8a:	d2f9      	bcs.n	406b80 <memcpy+0xc0>
  406b8c:	3204      	adds	r2, #4
  406b8e:	d008      	beq.n	406ba2 <memcpy+0xe2>
  406b90:	07d2      	lsls	r2, r2, #31
  406b92:	bf1c      	itt	ne
  406b94:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b98:	f800 3b01 	strbne.w	r3, [r0], #1
  406b9c:	d301      	bcc.n	406ba2 <memcpy+0xe2>
  406b9e:	880b      	ldrh	r3, [r1, #0]
  406ba0:	8003      	strh	r3, [r0, #0]
  406ba2:	4660      	mov	r0, ip
  406ba4:	4770      	bx	lr
  406ba6:	bf00      	nop
  406ba8:	2a08      	cmp	r2, #8
  406baa:	d313      	bcc.n	406bd4 <memcpy+0x114>
  406bac:	078b      	lsls	r3, r1, #30
  406bae:	d08d      	beq.n	406acc <memcpy+0xc>
  406bb0:	f010 0303 	ands.w	r3, r0, #3
  406bb4:	d08a      	beq.n	406acc <memcpy+0xc>
  406bb6:	f1c3 0304 	rsb	r3, r3, #4
  406bba:	1ad2      	subs	r2, r2, r3
  406bbc:	07db      	lsls	r3, r3, #31
  406bbe:	bf1c      	itt	ne
  406bc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406bc4:	f800 3b01 	strbne.w	r3, [r0], #1
  406bc8:	d380      	bcc.n	406acc <memcpy+0xc>
  406bca:	f831 3b02 	ldrh.w	r3, [r1], #2
  406bce:	f820 3b02 	strh.w	r3, [r0], #2
  406bd2:	e77b      	b.n	406acc <memcpy+0xc>
  406bd4:	3a04      	subs	r2, #4
  406bd6:	d3d9      	bcc.n	406b8c <memcpy+0xcc>
  406bd8:	3a01      	subs	r2, #1
  406bda:	f811 3b01 	ldrb.w	r3, [r1], #1
  406bde:	f800 3b01 	strb.w	r3, [r0], #1
  406be2:	d2f9      	bcs.n	406bd8 <memcpy+0x118>
  406be4:	780b      	ldrb	r3, [r1, #0]
  406be6:	7003      	strb	r3, [r0, #0]
  406be8:	784b      	ldrb	r3, [r1, #1]
  406bea:	7043      	strb	r3, [r0, #1]
  406bec:	788b      	ldrb	r3, [r1, #2]
  406bee:	7083      	strb	r3, [r0, #2]
  406bf0:	4660      	mov	r0, ip
  406bf2:	4770      	bx	lr

00406bf4 <memmove>:
  406bf4:	4288      	cmp	r0, r1
  406bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
  406bf8:	d90d      	bls.n	406c16 <memmove+0x22>
  406bfa:	188b      	adds	r3, r1, r2
  406bfc:	4298      	cmp	r0, r3
  406bfe:	d20a      	bcs.n	406c16 <memmove+0x22>
  406c00:	1884      	adds	r4, r0, r2
  406c02:	2a00      	cmp	r2, #0
  406c04:	d051      	beq.n	406caa <memmove+0xb6>
  406c06:	4622      	mov	r2, r4
  406c08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406c0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406c10:	4299      	cmp	r1, r3
  406c12:	d1f9      	bne.n	406c08 <memmove+0x14>
  406c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c16:	2a0f      	cmp	r2, #15
  406c18:	d948      	bls.n	406cac <memmove+0xb8>
  406c1a:	ea41 0300 	orr.w	r3, r1, r0
  406c1e:	079b      	lsls	r3, r3, #30
  406c20:	d146      	bne.n	406cb0 <memmove+0xbc>
  406c22:	f100 0410 	add.w	r4, r0, #16
  406c26:	f101 0310 	add.w	r3, r1, #16
  406c2a:	4615      	mov	r5, r2
  406c2c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406c30:	f844 6c10 	str.w	r6, [r4, #-16]
  406c34:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406c38:	f844 6c0c 	str.w	r6, [r4, #-12]
  406c3c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406c40:	f844 6c08 	str.w	r6, [r4, #-8]
  406c44:	3d10      	subs	r5, #16
  406c46:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406c4a:	f844 6c04 	str.w	r6, [r4, #-4]
  406c4e:	2d0f      	cmp	r5, #15
  406c50:	f103 0310 	add.w	r3, r3, #16
  406c54:	f104 0410 	add.w	r4, r4, #16
  406c58:	d8e8      	bhi.n	406c2c <memmove+0x38>
  406c5a:	f1a2 0310 	sub.w	r3, r2, #16
  406c5e:	f023 030f 	bic.w	r3, r3, #15
  406c62:	f002 0e0f 	and.w	lr, r2, #15
  406c66:	3310      	adds	r3, #16
  406c68:	f1be 0f03 	cmp.w	lr, #3
  406c6c:	4419      	add	r1, r3
  406c6e:	4403      	add	r3, r0
  406c70:	d921      	bls.n	406cb6 <memmove+0xc2>
  406c72:	1f1e      	subs	r6, r3, #4
  406c74:	460d      	mov	r5, r1
  406c76:	4674      	mov	r4, lr
  406c78:	3c04      	subs	r4, #4
  406c7a:	f855 7b04 	ldr.w	r7, [r5], #4
  406c7e:	f846 7f04 	str.w	r7, [r6, #4]!
  406c82:	2c03      	cmp	r4, #3
  406c84:	d8f8      	bhi.n	406c78 <memmove+0x84>
  406c86:	f1ae 0404 	sub.w	r4, lr, #4
  406c8a:	f024 0403 	bic.w	r4, r4, #3
  406c8e:	3404      	adds	r4, #4
  406c90:	4421      	add	r1, r4
  406c92:	4423      	add	r3, r4
  406c94:	f002 0203 	and.w	r2, r2, #3
  406c98:	b162      	cbz	r2, 406cb4 <memmove+0xc0>
  406c9a:	3b01      	subs	r3, #1
  406c9c:	440a      	add	r2, r1
  406c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
  406ca6:	428a      	cmp	r2, r1
  406ca8:	d1f9      	bne.n	406c9e <memmove+0xaa>
  406caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406cac:	4603      	mov	r3, r0
  406cae:	e7f3      	b.n	406c98 <memmove+0xa4>
  406cb0:	4603      	mov	r3, r0
  406cb2:	e7f2      	b.n	406c9a <memmove+0xa6>
  406cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406cb6:	4672      	mov	r2, lr
  406cb8:	e7ee      	b.n	406c98 <memmove+0xa4>
  406cba:	bf00      	nop

00406cbc <__malloc_lock>:
  406cbc:	4801      	ldr	r0, [pc, #4]	; (406cc4 <__malloc_lock+0x8>)
  406cbe:	f7ff bb61 	b.w	406384 <__retarget_lock_acquire_recursive>
  406cc2:	bf00      	nop
  406cc4:	20400b0c 	.word	0x20400b0c

00406cc8 <__malloc_unlock>:
  406cc8:	4801      	ldr	r0, [pc, #4]	; (406cd0 <__malloc_unlock+0x8>)
  406cca:	f7ff bb5d 	b.w	406388 <__retarget_lock_release_recursive>
  406cce:	bf00      	nop
  406cd0:	20400b0c 	.word	0x20400b0c

00406cd4 <_realloc_r>:
  406cd4:	2900      	cmp	r1, #0
  406cd6:	f000 8095 	beq.w	406e04 <_realloc_r+0x130>
  406cda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406cde:	460d      	mov	r5, r1
  406ce0:	4616      	mov	r6, r2
  406ce2:	b083      	sub	sp, #12
  406ce4:	4680      	mov	r8, r0
  406ce6:	f106 070b 	add.w	r7, r6, #11
  406cea:	f7ff ffe7 	bl	406cbc <__malloc_lock>
  406cee:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406cf2:	2f16      	cmp	r7, #22
  406cf4:	f02e 0403 	bic.w	r4, lr, #3
  406cf8:	f1a5 0908 	sub.w	r9, r5, #8
  406cfc:	d83c      	bhi.n	406d78 <_realloc_r+0xa4>
  406cfe:	2210      	movs	r2, #16
  406d00:	4617      	mov	r7, r2
  406d02:	42be      	cmp	r6, r7
  406d04:	d83d      	bhi.n	406d82 <_realloc_r+0xae>
  406d06:	4294      	cmp	r4, r2
  406d08:	da43      	bge.n	406d92 <_realloc_r+0xbe>
  406d0a:	4bc4      	ldr	r3, [pc, #784]	; (40701c <_realloc_r+0x348>)
  406d0c:	6899      	ldr	r1, [r3, #8]
  406d0e:	eb09 0004 	add.w	r0, r9, r4
  406d12:	4288      	cmp	r0, r1
  406d14:	f000 80b4 	beq.w	406e80 <_realloc_r+0x1ac>
  406d18:	6843      	ldr	r3, [r0, #4]
  406d1a:	f023 0101 	bic.w	r1, r3, #1
  406d1e:	4401      	add	r1, r0
  406d20:	6849      	ldr	r1, [r1, #4]
  406d22:	07c9      	lsls	r1, r1, #31
  406d24:	d54c      	bpl.n	406dc0 <_realloc_r+0xec>
  406d26:	f01e 0f01 	tst.w	lr, #1
  406d2a:	f000 809b 	beq.w	406e64 <_realloc_r+0x190>
  406d2e:	4631      	mov	r1, r6
  406d30:	4640      	mov	r0, r8
  406d32:	f7ff fbab 	bl	40648c <_malloc_r>
  406d36:	4606      	mov	r6, r0
  406d38:	2800      	cmp	r0, #0
  406d3a:	d03a      	beq.n	406db2 <_realloc_r+0xde>
  406d3c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406d40:	f023 0301 	bic.w	r3, r3, #1
  406d44:	444b      	add	r3, r9
  406d46:	f1a0 0208 	sub.w	r2, r0, #8
  406d4a:	429a      	cmp	r2, r3
  406d4c:	f000 8121 	beq.w	406f92 <_realloc_r+0x2be>
  406d50:	1f22      	subs	r2, r4, #4
  406d52:	2a24      	cmp	r2, #36	; 0x24
  406d54:	f200 8107 	bhi.w	406f66 <_realloc_r+0x292>
  406d58:	2a13      	cmp	r2, #19
  406d5a:	f200 80db 	bhi.w	406f14 <_realloc_r+0x240>
  406d5e:	4603      	mov	r3, r0
  406d60:	462a      	mov	r2, r5
  406d62:	6811      	ldr	r1, [r2, #0]
  406d64:	6019      	str	r1, [r3, #0]
  406d66:	6851      	ldr	r1, [r2, #4]
  406d68:	6059      	str	r1, [r3, #4]
  406d6a:	6892      	ldr	r2, [r2, #8]
  406d6c:	609a      	str	r2, [r3, #8]
  406d6e:	4629      	mov	r1, r5
  406d70:	4640      	mov	r0, r8
  406d72:	f7ff f86d 	bl	405e50 <_free_r>
  406d76:	e01c      	b.n	406db2 <_realloc_r+0xde>
  406d78:	f027 0707 	bic.w	r7, r7, #7
  406d7c:	2f00      	cmp	r7, #0
  406d7e:	463a      	mov	r2, r7
  406d80:	dabf      	bge.n	406d02 <_realloc_r+0x2e>
  406d82:	2600      	movs	r6, #0
  406d84:	230c      	movs	r3, #12
  406d86:	4630      	mov	r0, r6
  406d88:	f8c8 3000 	str.w	r3, [r8]
  406d8c:	b003      	add	sp, #12
  406d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d92:	462e      	mov	r6, r5
  406d94:	1be3      	subs	r3, r4, r7
  406d96:	2b0f      	cmp	r3, #15
  406d98:	d81e      	bhi.n	406dd8 <_realloc_r+0x104>
  406d9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406d9e:	f003 0301 	and.w	r3, r3, #1
  406da2:	4323      	orrs	r3, r4
  406da4:	444c      	add	r4, r9
  406da6:	f8c9 3004 	str.w	r3, [r9, #4]
  406daa:	6863      	ldr	r3, [r4, #4]
  406dac:	f043 0301 	orr.w	r3, r3, #1
  406db0:	6063      	str	r3, [r4, #4]
  406db2:	4640      	mov	r0, r8
  406db4:	f7ff ff88 	bl	406cc8 <__malloc_unlock>
  406db8:	4630      	mov	r0, r6
  406dba:	b003      	add	sp, #12
  406dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dc0:	f023 0303 	bic.w	r3, r3, #3
  406dc4:	18e1      	adds	r1, r4, r3
  406dc6:	4291      	cmp	r1, r2
  406dc8:	db1f      	blt.n	406e0a <_realloc_r+0x136>
  406dca:	68c3      	ldr	r3, [r0, #12]
  406dcc:	6882      	ldr	r2, [r0, #8]
  406dce:	462e      	mov	r6, r5
  406dd0:	60d3      	str	r3, [r2, #12]
  406dd2:	460c      	mov	r4, r1
  406dd4:	609a      	str	r2, [r3, #8]
  406dd6:	e7dd      	b.n	406d94 <_realloc_r+0xc0>
  406dd8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406ddc:	eb09 0107 	add.w	r1, r9, r7
  406de0:	f002 0201 	and.w	r2, r2, #1
  406de4:	444c      	add	r4, r9
  406de6:	f043 0301 	orr.w	r3, r3, #1
  406dea:	4317      	orrs	r7, r2
  406dec:	f8c9 7004 	str.w	r7, [r9, #4]
  406df0:	604b      	str	r3, [r1, #4]
  406df2:	6863      	ldr	r3, [r4, #4]
  406df4:	f043 0301 	orr.w	r3, r3, #1
  406df8:	3108      	adds	r1, #8
  406dfa:	6063      	str	r3, [r4, #4]
  406dfc:	4640      	mov	r0, r8
  406dfe:	f7ff f827 	bl	405e50 <_free_r>
  406e02:	e7d6      	b.n	406db2 <_realloc_r+0xde>
  406e04:	4611      	mov	r1, r2
  406e06:	f7ff bb41 	b.w	40648c <_malloc_r>
  406e0a:	f01e 0f01 	tst.w	lr, #1
  406e0e:	d18e      	bne.n	406d2e <_realloc_r+0x5a>
  406e10:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406e14:	eba9 0a01 	sub.w	sl, r9, r1
  406e18:	f8da 1004 	ldr.w	r1, [sl, #4]
  406e1c:	f021 0103 	bic.w	r1, r1, #3
  406e20:	440b      	add	r3, r1
  406e22:	4423      	add	r3, r4
  406e24:	4293      	cmp	r3, r2
  406e26:	db25      	blt.n	406e74 <_realloc_r+0x1a0>
  406e28:	68c2      	ldr	r2, [r0, #12]
  406e2a:	6881      	ldr	r1, [r0, #8]
  406e2c:	4656      	mov	r6, sl
  406e2e:	60ca      	str	r2, [r1, #12]
  406e30:	6091      	str	r1, [r2, #8]
  406e32:	f8da 100c 	ldr.w	r1, [sl, #12]
  406e36:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406e3a:	1f22      	subs	r2, r4, #4
  406e3c:	2a24      	cmp	r2, #36	; 0x24
  406e3e:	60c1      	str	r1, [r0, #12]
  406e40:	6088      	str	r0, [r1, #8]
  406e42:	f200 8094 	bhi.w	406f6e <_realloc_r+0x29a>
  406e46:	2a13      	cmp	r2, #19
  406e48:	d96f      	bls.n	406f2a <_realloc_r+0x256>
  406e4a:	6829      	ldr	r1, [r5, #0]
  406e4c:	f8ca 1008 	str.w	r1, [sl, #8]
  406e50:	6869      	ldr	r1, [r5, #4]
  406e52:	f8ca 100c 	str.w	r1, [sl, #12]
  406e56:	2a1b      	cmp	r2, #27
  406e58:	f200 80a2 	bhi.w	406fa0 <_realloc_r+0x2cc>
  406e5c:	3508      	adds	r5, #8
  406e5e:	f10a 0210 	add.w	r2, sl, #16
  406e62:	e063      	b.n	406f2c <_realloc_r+0x258>
  406e64:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406e68:	eba9 0a03 	sub.w	sl, r9, r3
  406e6c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406e70:	f021 0103 	bic.w	r1, r1, #3
  406e74:	1863      	adds	r3, r4, r1
  406e76:	4293      	cmp	r3, r2
  406e78:	f6ff af59 	blt.w	406d2e <_realloc_r+0x5a>
  406e7c:	4656      	mov	r6, sl
  406e7e:	e7d8      	b.n	406e32 <_realloc_r+0x15e>
  406e80:	6841      	ldr	r1, [r0, #4]
  406e82:	f021 0b03 	bic.w	fp, r1, #3
  406e86:	44a3      	add	fp, r4
  406e88:	f107 0010 	add.w	r0, r7, #16
  406e8c:	4583      	cmp	fp, r0
  406e8e:	da56      	bge.n	406f3e <_realloc_r+0x26a>
  406e90:	f01e 0f01 	tst.w	lr, #1
  406e94:	f47f af4b 	bne.w	406d2e <_realloc_r+0x5a>
  406e98:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406e9c:	eba9 0a01 	sub.w	sl, r9, r1
  406ea0:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ea4:	f021 0103 	bic.w	r1, r1, #3
  406ea8:	448b      	add	fp, r1
  406eaa:	4558      	cmp	r0, fp
  406eac:	dce2      	bgt.n	406e74 <_realloc_r+0x1a0>
  406eae:	4656      	mov	r6, sl
  406eb0:	f8da 100c 	ldr.w	r1, [sl, #12]
  406eb4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406eb8:	1f22      	subs	r2, r4, #4
  406eba:	2a24      	cmp	r2, #36	; 0x24
  406ebc:	60c1      	str	r1, [r0, #12]
  406ebe:	6088      	str	r0, [r1, #8]
  406ec0:	f200 808f 	bhi.w	406fe2 <_realloc_r+0x30e>
  406ec4:	2a13      	cmp	r2, #19
  406ec6:	f240 808a 	bls.w	406fde <_realloc_r+0x30a>
  406eca:	6829      	ldr	r1, [r5, #0]
  406ecc:	f8ca 1008 	str.w	r1, [sl, #8]
  406ed0:	6869      	ldr	r1, [r5, #4]
  406ed2:	f8ca 100c 	str.w	r1, [sl, #12]
  406ed6:	2a1b      	cmp	r2, #27
  406ed8:	f200 808a 	bhi.w	406ff0 <_realloc_r+0x31c>
  406edc:	3508      	adds	r5, #8
  406ede:	f10a 0210 	add.w	r2, sl, #16
  406ee2:	6829      	ldr	r1, [r5, #0]
  406ee4:	6011      	str	r1, [r2, #0]
  406ee6:	6869      	ldr	r1, [r5, #4]
  406ee8:	6051      	str	r1, [r2, #4]
  406eea:	68a9      	ldr	r1, [r5, #8]
  406eec:	6091      	str	r1, [r2, #8]
  406eee:	eb0a 0107 	add.w	r1, sl, r7
  406ef2:	ebab 0207 	sub.w	r2, fp, r7
  406ef6:	f042 0201 	orr.w	r2, r2, #1
  406efa:	6099      	str	r1, [r3, #8]
  406efc:	604a      	str	r2, [r1, #4]
  406efe:	f8da 3004 	ldr.w	r3, [sl, #4]
  406f02:	f003 0301 	and.w	r3, r3, #1
  406f06:	431f      	orrs	r7, r3
  406f08:	4640      	mov	r0, r8
  406f0a:	f8ca 7004 	str.w	r7, [sl, #4]
  406f0e:	f7ff fedb 	bl	406cc8 <__malloc_unlock>
  406f12:	e751      	b.n	406db8 <_realloc_r+0xe4>
  406f14:	682b      	ldr	r3, [r5, #0]
  406f16:	6003      	str	r3, [r0, #0]
  406f18:	686b      	ldr	r3, [r5, #4]
  406f1a:	6043      	str	r3, [r0, #4]
  406f1c:	2a1b      	cmp	r2, #27
  406f1e:	d82d      	bhi.n	406f7c <_realloc_r+0x2a8>
  406f20:	f100 0308 	add.w	r3, r0, #8
  406f24:	f105 0208 	add.w	r2, r5, #8
  406f28:	e71b      	b.n	406d62 <_realloc_r+0x8e>
  406f2a:	4632      	mov	r2, r6
  406f2c:	6829      	ldr	r1, [r5, #0]
  406f2e:	6011      	str	r1, [r2, #0]
  406f30:	6869      	ldr	r1, [r5, #4]
  406f32:	6051      	str	r1, [r2, #4]
  406f34:	68a9      	ldr	r1, [r5, #8]
  406f36:	6091      	str	r1, [r2, #8]
  406f38:	461c      	mov	r4, r3
  406f3a:	46d1      	mov	r9, sl
  406f3c:	e72a      	b.n	406d94 <_realloc_r+0xc0>
  406f3e:	eb09 0107 	add.w	r1, r9, r7
  406f42:	ebab 0b07 	sub.w	fp, fp, r7
  406f46:	f04b 0201 	orr.w	r2, fp, #1
  406f4a:	6099      	str	r1, [r3, #8]
  406f4c:	604a      	str	r2, [r1, #4]
  406f4e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406f52:	f003 0301 	and.w	r3, r3, #1
  406f56:	431f      	orrs	r7, r3
  406f58:	4640      	mov	r0, r8
  406f5a:	f845 7c04 	str.w	r7, [r5, #-4]
  406f5e:	f7ff feb3 	bl	406cc8 <__malloc_unlock>
  406f62:	462e      	mov	r6, r5
  406f64:	e728      	b.n	406db8 <_realloc_r+0xe4>
  406f66:	4629      	mov	r1, r5
  406f68:	f7ff fe44 	bl	406bf4 <memmove>
  406f6c:	e6ff      	b.n	406d6e <_realloc_r+0x9a>
  406f6e:	4629      	mov	r1, r5
  406f70:	4630      	mov	r0, r6
  406f72:	461c      	mov	r4, r3
  406f74:	46d1      	mov	r9, sl
  406f76:	f7ff fe3d 	bl	406bf4 <memmove>
  406f7a:	e70b      	b.n	406d94 <_realloc_r+0xc0>
  406f7c:	68ab      	ldr	r3, [r5, #8]
  406f7e:	6083      	str	r3, [r0, #8]
  406f80:	68eb      	ldr	r3, [r5, #12]
  406f82:	60c3      	str	r3, [r0, #12]
  406f84:	2a24      	cmp	r2, #36	; 0x24
  406f86:	d017      	beq.n	406fb8 <_realloc_r+0x2e4>
  406f88:	f100 0310 	add.w	r3, r0, #16
  406f8c:	f105 0210 	add.w	r2, r5, #16
  406f90:	e6e7      	b.n	406d62 <_realloc_r+0x8e>
  406f92:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406f96:	f023 0303 	bic.w	r3, r3, #3
  406f9a:	441c      	add	r4, r3
  406f9c:	462e      	mov	r6, r5
  406f9e:	e6f9      	b.n	406d94 <_realloc_r+0xc0>
  406fa0:	68a9      	ldr	r1, [r5, #8]
  406fa2:	f8ca 1010 	str.w	r1, [sl, #16]
  406fa6:	68e9      	ldr	r1, [r5, #12]
  406fa8:	f8ca 1014 	str.w	r1, [sl, #20]
  406fac:	2a24      	cmp	r2, #36	; 0x24
  406fae:	d00c      	beq.n	406fca <_realloc_r+0x2f6>
  406fb0:	3510      	adds	r5, #16
  406fb2:	f10a 0218 	add.w	r2, sl, #24
  406fb6:	e7b9      	b.n	406f2c <_realloc_r+0x258>
  406fb8:	692b      	ldr	r3, [r5, #16]
  406fba:	6103      	str	r3, [r0, #16]
  406fbc:	696b      	ldr	r3, [r5, #20]
  406fbe:	6143      	str	r3, [r0, #20]
  406fc0:	f105 0218 	add.w	r2, r5, #24
  406fc4:	f100 0318 	add.w	r3, r0, #24
  406fc8:	e6cb      	b.n	406d62 <_realloc_r+0x8e>
  406fca:	692a      	ldr	r2, [r5, #16]
  406fcc:	f8ca 2018 	str.w	r2, [sl, #24]
  406fd0:	696a      	ldr	r2, [r5, #20]
  406fd2:	f8ca 201c 	str.w	r2, [sl, #28]
  406fd6:	3518      	adds	r5, #24
  406fd8:	f10a 0220 	add.w	r2, sl, #32
  406fdc:	e7a6      	b.n	406f2c <_realloc_r+0x258>
  406fde:	4632      	mov	r2, r6
  406fe0:	e77f      	b.n	406ee2 <_realloc_r+0x20e>
  406fe2:	4629      	mov	r1, r5
  406fe4:	4630      	mov	r0, r6
  406fe6:	9301      	str	r3, [sp, #4]
  406fe8:	f7ff fe04 	bl	406bf4 <memmove>
  406fec:	9b01      	ldr	r3, [sp, #4]
  406fee:	e77e      	b.n	406eee <_realloc_r+0x21a>
  406ff0:	68a9      	ldr	r1, [r5, #8]
  406ff2:	f8ca 1010 	str.w	r1, [sl, #16]
  406ff6:	68e9      	ldr	r1, [r5, #12]
  406ff8:	f8ca 1014 	str.w	r1, [sl, #20]
  406ffc:	2a24      	cmp	r2, #36	; 0x24
  406ffe:	d003      	beq.n	407008 <_realloc_r+0x334>
  407000:	3510      	adds	r5, #16
  407002:	f10a 0218 	add.w	r2, sl, #24
  407006:	e76c      	b.n	406ee2 <_realloc_r+0x20e>
  407008:	692a      	ldr	r2, [r5, #16]
  40700a:	f8ca 2018 	str.w	r2, [sl, #24]
  40700e:	696a      	ldr	r2, [r5, #20]
  407010:	f8ca 201c 	str.w	r2, [sl, #28]
  407014:	3518      	adds	r5, #24
  407016:	f10a 0220 	add.w	r2, sl, #32
  40701a:	e762      	b.n	406ee2 <_realloc_r+0x20e>
  40701c:	204005d8 	.word	0x204005d8

00407020 <_sbrk_r>:
  407020:	b538      	push	{r3, r4, r5, lr}
  407022:	4c07      	ldr	r4, [pc, #28]	; (407040 <_sbrk_r+0x20>)
  407024:	2300      	movs	r3, #0
  407026:	4605      	mov	r5, r0
  407028:	4608      	mov	r0, r1
  40702a:	6023      	str	r3, [r4, #0]
  40702c:	f7fb fb1c 	bl	402668 <_sbrk>
  407030:	1c43      	adds	r3, r0, #1
  407032:	d000      	beq.n	407036 <_sbrk_r+0x16>
  407034:	bd38      	pop	{r3, r4, r5, pc}
  407036:	6823      	ldr	r3, [r4, #0]
  407038:	2b00      	cmp	r3, #0
  40703a:	d0fb      	beq.n	407034 <_sbrk_r+0x14>
  40703c:	602b      	str	r3, [r5, #0]
  40703e:	bd38      	pop	{r3, r4, r5, pc}
  407040:	20400b20 	.word	0x20400b20

00407044 <__sread>:
  407044:	b510      	push	{r4, lr}
  407046:	460c      	mov	r4, r1
  407048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40704c:	f000 fa7e 	bl	40754c <_read_r>
  407050:	2800      	cmp	r0, #0
  407052:	db03      	blt.n	40705c <__sread+0x18>
  407054:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407056:	4403      	add	r3, r0
  407058:	6523      	str	r3, [r4, #80]	; 0x50
  40705a:	bd10      	pop	{r4, pc}
  40705c:	89a3      	ldrh	r3, [r4, #12]
  40705e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407062:	81a3      	strh	r3, [r4, #12]
  407064:	bd10      	pop	{r4, pc}
  407066:	bf00      	nop

00407068 <__swrite>:
  407068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40706c:	4616      	mov	r6, r2
  40706e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407072:	461f      	mov	r7, r3
  407074:	05d3      	lsls	r3, r2, #23
  407076:	460c      	mov	r4, r1
  407078:	4605      	mov	r5, r0
  40707a:	d507      	bpl.n	40708c <__swrite+0x24>
  40707c:	2200      	movs	r2, #0
  40707e:	2302      	movs	r3, #2
  407080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407084:	f000 fa4c 	bl	407520 <_lseek_r>
  407088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40708c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407090:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407094:	81a2      	strh	r2, [r4, #12]
  407096:	463b      	mov	r3, r7
  407098:	4632      	mov	r2, r6
  40709a:	4628      	mov	r0, r5
  40709c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4070a0:	f000 b92c 	b.w	4072fc <_write_r>

004070a4 <__sseek>:
  4070a4:	b510      	push	{r4, lr}
  4070a6:	460c      	mov	r4, r1
  4070a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4070ac:	f000 fa38 	bl	407520 <_lseek_r>
  4070b0:	89a3      	ldrh	r3, [r4, #12]
  4070b2:	1c42      	adds	r2, r0, #1
  4070b4:	bf0e      	itee	eq
  4070b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4070ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4070be:	6520      	strne	r0, [r4, #80]	; 0x50
  4070c0:	81a3      	strh	r3, [r4, #12]
  4070c2:	bd10      	pop	{r4, pc}

004070c4 <__sclose>:
  4070c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4070c8:	f000 b990 	b.w	4073ec <_close_r>
	...

00407100 <strlen>:
  407100:	f890 f000 	pld	[r0]
  407104:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407108:	f020 0107 	bic.w	r1, r0, #7
  40710c:	f06f 0c00 	mvn.w	ip, #0
  407110:	f010 0407 	ands.w	r4, r0, #7
  407114:	f891 f020 	pld	[r1, #32]
  407118:	f040 8049 	bne.w	4071ae <strlen+0xae>
  40711c:	f04f 0400 	mov.w	r4, #0
  407120:	f06f 0007 	mvn.w	r0, #7
  407124:	e9d1 2300 	ldrd	r2, r3, [r1]
  407128:	f891 f040 	pld	[r1, #64]	; 0x40
  40712c:	f100 0008 	add.w	r0, r0, #8
  407130:	fa82 f24c 	uadd8	r2, r2, ip
  407134:	faa4 f28c 	sel	r2, r4, ip
  407138:	fa83 f34c 	uadd8	r3, r3, ip
  40713c:	faa2 f38c 	sel	r3, r2, ip
  407140:	bb4b      	cbnz	r3, 407196 <strlen+0x96>
  407142:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407146:	fa82 f24c 	uadd8	r2, r2, ip
  40714a:	f100 0008 	add.w	r0, r0, #8
  40714e:	faa4 f28c 	sel	r2, r4, ip
  407152:	fa83 f34c 	uadd8	r3, r3, ip
  407156:	faa2 f38c 	sel	r3, r2, ip
  40715a:	b9e3      	cbnz	r3, 407196 <strlen+0x96>
  40715c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407160:	fa82 f24c 	uadd8	r2, r2, ip
  407164:	f100 0008 	add.w	r0, r0, #8
  407168:	faa4 f28c 	sel	r2, r4, ip
  40716c:	fa83 f34c 	uadd8	r3, r3, ip
  407170:	faa2 f38c 	sel	r3, r2, ip
  407174:	b97b      	cbnz	r3, 407196 <strlen+0x96>
  407176:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40717a:	f101 0120 	add.w	r1, r1, #32
  40717e:	fa82 f24c 	uadd8	r2, r2, ip
  407182:	f100 0008 	add.w	r0, r0, #8
  407186:	faa4 f28c 	sel	r2, r4, ip
  40718a:	fa83 f34c 	uadd8	r3, r3, ip
  40718e:	faa2 f38c 	sel	r3, r2, ip
  407192:	2b00      	cmp	r3, #0
  407194:	d0c6      	beq.n	407124 <strlen+0x24>
  407196:	2a00      	cmp	r2, #0
  407198:	bf04      	itt	eq
  40719a:	3004      	addeq	r0, #4
  40719c:	461a      	moveq	r2, r3
  40719e:	ba12      	rev	r2, r2
  4071a0:	fab2 f282 	clz	r2, r2
  4071a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4071a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4071ac:	4770      	bx	lr
  4071ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4071b2:	f004 0503 	and.w	r5, r4, #3
  4071b6:	f1c4 0000 	rsb	r0, r4, #0
  4071ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4071be:	f014 0f04 	tst.w	r4, #4
  4071c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4071c6:	fa0c f505 	lsl.w	r5, ip, r5
  4071ca:	ea62 0205 	orn	r2, r2, r5
  4071ce:	bf1c      	itt	ne
  4071d0:	ea63 0305 	ornne	r3, r3, r5
  4071d4:	4662      	movne	r2, ip
  4071d6:	f04f 0400 	mov.w	r4, #0
  4071da:	e7a9      	b.n	407130 <strlen+0x30>

004071dc <__swbuf_r>:
  4071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4071de:	460d      	mov	r5, r1
  4071e0:	4614      	mov	r4, r2
  4071e2:	4606      	mov	r6, r0
  4071e4:	b110      	cbz	r0, 4071ec <__swbuf_r+0x10>
  4071e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4071e8:	2b00      	cmp	r3, #0
  4071ea:	d04b      	beq.n	407284 <__swbuf_r+0xa8>
  4071ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4071f0:	69a3      	ldr	r3, [r4, #24]
  4071f2:	60a3      	str	r3, [r4, #8]
  4071f4:	b291      	uxth	r1, r2
  4071f6:	0708      	lsls	r0, r1, #28
  4071f8:	d539      	bpl.n	40726e <__swbuf_r+0x92>
  4071fa:	6923      	ldr	r3, [r4, #16]
  4071fc:	2b00      	cmp	r3, #0
  4071fe:	d036      	beq.n	40726e <__swbuf_r+0x92>
  407200:	b2ed      	uxtb	r5, r5
  407202:	0489      	lsls	r1, r1, #18
  407204:	462f      	mov	r7, r5
  407206:	d515      	bpl.n	407234 <__swbuf_r+0x58>
  407208:	6822      	ldr	r2, [r4, #0]
  40720a:	6961      	ldr	r1, [r4, #20]
  40720c:	1ad3      	subs	r3, r2, r3
  40720e:	428b      	cmp	r3, r1
  407210:	da1c      	bge.n	40724c <__swbuf_r+0x70>
  407212:	3301      	adds	r3, #1
  407214:	68a1      	ldr	r1, [r4, #8]
  407216:	1c50      	adds	r0, r2, #1
  407218:	3901      	subs	r1, #1
  40721a:	60a1      	str	r1, [r4, #8]
  40721c:	6020      	str	r0, [r4, #0]
  40721e:	7015      	strb	r5, [r2, #0]
  407220:	6962      	ldr	r2, [r4, #20]
  407222:	429a      	cmp	r2, r3
  407224:	d01a      	beq.n	40725c <__swbuf_r+0x80>
  407226:	89a3      	ldrh	r3, [r4, #12]
  407228:	07db      	lsls	r3, r3, #31
  40722a:	d501      	bpl.n	407230 <__swbuf_r+0x54>
  40722c:	2d0a      	cmp	r5, #10
  40722e:	d015      	beq.n	40725c <__swbuf_r+0x80>
  407230:	4638      	mov	r0, r7
  407232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407234:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407236:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40723a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40723e:	81a2      	strh	r2, [r4, #12]
  407240:	6822      	ldr	r2, [r4, #0]
  407242:	6661      	str	r1, [r4, #100]	; 0x64
  407244:	6961      	ldr	r1, [r4, #20]
  407246:	1ad3      	subs	r3, r2, r3
  407248:	428b      	cmp	r3, r1
  40724a:	dbe2      	blt.n	407212 <__swbuf_r+0x36>
  40724c:	4621      	mov	r1, r4
  40724e:	4630      	mov	r0, r6
  407250:	f7fe fc80 	bl	405b54 <_fflush_r>
  407254:	b940      	cbnz	r0, 407268 <__swbuf_r+0x8c>
  407256:	6822      	ldr	r2, [r4, #0]
  407258:	2301      	movs	r3, #1
  40725a:	e7db      	b.n	407214 <__swbuf_r+0x38>
  40725c:	4621      	mov	r1, r4
  40725e:	4630      	mov	r0, r6
  407260:	f7fe fc78 	bl	405b54 <_fflush_r>
  407264:	2800      	cmp	r0, #0
  407266:	d0e3      	beq.n	407230 <__swbuf_r+0x54>
  407268:	f04f 37ff 	mov.w	r7, #4294967295
  40726c:	e7e0      	b.n	407230 <__swbuf_r+0x54>
  40726e:	4621      	mov	r1, r4
  407270:	4630      	mov	r0, r6
  407272:	f7fe fb5b 	bl	40592c <__swsetup_r>
  407276:	2800      	cmp	r0, #0
  407278:	d1f6      	bne.n	407268 <__swbuf_r+0x8c>
  40727a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40727e:	6923      	ldr	r3, [r4, #16]
  407280:	b291      	uxth	r1, r2
  407282:	e7bd      	b.n	407200 <__swbuf_r+0x24>
  407284:	f7fe fcbe 	bl	405c04 <__sinit>
  407288:	e7b0      	b.n	4071ec <__swbuf_r+0x10>
  40728a:	bf00      	nop

0040728c <_wcrtomb_r>:
  40728c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40728e:	4606      	mov	r6, r0
  407290:	b085      	sub	sp, #20
  407292:	461f      	mov	r7, r3
  407294:	b189      	cbz	r1, 4072ba <_wcrtomb_r+0x2e>
  407296:	4c10      	ldr	r4, [pc, #64]	; (4072d8 <_wcrtomb_r+0x4c>)
  407298:	4d10      	ldr	r5, [pc, #64]	; (4072dc <_wcrtomb_r+0x50>)
  40729a:	6824      	ldr	r4, [r4, #0]
  40729c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40729e:	2c00      	cmp	r4, #0
  4072a0:	bf08      	it	eq
  4072a2:	462c      	moveq	r4, r5
  4072a4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4072a8:	47a0      	blx	r4
  4072aa:	1c43      	adds	r3, r0, #1
  4072ac:	d103      	bne.n	4072b6 <_wcrtomb_r+0x2a>
  4072ae:	2200      	movs	r2, #0
  4072b0:	238a      	movs	r3, #138	; 0x8a
  4072b2:	603a      	str	r2, [r7, #0]
  4072b4:	6033      	str	r3, [r6, #0]
  4072b6:	b005      	add	sp, #20
  4072b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4072ba:	460c      	mov	r4, r1
  4072bc:	4906      	ldr	r1, [pc, #24]	; (4072d8 <_wcrtomb_r+0x4c>)
  4072be:	4a07      	ldr	r2, [pc, #28]	; (4072dc <_wcrtomb_r+0x50>)
  4072c0:	6809      	ldr	r1, [r1, #0]
  4072c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4072c4:	2900      	cmp	r1, #0
  4072c6:	bf08      	it	eq
  4072c8:	4611      	moveq	r1, r2
  4072ca:	4622      	mov	r2, r4
  4072cc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4072d0:	a901      	add	r1, sp, #4
  4072d2:	47a0      	blx	r4
  4072d4:	e7e9      	b.n	4072aa <_wcrtomb_r+0x1e>
  4072d6:	bf00      	nop
  4072d8:	20400038 	.word	0x20400038
  4072dc:	2040046c 	.word	0x2040046c

004072e0 <__ascii_wctomb>:
  4072e0:	b121      	cbz	r1, 4072ec <__ascii_wctomb+0xc>
  4072e2:	2aff      	cmp	r2, #255	; 0xff
  4072e4:	d804      	bhi.n	4072f0 <__ascii_wctomb+0x10>
  4072e6:	700a      	strb	r2, [r1, #0]
  4072e8:	2001      	movs	r0, #1
  4072ea:	4770      	bx	lr
  4072ec:	4608      	mov	r0, r1
  4072ee:	4770      	bx	lr
  4072f0:	238a      	movs	r3, #138	; 0x8a
  4072f2:	6003      	str	r3, [r0, #0]
  4072f4:	f04f 30ff 	mov.w	r0, #4294967295
  4072f8:	4770      	bx	lr
  4072fa:	bf00      	nop

004072fc <_write_r>:
  4072fc:	b570      	push	{r4, r5, r6, lr}
  4072fe:	460d      	mov	r5, r1
  407300:	4c08      	ldr	r4, [pc, #32]	; (407324 <_write_r+0x28>)
  407302:	4611      	mov	r1, r2
  407304:	4606      	mov	r6, r0
  407306:	461a      	mov	r2, r3
  407308:	4628      	mov	r0, r5
  40730a:	2300      	movs	r3, #0
  40730c:	6023      	str	r3, [r4, #0]
  40730e:	f7f9 ff11 	bl	401134 <_write>
  407312:	1c43      	adds	r3, r0, #1
  407314:	d000      	beq.n	407318 <_write_r+0x1c>
  407316:	bd70      	pop	{r4, r5, r6, pc}
  407318:	6823      	ldr	r3, [r4, #0]
  40731a:	2b00      	cmp	r3, #0
  40731c:	d0fb      	beq.n	407316 <_write_r+0x1a>
  40731e:	6033      	str	r3, [r6, #0]
  407320:	bd70      	pop	{r4, r5, r6, pc}
  407322:	bf00      	nop
  407324:	20400b20 	.word	0x20400b20

00407328 <__register_exitproc>:
  407328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40732c:	4d2c      	ldr	r5, [pc, #176]	; (4073e0 <__register_exitproc+0xb8>)
  40732e:	4606      	mov	r6, r0
  407330:	6828      	ldr	r0, [r5, #0]
  407332:	4698      	mov	r8, r3
  407334:	460f      	mov	r7, r1
  407336:	4691      	mov	r9, r2
  407338:	f7ff f824 	bl	406384 <__retarget_lock_acquire_recursive>
  40733c:	4b29      	ldr	r3, [pc, #164]	; (4073e4 <__register_exitproc+0xbc>)
  40733e:	681c      	ldr	r4, [r3, #0]
  407340:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407344:	2b00      	cmp	r3, #0
  407346:	d03e      	beq.n	4073c6 <__register_exitproc+0x9e>
  407348:	685a      	ldr	r2, [r3, #4]
  40734a:	2a1f      	cmp	r2, #31
  40734c:	dc1c      	bgt.n	407388 <__register_exitproc+0x60>
  40734e:	f102 0e01 	add.w	lr, r2, #1
  407352:	b176      	cbz	r6, 407372 <__register_exitproc+0x4a>
  407354:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407358:	2401      	movs	r4, #1
  40735a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40735e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407362:	4094      	lsls	r4, r2
  407364:	4320      	orrs	r0, r4
  407366:	2e02      	cmp	r6, #2
  407368:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40736c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407370:	d023      	beq.n	4073ba <__register_exitproc+0x92>
  407372:	3202      	adds	r2, #2
  407374:	f8c3 e004 	str.w	lr, [r3, #4]
  407378:	6828      	ldr	r0, [r5, #0]
  40737a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40737e:	f7ff f803 	bl	406388 <__retarget_lock_release_recursive>
  407382:	2000      	movs	r0, #0
  407384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407388:	4b17      	ldr	r3, [pc, #92]	; (4073e8 <__register_exitproc+0xc0>)
  40738a:	b30b      	cbz	r3, 4073d0 <__register_exitproc+0xa8>
  40738c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407390:	f7ff f874 	bl	40647c <malloc>
  407394:	4603      	mov	r3, r0
  407396:	b1d8      	cbz	r0, 4073d0 <__register_exitproc+0xa8>
  407398:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40739c:	6002      	str	r2, [r0, #0]
  40739e:	2100      	movs	r1, #0
  4073a0:	6041      	str	r1, [r0, #4]
  4073a2:	460a      	mov	r2, r1
  4073a4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4073a8:	f04f 0e01 	mov.w	lr, #1
  4073ac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4073b0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4073b4:	2e00      	cmp	r6, #0
  4073b6:	d0dc      	beq.n	407372 <__register_exitproc+0x4a>
  4073b8:	e7cc      	b.n	407354 <__register_exitproc+0x2c>
  4073ba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4073be:	430c      	orrs	r4, r1
  4073c0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4073c4:	e7d5      	b.n	407372 <__register_exitproc+0x4a>
  4073c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4073ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4073ce:	e7bb      	b.n	407348 <__register_exitproc+0x20>
  4073d0:	6828      	ldr	r0, [r5, #0]
  4073d2:	f7fe ffd9 	bl	406388 <__retarget_lock_release_recursive>
  4073d6:	f04f 30ff 	mov.w	r0, #4294967295
  4073da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4073de:	bf00      	nop
  4073e0:	20400468 	.word	0x20400468
  4073e4:	00408128 	.word	0x00408128
  4073e8:	0040647d 	.word	0x0040647d

004073ec <_close_r>:
  4073ec:	b538      	push	{r3, r4, r5, lr}
  4073ee:	4c07      	ldr	r4, [pc, #28]	; (40740c <_close_r+0x20>)
  4073f0:	2300      	movs	r3, #0
  4073f2:	4605      	mov	r5, r0
  4073f4:	4608      	mov	r0, r1
  4073f6:	6023      	str	r3, [r4, #0]
  4073f8:	f7fb f952 	bl	4026a0 <_close>
  4073fc:	1c43      	adds	r3, r0, #1
  4073fe:	d000      	beq.n	407402 <_close_r+0x16>
  407400:	bd38      	pop	{r3, r4, r5, pc}
  407402:	6823      	ldr	r3, [r4, #0]
  407404:	2b00      	cmp	r3, #0
  407406:	d0fb      	beq.n	407400 <_close_r+0x14>
  407408:	602b      	str	r3, [r5, #0]
  40740a:	bd38      	pop	{r3, r4, r5, pc}
  40740c:	20400b20 	.word	0x20400b20

00407410 <_fclose_r>:
  407410:	b570      	push	{r4, r5, r6, lr}
  407412:	b159      	cbz	r1, 40742c <_fclose_r+0x1c>
  407414:	4605      	mov	r5, r0
  407416:	460c      	mov	r4, r1
  407418:	b110      	cbz	r0, 407420 <_fclose_r+0x10>
  40741a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40741c:	2b00      	cmp	r3, #0
  40741e:	d03c      	beq.n	40749a <_fclose_r+0x8a>
  407420:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407422:	07d8      	lsls	r0, r3, #31
  407424:	d505      	bpl.n	407432 <_fclose_r+0x22>
  407426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40742a:	b92b      	cbnz	r3, 407438 <_fclose_r+0x28>
  40742c:	2600      	movs	r6, #0
  40742e:	4630      	mov	r0, r6
  407430:	bd70      	pop	{r4, r5, r6, pc}
  407432:	89a3      	ldrh	r3, [r4, #12]
  407434:	0599      	lsls	r1, r3, #22
  407436:	d53c      	bpl.n	4074b2 <_fclose_r+0xa2>
  407438:	4621      	mov	r1, r4
  40743a:	4628      	mov	r0, r5
  40743c:	f7fe faea 	bl	405a14 <__sflush_r>
  407440:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407442:	4606      	mov	r6, r0
  407444:	b133      	cbz	r3, 407454 <_fclose_r+0x44>
  407446:	69e1      	ldr	r1, [r4, #28]
  407448:	4628      	mov	r0, r5
  40744a:	4798      	blx	r3
  40744c:	2800      	cmp	r0, #0
  40744e:	bfb8      	it	lt
  407450:	f04f 36ff 	movlt.w	r6, #4294967295
  407454:	89a3      	ldrh	r3, [r4, #12]
  407456:	061a      	lsls	r2, r3, #24
  407458:	d422      	bmi.n	4074a0 <_fclose_r+0x90>
  40745a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40745c:	b141      	cbz	r1, 407470 <_fclose_r+0x60>
  40745e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407462:	4299      	cmp	r1, r3
  407464:	d002      	beq.n	40746c <_fclose_r+0x5c>
  407466:	4628      	mov	r0, r5
  407468:	f7fe fcf2 	bl	405e50 <_free_r>
  40746c:	2300      	movs	r3, #0
  40746e:	6323      	str	r3, [r4, #48]	; 0x30
  407470:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407472:	b121      	cbz	r1, 40747e <_fclose_r+0x6e>
  407474:	4628      	mov	r0, r5
  407476:	f7fe fceb 	bl	405e50 <_free_r>
  40747a:	2300      	movs	r3, #0
  40747c:	6463      	str	r3, [r4, #68]	; 0x44
  40747e:	f7fe fbed 	bl	405c5c <__sfp_lock_acquire>
  407482:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407484:	2200      	movs	r2, #0
  407486:	07db      	lsls	r3, r3, #31
  407488:	81a2      	strh	r2, [r4, #12]
  40748a:	d50e      	bpl.n	4074aa <_fclose_r+0x9a>
  40748c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40748e:	f7fe ff77 	bl	406380 <__retarget_lock_close_recursive>
  407492:	f7fe fbe9 	bl	405c68 <__sfp_lock_release>
  407496:	4630      	mov	r0, r6
  407498:	bd70      	pop	{r4, r5, r6, pc}
  40749a:	f7fe fbb3 	bl	405c04 <__sinit>
  40749e:	e7bf      	b.n	407420 <_fclose_r+0x10>
  4074a0:	6921      	ldr	r1, [r4, #16]
  4074a2:	4628      	mov	r0, r5
  4074a4:	f7fe fcd4 	bl	405e50 <_free_r>
  4074a8:	e7d7      	b.n	40745a <_fclose_r+0x4a>
  4074aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4074ac:	f7fe ff6c 	bl	406388 <__retarget_lock_release_recursive>
  4074b0:	e7ec      	b.n	40748c <_fclose_r+0x7c>
  4074b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4074b4:	f7fe ff66 	bl	406384 <__retarget_lock_acquire_recursive>
  4074b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4074bc:	2b00      	cmp	r3, #0
  4074be:	d1bb      	bne.n	407438 <_fclose_r+0x28>
  4074c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4074c2:	f016 0601 	ands.w	r6, r6, #1
  4074c6:	d1b1      	bne.n	40742c <_fclose_r+0x1c>
  4074c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4074ca:	f7fe ff5d 	bl	406388 <__retarget_lock_release_recursive>
  4074ce:	4630      	mov	r0, r6
  4074d0:	bd70      	pop	{r4, r5, r6, pc}
  4074d2:	bf00      	nop

004074d4 <_fstat_r>:
  4074d4:	b538      	push	{r3, r4, r5, lr}
  4074d6:	460b      	mov	r3, r1
  4074d8:	4c07      	ldr	r4, [pc, #28]	; (4074f8 <_fstat_r+0x24>)
  4074da:	4605      	mov	r5, r0
  4074dc:	4611      	mov	r1, r2
  4074de:	4618      	mov	r0, r3
  4074e0:	2300      	movs	r3, #0
  4074e2:	6023      	str	r3, [r4, #0]
  4074e4:	f7fb f8df 	bl	4026a6 <_fstat>
  4074e8:	1c43      	adds	r3, r0, #1
  4074ea:	d000      	beq.n	4074ee <_fstat_r+0x1a>
  4074ec:	bd38      	pop	{r3, r4, r5, pc}
  4074ee:	6823      	ldr	r3, [r4, #0]
  4074f0:	2b00      	cmp	r3, #0
  4074f2:	d0fb      	beq.n	4074ec <_fstat_r+0x18>
  4074f4:	602b      	str	r3, [r5, #0]
  4074f6:	bd38      	pop	{r3, r4, r5, pc}
  4074f8:	20400b20 	.word	0x20400b20

004074fc <_isatty_r>:
  4074fc:	b538      	push	{r3, r4, r5, lr}
  4074fe:	4c07      	ldr	r4, [pc, #28]	; (40751c <_isatty_r+0x20>)
  407500:	2300      	movs	r3, #0
  407502:	4605      	mov	r5, r0
  407504:	4608      	mov	r0, r1
  407506:	6023      	str	r3, [r4, #0]
  407508:	f7fb f8d2 	bl	4026b0 <_isatty>
  40750c:	1c43      	adds	r3, r0, #1
  40750e:	d000      	beq.n	407512 <_isatty_r+0x16>
  407510:	bd38      	pop	{r3, r4, r5, pc}
  407512:	6823      	ldr	r3, [r4, #0]
  407514:	2b00      	cmp	r3, #0
  407516:	d0fb      	beq.n	407510 <_isatty_r+0x14>
  407518:	602b      	str	r3, [r5, #0]
  40751a:	bd38      	pop	{r3, r4, r5, pc}
  40751c:	20400b20 	.word	0x20400b20

00407520 <_lseek_r>:
  407520:	b570      	push	{r4, r5, r6, lr}
  407522:	460d      	mov	r5, r1
  407524:	4c08      	ldr	r4, [pc, #32]	; (407548 <_lseek_r+0x28>)
  407526:	4611      	mov	r1, r2
  407528:	4606      	mov	r6, r0
  40752a:	461a      	mov	r2, r3
  40752c:	4628      	mov	r0, r5
  40752e:	2300      	movs	r3, #0
  407530:	6023      	str	r3, [r4, #0]
  407532:	f7fb f8bf 	bl	4026b4 <_lseek>
  407536:	1c43      	adds	r3, r0, #1
  407538:	d000      	beq.n	40753c <_lseek_r+0x1c>
  40753a:	bd70      	pop	{r4, r5, r6, pc}
  40753c:	6823      	ldr	r3, [r4, #0]
  40753e:	2b00      	cmp	r3, #0
  407540:	d0fb      	beq.n	40753a <_lseek_r+0x1a>
  407542:	6033      	str	r3, [r6, #0]
  407544:	bd70      	pop	{r4, r5, r6, pc}
  407546:	bf00      	nop
  407548:	20400b20 	.word	0x20400b20

0040754c <_read_r>:
  40754c:	b570      	push	{r4, r5, r6, lr}
  40754e:	460d      	mov	r5, r1
  407550:	4c08      	ldr	r4, [pc, #32]	; (407574 <_read_r+0x28>)
  407552:	4611      	mov	r1, r2
  407554:	4606      	mov	r6, r0
  407556:	461a      	mov	r2, r3
  407558:	4628      	mov	r0, r5
  40755a:	2300      	movs	r3, #0
  40755c:	6023      	str	r3, [r4, #0]
  40755e:	f7f9 fdcb 	bl	4010f8 <_read>
  407562:	1c43      	adds	r3, r0, #1
  407564:	d000      	beq.n	407568 <_read_r+0x1c>
  407566:	bd70      	pop	{r4, r5, r6, pc}
  407568:	6823      	ldr	r3, [r4, #0]
  40756a:	2b00      	cmp	r3, #0
  40756c:	d0fb      	beq.n	407566 <_read_r+0x1a>
  40756e:	6033      	str	r3, [r6, #0]
  407570:	bd70      	pop	{r4, r5, r6, pc}
  407572:	bf00      	nop
  407574:	20400b20 	.word	0x20400b20

00407578 <__aeabi_uldivmod>:
  407578:	b953      	cbnz	r3, 407590 <__aeabi_uldivmod+0x18>
  40757a:	b94a      	cbnz	r2, 407590 <__aeabi_uldivmod+0x18>
  40757c:	2900      	cmp	r1, #0
  40757e:	bf08      	it	eq
  407580:	2800      	cmpeq	r0, #0
  407582:	bf1c      	itt	ne
  407584:	f04f 31ff 	movne.w	r1, #4294967295
  407588:	f04f 30ff 	movne.w	r0, #4294967295
  40758c:	f000 b97a 	b.w	407884 <__aeabi_idiv0>
  407590:	f1ad 0c08 	sub.w	ip, sp, #8
  407594:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407598:	f000 f806 	bl	4075a8 <__udivmoddi4>
  40759c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4075a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4075a4:	b004      	add	sp, #16
  4075a6:	4770      	bx	lr

004075a8 <__udivmoddi4>:
  4075a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4075ac:	468c      	mov	ip, r1
  4075ae:	460d      	mov	r5, r1
  4075b0:	4604      	mov	r4, r0
  4075b2:	9e08      	ldr	r6, [sp, #32]
  4075b4:	2b00      	cmp	r3, #0
  4075b6:	d151      	bne.n	40765c <__udivmoddi4+0xb4>
  4075b8:	428a      	cmp	r2, r1
  4075ba:	4617      	mov	r7, r2
  4075bc:	d96d      	bls.n	40769a <__udivmoddi4+0xf2>
  4075be:	fab2 fe82 	clz	lr, r2
  4075c2:	f1be 0f00 	cmp.w	lr, #0
  4075c6:	d00b      	beq.n	4075e0 <__udivmoddi4+0x38>
  4075c8:	f1ce 0c20 	rsb	ip, lr, #32
  4075cc:	fa01 f50e 	lsl.w	r5, r1, lr
  4075d0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4075d4:	fa02 f70e 	lsl.w	r7, r2, lr
  4075d8:	ea4c 0c05 	orr.w	ip, ip, r5
  4075dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4075e0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4075e4:	0c25      	lsrs	r5, r4, #16
  4075e6:	fbbc f8fa 	udiv	r8, ip, sl
  4075ea:	fa1f f987 	uxth.w	r9, r7
  4075ee:	fb0a cc18 	mls	ip, sl, r8, ip
  4075f2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4075f6:	fb08 f309 	mul.w	r3, r8, r9
  4075fa:	42ab      	cmp	r3, r5
  4075fc:	d90a      	bls.n	407614 <__udivmoddi4+0x6c>
  4075fe:	19ed      	adds	r5, r5, r7
  407600:	f108 32ff 	add.w	r2, r8, #4294967295
  407604:	f080 8123 	bcs.w	40784e <__udivmoddi4+0x2a6>
  407608:	42ab      	cmp	r3, r5
  40760a:	f240 8120 	bls.w	40784e <__udivmoddi4+0x2a6>
  40760e:	f1a8 0802 	sub.w	r8, r8, #2
  407612:	443d      	add	r5, r7
  407614:	1aed      	subs	r5, r5, r3
  407616:	b2a4      	uxth	r4, r4
  407618:	fbb5 f0fa 	udiv	r0, r5, sl
  40761c:	fb0a 5510 	mls	r5, sl, r0, r5
  407620:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  407624:	fb00 f909 	mul.w	r9, r0, r9
  407628:	45a1      	cmp	r9, r4
  40762a:	d909      	bls.n	407640 <__udivmoddi4+0x98>
  40762c:	19e4      	adds	r4, r4, r7
  40762e:	f100 33ff 	add.w	r3, r0, #4294967295
  407632:	f080 810a 	bcs.w	40784a <__udivmoddi4+0x2a2>
  407636:	45a1      	cmp	r9, r4
  407638:	f240 8107 	bls.w	40784a <__udivmoddi4+0x2a2>
  40763c:	3802      	subs	r0, #2
  40763e:	443c      	add	r4, r7
  407640:	eba4 0409 	sub.w	r4, r4, r9
  407644:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407648:	2100      	movs	r1, #0
  40764a:	2e00      	cmp	r6, #0
  40764c:	d061      	beq.n	407712 <__udivmoddi4+0x16a>
  40764e:	fa24 f40e 	lsr.w	r4, r4, lr
  407652:	2300      	movs	r3, #0
  407654:	6034      	str	r4, [r6, #0]
  407656:	6073      	str	r3, [r6, #4]
  407658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40765c:	428b      	cmp	r3, r1
  40765e:	d907      	bls.n	407670 <__udivmoddi4+0xc8>
  407660:	2e00      	cmp	r6, #0
  407662:	d054      	beq.n	40770e <__udivmoddi4+0x166>
  407664:	2100      	movs	r1, #0
  407666:	e886 0021 	stmia.w	r6, {r0, r5}
  40766a:	4608      	mov	r0, r1
  40766c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407670:	fab3 f183 	clz	r1, r3
  407674:	2900      	cmp	r1, #0
  407676:	f040 808e 	bne.w	407796 <__udivmoddi4+0x1ee>
  40767a:	42ab      	cmp	r3, r5
  40767c:	d302      	bcc.n	407684 <__udivmoddi4+0xdc>
  40767e:	4282      	cmp	r2, r0
  407680:	f200 80fa 	bhi.w	407878 <__udivmoddi4+0x2d0>
  407684:	1a84      	subs	r4, r0, r2
  407686:	eb65 0503 	sbc.w	r5, r5, r3
  40768a:	2001      	movs	r0, #1
  40768c:	46ac      	mov	ip, r5
  40768e:	2e00      	cmp	r6, #0
  407690:	d03f      	beq.n	407712 <__udivmoddi4+0x16a>
  407692:	e886 1010 	stmia.w	r6, {r4, ip}
  407696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40769a:	b912      	cbnz	r2, 4076a2 <__udivmoddi4+0xfa>
  40769c:	2701      	movs	r7, #1
  40769e:	fbb7 f7f2 	udiv	r7, r7, r2
  4076a2:	fab7 fe87 	clz	lr, r7
  4076a6:	f1be 0f00 	cmp.w	lr, #0
  4076aa:	d134      	bne.n	407716 <__udivmoddi4+0x16e>
  4076ac:	1beb      	subs	r3, r5, r7
  4076ae:	0c3a      	lsrs	r2, r7, #16
  4076b0:	fa1f fc87 	uxth.w	ip, r7
  4076b4:	2101      	movs	r1, #1
  4076b6:	fbb3 f8f2 	udiv	r8, r3, r2
  4076ba:	0c25      	lsrs	r5, r4, #16
  4076bc:	fb02 3318 	mls	r3, r2, r8, r3
  4076c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4076c4:	fb0c f308 	mul.w	r3, ip, r8
  4076c8:	42ab      	cmp	r3, r5
  4076ca:	d907      	bls.n	4076dc <__udivmoddi4+0x134>
  4076cc:	19ed      	adds	r5, r5, r7
  4076ce:	f108 30ff 	add.w	r0, r8, #4294967295
  4076d2:	d202      	bcs.n	4076da <__udivmoddi4+0x132>
  4076d4:	42ab      	cmp	r3, r5
  4076d6:	f200 80d1 	bhi.w	40787c <__udivmoddi4+0x2d4>
  4076da:	4680      	mov	r8, r0
  4076dc:	1aed      	subs	r5, r5, r3
  4076de:	b2a3      	uxth	r3, r4
  4076e0:	fbb5 f0f2 	udiv	r0, r5, r2
  4076e4:	fb02 5510 	mls	r5, r2, r0, r5
  4076e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4076ec:	fb0c fc00 	mul.w	ip, ip, r0
  4076f0:	45a4      	cmp	ip, r4
  4076f2:	d907      	bls.n	407704 <__udivmoddi4+0x15c>
  4076f4:	19e4      	adds	r4, r4, r7
  4076f6:	f100 33ff 	add.w	r3, r0, #4294967295
  4076fa:	d202      	bcs.n	407702 <__udivmoddi4+0x15a>
  4076fc:	45a4      	cmp	ip, r4
  4076fe:	f200 80b8 	bhi.w	407872 <__udivmoddi4+0x2ca>
  407702:	4618      	mov	r0, r3
  407704:	eba4 040c 	sub.w	r4, r4, ip
  407708:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40770c:	e79d      	b.n	40764a <__udivmoddi4+0xa2>
  40770e:	4631      	mov	r1, r6
  407710:	4630      	mov	r0, r6
  407712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407716:	f1ce 0420 	rsb	r4, lr, #32
  40771a:	fa05 f30e 	lsl.w	r3, r5, lr
  40771e:	fa07 f70e 	lsl.w	r7, r7, lr
  407722:	fa20 f804 	lsr.w	r8, r0, r4
  407726:	0c3a      	lsrs	r2, r7, #16
  407728:	fa25 f404 	lsr.w	r4, r5, r4
  40772c:	ea48 0803 	orr.w	r8, r8, r3
  407730:	fbb4 f1f2 	udiv	r1, r4, r2
  407734:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407738:	fb02 4411 	mls	r4, r2, r1, r4
  40773c:	fa1f fc87 	uxth.w	ip, r7
  407740:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407744:	fb01 f30c 	mul.w	r3, r1, ip
  407748:	42ab      	cmp	r3, r5
  40774a:	fa00 f40e 	lsl.w	r4, r0, lr
  40774e:	d909      	bls.n	407764 <__udivmoddi4+0x1bc>
  407750:	19ed      	adds	r5, r5, r7
  407752:	f101 30ff 	add.w	r0, r1, #4294967295
  407756:	f080 808a 	bcs.w	40786e <__udivmoddi4+0x2c6>
  40775a:	42ab      	cmp	r3, r5
  40775c:	f240 8087 	bls.w	40786e <__udivmoddi4+0x2c6>
  407760:	3902      	subs	r1, #2
  407762:	443d      	add	r5, r7
  407764:	1aeb      	subs	r3, r5, r3
  407766:	fa1f f588 	uxth.w	r5, r8
  40776a:	fbb3 f0f2 	udiv	r0, r3, r2
  40776e:	fb02 3310 	mls	r3, r2, r0, r3
  407772:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407776:	fb00 f30c 	mul.w	r3, r0, ip
  40777a:	42ab      	cmp	r3, r5
  40777c:	d907      	bls.n	40778e <__udivmoddi4+0x1e6>
  40777e:	19ed      	adds	r5, r5, r7
  407780:	f100 38ff 	add.w	r8, r0, #4294967295
  407784:	d26f      	bcs.n	407866 <__udivmoddi4+0x2be>
  407786:	42ab      	cmp	r3, r5
  407788:	d96d      	bls.n	407866 <__udivmoddi4+0x2be>
  40778a:	3802      	subs	r0, #2
  40778c:	443d      	add	r5, r7
  40778e:	1aeb      	subs	r3, r5, r3
  407790:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  407794:	e78f      	b.n	4076b6 <__udivmoddi4+0x10e>
  407796:	f1c1 0720 	rsb	r7, r1, #32
  40779a:	fa22 f807 	lsr.w	r8, r2, r7
  40779e:	408b      	lsls	r3, r1
  4077a0:	fa05 f401 	lsl.w	r4, r5, r1
  4077a4:	ea48 0303 	orr.w	r3, r8, r3
  4077a8:	fa20 fe07 	lsr.w	lr, r0, r7
  4077ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4077b0:	40fd      	lsrs	r5, r7
  4077b2:	ea4e 0e04 	orr.w	lr, lr, r4
  4077b6:	fbb5 f9fc 	udiv	r9, r5, ip
  4077ba:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4077be:	fb0c 5519 	mls	r5, ip, r9, r5
  4077c2:	fa1f f883 	uxth.w	r8, r3
  4077c6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4077ca:	fb09 f408 	mul.w	r4, r9, r8
  4077ce:	42ac      	cmp	r4, r5
  4077d0:	fa02 f201 	lsl.w	r2, r2, r1
  4077d4:	fa00 fa01 	lsl.w	sl, r0, r1
  4077d8:	d908      	bls.n	4077ec <__udivmoddi4+0x244>
  4077da:	18ed      	adds	r5, r5, r3
  4077dc:	f109 30ff 	add.w	r0, r9, #4294967295
  4077e0:	d243      	bcs.n	40786a <__udivmoddi4+0x2c2>
  4077e2:	42ac      	cmp	r4, r5
  4077e4:	d941      	bls.n	40786a <__udivmoddi4+0x2c2>
  4077e6:	f1a9 0902 	sub.w	r9, r9, #2
  4077ea:	441d      	add	r5, r3
  4077ec:	1b2d      	subs	r5, r5, r4
  4077ee:	fa1f fe8e 	uxth.w	lr, lr
  4077f2:	fbb5 f0fc 	udiv	r0, r5, ip
  4077f6:	fb0c 5510 	mls	r5, ip, r0, r5
  4077fa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4077fe:	fb00 f808 	mul.w	r8, r0, r8
  407802:	45a0      	cmp	r8, r4
  407804:	d907      	bls.n	407816 <__udivmoddi4+0x26e>
  407806:	18e4      	adds	r4, r4, r3
  407808:	f100 35ff 	add.w	r5, r0, #4294967295
  40780c:	d229      	bcs.n	407862 <__udivmoddi4+0x2ba>
  40780e:	45a0      	cmp	r8, r4
  407810:	d927      	bls.n	407862 <__udivmoddi4+0x2ba>
  407812:	3802      	subs	r0, #2
  407814:	441c      	add	r4, r3
  407816:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40781a:	eba4 0408 	sub.w	r4, r4, r8
  40781e:	fba0 8902 	umull	r8, r9, r0, r2
  407822:	454c      	cmp	r4, r9
  407824:	46c6      	mov	lr, r8
  407826:	464d      	mov	r5, r9
  407828:	d315      	bcc.n	407856 <__udivmoddi4+0x2ae>
  40782a:	d012      	beq.n	407852 <__udivmoddi4+0x2aa>
  40782c:	b156      	cbz	r6, 407844 <__udivmoddi4+0x29c>
  40782e:	ebba 030e 	subs.w	r3, sl, lr
  407832:	eb64 0405 	sbc.w	r4, r4, r5
  407836:	fa04 f707 	lsl.w	r7, r4, r7
  40783a:	40cb      	lsrs	r3, r1
  40783c:	431f      	orrs	r7, r3
  40783e:	40cc      	lsrs	r4, r1
  407840:	6037      	str	r7, [r6, #0]
  407842:	6074      	str	r4, [r6, #4]
  407844:	2100      	movs	r1, #0
  407846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40784a:	4618      	mov	r0, r3
  40784c:	e6f8      	b.n	407640 <__udivmoddi4+0x98>
  40784e:	4690      	mov	r8, r2
  407850:	e6e0      	b.n	407614 <__udivmoddi4+0x6c>
  407852:	45c2      	cmp	sl, r8
  407854:	d2ea      	bcs.n	40782c <__udivmoddi4+0x284>
  407856:	ebb8 0e02 	subs.w	lr, r8, r2
  40785a:	eb69 0503 	sbc.w	r5, r9, r3
  40785e:	3801      	subs	r0, #1
  407860:	e7e4      	b.n	40782c <__udivmoddi4+0x284>
  407862:	4628      	mov	r0, r5
  407864:	e7d7      	b.n	407816 <__udivmoddi4+0x26e>
  407866:	4640      	mov	r0, r8
  407868:	e791      	b.n	40778e <__udivmoddi4+0x1e6>
  40786a:	4681      	mov	r9, r0
  40786c:	e7be      	b.n	4077ec <__udivmoddi4+0x244>
  40786e:	4601      	mov	r1, r0
  407870:	e778      	b.n	407764 <__udivmoddi4+0x1bc>
  407872:	3802      	subs	r0, #2
  407874:	443c      	add	r4, r7
  407876:	e745      	b.n	407704 <__udivmoddi4+0x15c>
  407878:	4608      	mov	r0, r1
  40787a:	e708      	b.n	40768e <__udivmoddi4+0xe6>
  40787c:	f1a8 0802 	sub.w	r8, r8, #2
  407880:	443d      	add	r5, r7
  407882:	e72b      	b.n	4076dc <__udivmoddi4+0x134>

00407884 <__aeabi_idiv0>:
  407884:	4770      	bx	lr
  407886:	bf00      	nop

00407888 <mmc_trans_multipliers>:
  407888:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  407898:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  4078a8:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  4078b8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

004078c8 <sd_mmc_trans_units>:
  4078c8:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

004078e4 <sd_trans_multipliers>:
  4078e4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  4078f4:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  407904:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  407914:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00407924 <LfnOfs>:
  407924:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

00407934 <excvt.5681>:
  407934:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  407944:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  407954:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  407964:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  407974:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  407984:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  407994:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  4079a4:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  4079b4:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  4079c4:	5d5b 0000                                   []..

004079c8 <Tbl>:
  4079c8:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  4079d8:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  4079e8:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  4079f8:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  407a08:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  407a18:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  407a28:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  407a38:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  407a48:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  407a58:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  407a68:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  407a78:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  407a88:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  407a98:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  407aa8:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  407ab8:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00407ac8 <tbl_lower.5431>:
  407ac8:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  407ad8:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  407ae8:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  407af8:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  407b08:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  407b18:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  407b28:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  407b38:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  407b48:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  407b58:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  407b68:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  407b78:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  407b88:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  407b98:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  407ba8:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  407bb8:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  407bc8:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  407bd8:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  407be8:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  407bf8:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  407c08:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  407c18:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  407c28:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  407c38:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  407c48:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  407c58:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  407c68:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  407c78:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  407c88:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  407c98:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00407ca8 <tbl_upper.5432>:
  407ca8:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  407cb8:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  407cc8:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  407cd8:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  407ce8:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  407cf8:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  407d08:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  407d18:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  407d28:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  407d38:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  407d48:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  407d58:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  407d68:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  407d78:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  407d88:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  407d98:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  407da8:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  407db8:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  407dc8:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  407dd8:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  407de8:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  407df8:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  407e08:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  407e18:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  407e28:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  407e38:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  407e48:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  407e58:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  407e68:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  407e78:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  407e88:	6544 6f6d 6420 206f 6573 736e 726f 4220     Demo do sensor B
  407e98:	454d 3832 2c30 7320 6d65 6320 6c61 6269     ME280, sem calib
  407ea8:	6172 6163 216f 0a20 0000 0000 0a0c 2d0d     racao! ........-
  407eb8:	202d 4453 4d2f 434d 532f 4944 204f 6143     - SD/MMC/SDIO Ca
  407ec8:	6472 4520 6178 706d 656c 6f20 206e 6146     rd Example on Fa
  407ed8:	4674 2073 2d2d 0d0a 0000 0000 3631 343a     tFs --......16:4
  407ee8:	3a39 3635 0000 0000 754a 206e 3031 3220     9:56....Jun 10 2
  407ef8:	3130 0039 2d2d 4320 6d6f 6970 656c 3a64     019.-- Compiled:
  407f08:	2520 2073 7325 2d20 0a2d 000d 6e49 6369      %s %s --...Inic
  407f18:	6169 696c 617a 646e 206f 7562 2073 3269     ializando bus i2
  407f28:	2063 000a 6843 7069 6e20 6f61 6520 636e     c ..Chip nao enc
  407f38:	6e6f 7274 6461 0a6f 0000 0000 6843 7069     ontrado.....Chip
  407f48:	6520 636e 6e6f 7274 6461 2c6f 6920 696e      encontrado, ini
  407f58:	6963 6c61 7a69 6e61 6f64 7420 6d65 6570     cializando tempe
  407f68:	6172 7574 6172 0a20 0000 0000 7265 6f72     ratura .....erro
  407f78:	7220 6165 6964 476e 7420 6d65 6570 6172      readinG tempera
  407f88:	7574 6572 0a20 0000 6554 706d 7265 7461     ture ...Temperat
  407f98:	7275 3a61 2520 2064 000a 0000 7265 6f72     ura: %d ....erro
  407fa8:	6820 6d75 6469 6461 0065 0000 7548 696d      humidade...Humi
  407fb8:	6164 6564 203a 6425 0a20 0000 7265 6f72     dade: %d ...erro
  407fc8:	7020 6572 7373 0000 7270 7365 6173 3a6f      press..pressao:
  407fd8:	2520 2064 000a 0000 6c50 6165 6573 7020      %d ....Please p
  407fe8:	756c 2067 6e61 5320 2c44 4d20 434d 6f20     lug an SD, MMC o
  407ff8:	2072 4453 4f49 6320 7261 2064 6e69 7320     r SDIO card in s
  408008:	6f6c 2e74 0d0a 0000 6143 6472 6920 736e     lot.....Card ins
  408018:	6174 6c6c 4620 4941 0a4c 000d 6c50 6165     tall FAIL...Plea
  408028:	6573 7520 706e 756c 2067 6e61 2064 6572     se unplug and re
  408038:	702d 756c 2067 6874 2065 6163 6472 0a2e     -plug the card..
  408048:	000d 0000 6f4d 6e75 2074 6964 6b73 2820     ....Mount disk (
  408058:	5f66 6f6d 6e75 2974 2e2e 0d2e 000a 0000     f_mount)........
  408068:	465b 4941 5d4c 7220 7365 2520 0d64 000a     [FAIL] res %d...
  408078:	4f5b 5d4b 0a0d 0000 7243 6165 6574 6120     [OK]....Create a
  408088:	6620 6c69 2065 6628 6f5f 6570 296e 2e2e      file (f_open)..
  408098:	0d2e 000a 7257 7469 2065 6f74 7420 7365     ....Write to tes
  4080a8:	2074 6966 656c 2820 5f66 7570 7374 2e29     t file (f_puts).
  4080b8:	2e2e 0a0d 0000 0000 6554 7473 5320 2f44     ........Test SD/
  4080c8:	4d4d 2043 7473 6361 0a6b 0000 465b 4941     MMC stack...[FAI
  4080d8:	5d4c 0a0d 0000 0000 6554 7473 6920 2073     L]......Test is 
  4080e8:	7573 6363 7365 6673 6c75 0a2e 000d 0000     successful......
  4080f8:	6c50 6165 6573 7520 706e 756c 2067 6874     Please unplug th
  408108:	2065 6163 6472 0a2e 000d 0000 3a30 6473     e card......0:sd
  408118:	6d5f 636d 745f 7365 2e74 7874 0074 0000     _mmc_test.txt...

00408128 <_global_impure_ptr>:
  408128:	0040 2040 3130 3332 3534 3736 3938 4241     @.@ 0123456789AB
  408138:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  408148:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  408158:	296c 0000                                   l)..

0040815c <blanks.7217>:
  40815c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040816c <zeroes.7218>:
  40816c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40817c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040818c <_ctype_>:
  40818c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40819c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4081ac:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4081bc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4081cc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4081dc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4081ec:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4081fc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40820c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00408290 <_init>:
  408290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408292:	bf00      	nop
  408294:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408296:	bc08      	pop	{r3}
  408298:	469e      	mov	lr, r3
  40829a:	4770      	bx	lr

0040829c <__init_array_start>:
  40829c:	004059f5 	.word	0x004059f5

004082a0 <__frame_dummy_init_array_entry>:
  4082a0:	00400165                                e.@.

004082a4 <_fini>:
  4082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4082a6:	bf00      	nop
  4082a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4082aa:	bc08      	pop	{r3}
  4082ac:	469e      	mov	lr, r3
  4082ae:	4770      	bx	lr

004082b0 <__fini_array_start>:
  4082b0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <g_interrupt_enabled>:
20400030:	0001 0000                                   ....

20400034 <SystemCoreClock>:
20400034:	0900 003d                                   ..=.

20400038 <_impure_ptr>:
20400038:	0040 2040 0000 0000                         @.@ ....

20400040 <impure_data>:
20400040:	0000 0000 032c 2040 0394 2040 03fc 2040     ....,.@ ..@ ..@ 
	...
204000e8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000f8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400468 <__atexit_recursive_mutex>:
20400468:	0afc 2040                                   ..@ 

2040046c <__global_locale>:
2040046c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040048c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040050c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040052c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040054c:	72e1 0040 69ed 0040 0000 0000 818c 0040     .r@..i@.......@.
2040055c:	8188 0040 80bc 0040 80bc 0040 80bc 0040     ..@...@...@...@.
2040056c:	80bc 0040 80bc 0040 80bc 0040 80bc 0040     ..@...@...@...@.
2040057c:	80bc 0040 80bc 0040 ffff ffff ffff ffff     ..@...@.........
2040058c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005b4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005d8 <__malloc_av_>:
	...
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 
204009d0:	09c8 2040 09c8 2040 09d0 2040 09d0 2040     ..@ ..@ ..@ ..@ 

204009e0 <__malloc_sbrk_base>:
204009e0:	ffff ffff                                   ....

204009e4 <__malloc_trim_threshold>:
204009e4:	0000 0002                                   ....
