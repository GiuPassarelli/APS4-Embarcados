
SD-CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dc5c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040dc5c  0040dc5c  0001dc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009f0  20400000  0040dc64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bae8  204009f0  0040e654  000209f0  2**2
                  ALLOC
  4 .stack        00002000  2040c4d8  0041a13c  000209f0  2**0
                  ALLOC
  5 .heap         00000200  2040e4d8  0041c13c  000209f0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209f0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a1e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002fdab  00000000  00000000  00020a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000624b  00000000  00000000  00050822  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013e6f  00000000  00000000  00056a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001528  00000000  00000000  0006a8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000018e0  00000000  00000000  0006be04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00028c96  00000000  00000000  0006d6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019d70  00000000  00000000  0009637a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009d2f9  00000000  00000000  000b00ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004950  00000000  00000000  0014d3e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 e4 40 20 75 25 40 00 73 25 40 00 73 25 40 00     ..@ u%@.s%@.s%@.
  400010:	73 25 40 00 73 25 40 00 73 25 40 00 00 00 00 00     s%@.s%@.s%@.....
	...
  40002c:	59 44 40 00 73 25 40 00 00 00 00 00 f9 44 40 00     YD@.s%@......D@.
  40003c:	61 45 40 00 73 25 40 00 73 25 40 00 6d 68 40 00     aE@.s%@.s%@.mh@.
  40004c:	73 25 40 00 73 25 40 00 73 25 40 00 73 25 40 00     s%@.s%@.s%@.s%@.
  40005c:	73 25 40 00 73 25 40 00 00 00 00 00 d5 1d 40 00     s%@.s%@.......@.
  40006c:	e9 1d 40 00 fd 1d 40 00 73 25 40 00 73 25 40 00     ..@...@.s%@.s%@.
  40007c:	73 25 40 00 11 1e 40 00 25 1e 40 00 73 25 40 00     s%@...@.%.@.s%@.
  40008c:	73 25 40 00 73 25 40 00 73 25 40 00 73 25 40 00     s%@.s%@.s%@.s%@.
  40009c:	73 25 40 00 73 25 40 00 73 25 40 00 73 25 40 00     s%@.s%@.s%@.s%@.
  4000ac:	73 25 40 00 73 25 40 00 73 25 40 00 73 25 40 00     s%@.s%@.s%@.s%@.
  4000bc:	73 25 40 00 73 25 40 00 73 25 40 00 73 25 40 00     s%@.s%@.s%@.s%@.
  4000cc:	73 25 40 00 00 00 00 00 73 25 40 00 00 00 00 00     s%@.....s%@.....
  4000dc:	73 25 40 00 73 25 40 00 73 25 40 00 73 25 40 00     s%@.s%@.s%@.s%@.
  4000ec:	73 25 40 00 73 25 40 00 73 25 40 00 73 25 40 00     s%@.s%@.s%@.s%@.
  4000fc:	73 25 40 00 73 25 40 00 73 25 40 00 73 25 40 00     s%@.s%@.s%@.s%@.
  40010c:	73 25 40 00 73 25 40 00 00 00 00 00 00 00 00 00     s%@.s%@.........
  40011c:	00 00 00 00 73 25 40 00 73 25 40 00 73 25 40 00     ....s%@.s%@.s%@.
  40012c:	73 25 40 00 73 25 40 00 00 00 00 00 73 25 40 00     s%@.s%@.....s%@.
  40013c:	73 25 40 00                                         s%@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009f0 	.word	0x204009f0
  40015c:	00000000 	.word	0x00000000
  400160:	0040dc64 	.word	0x0040dc64

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040dc64 	.word	0x0040dc64
  4001a0:	204009f4 	.word	0x204009f4
  4001a4:	0040dc64 	.word	0x0040dc64
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001b6:	3300      	adds	r3, #0
  4001b8:	bf18      	it	ne
  4001ba:	2301      	movne	r3, #1
  4001bc:	7c4a      	ldrb	r2, [r1, #17]
  4001be:	6809      	ldr	r1, [r1, #0]
  4001c0:	4803      	ldr	r0, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c2:	7800      	ldrb	r0, [r0, #0]
  4001c4:	4c03      	ldr	r4, [pc, #12]	; (4001d4 <sd_mmc_configure_slot+0x28>)
  4001c6:	47a0      	blx	r4
  4001c8:	bd10      	pop	{r4, pc}
  4001ca:	bf00      	nop
  4001cc:	20400a0c 	.word	0x20400a0c
  4001d0:	20400a15 	.word	0x20400a15
  4001d4:	00401665 	.word	0x00401665

004001d8 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d8:	b108      	cbz	r0, 4001de <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001da:	2004      	movs	r0, #4
  4001dc:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001de:	4b32      	ldr	r3, [pc, #200]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001e0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001e2:	4b32      	ldr	r3, [pc, #200]	; (4002ac <sd_mmc_select_slot+0xd4>)
  4001e4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001e8:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4001ec:	f002 021f 	and.w	r2, r2, #31
  4001f0:	2301      	movs	r3, #1
  4001f2:	fa03 f202 	lsl.w	r2, r3, r2
  4001f6:	420a      	tst	r2, r1
  4001f8:	d010      	beq.n	40021c <sd_mmc_select_slot+0x44>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001fc:	7b9b      	ldrb	r3, [r3, #14]
  4001fe:	2b01      	cmp	r3, #1
  400200:	d004      	beq.n	40020c <sd_mmc_select_slot+0x34>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400202:	2204      	movs	r2, #4
  400204:	4b28      	ldr	r3, [pc, #160]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400206:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400208:	2002      	movs	r0, #2
  40020a:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  40020c:	4b28      	ldr	r3, [pc, #160]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  40020e:	781b      	ldrb	r3, [r3, #0]
  400210:	2b00      	cmp	r3, #0
  400212:	d0f6      	beq.n	400202 <sd_mmc_select_slot+0x2a>
		SysTick->CTRL = 0;
  400214:	2200      	movs	r2, #0
  400216:	4b27      	ldr	r3, [pc, #156]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400218:	601a      	str	r2, [r3, #0]
  40021a:	e7f2      	b.n	400202 <sd_mmc_select_slot+0x2a>
{
  40021c:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  40021e:	4b22      	ldr	r3, [pc, #136]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400220:	7b9b      	ldrb	r3, [r3, #14]
  400222:	2b04      	cmp	r3, #4
  400224:	d005      	beq.n	400232 <sd_mmc_select_slot+0x5a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400226:	2b01      	cmp	r3, #1
  400228:	d019      	beq.n	40025e <sd_mmc_select_slot+0x86>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  40022a:	2b03      	cmp	r3, #3
  40022c:	d12c      	bne.n	400288 <sd_mmc_select_slot+0xb0>
		return SD_MMC_ERR_UNUSABLE;
  40022e:	2003      	movs	r0, #3
  400230:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400232:	2201      	movs	r2, #1
  400234:	4b1c      	ldr	r3, [pc, #112]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400236:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  400238:	4b1e      	ldr	r3, [pc, #120]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	b93b      	cbnz	r3, 40024e <sd_mmc_select_slot+0x76>
		sd_mmc_sam_systick_used = true;
  40023e:	4b1c      	ldr	r3, [pc, #112]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400240:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400242:	4b1c      	ldr	r3, [pc, #112]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400244:	491c      	ldr	r1, [pc, #112]	; (4002b8 <sd_mmc_select_slot+0xe0>)
  400246:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400248:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  40024a:	2002      	movs	r0, #2
  40024c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40024e:	2200      	movs	r2, #0
  400250:	4b17      	ldr	r3, [pc, #92]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400252:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400254:	4819      	ldr	r0, [pc, #100]	; (4002bc <sd_mmc_select_slot+0xe4>)
  400256:	4b1a      	ldr	r3, [pc, #104]	; (4002c0 <sd_mmc_select_slot+0xe8>)
  400258:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  40025a:	2002      	movs	r0, #2
  40025c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40025e:	4b14      	ldr	r3, [pc, #80]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400260:	781b      	ldrb	r3, [r3, #0]
  400262:	b13b      	cbz	r3, 400274 <sd_mmc_select_slot+0x9c>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400264:	4b13      	ldr	r3, [pc, #76]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400266:	681b      	ldr	r3, [r3, #0]
  400268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40026c:	d01a      	beq.n	4002a4 <sd_mmc_select_slot+0xcc>
		SysTick->CTRL = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b10      	ldr	r3, [pc, #64]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400272:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400274:	4b0c      	ldr	r3, [pc, #48]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400276:	2202      	movs	r2, #2
  400278:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40027a:	4a12      	ldr	r2, [pc, #72]	; (4002c4 <sd_mmc_select_slot+0xec>)
  40027c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40027e:	2201      	movs	r2, #1
  400280:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400282:	2200      	movs	r2, #0
  400284:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  400288:	2200      	movs	r2, #0
  40028a:	4b0f      	ldr	r3, [pc, #60]	; (4002c8 <sd_mmc_select_slot+0xf0>)
  40028c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40028e:	4c06      	ldr	r4, [pc, #24]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400290:	4b0e      	ldr	r3, [pc, #56]	; (4002cc <sd_mmc_select_slot+0xf4>)
  400292:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400294:	4b0e      	ldr	r3, [pc, #56]	; (4002d0 <sd_mmc_select_slot+0xf8>)
  400296:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400298:	7ba0      	ldrb	r0, [r4, #14]
  40029a:	2802      	cmp	r0, #2
  40029c:	bf14      	ite	ne
  40029e:	2000      	movne	r0, #0
  4002a0:	2001      	moveq	r0, #1
  4002a2:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  4002a4:	2002      	movs	r0, #2
  4002a6:	bd10      	pop	{r4, pc}
  4002a8:	2040000c 	.word	0x2040000c
  4002ac:	00200707 	.word	0x00200707
  4002b0:	20400a14 	.word	0x20400a14
  4002b4:	e000e010 	.word	0xe000e010
  4002b8:	023c3460 	.word	0x023c3460
  4002bc:	0303af6b 	.word	0x0303af6b
  4002c0:	20400001 	.word	0x20400001
  4002c4:	00061a80 	.word	0x00061a80
  4002c8:	20400a15 	.word	0x20400a15
  4002cc:	20400a0c 	.word	0x20400a0c
  4002d0:	004001ad 	.word	0x004001ad

004002d4 <sdio_cmd52>:
{
  4002d4:	b538      	push	{r3, r4, r5, lr}
  4002d6:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4002d8:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002da:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4002de:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4002e2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4002e6:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002e8:	4311      	orrs	r1, r2
  4002ea:	f241 3034 	movw	r0, #4916	; 0x1334
  4002ee:	4b05      	ldr	r3, [pc, #20]	; (400304 <sdio_cmd52+0x30>)
  4002f0:	4798      	blx	r3
  4002f2:	4605      	mov	r5, r0
  4002f4:	b908      	cbnz	r0, 4002fa <sdio_cmd52+0x26>
}
  4002f6:	4628      	mov	r0, r5
  4002f8:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  4002fa:	4b03      	ldr	r3, [pc, #12]	; (400308 <sdio_cmd52+0x34>)
  4002fc:	4798      	blx	r3
  4002fe:	7020      	strb	r0, [r4, #0]
	return true;
  400300:	e7f9      	b.n	4002f6 <sdio_cmd52+0x22>
  400302:	bf00      	nop
  400304:	0040174d 	.word	0x0040174d
  400308:	00401771 	.word	0x00401771

0040030c <sd_mmc_cmd9_mci>:
{
  40030c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40030e:	4b09      	ldr	r3, [pc, #36]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	8999      	ldrh	r1, [r3, #12]
  400314:	0409      	lsls	r1, r1, #16
  400316:	f641 3009 	movw	r0, #6921	; 0x1b09
  40031a:	4b07      	ldr	r3, [pc, #28]	; (400338 <sd_mmc_cmd9_mci+0x2c>)
  40031c:	4798      	blx	r3
  40031e:	4604      	mov	r4, r0
  400320:	b908      	cbnz	r0, 400326 <sd_mmc_cmd9_mci+0x1a>
}
  400322:	4620      	mov	r0, r4
  400324:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400326:	4b03      	ldr	r3, [pc, #12]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400328:	6818      	ldr	r0, [r3, #0]
  40032a:	3012      	adds	r0, #18
  40032c:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_cmd9_mci+0x30>)
  40032e:	4798      	blx	r3
	return true;
  400330:	e7f7      	b.n	400322 <sd_mmc_cmd9_mci+0x16>
  400332:	bf00      	nop
  400334:	20400a0c 	.word	0x20400a0c
  400338:	0040174d 	.word	0x0040174d
  40033c:	00401779 	.word	0x00401779

00400340 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400340:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400342:	4b04      	ldr	r3, [pc, #16]	; (400354 <sd_mmc_deselect_slot+0x14>)
  400344:	781b      	ldrb	r3, [r3, #0]
  400346:	b103      	cbz	r3, 40034a <sd_mmc_deselect_slot+0xa>
  400348:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40034a:	2000      	movs	r0, #0
  40034c:	4b02      	ldr	r3, [pc, #8]	; (400358 <sd_mmc_deselect_slot+0x18>)
  40034e:	4798      	blx	r3
	}
}
  400350:	e7fa      	b.n	400348 <sd_mmc_deselect_slot+0x8>
  400352:	bf00      	nop
  400354:	20400a15 	.word	0x20400a15
  400358:	00401729 	.word	0x00401729

0040035c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40035c:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  40035e:	2010      	movs	r0, #16
  400360:	4b05      	ldr	r3, [pc, #20]	; (400378 <sd_mmc_init+0x1c>)
  400362:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400364:	2204      	movs	r2, #4
  400366:	4b05      	ldr	r3, [pc, #20]	; (40037c <sd_mmc_init+0x20>)
  400368:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40036a:	22ff      	movs	r2, #255	; 0xff
  40036c:	4b04      	ldr	r3, [pc, #16]	; (400380 <sd_mmc_init+0x24>)
  40036e:	701a      	strb	r2, [r3, #0]
	driver_init();
  400370:	4b04      	ldr	r3, [pc, #16]	; (400384 <sd_mmc_init+0x28>)
  400372:	4798      	blx	r3
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	00401f59 	.word	0x00401f59
  40037c:	2040000c 	.word	0x2040000c
  400380:	20400a15 	.word	0x20400a15
  400384:	00401629 	.word	0x00401629

00400388 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40038c:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40038e:	4ba7      	ldr	r3, [pc, #668]	; (40062c <sd_mmc_check+0x2a4>)
  400390:	4798      	blx	r3
  400392:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400394:	2801      	cmp	r0, #1
  400396:	d005      	beq.n	4003a4 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  400398:	4ba5      	ldr	r3, [pc, #660]	; (400630 <sd_mmc_check+0x2a8>)
  40039a:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  40039c:	4620      	mov	r0, r4
  40039e:	b015      	add	sp, #84	; 0x54
  4003a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4003a4:	ae14      	add	r6, sp, #80	; 0x50
  4003a6:	2308      	movs	r3, #8
  4003a8:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4003ac:	4ba1      	ldr	r3, [pc, #644]	; (400634 <sd_mmc_check+0x2ac>)
  4003ae:	681b      	ldr	r3, [r3, #0]
  4003b0:	2701      	movs	r7, #1
  4003b2:	73df      	strb	r7, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4003b4:	2500      	movs	r5, #0
  4003b6:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  4003b8:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  4003ba:	4b9f      	ldr	r3, [pc, #636]	; (400638 <sd_mmc_check+0x2b0>)
  4003bc:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003be:	9600      	str	r6, [sp, #0]
  4003c0:	462b      	mov	r3, r5
  4003c2:	2206      	movs	r2, #6
  4003c4:	4629      	mov	r1, r5
  4003c6:	4638      	mov	r0, r7
  4003c8:	4e9c      	ldr	r6, [pc, #624]	; (40063c <sd_mmc_check+0x2b4>)
  4003ca:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003cc:	4629      	mov	r1, r5
  4003ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003d2:	4b9b      	ldr	r3, [pc, #620]	; (400640 <sd_mmc_check+0x2b8>)
  4003d4:	4798      	blx	r3
  4003d6:	b930      	cbnz	r0, 4003e6 <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4003d8:	4b96      	ldr	r3, [pc, #600]	; (400634 <sd_mmc_check+0x2ac>)
  4003da:	681b      	ldr	r3, [r3, #0]
  4003dc:	2403      	movs	r4, #3
  4003de:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  4003e0:	4b93      	ldr	r3, [pc, #588]	; (400630 <sd_mmc_check+0x2a8>)
  4003e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4003e4:	e7da      	b.n	40039c <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003ea:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ee:	4b94      	ldr	r3, [pc, #592]	; (400640 <sd_mmc_check+0x2b8>)
  4003f0:	4798      	blx	r3
  4003f2:	2800      	cmp	r0, #0
  4003f4:	f040 8093 	bne.w	40051e <sd_mmc_check+0x196>
	*v2 = 0;
  4003f8:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  4003fc:	2100      	movs	r1, #0
  4003fe:	f244 5005 	movw	r0, #17669	; 0x4505
  400402:	4b8f      	ldr	r3, [pc, #572]	; (400640 <sd_mmc_check+0x2b8>)
  400404:	4798      	blx	r3
  400406:	2800      	cmp	r0, #0
  400408:	f040 8097 	bne.w	40053a <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40040c:	4b89      	ldr	r3, [pc, #548]	; (400634 <sd_mmc_check+0x2ac>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	7bdb      	ldrb	r3, [r3, #15]
  400412:	f013 0f01 	tst.w	r3, #1
  400416:	f040 80b5 	bne.w	400584 <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40041a:	2100      	movs	r1, #0
  40041c:	f245 1003 	movw	r0, #20739	; 0x5103
  400420:	4b87      	ldr	r3, [pc, #540]	; (400640 <sd_mmc_check+0x2b8>)
  400422:	4798      	blx	r3
  400424:	2800      	cmp	r0, #0
  400426:	d0d7      	beq.n	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400428:	4d82      	ldr	r5, [pc, #520]	; (400634 <sd_mmc_check+0x2ac>)
  40042a:	682e      	ldr	r6, [r5, #0]
  40042c:	4b85      	ldr	r3, [pc, #532]	; (400644 <sd_mmc_check+0x2bc>)
  40042e:	4798      	blx	r3
  400430:	0c00      	lsrs	r0, r0, #16
  400432:	81b0      	strh	r0, [r6, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400434:	682b      	ldr	r3, [r5, #0]
  400436:	7bdb      	ldrb	r3, [r3, #15]
  400438:	f013 0f01 	tst.w	r3, #1
  40043c:	d034      	beq.n	4004a8 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  40043e:	4b82      	ldr	r3, [pc, #520]	; (400648 <sd_mmc_check+0x2c0>)
  400440:	4798      	blx	r3
  400442:	2800      	cmp	r0, #0
  400444:	d0c8      	beq.n	4003d8 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400446:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400448:	7d5a      	ldrb	r2, [r3, #21]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40044a:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40044e:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400452:	497e      	ldr	r1, [pc, #504]	; (40064c <sd_mmc_check+0x2c4>)
  400454:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40045c:	fb02 f201 	mul.w	r2, r2, r1
  400460:	497b      	ldr	r1, [pc, #492]	; (400650 <sd_mmc_check+0x2c8>)
  400462:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400466:	fb02 f201 	mul.w	r2, r2, r1
  40046a:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  40046c:	7c9a      	ldrb	r2, [r3, #18]
  40046e:	0992      	lsrs	r2, r2, #6
  400470:	f040 820c 	bne.w	40088c <sd_mmc_check+0x504>
  400474:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400476:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400478:	7e1a      	ldrb	r2, [r3, #24]
  40047a:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40047c:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  400480:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400484:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400486:	7ed9      	ldrb	r1, [r3, #27]
  400488:	0049      	lsls	r1, r1, #1
  40048a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40048e:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400492:	3201      	adds	r2, #1
  400494:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400498:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40049a:	408a      	lsls	r2, r1
  40049c:	7dd9      	ldrb	r1, [r3, #23]
  40049e:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4004a2:	408a      	lsls	r2, r1
				/ 1024;
  4004a4:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4004a6:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4004a8:	4b62      	ldr	r3, [pc, #392]	; (400634 <sd_mmc_check+0x2ac>)
  4004aa:	681b      	ldr	r3, [r3, #0]
  4004ac:	8999      	ldrh	r1, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4004ae:	0409      	lsls	r1, r1, #16
  4004b0:	f243 1007 	movw	r0, #12551	; 0x3107
  4004b4:	4b62      	ldr	r3, [pc, #392]	; (400640 <sd_mmc_check+0x2b8>)
  4004b6:	4798      	blx	r3
  4004b8:	2800      	cmp	r0, #0
  4004ba:	d08d      	beq.n	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4004bc:	4b5d      	ldr	r3, [pc, #372]	; (400634 <sd_mmc_check+0x2ac>)
  4004be:	681b      	ldr	r3, [r3, #0]
  4004c0:	7bda      	ldrb	r2, [r3, #15]
  4004c2:	f012 0f01 	tst.w	r2, #1
  4004c6:	f040 81ee 	bne.w	4008a6 <sd_mmc_check+0x51e>
	if (IS_SDIO()) {
  4004ca:	4b5a      	ldr	r3, [pc, #360]	; (400634 <sd_mmc_check+0x2ac>)
  4004cc:	681b      	ldr	r3, [r3, #0]
  4004ce:	7bdb      	ldrb	r3, [r3, #15]
  4004d0:	f013 0f04 	tst.w	r3, #4
  4004d4:	f000 829d 	beq.w	400a12 <sd_mmc_check+0x68a>
  4004d8:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4004da:	2700      	movs	r7, #0
  4004dc:	4e57      	ldr	r6, [pc, #348]	; (40063c <sd_mmc_check+0x2b4>)
  4004de:	f1a5 0309 	sub.w	r3, r5, #9
  4004e2:	aa03      	add	r2, sp, #12
  4004e4:	4413      	add	r3, r2
  4004e6:	9300      	str	r3, [sp, #0]
  4004e8:	463b      	mov	r3, r7
  4004ea:	462a      	mov	r2, r5
  4004ec:	4639      	mov	r1, r7
  4004ee:	4638      	mov	r0, r7
  4004f0:	47b0      	blx	r6
		addr_old++;
  4004f2:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4004f4:	2d0d      	cmp	r5, #13
  4004f6:	d1f2      	bne.n	4004de <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4004f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4004fc:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400500:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400504:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400508:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40050c:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400510:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  400514:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400516:	f04f 0800 	mov.w	r8, #0
  40051a:	4f48      	ldr	r7, [pc, #288]	; (40063c <sd_mmc_check+0x2b4>)
  40051c:	e23a      	b.n	400994 <sd_mmc_check+0x60c>
	resp = driver_get_response();
  40051e:	4b49      	ldr	r3, [pc, #292]	; (400644 <sd_mmc_check+0x2bc>)
  400520:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400522:	f1b0 3fff 	cmp.w	r0, #4294967295
  400526:	f000 834a 	beq.w	400bbe <sd_mmc_check+0x836>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  40052a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40052e:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  400532:	f47f af51 	bne.w	4003d8 <sd_mmc_check+0x50>
	*v2 = 1;
  400536:	46b9      	mov	r9, r7
  400538:	e760      	b.n	4003fc <sd_mmc_check+0x74>
	resp = driver_get_response();
  40053a:	4b42      	ldr	r3, [pc, #264]	; (400644 <sd_mmc_check+0x2bc>)
  40053c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  40053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  400542:	f43f af63 	beq.w	40040c <sd_mmc_check+0x84>
  400546:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40054a:	f244 5805 	movw	r8, #17669	; 0x4505
  40054e:	4e3c      	ldr	r6, [pc, #240]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400550:	4f3c      	ldr	r7, [pc, #240]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400552:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  400556:	4640      	mov	r0, r8
  400558:	47b0      	blx	r6
  40055a:	2800      	cmp	r0, #0
  40055c:	f43f af3c 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400560:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400562:	2800      	cmp	r0, #0
  400564:	db02      	blt.n	40056c <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  400566:	3d01      	subs	r5, #1
  400568:	d1f3      	bne.n	400552 <sd_mmc_check+0x1ca>
  40056a:	e735      	b.n	4003d8 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  40056c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400570:	d104      	bne.n	40057c <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400572:	4b30      	ldr	r3, [pc, #192]	; (400634 <sd_mmc_check+0x2ac>)
  400574:	681b      	ldr	r3, [r3, #0]
  400576:	2204      	movs	r2, #4
  400578:	73da      	strb	r2, [r3, #15]
  40057a:	e74e      	b.n	40041a <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40057c:	4b2d      	ldr	r3, [pc, #180]	; (400634 <sd_mmc_check+0x2ac>)
  40057e:	681b      	ldr	r3, [r3, #0]
  400580:	2205      	movs	r2, #5
  400582:	73da      	strb	r2, [r3, #15]
  400584:	f1b9 0f00 	cmp.w	r9, #0
  400588:	4f32      	ldr	r7, [pc, #200]	; (400654 <sd_mmc_check+0x2cc>)
  40058a:	bf14      	ite	ne
  40058c:	46b9      	movne	r9, r7
  40058e:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  400592:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400596:	f04f 0800 	mov.w	r8, #0
  40059a:	4e29      	ldr	r6, [pc, #164]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  40059c:	4f29      	ldr	r7, [pc, #164]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40059e:	4641      	mov	r1, r8
  4005a0:	f241 1037 	movw	r0, #4407	; 0x1137
  4005a4:	47b0      	blx	r6
  4005a6:	b148      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4005a8:	4649      	mov	r1, r9
  4005aa:	f244 5029 	movw	r0, #17705	; 0x4529
  4005ae:	47b0      	blx	r6
  4005b0:	b120      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		resp = driver_get_response();
  4005b2:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005b4:	2800      	cmp	r0, #0
  4005b6:	db20      	blt.n	4005fa <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4005b8:	3d01      	subs	r5, #1
  4005ba:	d1f0      	bne.n	40059e <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4005bc:	4b1d      	ldr	r3, [pc, #116]	; (400634 <sd_mmc_check+0x2ac>)
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	2202      	movs	r2, #2
  4005c2:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4005c4:	2100      	movs	r1, #0
  4005c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4005ca:	4b1d      	ldr	r3, [pc, #116]	; (400640 <sd_mmc_check+0x2b8>)
  4005cc:	4798      	blx	r3
  4005ce:	2800      	cmp	r0, #0
  4005d0:	f43f af02 	beq.w	4003d8 <sd_mmc_check+0x50>
  4005d4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005d8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400654 <sd_mmc_check+0x2cc>
  4005dc:	4e18      	ldr	r6, [pc, #96]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4005de:	4f19      	ldr	r7, [pc, #100]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005e0:	4641      	mov	r1, r8
  4005e2:	f244 5001 	movw	r0, #17665	; 0x4501
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f43f aef5 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  4005ee:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005f0:	2800      	cmp	r0, #0
  4005f2:	db31      	blt.n	400658 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  4005f4:	3d01      	subs	r5, #1
  4005f6:	d1f3      	bne.n	4005e0 <sd_mmc_check+0x258>
  4005f8:	e6ee      	b.n	4003d8 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  4005fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4005fe:	d005      	beq.n	40060c <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400600:	4b0c      	ldr	r3, [pc, #48]	; (400634 <sd_mmc_check+0x2ac>)
  400602:	681a      	ldr	r2, [r3, #0]
  400604:	7bd3      	ldrb	r3, [r2, #15]
  400606:	f043 0308 	orr.w	r3, r3, #8
  40060a:	73d3      	strb	r3, [r2, #15]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40060c:	4b09      	ldr	r3, [pc, #36]	; (400634 <sd_mmc_check+0x2ac>)
  40060e:	681b      	ldr	r3, [r3, #0]
  400610:	7bdb      	ldrb	r3, [r3, #15]
  400612:	f013 0f01 	tst.w	r3, #1
  400616:	f43f af00 	beq.w	40041a <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40061a:	2100      	movs	r1, #0
  40061c:	f645 3002 	movw	r0, #23298	; 0x5b02
  400620:	4b07      	ldr	r3, [pc, #28]	; (400640 <sd_mmc_check+0x2b8>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f47f aef8 	bne.w	40041a <sd_mmc_check+0x92>
  40062a:	e6d5      	b.n	4003d8 <sd_mmc_check+0x50>
  40062c:	004001d9 	.word	0x004001d9
  400630:	00400341 	.word	0x00400341
  400634:	20400a0c 	.word	0x20400a0c
  400638:	0040172b 	.word	0x0040172b
  40063c:	004002d5 	.word	0x004002d5
  400640:	0040174d 	.word	0x0040174d
  400644:	00401771 	.word	0x00401771
  400648:	0040030d 	.word	0x0040030d
  40064c:	0040d0b4 	.word	0x0040d0b4
  400650:	0040d0d0 	.word	0x0040d0d0
  400654:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400658:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40065c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400660:	d027      	beq.n	4006b2 <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400662:	2100      	movs	r1, #0
  400664:	f645 3002 	movw	r0, #23298	; 0x5b02
  400668:	4ba5      	ldr	r3, [pc, #660]	; (400900 <sd_mmc_check+0x578>)
  40066a:	4798      	blx	r3
  40066c:	2800      	cmp	r0, #0
  40066e:	f43f aeb3 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  400672:	4ba4      	ldr	r3, [pc, #656]	; (400904 <sd_mmc_check+0x57c>)
  400674:	681b      	ldr	r3, [r3, #0]
  400676:	2201      	movs	r2, #1
  400678:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  40067a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40067e:	f241 1003 	movw	r0, #4355	; 0x1103
  400682:	4b9f      	ldr	r3, [pc, #636]	; (400900 <sd_mmc_check+0x578>)
  400684:	4798      	blx	r3
  400686:	2800      	cmp	r0, #0
  400688:	f43f aea6 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  40068c:	4b9e      	ldr	r3, [pc, #632]	; (400908 <sd_mmc_check+0x580>)
  40068e:	4798      	blx	r3
  400690:	2800      	cmp	r0, #0
  400692:	f43f aea1 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400696:	4b9b      	ldr	r3, [pc, #620]	; (400904 <sd_mmc_check+0x57c>)
  400698:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40069a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  40069c:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4006a0:	3b01      	subs	r3, #1
  4006a2:	2b03      	cmp	r3, #3
  4006a4:	d80c      	bhi.n	4006c0 <sd_mmc_check+0x338>
  4006a6:	e8df f013 	tbh	[pc, r3, lsl #1]
  4006aa:	00cd      	.short	0x00cd
  4006ac:	00d300d0 	.word	0x00d300d0
  4006b0:	00d6      	.short	0x00d6
				sd_mmc_card->type |= CARD_TYPE_HC;
  4006b2:	4b94      	ldr	r3, [pc, #592]	; (400904 <sd_mmc_check+0x57c>)
  4006b4:	681a      	ldr	r2, [r3, #0]
  4006b6:	7bd3      	ldrb	r3, [r2, #15]
  4006b8:	f043 0308 	orr.w	r3, r3, #8
  4006bc:	73d3      	strb	r3, [r2, #15]
  4006be:	e7d0      	b.n	400662 <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4006c0:	2312      	movs	r3, #18
  4006c2:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c4:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4006c6:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4006ca:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4006ce:	498f      	ldr	r1, [pc, #572]	; (40090c <sd_mmc_check+0x584>)
  4006d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4006d8:	fb03 f301 	mul.w	r3, r3, r1
  4006dc:	498c      	ldr	r1, [pc, #560]	; (400910 <sd_mmc_check+0x588>)
  4006de:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4006e2:	fb03 f301 	mul.w	r3, r3, r1
  4006e6:	6013      	str	r3, [r2, #0]
  4006e8:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006ea:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ec:	7e13      	ldrb	r3, [r2, #24]
  4006ee:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006f0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4006f4:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4006f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4006fc:	f640 71ff 	movw	r1, #4095	; 0xfff
  400700:	428b      	cmp	r3, r1
  400702:	d00f      	beq.n	400724 <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400704:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400706:	7ed1      	ldrb	r1, [r2, #27]
  400708:	0049      	lsls	r1, r1, #1
  40070a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40070e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400710:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400714:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400716:	408b      	lsls	r3, r1
  400718:	7dd1      	ldrb	r1, [r2, #23]
  40071a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40071e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400720:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400722:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400724:	8991      	ldrh	r1, [r2, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400726:	0409      	lsls	r1, r1, #16
  400728:	f243 1007 	movw	r0, #12551	; 0x3107
  40072c:	4b74      	ldr	r3, [pc, #464]	; (400900 <sd_mmc_check+0x578>)
  40072e:	4798      	blx	r3
  400730:	2800      	cmp	r0, #0
  400732:	f43f ae51 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400736:	4b73      	ldr	r3, [pc, #460]	; (400904 <sd_mmc_check+0x57c>)
  400738:	681b      	ldr	r3, [r3, #0]
  40073a:	7c1b      	ldrb	r3, [r3, #16]
  40073c:	2b3f      	cmp	r3, #63	; 0x3f
  40073e:	f240 8097 	bls.w	400870 <sd_mmc_check+0x4e8>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400742:	2100      	movs	r1, #0
  400744:	9100      	str	r1, [sp, #0]
  400746:	2301      	movs	r3, #1
  400748:	f44f 7200 	mov.w	r2, #512	; 0x200
  40074c:	4871      	ldr	r0, [pc, #452]	; (400914 <sd_mmc_check+0x58c>)
  40074e:	4d72      	ldr	r5, [pc, #456]	; (400918 <sd_mmc_check+0x590>)
  400750:	47a8      	blx	r5
  400752:	2800      	cmp	r0, #0
  400754:	f43f ae40 	beq.w	4003d8 <sd_mmc_check+0x50>
  400758:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40075a:	4e70      	ldr	r6, [pc, #448]	; (40091c <sd_mmc_check+0x594>)
  40075c:	a803      	add	r0, sp, #12
  40075e:	47b0      	blx	r6
  400760:	2800      	cmp	r0, #0
  400762:	f43f ae39 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400766:	3501      	adds	r5, #1
  400768:	b2ad      	uxth	r5, r5
  40076a:	2d32      	cmp	r5, #50	; 0x32
  40076c:	d1f6      	bne.n	40075c <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  40076e:	9e03      	ldr	r6, [sp, #12]
  400770:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400774:	4b63      	ldr	r3, [pc, #396]	; (400904 <sd_mmc_check+0x57c>)
  400776:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400778:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40077a:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40077c:	7e1b      	ldrb	r3, [r3, #24]
  40077e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400780:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  400784:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400788:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40078c:	f640 72ff 	movw	r2, #4095	; 0xfff
  400790:	4293      	cmp	r3, r2
  400792:	d10e      	bne.n	4007b2 <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  400794:	4f61      	ldr	r7, [pc, #388]	; (40091c <sd_mmc_check+0x594>)
  400796:	a804      	add	r0, sp, #16
  400798:	47b8      	blx	r7
  40079a:	2800      	cmp	r0, #0
  40079c:	f43f ae1c 	beq.w	4003d8 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4007a0:	3501      	adds	r5, #1
  4007a2:	b2ad      	uxth	r5, r5
  4007a4:	2d35      	cmp	r5, #53	; 0x35
  4007a6:	d9f6      	bls.n	400796 <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4007a8:	4b56      	ldr	r3, [pc, #344]	; (400904 <sd_mmc_check+0x57c>)
  4007aa:	681a      	ldr	r2, [r3, #0]
  4007ac:	9b04      	ldr	r3, [sp, #16]
  4007ae:	085b      	lsrs	r3, r3, #1
  4007b0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4007b2:	4f5a      	ldr	r7, [pc, #360]	; (40091c <sd_mmc_check+0x594>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4007b4:	2d7f      	cmp	r5, #127	; 0x7f
  4007b6:	d951      	bls.n	40085c <sd_mmc_check+0x4d4>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4007b8:	4b59      	ldr	r3, [pc, #356]	; (400920 <sd_mmc_check+0x598>)
  4007ba:	7818      	ldrb	r0, [r3, #0]
  4007bc:	4b59      	ldr	r3, [pc, #356]	; (400924 <sd_mmc_check+0x59c>)
  4007be:	4798      	blx	r3
  4007c0:	2803      	cmp	r0, #3
  4007c2:	d91d      	bls.n	400800 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4007c4:	4b56      	ldr	r3, [pc, #344]	; (400920 <sd_mmc_check+0x598>)
  4007c6:	7818      	ldrb	r0, [r3, #0]
  4007c8:	4b56      	ldr	r3, [pc, #344]	; (400924 <sd_mmc_check+0x59c>)
  4007ca:	4798      	blx	r3
  4007cc:	4605      	mov	r5, r0
	switch (bus_width) {
  4007ce:	2804      	cmp	r0, #4
  4007d0:	d04c      	beq.n	40086c <sd_mmc_check+0x4e4>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4007d2:	4b55      	ldr	r3, [pc, #340]	; (400928 <sd_mmc_check+0x5a0>)
  4007d4:	4955      	ldr	r1, [pc, #340]	; (40092c <sd_mmc_check+0x5a4>)
  4007d6:	2808      	cmp	r0, #8
  4007d8:	bf18      	it	ne
  4007da:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4007dc:	f243 1006 	movw	r0, #12550	; 0x3106
  4007e0:	4b47      	ldr	r3, [pc, #284]	; (400900 <sd_mmc_check+0x578>)
  4007e2:	4798      	blx	r3
  4007e4:	2800      	cmp	r0, #0
  4007e6:	f43f adf7 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4007ea:	4b51      	ldr	r3, [pc, #324]	; (400930 <sd_mmc_check+0x5a8>)
  4007ec:	4798      	blx	r3
  4007ee:	f010 0f80 	tst.w	r0, #128	; 0x80
  4007f2:	f47f adf1 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  4007f6:	4b43      	ldr	r3, [pc, #268]	; (400904 <sd_mmc_check+0x57c>)
  4007f8:	681b      	ldr	r3, [r3, #0]
  4007fa:	745d      	strb	r5, [r3, #17]
			sd_mmc_configure_slot();
  4007fc:	4b4d      	ldr	r3, [pc, #308]	; (400934 <sd_mmc_check+0x5ac>)
  4007fe:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400800:	4b4d      	ldr	r3, [pc, #308]	; (400938 <sd_mmc_check+0x5b0>)
  400802:	4798      	blx	r3
  400804:	b1be      	cbz	r6, 400836 <sd_mmc_check+0x4ae>
  400806:	b1b0      	cbz	r0, 400836 <sd_mmc_check+0x4ae>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400808:	494c      	ldr	r1, [pc, #304]	; (40093c <sd_mmc_check+0x5b4>)
  40080a:	f243 1006 	movw	r0, #12550	; 0x3106
  40080e:	4b3c      	ldr	r3, [pc, #240]	; (400900 <sd_mmc_check+0x578>)
  400810:	4798      	blx	r3
  400812:	2800      	cmp	r0, #0
  400814:	f43f ade0 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400818:	4b45      	ldr	r3, [pc, #276]	; (400930 <sd_mmc_check+0x5a8>)
  40081a:	4798      	blx	r3
  40081c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400820:	f47f adda 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400824:	4b37      	ldr	r3, [pc, #220]	; (400904 <sd_mmc_check+0x57c>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2201      	movs	r2, #1
  40082a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  40082e:	4a44      	ldr	r2, [pc, #272]	; (400940 <sd_mmc_check+0x5b8>)
  400830:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400832:	4b40      	ldr	r3, [pc, #256]	; (400934 <sd_mmc_check+0x5ac>)
  400834:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400836:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400838:	f44f 7800 	mov.w	r8, #512	; 0x200
  40083c:	f241 1710 	movw	r7, #4368	; 0x1110
  400840:	4e2f      	ldr	r6, [pc, #188]	; (400900 <sd_mmc_check+0x578>)
  400842:	e01d      	b.n	400880 <sd_mmc_check+0x4f8>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400844:	2314      	movs	r3, #20
  400846:	7413      	strb	r3, [r2, #16]
  400848:	e73c      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40084a:	2322      	movs	r3, #34	; 0x22
  40084c:	7413      	strb	r3, [r2, #16]
  40084e:	e739      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400850:	2330      	movs	r3, #48	; 0x30
  400852:	7413      	strb	r3, [r2, #16]
  400854:	e736      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400856:	2340      	movs	r3, #64	; 0x40
  400858:	7413      	strb	r3, [r2, #16]
  40085a:	e733      	b.n	4006c4 <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  40085c:	a804      	add	r0, sp, #16
  40085e:	47b8      	blx	r7
  400860:	2800      	cmp	r0, #0
  400862:	f43f adb9 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400866:	3501      	adds	r5, #1
  400868:	b2ad      	uxth	r5, r5
  40086a:	e7a3      	b.n	4007b4 <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40086c:	4935      	ldr	r1, [pc, #212]	; (400944 <sd_mmc_check+0x5bc>)
  40086e:	e7b5      	b.n	4007dc <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  400870:	4b30      	ldr	r3, [pc, #192]	; (400934 <sd_mmc_check+0x5ac>)
  400872:	4798      	blx	r3
  400874:	e7df      	b.n	400836 <sd_mmc_check+0x4ae>
  400876:	3d01      	subs	r5, #1
	while (retry--) {
  400878:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  40087c:	f43f adac 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400880:	4641      	mov	r1, r8
  400882:	4638      	mov	r0, r7
  400884:	47b0      	blx	r6
  400886:	2800      	cmp	r0, #0
  400888:	d0f5      	beq.n	400876 <sd_mmc_check+0x4ee>
  40088a:	e10e      	b.n	400aaa <sd_mmc_check+0x722>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40088c:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40088e:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400890:	7e5a      	ldrb	r2, [r3, #25]
  400892:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400894:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  400898:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  40089a:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  40089e:	3201      	adds	r2, #1
  4008a0:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4008a2:	605a      	str	r2, [r3, #4]
  4008a4:	e600      	b.n	4004a8 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4008a6:	8999      	ldrh	r1, [r3, #12]
  4008a8:	0409      	lsls	r1, r1, #16
  4008aa:	f241 1037 	movw	r0, #4407	; 0x1137
  4008ae:	4b14      	ldr	r3, [pc, #80]	; (400900 <sd_mmc_check+0x578>)
  4008b0:	4798      	blx	r3
  4008b2:	2800      	cmp	r0, #0
  4008b4:	f43f ad90 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4008b8:	2301      	movs	r3, #1
  4008ba:	9300      	str	r3, [sp, #0]
  4008bc:	2208      	movs	r2, #8
  4008be:	2100      	movs	r1, #0
  4008c0:	4821      	ldr	r0, [pc, #132]	; (400948 <sd_mmc_check+0x5c0>)
  4008c2:	4d15      	ldr	r5, [pc, #84]	; (400918 <sd_mmc_check+0x590>)
  4008c4:	47a8      	blx	r5
  4008c6:	2800      	cmp	r0, #0
  4008c8:	f43f ad86 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  4008cc:	2101      	movs	r1, #1
  4008ce:	a804      	add	r0, sp, #16
  4008d0:	4b1e      	ldr	r3, [pc, #120]	; (40094c <sd_mmc_check+0x5c4>)
  4008d2:	4798      	blx	r3
  4008d4:	2800      	cmp	r0, #0
  4008d6:	f43f ad7f 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  4008da:	4b1d      	ldr	r3, [pc, #116]	; (400950 <sd_mmc_check+0x5c8>)
  4008dc:	4798      	blx	r3
  4008de:	2800      	cmp	r0, #0
  4008e0:	f43f ad7a 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  4008e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008e8:	f003 030f 	and.w	r3, r3, #15
  4008ec:	2b01      	cmp	r3, #1
  4008ee:	d036      	beq.n	40095e <sd_mmc_check+0x5d6>
  4008f0:	b383      	cbz	r3, 400954 <sd_mmc_check+0x5cc>
  4008f2:	2b02      	cmp	r3, #2
  4008f4:	d038      	beq.n	400968 <sd_mmc_check+0x5e0>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4008f6:	4b03      	ldr	r3, [pc, #12]	; (400904 <sd_mmc_check+0x57c>)
  4008f8:	681b      	ldr	r3, [r3, #0]
  4008fa:	2210      	movs	r2, #16
  4008fc:	741a      	strb	r2, [r3, #16]
  4008fe:	e5e4      	b.n	4004ca <sd_mmc_check+0x142>
  400900:	0040174d 	.word	0x0040174d
  400904:	20400a0c 	.word	0x20400a0c
  400908:	0040030d 	.word	0x0040030d
  40090c:	0040d0b4 	.word	0x0040d0b4
  400910:	0040d074 	.word	0x0040d074
  400914:	00081108 	.word	0x00081108
  400918:	004017a9 	.word	0x004017a9
  40091c:	00401871 	.word	0x00401871
  400920:	20400a15 	.word	0x20400a15
  400924:	00401655 	.word	0x00401655
  400928:	01b70000 	.word	0x01b70000
  40092c:	01b70200 	.word	0x01b70200
  400930:	00401771 	.word	0x00401771
  400934:	004001ad 	.word	0x004001ad
  400938:	0040165f 	.word	0x0040165f
  40093c:	03b90100 	.word	0x03b90100
  400940:	03197500 	.word	0x03197500
  400944:	01b70100 	.word	0x01b70100
  400948:	00081133 	.word	0x00081133
  40094c:	004018e5 	.word	0x004018e5
  400950:	004019dd 	.word	0x004019dd
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400954:	4b9b      	ldr	r3, [pc, #620]	; (400bc4 <sd_mmc_check+0x83c>)
  400956:	681b      	ldr	r3, [r3, #0]
  400958:	2210      	movs	r2, #16
  40095a:	741a      	strb	r2, [r3, #16]
  40095c:	e5b5      	b.n	4004ca <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  40095e:	4b99      	ldr	r3, [pc, #612]	; (400bc4 <sd_mmc_check+0x83c>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	221a      	movs	r2, #26
  400964:	741a      	strb	r2, [r3, #16]
  400966:	e5b0      	b.n	4004ca <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400968:	f89d 3012 	ldrb.w	r3, [sp, #18]
  40096c:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  40096e:	4b95      	ldr	r3, [pc, #596]	; (400bc4 <sd_mmc_check+0x83c>)
  400970:	681b      	ldr	r3, [r3, #0]
  400972:	bf14      	ite	ne
  400974:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400976:	2220      	moveq	r2, #32
  400978:	741a      	strb	r2, [r3, #16]
  40097a:	e5a6      	b.n	4004ca <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  40097c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400980:	2b00      	cmp	r3, #0
  400982:	f43f ad29 	beq.w	4003d8 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400986:	3302      	adds	r3, #2
  400988:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  40098a:	f509 7380 	add.w	r3, r9, #256	; 0x100
  40098e:	429e      	cmp	r6, r3
  400990:	f63f ad22 	bhi.w	4003d8 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400994:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400996:	ab04      	add	r3, sp, #16
  400998:	442b      	add	r3, r5
  40099a:	9300      	str	r3, [sp, #0]
  40099c:	4643      	mov	r3, r8
  40099e:	1972      	adds	r2, r6, r5
  4009a0:	4641      	mov	r1, r8
  4009a2:	4640      	mov	r0, r8
  4009a4:	47b8      	blx	r7
  4009a6:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  4009a8:	2d03      	cmp	r5, #3
  4009aa:	d1f4      	bne.n	400996 <sd_mmc_check+0x60e>
		if (buf[0] == SDIO_CISTPL_END) {
  4009ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009b0:	2bff      	cmp	r3, #255	; 0xff
  4009b2:	f43f ad11 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4009b6:	2b22      	cmp	r3, #34	; 0x22
  4009b8:	d1e0      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4009be:	2b00      	cmp	r3, #0
  4009c0:	d1dc      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009c2:	ad04      	add	r5, sp, #16
  4009c4:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4009c8:	f04f 0800 	mov.w	r8, #0
  4009cc:	4f7e      	ldr	r7, [pc, #504]	; (400bc8 <sd_mmc_check+0x840>)
  4009ce:	9500      	str	r5, [sp, #0]
  4009d0:	4643      	mov	r3, r8
  4009d2:	4632      	mov	r2, r6
  4009d4:	4641      	mov	r1, r8
  4009d6:	4640      	mov	r0, r8
  4009d8:	47b8      	blx	r7
		addr_new++;
  4009da:	3601      	adds	r6, #1
  4009dc:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  4009de:	454e      	cmp	r6, r9
  4009e0:	d1f5      	bne.n	4009ce <sd_mmc_check+0x646>
	tplfe_max_tran_speed = buf[5];
  4009e2:	f89d 3015 	ldrb.w	r3, [sp, #21]
  4009e6:	2b32      	cmp	r3, #50	; 0x32
  4009e8:	bf28      	it	cs
  4009ea:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  4009ec:	4a75      	ldr	r2, [pc, #468]	; (400bc4 <sd_mmc_check+0x83c>)
  4009ee:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  4009f0:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4009f4:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4009f8:	4974      	ldr	r1, [pc, #464]	; (400bcc <sd_mmc_check+0x844>)
  4009fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400a02:	fb03 f301 	mul.w	r3, r3, r1
  400a06:	4972      	ldr	r1, [pc, #456]	; (400bd0 <sd_mmc_check+0x848>)
  400a08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400a0c:	fb03 f301 	mul.w	r3, r3, r1
  400a10:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400a12:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x84c>)
  400a14:	7818      	ldrb	r0, [r3, #0]
  400a16:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x850>)
  400a18:	4798      	blx	r3
  400a1a:	2803      	cmp	r0, #3
  400a1c:	d922      	bls.n	400a64 <sd_mmc_check+0x6dc>
		if (IS_SDIO()) {
  400a1e:	4b69      	ldr	r3, [pc, #420]	; (400bc4 <sd_mmc_check+0x83c>)
  400a20:	681b      	ldr	r3, [r3, #0]
  400a22:	7bdb      	ldrb	r3, [r3, #15]
  400a24:	f013 0f04 	tst.w	r3, #4
  400a28:	d146      	bne.n	400ab8 <sd_mmc_check+0x730>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a2a:	4b66      	ldr	r3, [pc, #408]	; (400bc4 <sd_mmc_check+0x83c>)
  400a2c:	681b      	ldr	r3, [r3, #0]
  400a2e:	7bda      	ldrb	r2, [r3, #15]
  400a30:	f012 0f01 	tst.w	r2, #1
  400a34:	d014      	beq.n	400a60 <sd_mmc_check+0x6d8>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400a36:	8999      	ldrh	r1, [r3, #12]
  400a38:	0409      	lsls	r1, r1, #16
  400a3a:	f241 1037 	movw	r0, #4407	; 0x1137
  400a3e:	4b67      	ldr	r3, [pc, #412]	; (400bdc <sd_mmc_check+0x854>)
  400a40:	4798      	blx	r3
  400a42:	2800      	cmp	r0, #0
  400a44:	f43f acc8 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400a48:	2102      	movs	r1, #2
  400a4a:	f241 1006 	movw	r0, #4358	; 0x1106
  400a4e:	4b63      	ldr	r3, [pc, #396]	; (400bdc <sd_mmc_check+0x854>)
  400a50:	4798      	blx	r3
  400a52:	2800      	cmp	r0, #0
  400a54:	f43f acc0 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400a58:	4b5a      	ldr	r3, [pc, #360]	; (400bc4 <sd_mmc_check+0x83c>)
  400a5a:	681b      	ldr	r3, [r3, #0]
  400a5c:	2204      	movs	r2, #4
  400a5e:	745a      	strb	r2, [r3, #17]
		sd_mmc_configure_slot();
  400a60:	4b5f      	ldr	r3, [pc, #380]	; (400be0 <sd_mmc_check+0x858>)
  400a62:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400a64:	4b5f      	ldr	r3, [pc, #380]	; (400be4 <sd_mmc_check+0x85c>)
  400a66:	4798      	blx	r3
  400a68:	b180      	cbz	r0, 400a8c <sd_mmc_check+0x704>
		if (IS_SDIO()) {
  400a6a:	4b56      	ldr	r3, [pc, #344]	; (400bc4 <sd_mmc_check+0x83c>)
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	7bdb      	ldrb	r3, [r3, #15]
  400a70:	f013 0f04 	tst.w	r3, #4
  400a74:	d141      	bne.n	400afa <sd_mmc_check+0x772>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a76:	4b53      	ldr	r3, [pc, #332]	; (400bc4 <sd_mmc_check+0x83c>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	7bda      	ldrb	r2, [r3, #15]
  400a7c:	f012 0f01 	tst.w	r2, #1
  400a80:	d002      	beq.n	400a88 <sd_mmc_check+0x700>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a82:	7c1b      	ldrb	r3, [r3, #16]
  400a84:	2b10      	cmp	r3, #16
  400a86:	d85e      	bhi.n	400b46 <sd_mmc_check+0x7be>
		sd_mmc_configure_slot();
  400a88:	4b55      	ldr	r3, [pc, #340]	; (400be0 <sd_mmc_check+0x858>)
  400a8a:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a8c:	4b4d      	ldr	r3, [pc, #308]	; (400bc4 <sd_mmc_check+0x83c>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	7bdb      	ldrb	r3, [r3, #15]
  400a92:	f013 0f01 	tst.w	r3, #1
  400a96:	d008      	beq.n	400aaa <sd_mmc_check+0x722>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400a98:	f44f 7100 	mov.w	r1, #512	; 0x200
  400a9c:	f241 1010 	movw	r0, #4368	; 0x1110
  400aa0:	4b4e      	ldr	r3, [pc, #312]	; (400bdc <sd_mmc_check+0x854>)
  400aa2:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400aa4:	2800      	cmp	r0, #0
  400aa6:	f43f ac97 	beq.w	4003d8 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400aaa:	4b46      	ldr	r3, [pc, #280]	; (400bc4 <sd_mmc_check+0x83c>)
  400aac:	681b      	ldr	r3, [r3, #0]
  400aae:	2200      	movs	r2, #0
  400ab0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400ab2:	4b4d      	ldr	r3, [pc, #308]	; (400be8 <sd_mmc_check+0x860>)
  400ab4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400ab6:	e471      	b.n	40039c <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400ab8:	ab04      	add	r3, sp, #16
  400aba:	9300      	str	r3, [sp, #0]
  400abc:	2300      	movs	r3, #0
  400abe:	2208      	movs	r2, #8
  400ac0:	4619      	mov	r1, r3
  400ac2:	4618      	mov	r0, r3
  400ac4:	4d40      	ldr	r5, [pc, #256]	; (400bc8 <sd_mmc_check+0x840>)
  400ac6:	47a8      	blx	r5
  400ac8:	2800      	cmp	r0, #0
  400aca:	f43f ac85 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400ace:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400ad2:	2b00      	cmp	r3, #0
  400ad4:	daa9      	bge.n	400a2a <sd_mmc_check+0x6a2>
	u8_value = SDIO_BUSWIDTH_4B;
  400ad6:	ab14      	add	r3, sp, #80	; 0x50
  400ad8:	2202      	movs	r2, #2
  400ada:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400ade:	9300      	str	r3, [sp, #0]
  400ae0:	2301      	movs	r3, #1
  400ae2:	2207      	movs	r2, #7
  400ae4:	2100      	movs	r1, #0
  400ae6:	4618      	mov	r0, r3
  400ae8:	47a8      	blx	r5
  400aea:	2800      	cmp	r0, #0
  400aec:	f43f ac74 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400af0:	4b34      	ldr	r3, [pc, #208]	; (400bc4 <sd_mmc_check+0x83c>)
  400af2:	681b      	ldr	r3, [r3, #0]
  400af4:	2204      	movs	r2, #4
  400af6:	745a      	strb	r2, [r3, #17]
  400af8:	e797      	b.n	400a2a <sd_mmc_check+0x6a2>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400afa:	ab04      	add	r3, sp, #16
  400afc:	9300      	str	r3, [sp, #0]
  400afe:	2300      	movs	r3, #0
  400b00:	2213      	movs	r2, #19
  400b02:	4619      	mov	r1, r3
  400b04:	4618      	mov	r0, r3
  400b06:	4d30      	ldr	r5, [pc, #192]	; (400bc8 <sd_mmc_check+0x840>)
  400b08:	47a8      	blx	r5
  400b0a:	2800      	cmp	r0, #0
  400b0c:	f43f ac64 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400b10:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400b14:	f013 0f01 	tst.w	r3, #1
  400b18:	d0ad      	beq.n	400a76 <sd_mmc_check+0x6ee>
	u8_value = SDIO_EHS;
  400b1a:	ab14      	add	r3, sp, #80	; 0x50
  400b1c:	2202      	movs	r2, #2
  400b1e:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400b22:	9300      	str	r3, [sp, #0]
  400b24:	2301      	movs	r3, #1
  400b26:	2213      	movs	r2, #19
  400b28:	2100      	movs	r1, #0
  400b2a:	4618      	mov	r0, r3
  400b2c:	47a8      	blx	r5
  400b2e:	2800      	cmp	r0, #0
  400b30:	f43f ac52 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400b34:	4b23      	ldr	r3, [pc, #140]	; (400bc4 <sd_mmc_check+0x83c>)
  400b36:	681b      	ldr	r3, [r3, #0]
  400b38:	2201      	movs	r2, #1
  400b3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400b3e:	681a      	ldr	r2, [r3, #0]
  400b40:	0052      	lsls	r2, r2, #1
  400b42:	601a      	str	r2, [r3, #0]
  400b44:	e797      	b.n	400a76 <sd_mmc_check+0x6ee>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400b46:	2540      	movs	r5, #64	; 0x40
  400b48:	462a      	mov	r2, r5
  400b4a:	2100      	movs	r1, #0
  400b4c:	a804      	add	r0, sp, #16
  400b4e:	4b27      	ldr	r3, [pc, #156]	; (400bec <sd_mmc_check+0x864>)
  400b50:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400b52:	2301      	movs	r3, #1
  400b54:	9300      	str	r3, [sp, #0]
  400b56:	462a      	mov	r2, r5
  400b58:	4925      	ldr	r1, [pc, #148]	; (400bf0 <sd_mmc_check+0x868>)
  400b5a:	4826      	ldr	r0, [pc, #152]	; (400bf4 <sd_mmc_check+0x86c>)
  400b5c:	4d26      	ldr	r5, [pc, #152]	; (400bf8 <sd_mmc_check+0x870>)
  400b5e:	47a8      	blx	r5
  400b60:	2800      	cmp	r0, #0
  400b62:	f43f ac39 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400b66:	2101      	movs	r1, #1
  400b68:	a804      	add	r0, sp, #16
  400b6a:	4b24      	ldr	r3, [pc, #144]	; (400bfc <sd_mmc_check+0x874>)
  400b6c:	4798      	blx	r3
  400b6e:	2800      	cmp	r0, #0
  400b70:	f43f ac32 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400b74:	4b22      	ldr	r3, [pc, #136]	; (400c00 <sd_mmc_check+0x878>)
  400b76:	4798      	blx	r3
  400b78:	2800      	cmp	r0, #0
  400b7a:	f43f ac2d 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400b7e:	4b21      	ldr	r3, [pc, #132]	; (400c04 <sd_mmc_check+0x87c>)
  400b80:	4798      	blx	r3
  400b82:	f010 0f80 	tst.w	r0, #128	; 0x80
  400b86:	f47f ac27 	bne.w	4003d8 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400b8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400b8e:	f003 030f 	and.w	r3, r3, #15
  400b92:	2b0f      	cmp	r3, #15
  400b94:	f43f af78 	beq.w	400a88 <sd_mmc_check+0x700>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400b98:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400b9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ba0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ba4:	f47f ac18 	bne.w	4003d8 <sd_mmc_check+0x50>
	driver_send_clock();
  400ba8:	4b17      	ldr	r3, [pc, #92]	; (400c08 <sd_mmc_check+0x880>)
  400baa:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400bac:	4b05      	ldr	r3, [pc, #20]	; (400bc4 <sd_mmc_check+0x83c>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	2201      	movs	r2, #1
  400bb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400bb6:	681a      	ldr	r2, [r3, #0]
  400bb8:	0052      	lsls	r2, r2, #1
  400bba:	601a      	str	r2, [r3, #0]
  400bbc:	e764      	b.n	400a88 <sd_mmc_check+0x700>
	*v2 = 0;
  400bbe:	f04f 0900 	mov.w	r9, #0
  400bc2:	e41b      	b.n	4003fc <sd_mmc_check+0x74>
  400bc4:	20400a0c 	.word	0x20400a0c
  400bc8:	004002d5 	.word	0x004002d5
  400bcc:	0040d0b4 	.word	0x0040d0b4
  400bd0:	0040d0d0 	.word	0x0040d0d0
  400bd4:	20400a15 	.word	0x20400a15
  400bd8:	00401655 	.word	0x00401655
  400bdc:	0040174d 	.word	0x0040174d
  400be0:	004001ad 	.word	0x004001ad
  400be4:	0040165f 	.word	0x0040165f
  400be8:	00400341 	.word	0x00400341
  400bec:	00406dd9 	.word	0x00406dd9
  400bf0:	80ffff01 	.word	0x80ffff01
  400bf4:	00081106 	.word	0x00081106
  400bf8:	004017a9 	.word	0x004017a9
  400bfc:	004018e5 	.word	0x004018e5
  400c00:	004019dd 	.word	0x004019dd
  400c04:	00401771 	.word	0x00401771
  400c08:	0040172b 	.word	0x0040172b

00400c0c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c0c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c0e:	4b05      	ldr	r3, [pc, #20]	; (400c24 <sd_mmc_get_type+0x18>)
  400c10:	4798      	blx	r3
  400c12:	b108      	cbz	r0, 400c18 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400c14:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c16:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c18:	4b03      	ldr	r3, [pc, #12]	; (400c28 <sd_mmc_get_type+0x1c>)
  400c1a:	4798      	blx	r3
	return sd_mmc_card->type;
  400c1c:	4b03      	ldr	r3, [pc, #12]	; (400c2c <sd_mmc_get_type+0x20>)
  400c1e:	681b      	ldr	r3, [r3, #0]
  400c20:	7bd8      	ldrb	r0, [r3, #15]
  400c22:	bd08      	pop	{r3, pc}
  400c24:	004001d9 	.word	0x004001d9
  400c28:	00400341 	.word	0x00400341
  400c2c:	20400a0c 	.word	0x20400a0c

00400c30 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400c30:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c32:	4b05      	ldr	r3, [pc, #20]	; (400c48 <sd_mmc_get_capacity+0x18>)
  400c34:	4798      	blx	r3
  400c36:	b108      	cbz	r0, 400c3c <sd_mmc_get_capacity+0xc>
		return 0;
  400c38:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400c3a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c3c:	4b03      	ldr	r3, [pc, #12]	; (400c4c <sd_mmc_get_capacity+0x1c>)
  400c3e:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400c40:	4b03      	ldr	r3, [pc, #12]	; (400c50 <sd_mmc_get_capacity+0x20>)
  400c42:	681b      	ldr	r3, [r3, #0]
  400c44:	6858      	ldr	r0, [r3, #4]
  400c46:	bd08      	pop	{r3, pc}
  400c48:	004001d9 	.word	0x004001d9
  400c4c:	00400341 	.word	0x00400341
  400c50:	20400a0c 	.word	0x20400a0c

00400c54 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400c54:	2000      	movs	r0, #0
  400c56:	4770      	bx	lr

00400c58 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c5c:	b082      	sub	sp, #8
  400c5e:	468a      	mov	sl, r1
  400c60:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400c62:	4b26      	ldr	r3, [pc, #152]	; (400cfc <sd_mmc_init_read_blocks+0xa4>)
  400c64:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400c66:	4680      	mov	r8, r0
  400c68:	b118      	cbz	r0, 400c72 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400c6a:	4640      	mov	r0, r8
  400c6c:	b002      	add	sp, #8
  400c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c72:	4c23      	ldr	r4, [pc, #140]	; (400d00 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c74:	4e23      	ldr	r6, [pc, #140]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c76:	4d24      	ldr	r5, [pc, #144]	; (400d08 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c78:	4f24      	ldr	r7, [pc, #144]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c7a:	6833      	ldr	r3, [r6, #0]
  400c7c:	8999      	ldrh	r1, [r3, #12]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c7e:	0409      	lsls	r1, r1, #16
  400c80:	f241 100d 	movw	r0, #4365	; 0x110d
  400c84:	47a8      	blx	r5
  400c86:	b128      	cbz	r0, 400c94 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c88:	47b8      	blx	r7
  400c8a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400c8e:	d117      	bne.n	400cc0 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400c90:	3c01      	subs	r4, #1
  400c92:	d1f2      	bne.n	400c7a <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400c94:	4b1e      	ldr	r3, [pc, #120]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400c96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400c98:	f04f 0805 	mov.w	r8, #5
  400c9c:	e7e5      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400c9e:	4b1b      	ldr	r3, [pc, #108]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
  400ca0:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400ca2:	4b1c      	ldr	r3, [pc, #112]	; (400d14 <sd_mmc_init_read_blocks+0xbc>)
  400ca4:	4003      	ands	r3, r0
  400ca6:	b933      	cbnz	r3, 400cb6 <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400ca8:	4b1b      	ldr	r3, [pc, #108]	; (400d18 <sd_mmc_init_read_blocks+0xc0>)
  400caa:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400cae:	4b1b      	ldr	r3, [pc, #108]	; (400d1c <sd_mmc_init_read_blocks+0xc4>)
  400cb0:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400cb4:	e7d9      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400cb6:	4b16      	ldr	r3, [pc, #88]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cb8:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400cba:	f04f 0805 	mov.w	r8, #5
  400cbe:	e7d4      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400cc0:	4b17      	ldr	r3, [pc, #92]	; (400d20 <sd_mmc_init_read_blocks+0xc8>)
  400cc2:	4818      	ldr	r0, [pc, #96]	; (400d24 <sd_mmc_init_read_blocks+0xcc>)
  400cc4:	f1b9 0f01 	cmp.w	r9, #1
  400cc8:	bf98      	it	ls
  400cca:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400ccc:	4b0d      	ldr	r3, [pc, #52]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
  400cce:	681b      	ldr	r3, [r3, #0]
  400cd0:	7bdb      	ldrb	r3, [r3, #15]
  400cd2:	f013 0f08 	tst.w	r3, #8
  400cd6:	d101      	bne.n	400cdc <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400cd8:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400cdc:	2301      	movs	r3, #1
  400cde:	9300      	str	r3, [sp, #0]
  400ce0:	464b      	mov	r3, r9
  400ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ce6:	4651      	mov	r1, sl
  400ce8:	4c0f      	ldr	r4, [pc, #60]	; (400d28 <sd_mmc_init_read_blocks+0xd0>)
  400cea:	47a0      	blx	r4
  400cec:	2800      	cmp	r0, #0
  400cee:	d1d6      	bne.n	400c9e <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400cf0:	4b07      	ldr	r3, [pc, #28]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cf2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400cf4:	f04f 0805 	mov.w	r8, #5
  400cf8:	e7b7      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
  400cfa:	bf00      	nop
  400cfc:	004001d9 	.word	0x004001d9
  400d00:	00030d41 	.word	0x00030d41
  400d04:	20400a0c 	.word	0x20400a0c
  400d08:	0040174d 	.word	0x0040174d
  400d0c:	00401771 	.word	0x00401771
  400d10:	00400341 	.word	0x00400341
  400d14:	e4580000 	.word	0xe4580000
  400d18:	20400a10 	.word	0x20400a10
  400d1c:	20400a12 	.word	0x20400a12
  400d20:	00081111 	.word	0x00081111
  400d24:	00101112 	.word	0x00101112
  400d28:	004017a9 	.word	0x004017a9

00400d2c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400d2c:	b510      	push	{r4, lr}
  400d2e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400d30:	4b06      	ldr	r3, [pc, #24]	; (400d4c <sd_mmc_start_read_blocks+0x20>)
  400d32:	4798      	blx	r3
  400d34:	b920      	cbnz	r0, 400d40 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d36:	2200      	movs	r2, #0
  400d38:	4b05      	ldr	r3, [pc, #20]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d3a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400d3c:	2005      	movs	r0, #5
  400d3e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400d40:	4a03      	ldr	r2, [pc, #12]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d42:	8813      	ldrh	r3, [r2, #0]
  400d44:	1b1c      	subs	r4, r3, r4
  400d46:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400d48:	2000      	movs	r0, #0
}
  400d4a:	bd10      	pop	{r4, pc}
  400d4c:	004018e5 	.word	0x004018e5
  400d50:	20400a10 	.word	0x20400a10

00400d54 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400d54:	b510      	push	{r4, lr}
  400d56:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400d58:	4b13      	ldr	r3, [pc, #76]	; (400da8 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d5a:	4798      	blx	r3
  400d5c:	b908      	cbnz	r0, 400d62 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400d5e:	2005      	movs	r0, #5
  400d60:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400d62:	b184      	cbz	r4, 400d86 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400d64:	2200      	movs	r2, #0
  400d66:	4b11      	ldr	r3, [pc, #68]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d68:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400d6a:	4b11      	ldr	r3, [pc, #68]	; (400db0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d6c:	881b      	ldrh	r3, [r3, #0]
  400d6e:	2b01      	cmp	r3, #1
  400d70:	d00f      	beq.n	400d92 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400d72:	2100      	movs	r1, #0
  400d74:	f243 100c 	movw	r0, #12556	; 0x310c
  400d78:	4b0e      	ldr	r3, [pc, #56]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d7a:	4798      	blx	r3
  400d7c:	b168      	cbz	r0, 400d9a <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400d7e:	4b0e      	ldr	r3, [pc, #56]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d80:	4798      	blx	r3
	return SD_MMC_OK;
  400d82:	2000      	movs	r0, #0
  400d84:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400d86:	4b09      	ldr	r3, [pc, #36]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d88:	881b      	ldrh	r3, [r3, #0]
  400d8a:	2b00      	cmp	r3, #0
  400d8c:	d0ed      	beq.n	400d6a <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400d8e:	2000      	movs	r0, #0
}
  400d90:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400d92:	4b09      	ldr	r3, [pc, #36]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d94:	4798      	blx	r3
		return SD_MMC_OK;
  400d96:	2000      	movs	r0, #0
  400d98:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400d9a:	2100      	movs	r1, #0
  400d9c:	f243 100c 	movw	r0, #12556	; 0x310c
  400da0:	4b04      	ldr	r3, [pc, #16]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400da2:	4798      	blx	r3
  400da4:	e7eb      	b.n	400d7e <sd_mmc_wait_end_of_read_blocks+0x2a>
  400da6:	bf00      	nop
  400da8:	004019dd 	.word	0x004019dd
  400dac:	20400a10 	.word	0x20400a10
  400db0:	20400a12 	.word	0x20400a12
  400db4:	0040174d 	.word	0x0040174d
  400db8:	00400341 	.word	0x00400341

00400dbc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400dbc:	b570      	push	{r4, r5, r6, lr}
  400dbe:	b082      	sub	sp, #8
  400dc0:	460e      	mov	r6, r1
  400dc2:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400dc4:	4b16      	ldr	r3, [pc, #88]	; (400e20 <sd_mmc_init_write_blocks+0x64>)
  400dc6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400dc8:	4604      	mov	r4, r0
  400dca:	b9b8      	cbnz	r0, 400dfc <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400dcc:	4b15      	ldr	r3, [pc, #84]	; (400e24 <sd_mmc_init_write_blocks+0x68>)
  400dce:	4816      	ldr	r0, [pc, #88]	; (400e28 <sd_mmc_init_write_blocks+0x6c>)
  400dd0:	2d01      	cmp	r5, #1
  400dd2:	bf98      	it	ls
  400dd4:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400dd6:	4b15      	ldr	r3, [pc, #84]	; (400e2c <sd_mmc_init_write_blocks+0x70>)
  400dd8:	681b      	ldr	r3, [r3, #0]
  400dda:	7bdb      	ldrb	r3, [r3, #15]
  400ddc:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400de0:	bf08      	it	eq
  400de2:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400de4:	2301      	movs	r3, #1
  400de6:	9300      	str	r3, [sp, #0]
  400de8:	462b      	mov	r3, r5
  400dea:	f44f 7200 	mov.w	r2, #512	; 0x200
  400dee:	4631      	mov	r1, r6
  400df0:	4e0f      	ldr	r6, [pc, #60]	; (400e30 <sd_mmc_init_write_blocks+0x74>)
  400df2:	47b0      	blx	r6
  400df4:	b928      	cbnz	r0, 400e02 <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400df6:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400df8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400dfa:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400dfc:	4620      	mov	r0, r4
  400dfe:	b002      	add	sp, #8
  400e00:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400e02:	4b0d      	ldr	r3, [pc, #52]	; (400e38 <sd_mmc_init_write_blocks+0x7c>)
  400e04:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400e06:	4b0d      	ldr	r3, [pc, #52]	; (400e3c <sd_mmc_init_write_blocks+0x80>)
  400e08:	4003      	ands	r3, r0
  400e0a:	b923      	cbnz	r3, 400e16 <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400e0c:	4b0c      	ldr	r3, [pc, #48]	; (400e40 <sd_mmc_init_write_blocks+0x84>)
  400e0e:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400e10:	4b0c      	ldr	r3, [pc, #48]	; (400e44 <sd_mmc_init_write_blocks+0x88>)
  400e12:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400e14:	e7f2      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400e16:	4b07      	ldr	r3, [pc, #28]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400e18:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e1a:	2405      	movs	r4, #5
  400e1c:	e7ee      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
  400e1e:	bf00      	nop
  400e20:	004001d9 	.word	0x004001d9
  400e24:	00089118 	.word	0x00089118
  400e28:	00109119 	.word	0x00109119
  400e2c:	20400a0c 	.word	0x20400a0c
  400e30:	004017a9 	.word	0x004017a9
  400e34:	00400341 	.word	0x00400341
  400e38:	00401771 	.word	0x00401771
  400e3c:	e4580000 	.word	0xe4580000
  400e40:	20400a10 	.word	0x20400a10
  400e44:	20400a12 	.word	0x20400a12

00400e48 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400e48:	b510      	push	{r4, lr}
  400e4a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400e4c:	4b06      	ldr	r3, [pc, #24]	; (400e68 <sd_mmc_start_write_blocks+0x20>)
  400e4e:	4798      	blx	r3
  400e50:	b920      	cbnz	r0, 400e5c <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e52:	2200      	movs	r2, #0
  400e54:	4b05      	ldr	r3, [pc, #20]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e56:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e58:	2005      	movs	r0, #5
  400e5a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e5c:	4a03      	ldr	r2, [pc, #12]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e5e:	8813      	ldrh	r3, [r2, #0]
  400e60:	1b1c      	subs	r4, r3, r4
  400e62:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e64:	2000      	movs	r0, #0
}
  400e66:	bd10      	pop	{r4, pc}
  400e68:	00401a41 	.word	0x00401a41
  400e6c:	20400a10 	.word	0x20400a10

00400e70 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400e70:	b510      	push	{r4, lr}
  400e72:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400e74:	4b12      	ldr	r3, [pc, #72]	; (400ec0 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400e76:	4798      	blx	r3
  400e78:	b908      	cbnz	r0, 400e7e <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e7a:	2005      	movs	r0, #5
  400e7c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e7e:	b184      	cbz	r4, 400ea2 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e80:	2200      	movs	r2, #0
  400e82:	4b10      	ldr	r3, [pc, #64]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e84:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e86:	4b10      	ldr	r3, [pc, #64]	; (400ec8 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400e88:	881b      	ldrh	r3, [r3, #0]
  400e8a:	2b01      	cmp	r3, #1
  400e8c:	d00f      	beq.n	400eae <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400e8e:	2100      	movs	r1, #0
  400e90:	f243 100c 	movw	r0, #12556	; 0x310c
  400e94:	4b0d      	ldr	r3, [pc, #52]	; (400ecc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e96:	4798      	blx	r3
  400e98:	b968      	cbnz	r0, 400eb6 <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400e9a:	4b0d      	ldr	r3, [pc, #52]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400e9c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e9e:	2005      	movs	r0, #5
  400ea0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400ea2:	4b08      	ldr	r3, [pc, #32]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400ea4:	881b      	ldrh	r3, [r3, #0]
  400ea6:	2b00      	cmp	r3, #0
  400ea8:	d0ed      	beq.n	400e86 <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400eaa:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400eac:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400eae:	4b08      	ldr	r3, [pc, #32]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb0:	4798      	blx	r3
		return SD_MMC_OK;
  400eb2:	2000      	movs	r0, #0
  400eb4:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400eb6:	4b06      	ldr	r3, [pc, #24]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb8:	4798      	blx	r3
	return SD_MMC_OK;
  400eba:	2000      	movs	r0, #0
  400ebc:	bd10      	pop	{r4, pc}
  400ebe:	bf00      	nop
  400ec0:	00401b39 	.word	0x00401b39
  400ec4:	20400a10 	.word	0x20400a10
  400ec8:	20400a12 	.word	0x20400a12
  400ecc:	0040174d 	.word	0x0040174d
  400ed0:	00400341 	.word	0x00400341

00400ed4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400ed4:	b510      	push	{r4, lr}
  400ed6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400ed8:	4b0f      	ldr	r3, [pc, #60]	; (400f18 <sd_mmc_test_unit_ready+0x44>)
  400eda:	4798      	blx	r3
  400edc:	2801      	cmp	r0, #1
  400ede:	d018      	beq.n	400f12 <sd_mmc_test_unit_ready+0x3e>
  400ee0:	b118      	cbz	r0, 400eea <sd_mmc_test_unit_ready+0x16>
  400ee2:	2802      	cmp	r0, #2
  400ee4:	d010      	beq.n	400f08 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400ee6:	2001      	movs	r0, #1
  400ee8:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400eea:	4b0c      	ldr	r3, [pc, #48]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400eec:	5d1b      	ldrb	r3, [r3, r4]
  400eee:	b10b      	cbz	r3, 400ef4 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400ef0:	2002      	movs	r0, #2
	}
}
  400ef2:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400ef4:	4620      	mov	r0, r4
  400ef6:	4b0a      	ldr	r3, [pc, #40]	; (400f20 <sd_mmc_test_unit_ready+0x4c>)
  400ef8:	4798      	blx	r3
  400efa:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400efe:	2800      	cmp	r0, #0
  400f00:	bf14      	ite	ne
  400f02:	2000      	movne	r0, #0
  400f04:	2002      	moveq	r0, #2
  400f06:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400f08:	2200      	movs	r2, #0
  400f0a:	4b04      	ldr	r3, [pc, #16]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400f0c:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400f0e:	2002      	movs	r0, #2
  400f10:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400f12:	2003      	movs	r0, #3
  400f14:	bd10      	pop	{r4, pc}
  400f16:	bf00      	nop
  400f18:	00400389 	.word	0x00400389
  400f1c:	20400a18 	.word	0x20400a18
  400f20:	00400c0d 	.word	0x00400c0d

00400f24 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400f24:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400f26:	2000      	movs	r0, #0
  400f28:	4b01      	ldr	r3, [pc, #4]	; (400f30 <sd_mmc_test_unit_ready_0+0xc>)
  400f2a:	4798      	blx	r3
}
  400f2c:	bd08      	pop	{r3, pc}
  400f2e:	bf00      	nop
  400f30:	00400ed5 	.word	0x00400ed5

00400f34 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400f34:	b538      	push	{r3, r4, r5, lr}
  400f36:	4604      	mov	r4, r0
  400f38:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400f3a:	4b04      	ldr	r3, [pc, #16]	; (400f4c <sd_mmc_read_capacity+0x18>)
  400f3c:	4798      	blx	r3
  400f3e:	0040      	lsls	r0, r0, #1
  400f40:	3801      	subs	r0, #1
  400f42:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400f44:	4620      	mov	r0, r4
  400f46:	4b02      	ldr	r3, [pc, #8]	; (400f50 <sd_mmc_read_capacity+0x1c>)
  400f48:	4798      	blx	r3
}
  400f4a:	bd38      	pop	{r3, r4, r5, pc}
  400f4c:	00400c31 	.word	0x00400c31
  400f50:	00400ed5 	.word	0x00400ed5

00400f54 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400f54:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400f56:	4601      	mov	r1, r0
  400f58:	2000      	movs	r0, #0
  400f5a:	4b01      	ldr	r3, [pc, #4]	; (400f60 <sd_mmc_read_capacity_0+0xc>)
  400f5c:	4798      	blx	r3
}
  400f5e:	bd08      	pop	{r3, pc}
  400f60:	00400f35 	.word	0x00400f35

00400f64 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400f64:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400f66:	2000      	movs	r0, #0
  400f68:	4b01      	ldr	r3, [pc, #4]	; (400f70 <sd_mmc_wr_protect_0+0xc>)
  400f6a:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  400f6c:	bd08      	pop	{r3, pc}
  400f6e:	bf00      	nop
  400f70:	00400c55 	.word	0x00400c55

00400f74 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400f74:	b510      	push	{r4, lr}
  400f76:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400f78:	2201      	movs	r2, #1
  400f7a:	4b0a      	ldr	r3, [pc, #40]	; (400fa4 <sd_mmc_mem_2_ram+0x30>)
  400f7c:	4798      	blx	r3
  400f7e:	b120      	cbz	r0, 400f8a <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400f80:	2802      	cmp	r0, #2
  400f82:	bf0c      	ite	eq
  400f84:	2002      	moveq	r0, #2
  400f86:	2001      	movne	r0, #1
  400f88:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400f8a:	2101      	movs	r1, #1
  400f8c:	4620      	mov	r0, r4
  400f8e:	4b06      	ldr	r3, [pc, #24]	; (400fa8 <sd_mmc_mem_2_ram+0x34>)
  400f90:	4798      	blx	r3
  400f92:	b108      	cbz	r0, 400f98 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  400f94:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400f96:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400f98:	4b04      	ldr	r3, [pc, #16]	; (400fac <sd_mmc_mem_2_ram+0x38>)
  400f9a:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400f9c:	3000      	adds	r0, #0
  400f9e:	bf18      	it	ne
  400fa0:	2001      	movne	r0, #1
  400fa2:	bd10      	pop	{r4, pc}
  400fa4:	00400c59 	.word	0x00400c59
  400fa8:	00400d2d 	.word	0x00400d2d
  400fac:	00400d55 	.word	0x00400d55

00400fb0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400fb0:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400fb2:	460a      	mov	r2, r1
  400fb4:	4601      	mov	r1, r0
  400fb6:	2000      	movs	r0, #0
  400fb8:	4b01      	ldr	r3, [pc, #4]	; (400fc0 <sd_mmc_mem_2_ram_0+0x10>)
  400fba:	4798      	blx	r3
}
  400fbc:	bd08      	pop	{r3, pc}
  400fbe:	bf00      	nop
  400fc0:	00400f75 	.word	0x00400f75

00400fc4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  400fc4:	b510      	push	{r4, lr}
  400fc6:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  400fc8:	2201      	movs	r2, #1
  400fca:	4b0a      	ldr	r3, [pc, #40]	; (400ff4 <sd_mmc_ram_2_mem+0x30>)
  400fcc:	4798      	blx	r3
  400fce:	b120      	cbz	r0, 400fda <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400fd0:	2802      	cmp	r0, #2
  400fd2:	bf0c      	ite	eq
  400fd4:	2002      	moveq	r0, #2
  400fd6:	2001      	movne	r0, #1
  400fd8:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  400fda:	2101      	movs	r1, #1
  400fdc:	4620      	mov	r0, r4
  400fde:	4b06      	ldr	r3, [pc, #24]	; (400ff8 <sd_mmc_ram_2_mem+0x34>)
  400fe0:	4798      	blx	r3
  400fe2:	b108      	cbz	r0, 400fe8 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  400fe4:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400fe6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  400fe8:	4b04      	ldr	r3, [pc, #16]	; (400ffc <sd_mmc_ram_2_mem+0x38>)
  400fea:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400fec:	3000      	adds	r0, #0
  400fee:	bf18      	it	ne
  400ff0:	2001      	movne	r0, #1
  400ff2:	bd10      	pop	{r4, pc}
  400ff4:	00400dbd 	.word	0x00400dbd
  400ff8:	00400e49 	.word	0x00400e49
  400ffc:	00400e71 	.word	0x00400e71

00401000 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401000:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  401002:	460a      	mov	r2, r1
  401004:	4601      	mov	r1, r0
  401006:	2000      	movs	r0, #0
  401008:	4b01      	ldr	r3, [pc, #4]	; (401010 <sd_mmc_ram_2_mem_0+0x10>)
  40100a:	4798      	blx	r3
}
  40100c:	bd08      	pop	{r3, pc}
  40100e:	bf00      	nop
  401010:	00400fc5 	.word	0x00400fc5

00401014 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401014:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401016:	4810      	ldr	r0, [pc, #64]	; (401058 <sysclk_init+0x44>)
  401018:	4b10      	ldr	r3, [pc, #64]	; (40105c <sysclk_init+0x48>)
  40101a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40101c:	213e      	movs	r1, #62	; 0x3e
  40101e:	2000      	movs	r0, #0
  401020:	4b0f      	ldr	r3, [pc, #60]	; (401060 <sysclk_init+0x4c>)
  401022:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401024:	4c0f      	ldr	r4, [pc, #60]	; (401064 <sysclk_init+0x50>)
  401026:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401028:	2800      	cmp	r0, #0
  40102a:	d0fc      	beq.n	401026 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40102c:	4b0e      	ldr	r3, [pc, #56]	; (401068 <sysclk_init+0x54>)
  40102e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401030:	4a0e      	ldr	r2, [pc, #56]	; (40106c <sysclk_init+0x58>)
  401032:	4b0f      	ldr	r3, [pc, #60]	; (401070 <sysclk_init+0x5c>)
  401034:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401036:	4c0f      	ldr	r4, [pc, #60]	; (401074 <sysclk_init+0x60>)
  401038:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40103a:	2800      	cmp	r0, #0
  40103c:	d0fc      	beq.n	401038 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40103e:	2002      	movs	r0, #2
  401040:	4b0d      	ldr	r3, [pc, #52]	; (401078 <sysclk_init+0x64>)
  401042:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401044:	2000      	movs	r0, #0
  401046:	4b0d      	ldr	r3, [pc, #52]	; (40107c <sysclk_init+0x68>)
  401048:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40104a:	4b0d      	ldr	r3, [pc, #52]	; (401080 <sysclk_init+0x6c>)
  40104c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40104e:	4802      	ldr	r0, [pc, #8]	; (401058 <sysclk_init+0x44>)
  401050:	4b02      	ldr	r3, [pc, #8]	; (40105c <sysclk_init+0x48>)
  401052:	4798      	blx	r3
  401054:	bd10      	pop	{r4, pc}
  401056:	bf00      	nop
  401058:	11e1a300 	.word	0x11e1a300
  40105c:	00402749 	.word	0x00402749
  401060:	00401ed5 	.word	0x00401ed5
  401064:	00401f29 	.word	0x00401f29
  401068:	00401f39 	.word	0x00401f39
  40106c:	20183f01 	.word	0x20183f01
  401070:	400e0600 	.word	0x400e0600
  401074:	00401f49 	.word	0x00401f49
  401078:	00401e39 	.word	0x00401e39
  40107c:	00401e71 	.word	0x00401e71
  401080:	0040263d 	.word	0x0040263d

00401084 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401084:	b108      	cbz	r0, 40108a <mem_test_unit_ready+0x6>
  401086:	2001      	movs	r0, #1
  401088:	4770      	bx	lr
{
  40108a:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  40108c:	4b01      	ldr	r3, [pc, #4]	; (401094 <mem_test_unit_ready+0x10>)
  40108e:	4798      	blx	r3
  401090:	bd08      	pop	{r3, pc}
  401092:	bf00      	nop
  401094:	00400f25 	.word	0x00400f25

00401098 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401098:	b108      	cbz	r0, 40109e <mem_read_capacity+0x6>
  40109a:	2001      	movs	r0, #1
  40109c:	4770      	bx	lr
{
  40109e:	b508      	push	{r3, lr}
  4010a0:	4608      	mov	r0, r1
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4010a2:	4b01      	ldr	r3, [pc, #4]	; (4010a8 <mem_read_capacity+0x10>)
  4010a4:	4798      	blx	r3
  4010a6:	bd08      	pop	{r3, pc}
  4010a8:	00400f55 	.word	0x00400f55

004010ac <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  4010ac:	fab0 f080 	clz	r0, r0
  4010b0:	0940      	lsrs	r0, r0, #5
  4010b2:	4770      	bx	lr

004010b4 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4010b4:	b108      	cbz	r0, 4010ba <mem_wr_protect+0x6>
  4010b6:	2001      	movs	r0, #1
  4010b8:	4770      	bx	lr
{
  4010ba:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4010bc:	4b01      	ldr	r3, [pc, #4]	; (4010c4 <mem_wr_protect+0x10>)
  4010be:	4798      	blx	r3
  4010c0:	bd08      	pop	{r3, pc}
  4010c2:	bf00      	nop
  4010c4:	00400f65 	.word	0x00400f65

004010c8 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4010c8:	b108      	cbz	r0, 4010ce <memory_2_ram+0x6>
  4010ca:	2001      	movs	r0, #1
  4010cc:	4770      	bx	lr
{
  4010ce:	b508      	push	{r3, lr}
  4010d0:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4010d2:	4611      	mov	r1, r2
  4010d4:	4b01      	ldr	r3, [pc, #4]	; (4010dc <memory_2_ram+0x14>)
  4010d6:	4798      	blx	r3
  4010d8:	bd08      	pop	{r3, pc}
  4010da:	bf00      	nop
  4010dc:	00400fb1 	.word	0x00400fb1

004010e0 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  4010e0:	b108      	cbz	r0, 4010e6 <ram_2_memory+0x6>
  4010e2:	2001      	movs	r0, #1
  4010e4:	4770      	bx	lr
{
  4010e6:	b508      	push	{r3, lr}
  4010e8:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  4010ea:	4611      	mov	r1, r2
  4010ec:	4b01      	ldr	r3, [pc, #4]	; (4010f4 <ram_2_memory+0x14>)
  4010ee:	4798      	blx	r3
  4010f0:	bd08      	pop	{r3, pc}
  4010f2:	bf00      	nop
  4010f4:	00401001 	.word	0x00401001

004010f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4010f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4010fc:	b980      	cbnz	r0, 401120 <_read+0x28>
  4010fe:	460c      	mov	r4, r1
  401100:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  401102:	2a00      	cmp	r2, #0
  401104:	dd0f      	ble.n	401126 <_read+0x2e>
  401106:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401108:	4e08      	ldr	r6, [pc, #32]	; (40112c <_read+0x34>)
  40110a:	4d09      	ldr	r5, [pc, #36]	; (401130 <_read+0x38>)
  40110c:	6830      	ldr	r0, [r6, #0]
  40110e:	4621      	mov	r1, r4
  401110:	682b      	ldr	r3, [r5, #0]
  401112:	4798      	blx	r3
		ptr++;
  401114:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  401116:	42bc      	cmp	r4, r7
  401118:	d1f8      	bne.n	40110c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40111a:	4640      	mov	r0, r8
  40111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401120:	f04f 38ff 	mov.w	r8, #4294967295
  401124:	e7f9      	b.n	40111a <_read+0x22>
	for (; len > 0; --len) {
  401126:	4680      	mov	r8, r0
  401128:	e7f7      	b.n	40111a <_read+0x22>
  40112a:	bf00      	nop
  40112c:	2040c444 	.word	0x2040c444
  401130:	2040c43c 	.word	0x2040c43c

00401134 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401134:	3801      	subs	r0, #1
  401136:	2802      	cmp	r0, #2
  401138:	d815      	bhi.n	401166 <_write+0x32>
{
  40113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40113e:	460e      	mov	r6, r1
  401140:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401142:	b19a      	cbz	r2, 40116c <_write+0x38>
  401144:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401146:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401180 <_write+0x4c>
  40114a:	4f0c      	ldr	r7, [pc, #48]	; (40117c <_write+0x48>)
  40114c:	f8d8 0000 	ldr.w	r0, [r8]
  401150:	f815 1b01 	ldrb.w	r1, [r5], #1
  401154:	683b      	ldr	r3, [r7, #0]
  401156:	4798      	blx	r3
  401158:	2800      	cmp	r0, #0
  40115a:	db0a      	blt.n	401172 <_write+0x3e>
  40115c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40115e:	3c01      	subs	r4, #1
  401160:	d1f4      	bne.n	40114c <_write+0x18>
  401162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401166:	f04f 30ff 	mov.w	r0, #4294967295
  40116a:	4770      	bx	lr
	for (; len != 0; --len) {
  40116c:	4610      	mov	r0, r2
  40116e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401172:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40117a:	bf00      	nop
  40117c:	2040c440 	.word	0x2040c440
  401180:	2040c444 	.word	0x2040c444

00401184 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401186:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40118a:	4bb8      	ldr	r3, [pc, #736]	; (40146c <board_init+0x2e8>)
  40118c:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40118e:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401192:	4fb7      	ldr	r7, [pc, #732]	; (401470 <board_init+0x2ec>)
  401194:	4638      	mov	r0, r7
  401196:	4db7      	ldr	r5, [pc, #732]	; (401474 <board_init+0x2f0>)
  401198:	47a8      	blx	r5
	dw_region_attr =
  40119a:	4eb7      	ldr	r6, [pc, #732]	; (401478 <board_init+0x2f4>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40119c:	ea40 0106 	orr.w	r1, r0, r6
  4011a0:	2011      	movs	r0, #17
  4011a2:	4cb6      	ldr	r4, [pc, #728]	; (40147c <board_init+0x2f8>)
  4011a4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  4011a6:	48b6      	ldr	r0, [pc, #728]	; (401480 <board_init+0x2fc>)
  4011a8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011aa:	49b6      	ldr	r1, [pc, #728]	; (401484 <board_init+0x300>)
  4011ac:	4301      	orrs	r1, r0
  4011ae:	48b6      	ldr	r0, [pc, #728]	; (401488 <board_init+0x304>)
  4011b0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4011b2:	4638      	mov	r0, r7
  4011b4:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011b6:	ea40 0106 	orr.w	r1, r0, r6
  4011ba:	48b4      	ldr	r0, [pc, #720]	; (40148c <board_init+0x308>)
  4011bc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  4011be:	48b4      	ldr	r0, [pc, #720]	; (401490 <board_init+0x30c>)
  4011c0:	47a8      	blx	r5
	dw_region_attr =
  4011c2:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  4011c6:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011ca:	ea40 0106 	orr.w	r1, r0, r6
  4011ce:	48b1      	ldr	r0, [pc, #708]	; (401494 <board_init+0x310>)
  4011d0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4011d2:	48b1      	ldr	r0, [pc, #708]	; (401498 <board_init+0x314>)
  4011d4:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011d6:	ea40 0106 	orr.w	r1, r0, r6
  4011da:	48b0      	ldr	r0, [pc, #704]	; (40149c <board_init+0x318>)
  4011dc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4011de:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4011e2:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  4011e4:	4eae      	ldr	r6, [pc, #696]	; (4014a0 <board_init+0x31c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011e6:	ea40 0106 	orr.w	r1, r0, r6
  4011ea:	48ae      	ldr	r0, [pc, #696]	; (4014a4 <board_init+0x320>)
  4011ec:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  4011ee:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4011f2:	47a8      	blx	r5
	dw_region_attr =
  4011f4:	4fac      	ldr	r7, [pc, #688]	; (4014a8 <board_init+0x324>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011f6:	ea40 0107 	orr.w	r1, r0, r7
  4011fa:	48ac      	ldr	r0, [pc, #688]	; (4014ac <board_init+0x328>)
  4011fc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  4011fe:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401202:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401204:	49aa      	ldr	r1, [pc, #680]	; (4014b0 <board_init+0x32c>)
  401206:	4301      	orrs	r1, r0
  401208:	48aa      	ldr	r0, [pc, #680]	; (4014b4 <board_init+0x330>)
  40120a:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  40120c:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401210:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401212:	ea40 0107 	orr.w	r1, r0, r7
  401216:	48a8      	ldr	r0, [pc, #672]	; (4014b8 <board_init+0x334>)
  401218:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  40121a:	48a8      	ldr	r0, [pc, #672]	; (4014bc <board_init+0x338>)
  40121c:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40121e:	ea40 0106 	orr.w	r1, r0, r6
  401222:	48a7      	ldr	r0, [pc, #668]	; (4014c0 <board_init+0x33c>)
  401224:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401226:	4ca7      	ldr	r4, [pc, #668]	; (4014c4 <board_init+0x340>)
  401228:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40122a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  40122e:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401230:	2005      	movs	r0, #5
  401232:	4ba5      	ldr	r3, [pc, #660]	; (4014c8 <board_init+0x344>)
  401234:	4798      	blx	r3
  __ASM volatile ("dsb");
  401236:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40123a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  40123e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401242:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401246:	2300      	movs	r3, #0
  401248:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40124c:	6963      	ldr	r3, [r4, #20]
  40124e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401252:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  401254:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401258:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40125c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401260:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401264:	f007 0007 	and.w	r0, r7, #7
  401268:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40126a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40126e:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401272:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  401276:	f3bf 8f4f 	dsb	sy
  40127a:	f04f 34ff 	mov.w	r4, #4294967295
  40127e:	fa04 fc00 	lsl.w	ip, r4, r0
  401282:	fa06 f000 	lsl.w	r0, r6, r0
  401286:	fa04 f40e 	lsl.w	r4, r4, lr
  40128a:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40128e:	4d8d      	ldr	r5, [pc, #564]	; (4014c4 <board_init+0x340>)
         int32_t tmpways = ways;
  401290:	463a      	mov	r2, r7
  401292:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  401294:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  401298:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40129c:	3a01      	subs	r2, #1
  40129e:	4423      	add	r3, r4
  4012a0:	f1b2 3fff 	cmp.w	r2, #4294967295
  4012a4:	d1f6      	bne.n	401294 <board_init+0x110>
        } while(sets--);
  4012a6:	3e01      	subs	r6, #1
  4012a8:	4460      	add	r0, ip
  4012aa:	f1b6 3fff 	cmp.w	r6, #4294967295
  4012ae:	d1ef      	bne.n	401290 <board_init+0x10c>
  4012b0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4012b4:	4b83      	ldr	r3, [pc, #524]	; (4014c4 <board_init+0x340>)
  4012b6:	695a      	ldr	r2, [r3, #20]
  4012b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4012bc:	615a      	str	r2, [r3, #20]
  4012be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4012c2:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4012c6:	4a81      	ldr	r2, [pc, #516]	; (4014cc <board_init+0x348>)
  4012c8:	4981      	ldr	r1, [pc, #516]	; (4014d0 <board_init+0x34c>)
  4012ca:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4012cc:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4012d0:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4012d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4012d6:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4012da:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4012de:	f022 0201 	bic.w	r2, r2, #1
  4012e2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4012e6:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4012ea:	f022 0201 	bic.w	r2, r2, #1
  4012ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4012f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4012f6:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4012fa:	200a      	movs	r0, #10
  4012fc:	4c75      	ldr	r4, [pc, #468]	; (4014d4 <board_init+0x350>)
  4012fe:	47a0      	blx	r4
  401300:	200b      	movs	r0, #11
  401302:	47a0      	blx	r4
  401304:	200c      	movs	r0, #12
  401306:	47a0      	blx	r4
  401308:	2010      	movs	r0, #16
  40130a:	47a0      	blx	r4
  40130c:	2011      	movs	r0, #17
  40130e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401310:	4a71      	ldr	r2, [pc, #452]	; (4014d8 <board_init+0x354>)
  401312:	f44f 7380 	mov.w	r3, #256	; 0x100
  401316:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401318:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40131c:	6313      	str	r3, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40131e:	4b6f      	ldr	r3, [pc, #444]	; (4014dc <board_init+0x358>)
  401320:	f44f 6100 	mov.w	r1, #2048	; 0x800
  401324:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401326:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40132a:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40132c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401330:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401332:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  401334:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401338:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40133a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  40133e:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401340:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401342:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  401346:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401348:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40134c:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401350:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401354:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401358:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40135a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40135e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401360:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401362:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401366:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401368:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  40136c:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40136e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401370:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  401374:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401376:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401378:	4859      	ldr	r0, [pc, #356]	; (4014e0 <board_init+0x35c>)
  40137a:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  40137e:	f041 0110 	orr.w	r1, r1, #16
  401382:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  401386:	f500 20b2 	add.w	r0, r0, #364544	; 0x59000
  40138a:	2110      	movs	r1, #16
  40138c:	6601      	str	r1, [r0, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40138e:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
		base->PIO_MDDR = mask;
  401392:	6541      	str	r1, [r0, #84]	; 0x54
		base->PIO_IFDR = mask;
  401394:	6241      	str	r1, [r0, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401396:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40139a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40139c:	430c      	orrs	r4, r1
  40139e:	6704      	str	r4, [r0, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4013a0:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4013a2:	430c      	orrs	r4, r1
  4013a4:	6744      	str	r4, [r0, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013a6:	6041      	str	r1, [r0, #4]
		base->PIO_PUDR = mask;
  4013a8:	2008      	movs	r0, #8
  4013aa:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013ac:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013b0:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013b2:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013b4:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013b8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4013ba:	f024 0408 	bic.w	r4, r4, #8
  4013be:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4013c0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4013c2:	f024 0408 	bic.w	r4, r4, #8
  4013c6:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013c8:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  4013ca:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013cc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013d0:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013d2:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013d4:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013d8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4013da:	f020 0010 	bic.w	r0, r0, #16
  4013de:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4013e0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4013e2:	f020 0010 	bic.w	r0, r0, #16
  4013e6:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013e8:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4013ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013ee:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013f0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013f4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013f6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013f8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4013fe:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  401402:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401404:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401406:	4308      	orrs	r0, r1
  401408:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40140a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40140c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  401410:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401412:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401416:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401418:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40141a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40141e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401420:	4308      	orrs	r0, r1
  401422:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401424:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401426:	4308      	orrs	r0, r1
  401428:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40142a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40142c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401430:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401432:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401436:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401438:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40143a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40143e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401440:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  401444:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401446:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401448:	4308      	orrs	r0, r1
  40144a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40144c:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40144e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401452:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401454:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401458:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40145a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40145c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401460:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401462:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  401466:	6718      	str	r0, [r3, #112]	; 0x70
  401468:	e03c      	b.n	4014e4 <board_init+0x360>
  40146a:	bf00      	nop
  40146c:	400e1850 	.word	0x400e1850
  401470:	003fffff 	.word	0x003fffff
  401474:	00401bb5 	.word	0x00401bb5
  401478:	01000001 	.word	0x01000001
  40147c:	00401ba9 	.word	0x00401ba9
  401480:	001fffff 	.word	0x001fffff
  401484:	06230001 	.word	0x06230001
  401488:	00400012 	.word	0x00400012
  40148c:	20000013 	.word	0x20000013
  401490:	0003ffff 	.word	0x0003ffff
  401494:	20400014 	.word	0x20400014
  401498:	0001ffff 	.word	0x0001ffff
  40149c:	20440015 	.word	0x20440015
  4014a0:	13010001 	.word	0x13010001
  4014a4:	40000016 	.word	0x40000016
  4014a8:	03000001 	.word	0x03000001
  4014ac:	60000017 	.word	0x60000017
  4014b0:	03250001 	.word	0x03250001
  4014b4:	70000018 	.word	0x70000018
  4014b8:	80000019 	.word	0x80000019
  4014bc:	000fffff 	.word	0x000fffff
  4014c0:	a010001a 	.word	0xa010001a
  4014c4:	e000ed00 	.word	0xe000ed00
  4014c8:	00401b9d 	.word	0x00401b9d
  4014cc:	400e0c00 	.word	0x400e0c00
  4014d0:	5a00080c 	.word	0x5a00080c
  4014d4:	00401f59 	.word	0x00401f59
  4014d8:	400e1200 	.word	0x400e1200
  4014dc:	400e0e00 	.word	0x400e0e00
  4014e0:	40088000 	.word	0x40088000
		base->PIO_ABCDSR[1] |= mask;
  4014e4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4014e6:	4308      	orrs	r0, r1
  4014e8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4014ea:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4014ec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4014f0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4014f2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4014f6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4014f8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4014fa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4014fe:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401500:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  401504:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401506:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401508:	4308      	orrs	r0, r1
  40150a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40150c:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40150e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401512:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401514:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401518:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40151a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40151c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401520:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401522:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  401526:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401528:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40152a:	4308      	orrs	r0, r1
  40152c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40152e:	6059      	str	r1, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  401534:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401536:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  40153a:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40153c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401540:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401542:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401544:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401548:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40154a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40154e:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401550:	6f53      	ldr	r3, [r2, #116]	; 0x74
  401552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401556:	6753      	str	r3, [r2, #116]	; 0x74
  401558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40155a:	bf00      	nop

0040155c <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  40155c:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  40155e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401562:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401564:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401566:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401568:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  40156a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  40156c:	2680      	movs	r6, #128	; 0x80
  40156e:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  401570:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401572:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401574:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401576:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  401578:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  40157a:	2200      	movs	r2, #0
  40157c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  40157e:	2205      	movs	r2, #5
  401580:	601a      	str	r2, [r3, #0]
}
  401582:	bc70      	pop	{r4, r5, r6}
  401584:	4770      	bx	lr
	...

00401588 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  401588:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  40158a:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  40158e:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  401590:	f411 7f80 	tst.w	r1, #256	; 0x100
  401594:	d004      	beq.n	4015a0 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  401596:	f411 6f00 	tst.w	r1, #2048	; 0x800
  40159a:	d00e      	beq.n	4015ba <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  40159c:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  4015a0:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  4015a4:	bf18      	it	ne
  4015a6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  4015aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4015ae:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  4015b0:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  4015b2:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  4015b4:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  4015b8:	e00d      	b.n	4015d6 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  4015ba:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  4015be:	bf14      	ite	ne
  4015c0:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  4015c4:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  4015c8:	e7ea      	b.n	4015a0 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4015ca:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4015ce:	d10c      	bne.n	4015ea <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4015d0:	f013 0f01 	tst.w	r3, #1
  4015d4:	d10d      	bne.n	4015f2 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  4015d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  4015d8:	2a00      	cmp	r2, #0
  4015da:	d0f6      	beq.n	4015ca <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4015dc:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  4015e0:	d0f6      	beq.n	4015d0 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  4015e2:	4b10      	ldr	r3, [pc, #64]	; (401624 <hsmci_send_cmd_execute+0x9c>)
  4015e4:	4798      	blx	r3
				return false;
  4015e6:	2000      	movs	r0, #0
  4015e8:	bd08      	pop	{r3, pc}
				hsmci_reset();
  4015ea:	4b0e      	ldr	r3, [pc, #56]	; (401624 <hsmci_send_cmd_execute+0x9c>)
  4015ec:	4798      	blx	r3
				return false;
  4015ee:	2000      	movs	r0, #0
  4015f0:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  4015f2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  4015f6:	d103      	bne.n	401600 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  4015f8:	2001      	movs	r0, #1
  4015fa:	bd08      	pop	{r3, pc}
	return true;
  4015fc:	2001      	movs	r0, #1
  4015fe:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  401600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401606:	f04f 32ff 	mov.w	r2, #4294967295
  40160a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  40160e:	f003 0330 	and.w	r3, r3, #48	; 0x30
  401612:	2b20      	cmp	r3, #32
  401614:	d0f2      	beq.n	4015fc <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  401616:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401618:	3a01      	subs	r2, #1
  40161a:	d1f8      	bne.n	40160e <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  40161c:	4b01      	ldr	r3, [pc, #4]	; (401624 <hsmci_send_cmd_execute+0x9c>)
  40161e:	4798      	blx	r3
			return false;
  401620:	2000      	movs	r0, #0
  401622:	bd08      	pop	{r3, pc}
  401624:	0040155d 	.word	0x0040155d

00401628 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401628:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  40162a:	2012      	movs	r0, #18
  40162c:	4c08      	ldr	r4, [pc, #32]	; (401650 <hsmci_init+0x28>)
  40162e:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  401630:	203a      	movs	r0, #58	; 0x3a
  401632:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401638:	2272      	movs	r2, #114	; 0x72
  40163a:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  40163c:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40163e:	2211      	movs	r2, #17
  401640:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  401642:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401646:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401648:	2205      	movs	r2, #5
  40164a:	601a      	str	r2, [r3, #0]
  40164c:	bd10      	pop	{r4, pc}
  40164e:	bf00      	nop
  401650:	00401f59 	.word	0x00401f59

00401654 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401654:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401656:	bf0c      	ite	eq
  401658:	2004      	moveq	r0, #4
  40165a:	2000      	movne	r0, #0
  40165c:	4770      	bx	lr

0040165e <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  40165e:	2001      	movs	r0, #1
  401660:	4770      	bx	lr
	...

00401664 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401664:	b37b      	cbz	r3, 4016c6 <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401666:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40166a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40166c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401670:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  401672:	4b2b      	ldr	r3, [pc, #172]	; (401720 <hsmci_select_device+0xbc>)
  401674:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  401678:	d337      	bcc.n	4016ea <hsmci_select_device+0x86>
{
  40167a:	b410      	push	{r4}
		div = (mck / speed) - 2;
  40167c:	4829      	ldr	r0, [pc, #164]	; (401724 <hsmci_select_device+0xc0>)
  40167e:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  401682:	fb01 0113 	mls	r1, r1, r3, r0
  401686:	bb29      	cbnz	r1, 4016d4 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  401688:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40168a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40168e:	6848      	ldr	r0, [r1, #4]
  401690:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  401694:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401696:	684c      	ldr	r4, [r1, #4]
  401698:	f3c3 0047 	ubfx	r0, r3, #1, #8
  40169c:	4320      	orrs	r0, r4
  40169e:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  4016a0:	f013 0f01 	tst.w	r3, #1
  4016a4:	d018      	beq.n	4016d8 <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  4016a6:	684b      	ldr	r3, [r1, #4]
  4016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4016ac:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4016ae:	2a04      	cmp	r2, #4
  4016b0:	d019      	beq.n	4016e6 <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4016b2:	2a08      	cmp	r2, #8
  4016b4:	bf0c      	ite	eq
  4016b6:	22c0      	moveq	r2, #192	; 0xc0
  4016b8:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4016ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016be:	60da      	str	r2, [r3, #12]
}
  4016c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016c4:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  4016c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4016ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
  4016cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4016d0:	6543      	str	r3, [r0, #84]	; 0x54
  4016d2:	e7ce      	b.n	401672 <hsmci_select_device+0xe>
			div++;
  4016d4:	3b01      	subs	r3, #1
  4016d6:	e7d8      	b.n	40168a <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4016d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4016dc:	684b      	ldr	r3, [r1, #4]
  4016de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4016e2:	604b      	str	r3, [r1, #4]
  4016e4:	e7e3      	b.n	4016ae <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4016e6:	2280      	movs	r2, #128	; 0x80
  4016e8:	e7e7      	b.n	4016ba <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4016ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016ee:	6859      	ldr	r1, [r3, #4]
  4016f0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  4016f4:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4016f6:	6859      	ldr	r1, [r3, #4]
  4016f8:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4016fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4016fe:	684b      	ldr	r3, [r1, #4]
  401700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401704:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  401706:	2a04      	cmp	r2, #4
  401708:	d007      	beq.n	40171a <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  40170a:	2a08      	cmp	r2, #8
  40170c:	bf0c      	ite	eq
  40170e:	22c0      	moveq	r2, #192	; 0xc0
  401710:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401716:	60da      	str	r2, [r3, #12]
  401718:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  40171a:	2280      	movs	r2, #128	; 0x80
  40171c:	e7f9      	b.n	401712 <hsmci_select_device+0xae>
  40171e:	bf00      	nop
  401720:	08f0d17f 	.word	0x08f0d17f
  401724:	08f0d180 	.word	0x08f0d180

00401728 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  401728:	4770      	bx	lr

0040172a <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40172a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40172e:	685a      	ldr	r2, [r3, #4]
  401730:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401734:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401736:	2200      	movs	r2, #0
  401738:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  40173a:	f44f 6210 	mov.w	r2, #2304	; 0x900
  40173e:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  401740:	461a      	mov	r2, r3
  401742:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401744:	f013 0f01 	tst.w	r3, #1
  401748:	d0fb      	beq.n	401742 <hsmci_send_clock+0x18>
}
  40174a:	4770      	bx	lr

0040174c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  40174c:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40174e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401752:	685a      	ldr	r2, [r3, #4]
  401754:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401758:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  40175a:	2400      	movs	r4, #0
  40175c:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  40175e:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  401760:	460a      	mov	r2, r1
  401762:	4601      	mov	r1, r0
  401764:	4620      	mov	r0, r4
  401766:	4b01      	ldr	r3, [pc, #4]	; (40176c <hsmci_send_cmd+0x20>)
  401768:	4798      	blx	r3
}
  40176a:	bd10      	pop	{r4, pc}
  40176c:	00401589 	.word	0x00401589

00401770 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  401770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401774:	6a18      	ldr	r0, [r3, #32]
}
  401776:	4770      	bx	lr

00401778 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  401778:	b410      	push	{r4}
  40177a:	1d03      	adds	r3, r0, #4
  40177c:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  40177e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401782:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  401784:	0e11      	lsrs	r1, r2, #24
  401786:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40178a:	0c11      	lsrs	r1, r2, #16
  40178c:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  401790:	0a11      	lsrs	r1, r2, #8
  401792:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  401796:	f803 2c01 	strb.w	r2, [r3, #-1]
  40179a:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  40179c:	4283      	cmp	r3, r0
  40179e:	d1f0      	bne.n	401782 <hsmci_get_response_128+0xa>
		response++;
	}
}
  4017a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4017a4:	4770      	bx	lr
	...

004017a8 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4017a8:	b570      	push	{r4, r5, r6, lr}
  4017aa:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  4017ae:	b384      	cbz	r4, 401812 <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  4017b0:	f44f 7580 	mov.w	r5, #256	; 0x100
  4017b4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4017b8:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4017ba:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4017be:	686c      	ldr	r4, [r5, #4]
  4017c0:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  4017c4:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  4017c6:	f012 0f03 	tst.w	r2, #3
  4017ca:	d027      	beq.n	40181c <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4017cc:	686c      	ldr	r4, [r5, #4]
  4017ce:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4017d2:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  4017d4:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  4017d8:	2c00      	cmp	r4, #0
  4017da:	bf14      	ite	ne
  4017dc:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  4017e0:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  4017e4:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  4017e8:	d11f      	bne.n	40182a <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  4017ea:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  4017ee:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4017f2:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  4017f4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  4017f8:	d12b      	bne.n	401852 <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  4017fa:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  4017fe:	d12b      	bne.n	401858 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  401800:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  401804:	d118      	bne.n	401838 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  401806:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  40180a:	bf18      	it	ne
  40180c:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  401810:	e012      	b.n	401838 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  401812:	2500      	movs	r5, #0
  401814:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401818:	6525      	str	r5, [r4, #80]	; 0x50
  40181a:	e7ce      	b.n	4017ba <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40181c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  401820:	686c      	ldr	r4, [r5, #4]
  401822:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  401826:	606c      	str	r4, [r5, #4]
  401828:	e7d4      	b.n	4017d4 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  40182a:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  40182e:	f3c2 0508 	ubfx	r5, r2, #0, #9
  401832:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  401836:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401838:	2600      	movs	r6, #0
  40183a:	4d09      	ldr	r5, [pc, #36]	; (401860 <hsmci_adtc_start+0xb8>)
  40183c:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  40183e:	4d09      	ldr	r5, [pc, #36]	; (401864 <hsmci_adtc_start+0xbc>)
  401840:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  401842:	4a09      	ldr	r2, [pc, #36]	; (401868 <hsmci_adtc_start+0xc0>)
  401844:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401846:	460a      	mov	r2, r1
  401848:	4601      	mov	r1, r0
  40184a:	4620      	mov	r0, r4
  40184c:	4b07      	ldr	r3, [pc, #28]	; (40186c <hsmci_adtc_start+0xc4>)
  40184e:	4798      	blx	r3
}
  401850:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  401852:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  401856:	e7ef      	b.n	401838 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  401858:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40185c:	e7ec      	b.n	401838 <hsmci_adtc_start+0x90>
  40185e:	bf00      	nop
  401860:	20400a20 	.word	0x20400a20
  401864:	20400a1a 	.word	0x20400a1a
  401868:	20400a1c 	.word	0x20400a1c
  40186c:	00401589 	.word	0x00401589

00401870 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  401870:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  401872:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401876:	4a16      	ldr	r2, [pc, #88]	; (4018d0 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  401878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40187a:	4213      	tst	r3, r2
  40187c:	d11d      	bne.n	4018ba <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  40187e:	f013 0f02 	tst.w	r3, #2
  401882:	d0f9      	beq.n	401878 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  401884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40188a:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  40188c:	4a11      	ldr	r2, [pc, #68]	; (4018d4 <hsmci_read_word+0x64>)
  40188e:	6813      	ldr	r3, [r2, #0]
  401890:	3304      	adds	r3, #4
  401892:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401894:	4a10      	ldr	r2, [pc, #64]	; (4018d8 <hsmci_read_word+0x68>)
  401896:	8811      	ldrh	r1, [r2, #0]
  401898:	4a10      	ldr	r2, [pc, #64]	; (4018dc <hsmci_read_word+0x6c>)
  40189a:	8812      	ldrh	r2, [r2, #0]
  40189c:	fb02 f201 	mul.w	r2, r2, r1
  4018a0:	4293      	cmp	r3, r2
  4018a2:	d312      	bcc.n	4018ca <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4018a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4018a8:	4a09      	ldr	r2, [pc, #36]	; (4018d0 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4018aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4018ac:	4213      	tst	r3, r2
  4018ae:	d108      	bne.n	4018c2 <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4018b0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4018b4:	d0f9      	beq.n	4018aa <hsmci_read_word+0x3a>
	return true;
  4018b6:	2001      	movs	r0, #1
  4018b8:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4018ba:	4b09      	ldr	r3, [pc, #36]	; (4018e0 <hsmci_read_word+0x70>)
  4018bc:	4798      	blx	r3
			return false;
  4018be:	2000      	movs	r0, #0
  4018c0:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4018c2:	4b07      	ldr	r3, [pc, #28]	; (4018e0 <hsmci_read_word+0x70>)
  4018c4:	4798      	blx	r3
			return false;
  4018c6:	2000      	movs	r0, #0
  4018c8:	bd08      	pop	{r3, pc}
		return true;
  4018ca:	2001      	movs	r0, #1
}
  4018cc:	bd08      	pop	{r3, pc}
  4018ce:	bf00      	nop
  4018d0:	c0600000 	.word	0xc0600000
  4018d4:	20400a20 	.word	0x20400a20
  4018d8:	20400a1a 	.word	0x20400a1a
  4018dc:	20400a1c 	.word	0x20400a1c
  4018e0:	0040155d 	.word	0x0040155d

004018e4 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  4018e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4018e8:	b088      	sub	sp, #32
  4018ea:	4604      	mov	r4, r0
  4018ec:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  4018ee:	2220      	movs	r2, #32
  4018f0:	2100      	movs	r1, #0
  4018f2:	4668      	mov	r0, sp
  4018f4:	4b30      	ldr	r3, [pc, #192]	; (4019b8 <hsmci_start_read_blocks+0xd4>)
  4018f6:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4018f8:	2201      	movs	r2, #1
  4018fa:	4b30      	ldr	r3, [pc, #192]	; (4019bc <hsmci_start_read_blocks+0xd8>)
  4018fc:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  4018fe:	4b30      	ldr	r3, [pc, #192]	; (4019c0 <hsmci_start_read_blocks+0xdc>)
  401900:	881b      	ldrh	r3, [r3, #0]
  401902:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)dest & 3) {
  401906:	f014 0f03 	tst.w	r4, #3
  40190a:	d14a      	bne.n	4019a2 <hsmci_start_read_blocks+0xbe>
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40190c:	4b2d      	ldr	r3, [pc, #180]	; (4019c4 <hsmci_start_read_blocks+0xe0>)
  40190e:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF1
						| XDMAC_CC_DIF_AHB_IF0
						| XDMAC_CC_SAM_FIXED_AM
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  401910:	08ab      	lsrs	r3, r5, #2
  401912:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401918:	6853      	ldr	r3, [r2, #4]
  40191a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40191e:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  401920:	4b29      	ldr	r3, [pc, #164]	; (4019c8 <hsmci_start_read_blocks+0xe4>)
  401922:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  401924:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401926:	466a      	mov	r2, sp
  401928:	2100      	movs	r1, #0
  40192a:	4824      	ldr	r0, [pc, #144]	; (4019bc <hsmci_start_read_blocks+0xd8>)
  40192c:	4b27      	ldr	r3, [pc, #156]	; (4019cc <hsmci_start_read_blocks+0xe8>)
  40192e:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401930:	4b27      	ldr	r3, [pc, #156]	; (4019d0 <hsmci_start_read_blocks+0xec>)
  401932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401936:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40193a:	f003 0007 	and.w	r0, r3, #7
  40193e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401940:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401944:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401948:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  40194c:	f3bf 8f4f 	dsb	sy
  401950:	f04f 34ff 	mov.w	r4, #4294967295
  401954:	fa04 f800 	lsl.w	r8, r4, r0
  401958:	fa07 f000 	lsl.w	r0, r7, r0
  40195c:	fa04 f40c 	lsl.w	r4, r4, ip
  401960:	fa0e fc0c 	lsl.w	ip, lr, ip

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  401964:	4e1a      	ldr	r6, [pc, #104]	; (4019d0 <hsmci_start_read_blocks+0xec>)
         int32_t tmpways = ways;
  401966:	4672      	mov	r2, lr
  401968:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  40196a:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40196e:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  401972:	3a01      	subs	r2, #1
  401974:	4423      	add	r3, r4
  401976:	f1b2 3fff 	cmp.w	r2, #4294967295
  40197a:	d1f6      	bne.n	40196a <hsmci_start_read_blocks+0x86>
        } while(sets--);
  40197c:	3f01      	subs	r7, #1
  40197e:	4440      	add	r0, r8
  401980:	f1b7 3fff 	cmp.w	r7, #4294967295
  401984:	d1ef      	bne.n	401966 <hsmci_start_read_blocks+0x82>
  401986:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40198a:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40198e:	2001      	movs	r0, #1
  401990:	4b0a      	ldr	r3, [pc, #40]	; (4019bc <hsmci_start_read_blocks+0xd8>)
  401992:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  401994:	4a0f      	ldr	r2, [pc, #60]	; (4019d4 <hsmci_start_read_blocks+0xf0>)
  401996:	6813      	ldr	r3, [r2, #0]
  401998:	442b      	add	r3, r5
  40199a:	6013      	str	r3, [r2, #0]
	return true;
}
  40199c:	b008      	add	sp, #32
  40199e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4019a2:	4b0d      	ldr	r3, [pc, #52]	; (4019d8 <hsmci_start_read_blocks+0xf4>)
  4019a4:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  4019a6:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4019a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4019ac:	6853      	ldr	r3, [r2, #4]
  4019ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4019b2:	6053      	str	r3, [r2, #4]
  4019b4:	e7b4      	b.n	401920 <hsmci_start_read_blocks+0x3c>
  4019b6:	bf00      	nop
  4019b8:	00406dd9 	.word	0x00406dd9
  4019bc:	40078000 	.word	0x40078000
  4019c0:	20400a1a 	.word	0x20400a1a
  4019c4:	00043001 	.word	0x00043001
  4019c8:	40000200 	.word	0x40000200
  4019cc:	00402537 	.word	0x00402537
  4019d0:	e000ed00 	.word	0xe000ed00
  4019d4:	20400a20 	.word	0x20400a20
  4019d8:	00042001 	.word	0x00042001

004019dc <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  4019dc:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4019de:	4b12      	ldr	r3, [pc, #72]	; (401a28 <hsmci_wait_end_of_read_blocks+0x4c>)
  4019e0:	881b      	ldrh	r3, [r3, #0]
  4019e2:	4a12      	ldr	r2, [pc, #72]	; (401a2c <hsmci_wait_end_of_read_blocks+0x50>)
  4019e4:	8812      	ldrh	r2, [r2, #0]
  4019e6:	fb02 f203 	mul.w	r2, r2, r3
  4019ea:	4b11      	ldr	r3, [pc, #68]	; (401a30 <hsmci_wait_end_of_read_blocks+0x54>)
  4019ec:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  4019ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4019f2:	4910      	ldr	r1, [pc, #64]	; (401a34 <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4019f4:	4e10      	ldr	r6, [pc, #64]	; (401a38 <hsmci_wait_end_of_read_blocks+0x5c>)
  4019f6:	e009      	b.n	401a0c <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  4019f8:	4b10      	ldr	r3, [pc, #64]	; (401a3c <hsmci_wait_end_of_read_blocks+0x60>)
  4019fa:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4019fc:	2201      	movs	r2, #1
  4019fe:	4b0e      	ldr	r3, [pc, #56]	; (401a38 <hsmci_wait_end_of_read_blocks+0x5c>)
  401a00:	621a      	str	r2, [r3, #32]
			return false;
  401a02:	2000      	movs	r0, #0
  401a04:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401a06:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401a0a:	d10a      	bne.n	401a22 <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  401a0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401a0e:	420b      	tst	r3, r1
  401a10:	d1f2      	bne.n	4019f8 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401a12:	42a2      	cmp	r2, r4
  401a14:	d9f7      	bls.n	401a06 <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401a16:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401a18:	f015 0f01 	tst.w	r5, #1
  401a1c:	d0f3      	beq.n	401a06 <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  401a1e:	2001      	movs	r0, #1
	return true;
}
  401a20:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  401a22:	2001      	movs	r0, #1
  401a24:	bd70      	pop	{r4, r5, r6, pc}
  401a26:	bf00      	nop
  401a28:	20400a1a 	.word	0x20400a1a
  401a2c:	20400a1c 	.word	0x20400a1c
  401a30:	20400a20 	.word	0x20400a20
  401a34:	c0600000 	.word	0xc0600000
  401a38:	40078000 	.word	0x40078000
  401a3c:	0040155d 	.word	0x0040155d

00401a40 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  401a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a44:	b088      	sub	sp, #32
  401a46:	4604      	mov	r4, r0
  401a48:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  401a4a:	2220      	movs	r2, #32
  401a4c:	2100      	movs	r1, #0
  401a4e:	4668      	mov	r0, sp
  401a50:	4b30      	ldr	r3, [pc, #192]	; (401b14 <hsmci_start_write_blocks+0xd4>)
  401a52:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401a54:	2201      	movs	r2, #1
  401a56:	4b30      	ldr	r3, [pc, #192]	; (401b18 <hsmci_start_write_blocks+0xd8>)
  401a58:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  401a5a:	4b30      	ldr	r3, [pc, #192]	; (401b1c <hsmci_start_write_blocks+0xdc>)
  401a5c:	881b      	ldrh	r3, [r3, #0]
  401a5e:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)src & 3) {
  401a62:	f014 0f03 	tst.w	r4, #3
  401a66:	d14a      	bne.n	401afe <hsmci_start_write_blocks+0xbe>
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401a68:	4b2d      	ldr	r3, [pc, #180]	; (401b20 <hsmci_start_write_blocks+0xe0>)
  401a6a:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF0
						| XDMAC_CC_DIF_AHB_IF1
						| XDMAC_CC_SAM_INCREMENTED_AM
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  401a6c:	08ab      	lsrs	r3, r5, #2
  401a6e:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401a74:	6853      	ldr	r3, [r2, #4]
  401a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401a7a:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)src;
  401a7c:	9401      	str	r4, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  401a7e:	4b29      	ldr	r3, [pc, #164]	; (401b24 <hsmci_start_write_blocks+0xe4>)
  401a80:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401a82:	466a      	mov	r2, sp
  401a84:	2100      	movs	r1, #0
  401a86:	4824      	ldr	r0, [pc, #144]	; (401b18 <hsmci_start_write_blocks+0xd8>)
  401a88:	4b27      	ldr	r3, [pc, #156]	; (401b28 <hsmci_start_write_blocks+0xe8>)
  401a8a:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  401a8c:	4b27      	ldr	r3, [pc, #156]	; (401b2c <hsmci_start_write_blocks+0xec>)
  401a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401a92:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401a96:	f003 0007 	and.w	r0, r3, #7
  401a9a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401a9c:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401aa0:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401aa4:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  401aa8:	f3bf 8f4f 	dsb	sy
  401aac:	f04f 34ff 	mov.w	r4, #4294967295
  401ab0:	fa04 f800 	lsl.w	r8, r4, r0
  401ab4:	fa07 f000 	lsl.w	r0, r7, r0
  401ab8:	fa04 f40c 	lsl.w	r4, r4, ip
  401abc:	fa0e fc0c 	lsl.w	ip, lr, ip
              SCB->DCCISW = sw;
  401ac0:	4e1a      	ldr	r6, [pc, #104]	; (401b2c <hsmci_start_write_blocks+0xec>)
         int32_t tmpways = ways;
  401ac2:	4672      	mov	r2, lr
  401ac4:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  401ac6:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  401aca:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  401ace:	3a01      	subs	r2, #1
  401ad0:	4423      	add	r3, r4
  401ad2:	f1b2 3fff 	cmp.w	r2, #4294967295
  401ad6:	d1f6      	bne.n	401ac6 <hsmci_start_write_blocks+0x86>
        } while(sets--);
  401ad8:	3f01      	subs	r7, #1
  401ada:	4440      	add	r0, r8
  401adc:	f1b7 3fff 	cmp.w	r7, #4294967295
  401ae0:	d1ef      	bne.n	401ac2 <hsmci_start_write_blocks+0x82>
  401ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ae6:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401aea:	2001      	movs	r0, #1
  401aec:	4b0a      	ldr	r3, [pc, #40]	; (401b18 <hsmci_start_write_blocks+0xd8>)
  401aee:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  401af0:	4a0f      	ldr	r2, [pc, #60]	; (401b30 <hsmci_start_write_blocks+0xf0>)
  401af2:	6813      	ldr	r3, [r2, #0]
  401af4:	442b      	add	r3, r5
  401af6:	6013      	str	r3, [r2, #0]
	return true;
}
  401af8:	b008      	add	sp, #32
  401afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401afe:	4b0d      	ldr	r3, [pc, #52]	; (401b34 <hsmci_start_write_blocks+0xf4>)
  401b00:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  401b02:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401b08:	6853      	ldr	r3, [r2, #4]
  401b0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401b0e:	6053      	str	r3, [r2, #4]
  401b10:	e7b4      	b.n	401a7c <hsmci_start_write_blocks+0x3c>
  401b12:	bf00      	nop
  401b14:	00406dd9 	.word	0x00406dd9
  401b18:	40078000 	.word	0x40078000
  401b1c:	20400a1a 	.word	0x20400a1a
  401b20:	00015011 	.word	0x00015011
  401b24:	40000200 	.word	0x40000200
  401b28:	00402537 	.word	0x00402537
  401b2c:	e000ed00 	.word	0xe000ed00
  401b30:	20400a20 	.word	0x20400a20
  401b34:	00014011 	.word	0x00014011

00401b38 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  401b38:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401b3a:	4b12      	ldr	r3, [pc, #72]	; (401b84 <hsmci_wait_end_of_write_blocks+0x4c>)
  401b3c:	881b      	ldrh	r3, [r3, #0]
  401b3e:	4a12      	ldr	r2, [pc, #72]	; (401b88 <hsmci_wait_end_of_write_blocks+0x50>)
  401b40:	8812      	ldrh	r2, [r2, #0]
  401b42:	fb02 f203 	mul.w	r2, r2, r3
  401b46:	4b11      	ldr	r3, [pc, #68]	; (401b8c <hsmci_wait_end_of_write_blocks+0x54>)
  401b48:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  401b4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401b4e:	4910      	ldr	r1, [pc, #64]	; (401b90 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401b50:	4e10      	ldr	r6, [pc, #64]	; (401b94 <hsmci_wait_end_of_write_blocks+0x5c>)
  401b52:	e009      	b.n	401b68 <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  401b54:	4b10      	ldr	r3, [pc, #64]	; (401b98 <hsmci_wait_end_of_write_blocks+0x60>)
  401b56:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401b58:	2201      	movs	r2, #1
  401b5a:	4b0e      	ldr	r3, [pc, #56]	; (401b94 <hsmci_wait_end_of_write_blocks+0x5c>)
  401b5c:	621a      	str	r2, [r3, #32]
			return false;
  401b5e:	2000      	movs	r0, #0
  401b60:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401b62:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401b66:	d10a      	bne.n	401b7e <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  401b68:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401b6a:	420b      	tst	r3, r1
  401b6c:	d1f2      	bne.n	401b54 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401b6e:	42a2      	cmp	r2, r4
  401b70:	d9f7      	bls.n	401b62 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401b72:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401b74:	f015 0f01 	tst.w	r5, #1
  401b78:	d0f3      	beq.n	401b62 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  401b7a:	2001      	movs	r0, #1

	return true;
}
  401b7c:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  401b7e:	2001      	movs	r0, #1
  401b80:	bd70      	pop	{r4, r5, r6, pc}
  401b82:	bf00      	nop
  401b84:	20400a1a 	.word	0x20400a1a
  401b88:	20400a1c 	.word	0x20400a1c
  401b8c:	20400a20 	.word	0x20400a20
  401b90:	c0600000 	.word	0xc0600000
  401b94:	40078000 	.word	0x40078000
  401b98:	0040155d 	.word	0x0040155d

00401b9c <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401b9c:	4b01      	ldr	r3, [pc, #4]	; (401ba4 <mpu_enable+0x8>)
  401b9e:	6058      	str	r0, [r3, #4]
  401ba0:	4770      	bx	lr
  401ba2:	bf00      	nop
  401ba4:	e000ed90 	.word	0xe000ed90

00401ba8 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401ba8:	4b01      	ldr	r3, [pc, #4]	; (401bb0 <mpu_set_region+0x8>)
  401baa:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401bac:	6119      	str	r1, [r3, #16]
  401bae:	4770      	bx	lr
  401bb0:	e000ed90 	.word	0xe000ed90

00401bb4 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401bb4:	2820      	cmp	r0, #32
  401bb6:	d909      	bls.n	401bcc <mpu_cal_mpu_region_size+0x18>
  401bb8:	2304      	movs	r3, #4
  401bba:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  401bbc:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  401bbe:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401bc0:	4290      	cmp	r0, r2
  401bc2:	d901      	bls.n	401bc8 <mpu_cal_mpu_region_size+0x14>
  401bc4:	2b1e      	cmp	r3, #30
  401bc6:	d9f9      	bls.n	401bbc <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  401bc8:	0058      	lsls	r0, r3, #1
  401bca:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  401bcc:	2304      	movs	r3, #4
  401bce:	e7fb      	b.n	401bc8 <mpu_cal_mpu_region_size+0x14>

00401bd0 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401bd0:	6301      	str	r1, [r0, #48]	; 0x30
  401bd2:	4770      	bx	lr

00401bd4 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401bd4:	6341      	str	r1, [r0, #52]	; 0x34
  401bd6:	4770      	bx	lr

00401bd8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401bd8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401bda:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401bde:	d03a      	beq.n	401c56 <pio_set_peripheral+0x7e>
  401be0:	d813      	bhi.n	401c0a <pio_set_peripheral+0x32>
  401be2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401be6:	d025      	beq.n	401c34 <pio_set_peripheral+0x5c>
  401be8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401bec:	d10a      	bne.n	401c04 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bee:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401bf0:	4313      	orrs	r3, r2
  401bf2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401bf4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401bf6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401bf8:	400b      	ands	r3, r1
  401bfa:	ea23 0302 	bic.w	r3, r3, r2
  401bfe:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401c00:	6042      	str	r2, [r0, #4]
  401c02:	4770      	bx	lr
	switch (ul_type) {
  401c04:	2900      	cmp	r1, #0
  401c06:	d1fb      	bne.n	401c00 <pio_set_peripheral+0x28>
  401c08:	4770      	bx	lr
  401c0a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c0e:	d021      	beq.n	401c54 <pio_set_peripheral+0x7c>
  401c10:	d809      	bhi.n	401c26 <pio_set_peripheral+0x4e>
  401c12:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401c16:	d1f3      	bne.n	401c00 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c18:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c1a:	4313      	orrs	r3, r2
  401c1c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c1e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c20:	4313      	orrs	r3, r2
  401c22:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c24:	e7ec      	b.n	401c00 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401c26:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401c2a:	d013      	beq.n	401c54 <pio_set_peripheral+0x7c>
  401c2c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c30:	d010      	beq.n	401c54 <pio_set_peripheral+0x7c>
  401c32:	e7e5      	b.n	401c00 <pio_set_peripheral+0x28>
{
  401c34:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c36:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c38:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401c3a:	43d3      	mvns	r3, r2
  401c3c:	4021      	ands	r1, r4
  401c3e:	461c      	mov	r4, r3
  401c40:	4019      	ands	r1, r3
  401c42:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c44:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c46:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401c48:	400b      	ands	r3, r1
  401c4a:	4023      	ands	r3, r4
  401c4c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401c4e:	6042      	str	r2, [r0, #4]
}
  401c50:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c54:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c56:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c58:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401c5a:	400b      	ands	r3, r1
  401c5c:	ea23 0302 	bic.w	r3, r3, r2
  401c60:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c62:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c64:	4313      	orrs	r3, r2
  401c66:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c68:	e7ca      	b.n	401c00 <pio_set_peripheral+0x28>

00401c6a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401c6a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c6c:	f012 0f01 	tst.w	r2, #1
  401c70:	d10d      	bne.n	401c8e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401c72:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c74:	f012 0f0a 	tst.w	r2, #10
  401c78:	d00b      	beq.n	401c92 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401c7a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401c7c:	f012 0f02 	tst.w	r2, #2
  401c80:	d109      	bne.n	401c96 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401c82:	f012 0f08 	tst.w	r2, #8
  401c86:	d008      	beq.n	401c9a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401c88:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401c8c:	e005      	b.n	401c9a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401c8e:	6641      	str	r1, [r0, #100]	; 0x64
  401c90:	e7f0      	b.n	401c74 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401c92:	6241      	str	r1, [r0, #36]	; 0x24
  401c94:	e7f2      	b.n	401c7c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401c96:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401c9a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401c9c:	6001      	str	r1, [r0, #0]
  401c9e:	4770      	bx	lr

00401ca0 <pio_set_output>:
{
  401ca0:	b410      	push	{r4}
  401ca2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401ca4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401ca6:	b94c      	cbnz	r4, 401cbc <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401ca8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401caa:	b14b      	cbz	r3, 401cc0 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401cac:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401cae:	b94a      	cbnz	r2, 401cc4 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401cb0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401cb2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401cb4:	6001      	str	r1, [r0, #0]
}
  401cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cba:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401cbc:	6641      	str	r1, [r0, #100]	; 0x64
  401cbe:	e7f4      	b.n	401caa <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401cc0:	6541      	str	r1, [r0, #84]	; 0x54
  401cc2:	e7f4      	b.n	401cae <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401cc4:	6301      	str	r1, [r0, #48]	; 0x30
  401cc6:	e7f4      	b.n	401cb2 <pio_set_output+0x12>

00401cc8 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  401cc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401cca:	420b      	tst	r3, r1
}
  401ccc:	bf14      	ite	ne
  401cce:	2001      	movne	r0, #1
  401cd0:	2000      	moveq	r0, #0
  401cd2:	4770      	bx	lr

00401cd4 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  401cd4:	f012 0f10 	tst.w	r2, #16
  401cd8:	d012      	beq.n	401d00 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  401cda:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401cde:	f012 0f20 	tst.w	r2, #32
  401ce2:	d007      	beq.n	401cf4 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  401ce4:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  401ce8:	f012 0f40 	tst.w	r2, #64	; 0x40
  401cec:	d005      	beq.n	401cfa <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  401cee:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  401cf2:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  401cf4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  401cf8:	e7f6      	b.n	401ce8 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  401cfa:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  401cfe:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401d00:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  401d04:	4770      	bx	lr

00401d06 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  401d06:	6401      	str	r1, [r0, #64]	; 0x40
  401d08:	4770      	bx	lr

00401d0a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d0c:	4770      	bx	lr

00401d0e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d0e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d10:	4770      	bx	lr
	...

00401d14 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d18:	4604      	mov	r4, r0
  401d1a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401d1c:	4b0e      	ldr	r3, [pc, #56]	; (401d58 <pio_handler_process+0x44>)
  401d1e:	4798      	blx	r3
  401d20:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401d22:	4620      	mov	r0, r4
  401d24:	4b0d      	ldr	r3, [pc, #52]	; (401d5c <pio_handler_process+0x48>)
  401d26:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401d28:	4005      	ands	r5, r0
  401d2a:	d013      	beq.n	401d54 <pio_handler_process+0x40>
  401d2c:	4c0c      	ldr	r4, [pc, #48]	; (401d60 <pio_handler_process+0x4c>)
  401d2e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401d32:	e003      	b.n	401d3c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401d34:	42b4      	cmp	r4, r6
  401d36:	d00d      	beq.n	401d54 <pio_handler_process+0x40>
  401d38:	3410      	adds	r4, #16
		while (status != 0) {
  401d3a:	b15d      	cbz	r5, 401d54 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401d3c:	6820      	ldr	r0, [r4, #0]
  401d3e:	4540      	cmp	r0, r8
  401d40:	d1f8      	bne.n	401d34 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401d42:	6861      	ldr	r1, [r4, #4]
  401d44:	4229      	tst	r1, r5
  401d46:	d0f5      	beq.n	401d34 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401d48:	68e3      	ldr	r3, [r4, #12]
  401d4a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401d4c:	6863      	ldr	r3, [r4, #4]
  401d4e:	ea25 0503 	bic.w	r5, r5, r3
  401d52:	e7ef      	b.n	401d34 <pio_handler_process+0x20>
  401d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401d58:	00401d0b 	.word	0x00401d0b
  401d5c:	00401d0f 	.word	0x00401d0f
  401d60:	20400a24 	.word	0x20400a24

00401d64 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401d66:	4c18      	ldr	r4, [pc, #96]	; (401dc8 <pio_handler_set+0x64>)
  401d68:	6826      	ldr	r6, [r4, #0]
  401d6a:	2e06      	cmp	r6, #6
  401d6c:	d82a      	bhi.n	401dc4 <pio_handler_set+0x60>
  401d6e:	f04f 0c00 	mov.w	ip, #0
  401d72:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401d74:	4f15      	ldr	r7, [pc, #84]	; (401dcc <pio_handler_set+0x68>)
  401d76:	e004      	b.n	401d82 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401d78:	3401      	adds	r4, #1
  401d7a:	b2e4      	uxtb	r4, r4
  401d7c:	46a4      	mov	ip, r4
  401d7e:	42a6      	cmp	r6, r4
  401d80:	d309      	bcc.n	401d96 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  401d82:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401d84:	0125      	lsls	r5, r4, #4
  401d86:	597d      	ldr	r5, [r7, r5]
  401d88:	428d      	cmp	r5, r1
  401d8a:	d1f5      	bne.n	401d78 <pio_handler_set+0x14>
  401d8c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  401d90:	686d      	ldr	r5, [r5, #4]
  401d92:	4295      	cmp	r5, r2
  401d94:	d1f0      	bne.n	401d78 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401d96:	4d0d      	ldr	r5, [pc, #52]	; (401dcc <pio_handler_set+0x68>)
  401d98:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401d9c:	eb05 040e 	add.w	r4, r5, lr
  401da0:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401da4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401da6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401da8:	9906      	ldr	r1, [sp, #24]
  401daa:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401dac:	3601      	adds	r6, #1
  401dae:	4566      	cmp	r6, ip
  401db0:	d005      	beq.n	401dbe <pio_handler_set+0x5a>
  401db2:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401db4:	461a      	mov	r2, r3
  401db6:	4b06      	ldr	r3, [pc, #24]	; (401dd0 <pio_handler_set+0x6c>)
  401db8:	4798      	blx	r3

	return 0;
  401dba:	2000      	movs	r0, #0
  401dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  401dbe:	4902      	ldr	r1, [pc, #8]	; (401dc8 <pio_handler_set+0x64>)
  401dc0:	600e      	str	r6, [r1, #0]
  401dc2:	e7f6      	b.n	401db2 <pio_handler_set+0x4e>
		return 1;
  401dc4:	2001      	movs	r0, #1
}
  401dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401dc8:	20400a94 	.word	0x20400a94
  401dcc:	20400a24 	.word	0x20400a24
  401dd0:	00401cd5 	.word	0x00401cd5

00401dd4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401dd4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401dd6:	210a      	movs	r1, #10
  401dd8:	4801      	ldr	r0, [pc, #4]	; (401de0 <PIOA_Handler+0xc>)
  401dda:	4b02      	ldr	r3, [pc, #8]	; (401de4 <PIOA_Handler+0x10>)
  401ddc:	4798      	blx	r3
  401dde:	bd08      	pop	{r3, pc}
  401de0:	400e0e00 	.word	0x400e0e00
  401de4:	00401d15 	.word	0x00401d15

00401de8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401de8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401dea:	210b      	movs	r1, #11
  401dec:	4801      	ldr	r0, [pc, #4]	; (401df4 <PIOB_Handler+0xc>)
  401dee:	4b02      	ldr	r3, [pc, #8]	; (401df8 <PIOB_Handler+0x10>)
  401df0:	4798      	blx	r3
  401df2:	bd08      	pop	{r3, pc}
  401df4:	400e1000 	.word	0x400e1000
  401df8:	00401d15 	.word	0x00401d15

00401dfc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401dfc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401dfe:	210c      	movs	r1, #12
  401e00:	4801      	ldr	r0, [pc, #4]	; (401e08 <PIOC_Handler+0xc>)
  401e02:	4b02      	ldr	r3, [pc, #8]	; (401e0c <PIOC_Handler+0x10>)
  401e04:	4798      	blx	r3
  401e06:	bd08      	pop	{r3, pc}
  401e08:	400e1200 	.word	0x400e1200
  401e0c:	00401d15 	.word	0x00401d15

00401e10 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401e10:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401e12:	2110      	movs	r1, #16
  401e14:	4801      	ldr	r0, [pc, #4]	; (401e1c <PIOD_Handler+0xc>)
  401e16:	4b02      	ldr	r3, [pc, #8]	; (401e20 <PIOD_Handler+0x10>)
  401e18:	4798      	blx	r3
  401e1a:	bd08      	pop	{r3, pc}
  401e1c:	400e1400 	.word	0x400e1400
  401e20:	00401d15 	.word	0x00401d15

00401e24 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401e24:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401e26:	2111      	movs	r1, #17
  401e28:	4801      	ldr	r0, [pc, #4]	; (401e30 <PIOE_Handler+0xc>)
  401e2a:	4b02      	ldr	r3, [pc, #8]	; (401e34 <PIOE_Handler+0x10>)
  401e2c:	4798      	blx	r3
  401e2e:	bd08      	pop	{r3, pc}
  401e30:	400e1600 	.word	0x400e1600
  401e34:	00401d15 	.word	0x00401d15

00401e38 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401e38:	2803      	cmp	r0, #3
  401e3a:	d011      	beq.n	401e60 <pmc_mck_set_division+0x28>
  401e3c:	2804      	cmp	r0, #4
  401e3e:	d012      	beq.n	401e66 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401e40:	2802      	cmp	r0, #2
  401e42:	bf0c      	ite	eq
  401e44:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401e48:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401e4a:	4a08      	ldr	r2, [pc, #32]	; (401e6c <pmc_mck_set_division+0x34>)
  401e4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401e52:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401e54:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401e56:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e58:	f013 0f08 	tst.w	r3, #8
  401e5c:	d0fb      	beq.n	401e56 <pmc_mck_set_division+0x1e>
}
  401e5e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401e60:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401e64:	e7f1      	b.n	401e4a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401e66:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401e6a:	e7ee      	b.n	401e4a <pmc_mck_set_division+0x12>
  401e6c:	400e0600 	.word	0x400e0600

00401e70 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401e70:	4a17      	ldr	r2, [pc, #92]	; (401ed0 <pmc_switch_mck_to_pllack+0x60>)
  401e72:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401e78:	4318      	orrs	r0, r3
  401e7a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e7e:	f013 0f08 	tst.w	r3, #8
  401e82:	d10a      	bne.n	401e9a <pmc_switch_mck_to_pllack+0x2a>
  401e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401e88:	4911      	ldr	r1, [pc, #68]	; (401ed0 <pmc_switch_mck_to_pllack+0x60>)
  401e8a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401e8c:	f012 0f08 	tst.w	r2, #8
  401e90:	d103      	bne.n	401e9a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e92:	3b01      	subs	r3, #1
  401e94:	d1f9      	bne.n	401e8a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401e96:	2001      	movs	r0, #1
  401e98:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401e9a:	4a0d      	ldr	r2, [pc, #52]	; (401ed0 <pmc_switch_mck_to_pllack+0x60>)
  401e9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e9e:	f023 0303 	bic.w	r3, r3, #3
  401ea2:	f043 0302 	orr.w	r3, r3, #2
  401ea6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ea8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401eaa:	f013 0f08 	tst.w	r3, #8
  401eae:	d10a      	bne.n	401ec6 <pmc_switch_mck_to_pllack+0x56>
  401eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401eb4:	4906      	ldr	r1, [pc, #24]	; (401ed0 <pmc_switch_mck_to_pllack+0x60>)
  401eb6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401eb8:	f012 0f08 	tst.w	r2, #8
  401ebc:	d105      	bne.n	401eca <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401ebe:	3b01      	subs	r3, #1
  401ec0:	d1f9      	bne.n	401eb6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401ec2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401ec4:	4770      	bx	lr
	return 0;
  401ec6:	2000      	movs	r0, #0
  401ec8:	4770      	bx	lr
  401eca:	2000      	movs	r0, #0
  401ecc:	4770      	bx	lr
  401ece:	bf00      	nop
  401ed0:	400e0600 	.word	0x400e0600

00401ed4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401ed4:	b9a0      	cbnz	r0, 401f00 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ed6:	480e      	ldr	r0, [pc, #56]	; (401f10 <pmc_switch_mainck_to_xtal+0x3c>)
  401ed8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401eda:	0209      	lsls	r1, r1, #8
  401edc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ede:	4a0d      	ldr	r2, [pc, #52]	; (401f14 <pmc_switch_mainck_to_xtal+0x40>)
  401ee0:	401a      	ands	r2, r3
  401ee2:	4b0d      	ldr	r3, [pc, #52]	; (401f18 <pmc_switch_mainck_to_xtal+0x44>)
  401ee4:	4313      	orrs	r3, r2
  401ee6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ee8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401eea:	4602      	mov	r2, r0
  401eec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401eee:	f013 0f01 	tst.w	r3, #1
  401ef2:	d0fb      	beq.n	401eec <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401ef4:	4a06      	ldr	r2, [pc, #24]	; (401f10 <pmc_switch_mainck_to_xtal+0x3c>)
  401ef6:	6a11      	ldr	r1, [r2, #32]
  401ef8:	4b08      	ldr	r3, [pc, #32]	; (401f1c <pmc_switch_mainck_to_xtal+0x48>)
  401efa:	430b      	orrs	r3, r1
  401efc:	6213      	str	r3, [r2, #32]
  401efe:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401f00:	4903      	ldr	r1, [pc, #12]	; (401f10 <pmc_switch_mainck_to_xtal+0x3c>)
  401f02:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401f04:	4a06      	ldr	r2, [pc, #24]	; (401f20 <pmc_switch_mainck_to_xtal+0x4c>)
  401f06:	401a      	ands	r2, r3
  401f08:	4b06      	ldr	r3, [pc, #24]	; (401f24 <pmc_switch_mainck_to_xtal+0x50>)
  401f0a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401f0c:	620b      	str	r3, [r1, #32]
  401f0e:	4770      	bx	lr
  401f10:	400e0600 	.word	0x400e0600
  401f14:	ffc8fffc 	.word	0xffc8fffc
  401f18:	00370001 	.word	0x00370001
  401f1c:	01370000 	.word	0x01370000
  401f20:	fec8fffc 	.word	0xfec8fffc
  401f24:	01370002 	.word	0x01370002

00401f28 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401f28:	4b02      	ldr	r3, [pc, #8]	; (401f34 <pmc_osc_is_ready_mainck+0xc>)
  401f2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f2c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401f30:	4770      	bx	lr
  401f32:	bf00      	nop
  401f34:	400e0600 	.word	0x400e0600

00401f38 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401f38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401f3c:	4b01      	ldr	r3, [pc, #4]	; (401f44 <pmc_disable_pllack+0xc>)
  401f3e:	629a      	str	r2, [r3, #40]	; 0x28
  401f40:	4770      	bx	lr
  401f42:	bf00      	nop
  401f44:	400e0600 	.word	0x400e0600

00401f48 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401f48:	4b02      	ldr	r3, [pc, #8]	; (401f54 <pmc_is_locked_pllack+0xc>)
  401f4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f4c:	f000 0002 	and.w	r0, r0, #2
  401f50:	4770      	bx	lr
  401f52:	bf00      	nop
  401f54:	400e0600 	.word	0x400e0600

00401f58 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401f58:	283f      	cmp	r0, #63	; 0x3f
  401f5a:	d81e      	bhi.n	401f9a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401f5c:	281f      	cmp	r0, #31
  401f5e:	d80c      	bhi.n	401f7a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401f60:	4b11      	ldr	r3, [pc, #68]	; (401fa8 <pmc_enable_periph_clk+0x50>)
  401f62:	699a      	ldr	r2, [r3, #24]
  401f64:	2301      	movs	r3, #1
  401f66:	4083      	lsls	r3, r0
  401f68:	4393      	bics	r3, r2
  401f6a:	d018      	beq.n	401f9e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401f6c:	2301      	movs	r3, #1
  401f6e:	fa03 f000 	lsl.w	r0, r3, r0
  401f72:	4b0d      	ldr	r3, [pc, #52]	; (401fa8 <pmc_enable_periph_clk+0x50>)
  401f74:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401f76:	2000      	movs	r0, #0
  401f78:	4770      	bx	lr
		ul_id -= 32;
  401f7a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401f7c:	4b0a      	ldr	r3, [pc, #40]	; (401fa8 <pmc_enable_periph_clk+0x50>)
  401f7e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401f82:	2301      	movs	r3, #1
  401f84:	4083      	lsls	r3, r0
  401f86:	4393      	bics	r3, r2
  401f88:	d00b      	beq.n	401fa2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401f8a:	2301      	movs	r3, #1
  401f8c:	fa03 f000 	lsl.w	r0, r3, r0
  401f90:	4b05      	ldr	r3, [pc, #20]	; (401fa8 <pmc_enable_periph_clk+0x50>)
  401f92:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401f96:	2000      	movs	r0, #0
  401f98:	4770      	bx	lr
		return 1;
  401f9a:	2001      	movs	r0, #1
  401f9c:	4770      	bx	lr
	return 0;
  401f9e:	2000      	movs	r0, #0
  401fa0:	4770      	bx	lr
  401fa2:	2000      	movs	r0, #0
}
  401fa4:	4770      	bx	lr
  401fa6:	bf00      	nop
  401fa8:	400e0600 	.word	0x400e0600

00401fac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  401fac:	b921      	cbnz	r1, 401fb8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  401fae:	6843      	ldr	r3, [r0, #4]
  401fb0:	f023 0301 	bic.w	r3, r3, #1
  401fb4:	6043      	str	r3, [r0, #4]
  401fb6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  401fb8:	6843      	ldr	r3, [r0, #4]
  401fba:	f043 0301 	orr.w	r3, r3, #1
  401fbe:	6043      	str	r3, [r0, #4]
  401fc0:	4770      	bx	lr

00401fc2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  401fc2:	6201      	str	r1, [r0, #32]
  401fc4:	4770      	bx	lr

00401fc6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401fc6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401fc8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401fca:	6884      	ldr	r4, [r0, #8]
  401fcc:	42a5      	cmp	r5, r4
  401fce:	d003      	beq.n	401fd8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  401fd0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401fd2:	6884      	ldr	r4, [r0, #8]
  401fd4:	42ac      	cmp	r4, r5
  401fd6:	d1fb      	bne.n	401fd0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  401fd8:	b161      	cbz	r1, 401ff4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401fda:	f3c4 5001 	ubfx	r0, r4, #20, #2
  401fde:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401fe2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401fe6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401fea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  401fee:	bf18      	it	ne
  401ff0:	300c      	addne	r0, #12
  401ff2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  401ff4:	b142      	cbz	r2, 402008 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  401ff6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  401ffa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401ffe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  402002:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402006:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  402008:	b143      	cbz	r3, 40201c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40200a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40200e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402012:	f004 040f 	and.w	r4, r4, #15
  402016:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40201a:	601c      	str	r4, [r3, #0]
	}
}
  40201c:	bc30      	pop	{r4, r5}
  40201e:	4770      	bx	lr

00402020 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  402020:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  402022:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  402024:	f014 0f01 	tst.w	r4, #1
  402028:	d005      	beq.n	402036 <rtc_set_time+0x16>
  40202a:	290c      	cmp	r1, #12
  40202c:	d903      	bls.n	402036 <rtc_set_time+0x16>
			ul_hour -= 12;
  40202e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  402030:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  402034:	e000      	b.n	402038 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  402036:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  402038:	4c1c      	ldr	r4, [pc, #112]	; (4020ac <rtc_set_time+0x8c>)
  40203a:	fba4 5603 	umull	r5, r6, r4, r3
  40203e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  402040:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  402044:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  402048:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40204c:	fba4 6502 	umull	r6, r5, r4, r2
  402050:	08ed      	lsrs	r5, r5, #3
  402052:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  402056:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40205a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40205e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  402062:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  402064:	fba4 4201 	umull	r4, r2, r4, r1
  402068:	08d2      	lsrs	r2, r2, #3
  40206a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40206e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402072:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  402076:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40207a:	6983      	ldr	r3, [r0, #24]
  40207c:	f013 0f04 	tst.w	r3, #4
  402080:	d0fb      	beq.n	40207a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  402082:	6803      	ldr	r3, [r0, #0]
  402084:	f043 0301 	orr.w	r3, r3, #1
  402088:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40208a:	6983      	ldr	r3, [r0, #24]
  40208c:	f013 0f01 	tst.w	r3, #1
  402090:	d0fb      	beq.n	40208a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  402092:	2301      	movs	r3, #1
  402094:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  402096:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  402098:	6803      	ldr	r3, [r0, #0]
  40209a:	f023 0301 	bic.w	r3, r3, #1
  40209e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4020a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4020a2:	f000 0001 	and.w	r0, r0, #1
  4020a6:	bcf0      	pop	{r4, r5, r6, r7}
  4020a8:	4770      	bx	lr
  4020aa:	bf00      	nop
  4020ac:	cccccccd 	.word	0xcccccccd

004020b0 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4020b0:	b4f0      	push	{r4, r5, r6, r7}
  4020b2:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4020b4:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4020b6:	68c4      	ldr	r4, [r0, #12]
  4020b8:	42a5      	cmp	r5, r4
  4020ba:	d003      	beq.n	4020c4 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  4020bc:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4020be:	68c4      	ldr	r4, [r0, #12]
  4020c0:	42ac      	cmp	r4, r5
  4020c2:	d1fb      	bne.n	4020bc <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  4020c4:	b199      	cbz	r1, 4020ee <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4020c6:	f3c4 3003 	ubfx	r0, r4, #12, #4
  4020ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4020ce:	f3c4 2703 	ubfx	r7, r4, #8, #4
  4020d2:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4020d6:	f3c4 1002 	ubfx	r0, r4, #4, #3
  4020da:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4020de:	f004 000f 	and.w	r0, r4, #15
  4020e2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4020e6:	2564      	movs	r5, #100	; 0x64
  4020e8:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  4020ec:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  4020ee:	b142      	cbz	r2, 402102 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4020f0:	f3c4 5000 	ubfx	r0, r4, #20, #1
  4020f4:	0081      	lsls	r1, r0, #2
  4020f6:	4408      	add	r0, r1
  4020f8:	f3c4 4103 	ubfx	r1, r4, #16, #4
  4020fc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  402100:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  402102:	b143      	cbz	r3, 402116 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402104:	f3c4 7201 	ubfx	r2, r4, #28, #2
  402108:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40210c:	f3c4 6103 	ubfx	r1, r4, #24, #4
  402110:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  402114:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  402116:	b116      	cbz	r6, 40211e <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  402118:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40211c:	6034      	str	r4, [r6, #0]
	}
}
  40211e:	bcf0      	pop	{r4, r5, r6, r7}
  402120:	4770      	bx	lr
	...

00402124 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  402124:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402126:	4d2a      	ldr	r5, [pc, #168]	; (4021d0 <rtc_set_date+0xac>)
  402128:	fba5 4603 	umull	r4, r6, r5, r3
  40212c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40212e:	9c03      	ldr	r4, [sp, #12]
  402130:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402132:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  402136:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40213a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40213e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  402142:	fba5 6402 	umull	r6, r4, r5, r2
  402146:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402148:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40214c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402150:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402154:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  402158:	4b1e      	ldr	r3, [pc, #120]	; (4021d4 <rtc_set_date+0xb0>)
  40215a:	fba3 4301 	umull	r4, r3, r3, r1
  40215e:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402160:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  402164:	4b1c      	ldr	r3, [pc, #112]	; (4021d8 <rtc_set_date+0xb4>)
  402166:	fba3 4301 	umull	r4, r3, r3, r1
  40216a:	095b      	lsrs	r3, r3, #5
  40216c:	fba5 6403 	umull	r6, r4, r5, r3
  402170:	08e4      	lsrs	r4, r4, #3
  402172:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402176:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40217a:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40217c:	fba5 4301 	umull	r4, r3, r5, r1
  402180:	08db      	lsrs	r3, r3, #3
  402182:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  402186:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40218a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40218e:	fba5 1503 	umull	r1, r5, r5, r3
  402192:	08ed      	lsrs	r5, r5, #3
  402194:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402198:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40219c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4021a0:	6983      	ldr	r3, [r0, #24]
  4021a2:	f013 0f04 	tst.w	r3, #4
  4021a6:	d0fb      	beq.n	4021a0 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4021a8:	6803      	ldr	r3, [r0, #0]
  4021aa:	f043 0302 	orr.w	r3, r3, #2
  4021ae:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4021b0:	6983      	ldr	r3, [r0, #24]
  4021b2:	f013 0f01 	tst.w	r3, #1
  4021b6:	d0fb      	beq.n	4021b0 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4021b8:	2301      	movs	r3, #1
  4021ba:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4021bc:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4021be:	6803      	ldr	r3, [r0, #0]
  4021c0:	f023 0302 	bic.w	r3, r3, #2
  4021c4:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4021c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4021c8:	f000 0002 	and.w	r0, r0, #2
  4021cc:	bc70      	pop	{r4, r5, r6}
  4021ce:	4770      	bx	lr
  4021d0:	cccccccd 	.word	0xcccccccd
  4021d4:	10624dd3 	.word	0x10624dd3
  4021d8:	51eb851f 	.word	0x51eb851f

004021dc <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4021dc:	6980      	ldr	r0, [r0, #24]
}
  4021de:	4770      	bx	lr

004021e0 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4021e0:	61c1      	str	r1, [r0, #28]
  4021e2:	4770      	bx	lr

004021e4 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4021e4:	4b28      	ldr	r3, [pc, #160]	; (402288 <twihs_set_speed+0xa4>)
  4021e6:	4299      	cmp	r1, r3
  4021e8:	d84b      	bhi.n	402282 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4021ea:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4021ee:	4299      	cmp	r1, r3
  4021f0:	d92d      	bls.n	40224e <twihs_set_speed+0x6a>
{
  4021f2:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4021f4:	4c25      	ldr	r4, [pc, #148]	; (40228c <twihs_set_speed+0xa8>)
  4021f6:	fba4 3402 	umull	r3, r4, r4, r2
  4021fa:	0ba4      	lsrs	r4, r4, #14
  4021fc:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4021fe:	4b24      	ldr	r3, [pc, #144]	; (402290 <twihs_set_speed+0xac>)
  402200:	440b      	add	r3, r1
  402202:	009b      	lsls	r3, r3, #2
  402204:	fbb2 f2f3 	udiv	r2, r2, r3
  402208:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40220a:	2cff      	cmp	r4, #255	; 0xff
  40220c:	d91d      	bls.n	40224a <twihs_set_speed+0x66>
  40220e:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  402210:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  402212:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402214:	2cff      	cmp	r4, #255	; 0xff
  402216:	d901      	bls.n	40221c <twihs_set_speed+0x38>
  402218:	2906      	cmp	r1, #6
  40221a:	d9f9      	bls.n	402210 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40221c:	2aff      	cmp	r2, #255	; 0xff
  40221e:	d907      	bls.n	402230 <twihs_set_speed+0x4c>
  402220:	2906      	cmp	r1, #6
  402222:	d805      	bhi.n	402230 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  402224:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  402226:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402228:	2aff      	cmp	r2, #255	; 0xff
  40222a:	d901      	bls.n	402230 <twihs_set_speed+0x4c>
  40222c:	2906      	cmp	r1, #6
  40222e:	d9f9      	bls.n	402224 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  402230:	0213      	lsls	r3, r2, #8
  402232:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  402234:	0409      	lsls	r1, r1, #16
  402236:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40223a:	430b      	orrs	r3, r1
  40223c:	b2e4      	uxtb	r4, r4
  40223e:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  402240:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  402242:	2000      	movs	r0, #0
}
  402244:	f85d 4b04 	ldr.w	r4, [sp], #4
  402248:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40224a:	2100      	movs	r1, #0
  40224c:	e7e6      	b.n	40221c <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40224e:	0049      	lsls	r1, r1, #1
  402250:	fbb2 f2f1 	udiv	r2, r2, r1
  402254:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402256:	2aff      	cmp	r2, #255	; 0xff
  402258:	d911      	bls.n	40227e <twihs_set_speed+0x9a>
  40225a:	2300      	movs	r3, #0
			ckdiv++;
  40225c:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  40225e:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402260:	2aff      	cmp	r2, #255	; 0xff
  402262:	d901      	bls.n	402268 <twihs_set_speed+0x84>
  402264:	2b06      	cmp	r3, #6
  402266:	d9f9      	bls.n	40225c <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402268:	0211      	lsls	r1, r2, #8
  40226a:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  40226c:	041b      	lsls	r3, r3, #16
  40226e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402272:	430b      	orrs	r3, r1
  402274:	b2d2      	uxtb	r2, r2
  402276:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  402278:	6102      	str	r2, [r0, #16]
	return PASS;
  40227a:	2000      	movs	r0, #0
  40227c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40227e:	2300      	movs	r3, #0
  402280:	e7f2      	b.n	402268 <twihs_set_speed+0x84>
		return FAIL;
  402282:	2001      	movs	r0, #1
  402284:	4770      	bx	lr
  402286:	bf00      	nop
  402288:	00061a80 	.word	0x00061a80
  40228c:	057619f1 	.word	0x057619f1
  402290:	3ffd1200 	.word	0x3ffd1200

00402294 <twihs_master_init>:
{
  402294:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  402296:	f04f 32ff 	mov.w	r2, #4294967295
  40229a:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  40229c:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40229e:	2280      	movs	r2, #128	; 0x80
  4022a0:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  4022a2:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4022a4:	2208      	movs	r2, #8
  4022a6:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4022a8:	2220      	movs	r2, #32
  4022aa:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4022ac:	2204      	movs	r2, #4
  4022ae:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4022b0:	680a      	ldr	r2, [r1, #0]
  4022b2:	6849      	ldr	r1, [r1, #4]
  4022b4:	4b03      	ldr	r3, [pc, #12]	; (4022c4 <twihs_master_init+0x30>)
  4022b6:	4798      	blx	r3
}
  4022b8:	2801      	cmp	r0, #1
  4022ba:	bf14      	ite	ne
  4022bc:	2000      	movne	r0, #0
  4022be:	2001      	moveq	r0, #1
  4022c0:	bd08      	pop	{r3, pc}
  4022c2:	bf00      	nop
  4022c4:	004021e5 	.word	0x004021e5

004022c8 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  4022c8:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  4022ca:	2b00      	cmp	r3, #0
  4022cc:	d046      	beq.n	40235c <twihs_master_read+0x94>
{
  4022ce:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4022d0:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4022d2:	2600      	movs	r6, #0
  4022d4:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4022d6:	684a      	ldr	r2, [r1, #4]
  4022d8:	0212      	lsls	r2, r2, #8
  4022da:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4022de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4022e2:	7c0d      	ldrb	r5, [r1, #16]
  4022e4:	042d      	lsls	r5, r5, #16
  4022e6:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4022ea:	432a      	orrs	r2, r5
  4022ec:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4022ee:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4022f0:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4022f2:	b15d      	cbz	r5, 40230c <twihs_master_read+0x44>
	val = addr[0];
  4022f4:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4022f6:	2d01      	cmp	r5, #1
  4022f8:	dd02      	ble.n	402300 <twihs_master_read+0x38>
		val |= addr[1];
  4022fa:	784e      	ldrb	r6, [r1, #1]
  4022fc:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  402300:	2d02      	cmp	r5, #2
  402302:	dd04      	ble.n	40230e <twihs_master_read+0x46>
		val |= addr[2];
  402304:	7889      	ldrb	r1, [r1, #2]
  402306:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  40230a:	e000      	b.n	40230e <twihs_master_read+0x46>
		return 0;
  40230c:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40230e:	60c2      	str	r2, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  402310:	2201      	movs	r2, #1
  402312:	6002      	str	r2, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402314:	2502      	movs	r5, #2
		status = p_twihs->TWIHS_SR;
  402316:	6a02      	ldr	r2, [r0, #32]
  402318:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  40231c:	2b01      	cmp	r3, #1
  40231e:	d008      	beq.n	402332 <twihs_master_read+0x6a>
		if (!(status & TWIHS_SR_RXRDY)) {
  402320:	f012 0f02 	tst.w	r2, #2
  402324:	d013      	beq.n	40234e <twihs_master_read+0x86>
		*buffer++ = p_twihs->TWIHS_RHR;
  402326:	6b02      	ldr	r2, [r0, #48]	; 0x30
  402328:	f804 2b01 	strb.w	r2, [r4], #1
	while (cnt > 0) {
  40232c:	3b01      	subs	r3, #1
  40232e:	d1f2      	bne.n	402316 <twihs_master_read+0x4e>
  402330:	e005      	b.n	40233e <twihs_master_read+0x76>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402332:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  402334:	f012 0f02 	tst.w	r2, #2
  402338:	d00b      	beq.n	402352 <twihs_master_read+0x8a>
		*buffer++ = p_twihs->TWIHS_RHR;
  40233a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40233c:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40233e:	6a03      	ldr	r3, [r0, #32]
  402340:	f013 0f01 	tst.w	r3, #1
  402344:	d0fb      	beq.n	40233e <twihs_master_read+0x76>
	p_twihs->TWIHS_SR;
  402346:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  402348:	2000      	movs	r0, #0
}
  40234a:	bc70      	pop	{r4, r5, r6}
  40234c:	4770      	bx	lr
	while (cnt > 0) {
  40234e:	2b00      	cmp	r3, #0
  402350:	d0f5      	beq.n	40233e <twihs_master_read+0x76>
		status = p_twihs->TWIHS_SR;
  402352:	6a02      	ldr	r2, [r0, #32]
		if (!timeout--) {
  402354:	3901      	subs	r1, #1
  402356:	d1e1      	bne.n	40231c <twihs_master_read+0x54>
			return TWIHS_ERROR_TIMEOUT;
  402358:	2009      	movs	r0, #9
  40235a:	e7f6      	b.n	40234a <twihs_master_read+0x82>
		return TWIHS_INVALID_ARGUMENT;
  40235c:	2001      	movs	r0, #1
  40235e:	4770      	bx	lr

00402360 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  402360:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  402362:	2b00      	cmp	r3, #0
  402364:	d043      	beq.n	4023ee <twihs_master_write+0x8e>
{
  402366:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  402368:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40236a:	2600      	movs	r6, #0
  40236c:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40236e:	7c0a      	ldrb	r2, [r1, #16]
  402370:	0412      	lsls	r2, r2, #16
  402372:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402376:	684d      	ldr	r5, [r1, #4]
  402378:	022d      	lsls	r5, r5, #8
  40237a:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40237e:	432a      	orrs	r2, r5
  402380:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  402382:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402384:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  402386:	b15d      	cbz	r5, 4023a0 <twihs_master_write+0x40>
	val = addr[0];
  402388:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  40238a:	2d01      	cmp	r5, #1
  40238c:	dd02      	ble.n	402394 <twihs_master_write+0x34>
		val |= addr[1];
  40238e:	784e      	ldrb	r6, [r1, #1]
  402390:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  402394:	2d02      	cmp	r5, #2
  402396:	dd04      	ble.n	4023a2 <twihs_master_write+0x42>
		val |= addr[2];
  402398:	7889      	ldrb	r1, [r1, #2]
  40239a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  40239e:	e000      	b.n	4023a2 <twihs_master_write+0x42>
		return 0;
  4023a0:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4023a2:	60c2      	str	r2, [r0, #12]
  4023a4:	e004      	b.n	4023b0 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  4023a6:	f814 2b01 	ldrb.w	r2, [r4], #1
  4023aa:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  4023ac:	3b01      	subs	r3, #1
  4023ae:	d00f      	beq.n	4023d0 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  4023b0:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4023b2:	f412 7f80 	tst.w	r2, #256	; 0x100
  4023b6:	d11e      	bne.n	4023f6 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  4023b8:	f012 0f04 	tst.w	r2, #4
  4023bc:	d1f3      	bne.n	4023a6 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  4023be:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4023c0:	f412 7f80 	tst.w	r2, #256	; 0x100
  4023c4:	d115      	bne.n	4023f2 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  4023c6:	f012 0f04 	tst.w	r2, #4
  4023ca:	d1ec      	bne.n	4023a6 <twihs_master_write+0x46>
	while (cnt > 0) {
  4023cc:	2b00      	cmp	r3, #0
  4023ce:	d1f6      	bne.n	4023be <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  4023d0:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4023d2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4023d6:	d111      	bne.n	4023fc <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  4023d8:	f013 0f04 	tst.w	r3, #4
  4023dc:	d0f8      	beq.n	4023d0 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4023de:	2302      	movs	r3, #2
  4023e0:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4023e2:	6a03      	ldr	r3, [r0, #32]
  4023e4:	f013 0f01 	tst.w	r3, #1
  4023e8:	d0fb      	beq.n	4023e2 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  4023ea:	2000      	movs	r0, #0
  4023ec:	e004      	b.n	4023f8 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  4023ee:	2001      	movs	r0, #1
  4023f0:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4023f2:	2005      	movs	r0, #5
  4023f4:	e000      	b.n	4023f8 <twihs_master_write+0x98>
  4023f6:	2005      	movs	r0, #5
}
  4023f8:	bc70      	pop	{r4, r5, r6}
  4023fa:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4023fc:	2005      	movs	r0, #5
  4023fe:	e7fb      	b.n	4023f8 <twihs_master_write+0x98>

00402400 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402400:	6943      	ldr	r3, [r0, #20]
  402402:	f013 0f02 	tst.w	r3, #2
  402406:	d002      	beq.n	40240e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402408:	61c1      	str	r1, [r0, #28]
	return 0;
  40240a:	2000      	movs	r0, #0
  40240c:	4770      	bx	lr
		return 1;
  40240e:	2001      	movs	r0, #1
}
  402410:	4770      	bx	lr

00402412 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402412:	6943      	ldr	r3, [r0, #20]
  402414:	f013 0f01 	tst.w	r3, #1
  402418:	d003      	beq.n	402422 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40241a:	6983      	ldr	r3, [r0, #24]
  40241c:	700b      	strb	r3, [r1, #0]
	return 0;
  40241e:	2000      	movs	r0, #0
  402420:	4770      	bx	lr
		return 1;
  402422:	2001      	movs	r0, #1
}
  402424:	4770      	bx	lr

00402426 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  402426:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402428:	010b      	lsls	r3, r1, #4
  40242a:	4293      	cmp	r3, r2
  40242c:	d914      	bls.n	402458 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40242e:	00c9      	lsls	r1, r1, #3
  402430:	084b      	lsrs	r3, r1, #1
  402432:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  402436:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40243a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40243c:	1e5c      	subs	r4, r3, #1
  40243e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  402442:	428c      	cmp	r4, r1
  402444:	d901      	bls.n	40244a <usart_set_async_baudrate+0x24>
		return 1;
  402446:	2001      	movs	r0, #1
  402448:	e017      	b.n	40247a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40244a:	6841      	ldr	r1, [r0, #4]
  40244c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  402450:	6041      	str	r1, [r0, #4]
  402452:	e00c      	b.n	40246e <usart_set_async_baudrate+0x48>
		return 1;
  402454:	2001      	movs	r0, #1
  402456:	e010      	b.n	40247a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402458:	0859      	lsrs	r1, r3, #1
  40245a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40245e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  402462:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402464:	1e5c      	subs	r4, r3, #1
  402466:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40246a:	428c      	cmp	r4, r1
  40246c:	d8f2      	bhi.n	402454 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40246e:	0412      	lsls	r2, r2, #16
  402470:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402474:	431a      	orrs	r2, r3
  402476:	6202      	str	r2, [r0, #32]

	return 0;
  402478:	2000      	movs	r0, #0
}
  40247a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40247e:	4770      	bx	lr

00402480 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402480:	4b08      	ldr	r3, [pc, #32]	; (4024a4 <usart_reset+0x24>)
  402482:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  402486:	2300      	movs	r3, #0
  402488:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40248a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40248c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40248e:	2388      	movs	r3, #136	; 0x88
  402490:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402492:	2324      	movs	r3, #36	; 0x24
  402494:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  402496:	f44f 7380 	mov.w	r3, #256	; 0x100
  40249a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40249c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4024a0:	6003      	str	r3, [r0, #0]
  4024a2:	4770      	bx	lr
  4024a4:	55534100 	.word	0x55534100

004024a8 <usart_init_rs232>:
{
  4024a8:	b570      	push	{r4, r5, r6, lr}
  4024aa:	4605      	mov	r5, r0
  4024ac:	460c      	mov	r4, r1
  4024ae:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4024b0:	4b0f      	ldr	r3, [pc, #60]	; (4024f0 <usart_init_rs232+0x48>)
  4024b2:	4798      	blx	r3
	ul_reg_val = 0;
  4024b4:	2200      	movs	r2, #0
  4024b6:	4b0f      	ldr	r3, [pc, #60]	; (4024f4 <usart_init_rs232+0x4c>)
  4024b8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4024ba:	b1a4      	cbz	r4, 4024e6 <usart_init_rs232+0x3e>
  4024bc:	4632      	mov	r2, r6
  4024be:	6821      	ldr	r1, [r4, #0]
  4024c0:	4628      	mov	r0, r5
  4024c2:	4b0d      	ldr	r3, [pc, #52]	; (4024f8 <usart_init_rs232+0x50>)
  4024c4:	4798      	blx	r3
  4024c6:	4602      	mov	r2, r0
  4024c8:	b978      	cbnz	r0, 4024ea <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4024ca:	6863      	ldr	r3, [r4, #4]
  4024cc:	68a1      	ldr	r1, [r4, #8]
  4024ce:	430b      	orrs	r3, r1
  4024d0:	6921      	ldr	r1, [r4, #16]
  4024d2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4024d4:	68e1      	ldr	r1, [r4, #12]
  4024d6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4024d8:	4906      	ldr	r1, [pc, #24]	; (4024f4 <usart_init_rs232+0x4c>)
  4024da:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4024dc:	6869      	ldr	r1, [r5, #4]
  4024de:	430b      	orrs	r3, r1
  4024e0:	606b      	str	r3, [r5, #4]
}
  4024e2:	4610      	mov	r0, r2
  4024e4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4024e6:	2201      	movs	r2, #1
  4024e8:	e7fb      	b.n	4024e2 <usart_init_rs232+0x3a>
  4024ea:	2201      	movs	r2, #1
  4024ec:	e7f9      	b.n	4024e2 <usart_init_rs232+0x3a>
  4024ee:	bf00      	nop
  4024f0:	00402481 	.word	0x00402481
  4024f4:	20400a98 	.word	0x20400a98
  4024f8:	00402427 	.word	0x00402427

004024fc <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4024fc:	2340      	movs	r3, #64	; 0x40
  4024fe:	6003      	str	r3, [r0, #0]
  402500:	4770      	bx	lr

00402502 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  402502:	2310      	movs	r3, #16
  402504:	6003      	str	r3, [r0, #0]
  402506:	4770      	bx	lr

00402508 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402508:	6943      	ldr	r3, [r0, #20]
  40250a:	f013 0f02 	tst.w	r3, #2
  40250e:	d004      	beq.n	40251a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  402510:	f3c1 0108 	ubfx	r1, r1, #0, #9
  402514:	61c1      	str	r1, [r0, #28]
	return 0;
  402516:	2000      	movs	r0, #0
  402518:	4770      	bx	lr
		return 1;
  40251a:	2001      	movs	r0, #1
}
  40251c:	4770      	bx	lr

0040251e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40251e:	6943      	ldr	r3, [r0, #20]
  402520:	f013 0f01 	tst.w	r3, #1
  402524:	d005      	beq.n	402532 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402526:	6983      	ldr	r3, [r0, #24]
  402528:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40252c:	600b      	str	r3, [r1, #0]
	return 0;
  40252e:	2000      	movs	r0, #0
  402530:	4770      	bx	lr
		return 1;
  402532:	2001      	movs	r0, #1
}
  402534:	4770      	bx	lr

00402536 <xdmac_configure_transfer>:
  402536:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40253a:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  40253c:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  40253e:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  402540:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  402542:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  402544:	6813      	ldr	r3, [r2, #0]
  402546:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40254a:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  40254c:	6913      	ldr	r3, [r2, #16]
  40254e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  402552:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  402554:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  402556:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  402558:	6993      	ldr	r3, [r2, #24]
  40255a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40255e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  402562:	69d3      	ldr	r3, [r2, #28]
  402564:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  402568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  40256c:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  40256e:	678b      	str	r3, [r1, #120]	; 0x78
  402570:	4770      	bx	lr

00402572 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402572:	e7fe      	b.n	402572 <Dummy_Handler>

00402574 <Reset_Handler>:
{
  402574:	b500      	push	{lr}
  402576:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  402578:	4b25      	ldr	r3, [pc, #148]	; (402610 <Reset_Handler+0x9c>)
  40257a:	4a26      	ldr	r2, [pc, #152]	; (402614 <Reset_Handler+0xa0>)
  40257c:	429a      	cmp	r2, r3
  40257e:	d010      	beq.n	4025a2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  402580:	4b25      	ldr	r3, [pc, #148]	; (402618 <Reset_Handler+0xa4>)
  402582:	4a23      	ldr	r2, [pc, #140]	; (402610 <Reset_Handler+0x9c>)
  402584:	429a      	cmp	r2, r3
  402586:	d20c      	bcs.n	4025a2 <Reset_Handler+0x2e>
  402588:	3b01      	subs	r3, #1
  40258a:	1a9b      	subs	r3, r3, r2
  40258c:	f023 0303 	bic.w	r3, r3, #3
  402590:	3304      	adds	r3, #4
  402592:	4413      	add	r3, r2
  402594:	491f      	ldr	r1, [pc, #124]	; (402614 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  402596:	f851 0b04 	ldr.w	r0, [r1], #4
  40259a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40259e:	429a      	cmp	r2, r3
  4025a0:	d1f9      	bne.n	402596 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4025a2:	4b1e      	ldr	r3, [pc, #120]	; (40261c <Reset_Handler+0xa8>)
  4025a4:	4a1e      	ldr	r2, [pc, #120]	; (402620 <Reset_Handler+0xac>)
  4025a6:	429a      	cmp	r2, r3
  4025a8:	d20a      	bcs.n	4025c0 <Reset_Handler+0x4c>
  4025aa:	3b01      	subs	r3, #1
  4025ac:	1a9b      	subs	r3, r3, r2
  4025ae:	f023 0303 	bic.w	r3, r3, #3
  4025b2:	3304      	adds	r3, #4
  4025b4:	4413      	add	r3, r2
                *pDest++ = 0;
  4025b6:	2100      	movs	r1, #0
  4025b8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4025bc:	4293      	cmp	r3, r2
  4025be:	d1fb      	bne.n	4025b8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4025c0:	4a18      	ldr	r2, [pc, #96]	; (402624 <Reset_Handler+0xb0>)
  4025c2:	4b19      	ldr	r3, [pc, #100]	; (402628 <Reset_Handler+0xb4>)
  4025c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4025c8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4025ca:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4025ce:	fab3 f383 	clz	r3, r3
  4025d2:	095b      	lsrs	r3, r3, #5
  4025d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4025d6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4025d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4025dc:	2200      	movs	r2, #0
  4025de:	4b13      	ldr	r3, [pc, #76]	; (40262c <Reset_Handler+0xb8>)
  4025e0:	701a      	strb	r2, [r3, #0]
	return flags;
  4025e2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4025e4:	4a12      	ldr	r2, [pc, #72]	; (402630 <Reset_Handler+0xbc>)
  4025e6:	6813      	ldr	r3, [r2, #0]
  4025e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4025ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4025ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4025f2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4025f6:	b129      	cbz	r1, 402604 <Reset_Handler+0x90>
		cpu_irq_enable();
  4025f8:	2201      	movs	r2, #1
  4025fa:	4b0c      	ldr	r3, [pc, #48]	; (40262c <Reset_Handler+0xb8>)
  4025fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4025fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402602:	b662      	cpsie	i
        __libc_init_array();
  402604:	4b0b      	ldr	r3, [pc, #44]	; (402634 <Reset_Handler+0xc0>)
  402606:	4798      	blx	r3
        main();
  402608:	4b0b      	ldr	r3, [pc, #44]	; (402638 <Reset_Handler+0xc4>)
  40260a:	4798      	blx	r3
  40260c:	e7fe      	b.n	40260c <Reset_Handler+0x98>
  40260e:	bf00      	nop
  402610:	20400000 	.word	0x20400000
  402614:	0040dc64 	.word	0x0040dc64
  402618:	204009f0 	.word	0x204009f0
  40261c:	2040c4d8 	.word	0x2040c4d8
  402620:	204009f0 	.word	0x204009f0
  402624:	e000ed00 	.word	0xe000ed00
  402628:	00400000 	.word	0x00400000
  40262c:	20400030 	.word	0x20400030
  402630:	e000ed88 	.word	0xe000ed88
  402634:	00406c2d 	.word	0x00406c2d
  402638:	00406a65 	.word	0x00406a65

0040263c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40263c:	4b3b      	ldr	r3, [pc, #236]	; (40272c <SystemCoreClockUpdate+0xf0>)
  40263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402640:	f003 0303 	and.w	r3, r3, #3
  402644:	2b01      	cmp	r3, #1
  402646:	d01d      	beq.n	402684 <SystemCoreClockUpdate+0x48>
  402648:	b183      	cbz	r3, 40266c <SystemCoreClockUpdate+0x30>
  40264a:	2b02      	cmp	r3, #2
  40264c:	d036      	beq.n	4026bc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40264e:	4b37      	ldr	r3, [pc, #220]	; (40272c <SystemCoreClockUpdate+0xf0>)
  402650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402652:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402656:	2b70      	cmp	r3, #112	; 0x70
  402658:	d05f      	beq.n	40271a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40265a:	4b34      	ldr	r3, [pc, #208]	; (40272c <SystemCoreClockUpdate+0xf0>)
  40265c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40265e:	4934      	ldr	r1, [pc, #208]	; (402730 <SystemCoreClockUpdate+0xf4>)
  402660:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402664:	680b      	ldr	r3, [r1, #0]
  402666:	40d3      	lsrs	r3, r2
  402668:	600b      	str	r3, [r1, #0]
  40266a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40266c:	4b31      	ldr	r3, [pc, #196]	; (402734 <SystemCoreClockUpdate+0xf8>)
  40266e:	695b      	ldr	r3, [r3, #20]
  402670:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402674:	bf14      	ite	ne
  402676:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40267a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40267e:	4b2c      	ldr	r3, [pc, #176]	; (402730 <SystemCoreClockUpdate+0xf4>)
  402680:	601a      	str	r2, [r3, #0]
  402682:	e7e4      	b.n	40264e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402684:	4b29      	ldr	r3, [pc, #164]	; (40272c <SystemCoreClockUpdate+0xf0>)
  402686:	6a1b      	ldr	r3, [r3, #32]
  402688:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40268c:	d003      	beq.n	402696 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40268e:	4a2a      	ldr	r2, [pc, #168]	; (402738 <SystemCoreClockUpdate+0xfc>)
  402690:	4b27      	ldr	r3, [pc, #156]	; (402730 <SystemCoreClockUpdate+0xf4>)
  402692:	601a      	str	r2, [r3, #0]
  402694:	e7db      	b.n	40264e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402696:	4a29      	ldr	r2, [pc, #164]	; (40273c <SystemCoreClockUpdate+0x100>)
  402698:	4b25      	ldr	r3, [pc, #148]	; (402730 <SystemCoreClockUpdate+0xf4>)
  40269a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40269c:	4b23      	ldr	r3, [pc, #140]	; (40272c <SystemCoreClockUpdate+0xf0>)
  40269e:	6a1b      	ldr	r3, [r3, #32]
  4026a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4026a4:	2b10      	cmp	r3, #16
  4026a6:	d005      	beq.n	4026b4 <SystemCoreClockUpdate+0x78>
  4026a8:	2b20      	cmp	r3, #32
  4026aa:	d1d0      	bne.n	40264e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4026ac:	4a22      	ldr	r2, [pc, #136]	; (402738 <SystemCoreClockUpdate+0xfc>)
  4026ae:	4b20      	ldr	r3, [pc, #128]	; (402730 <SystemCoreClockUpdate+0xf4>)
  4026b0:	601a      	str	r2, [r3, #0]
          break;
  4026b2:	e7cc      	b.n	40264e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4026b4:	4a22      	ldr	r2, [pc, #136]	; (402740 <SystemCoreClockUpdate+0x104>)
  4026b6:	4b1e      	ldr	r3, [pc, #120]	; (402730 <SystemCoreClockUpdate+0xf4>)
  4026b8:	601a      	str	r2, [r3, #0]
          break;
  4026ba:	e7c8      	b.n	40264e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4026bc:	4b1b      	ldr	r3, [pc, #108]	; (40272c <SystemCoreClockUpdate+0xf0>)
  4026be:	6a1b      	ldr	r3, [r3, #32]
  4026c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4026c4:	d016      	beq.n	4026f4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4026c6:	4a1c      	ldr	r2, [pc, #112]	; (402738 <SystemCoreClockUpdate+0xfc>)
  4026c8:	4b19      	ldr	r3, [pc, #100]	; (402730 <SystemCoreClockUpdate+0xf4>)
  4026ca:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4026cc:	4b17      	ldr	r3, [pc, #92]	; (40272c <SystemCoreClockUpdate+0xf0>)
  4026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026d0:	f003 0303 	and.w	r3, r3, #3
  4026d4:	2b02      	cmp	r3, #2
  4026d6:	d1ba      	bne.n	40264e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4026d8:	4a14      	ldr	r2, [pc, #80]	; (40272c <SystemCoreClockUpdate+0xf0>)
  4026da:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4026dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4026de:	4814      	ldr	r0, [pc, #80]	; (402730 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4026e0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4026e4:	6803      	ldr	r3, [r0, #0]
  4026e6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4026ea:	b2d2      	uxtb	r2, r2
  4026ec:	fbb3 f3f2 	udiv	r3, r3, r2
  4026f0:	6003      	str	r3, [r0, #0]
  4026f2:	e7ac      	b.n	40264e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4026f4:	4a11      	ldr	r2, [pc, #68]	; (40273c <SystemCoreClockUpdate+0x100>)
  4026f6:	4b0e      	ldr	r3, [pc, #56]	; (402730 <SystemCoreClockUpdate+0xf4>)
  4026f8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4026fa:	4b0c      	ldr	r3, [pc, #48]	; (40272c <SystemCoreClockUpdate+0xf0>)
  4026fc:	6a1b      	ldr	r3, [r3, #32]
  4026fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402702:	2b10      	cmp	r3, #16
  402704:	d005      	beq.n	402712 <SystemCoreClockUpdate+0xd6>
  402706:	2b20      	cmp	r3, #32
  402708:	d1e0      	bne.n	4026cc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40270a:	4a0b      	ldr	r2, [pc, #44]	; (402738 <SystemCoreClockUpdate+0xfc>)
  40270c:	4b08      	ldr	r3, [pc, #32]	; (402730 <SystemCoreClockUpdate+0xf4>)
  40270e:	601a      	str	r2, [r3, #0]
          break;
  402710:	e7dc      	b.n	4026cc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  402712:	4a0b      	ldr	r2, [pc, #44]	; (402740 <SystemCoreClockUpdate+0x104>)
  402714:	4b06      	ldr	r3, [pc, #24]	; (402730 <SystemCoreClockUpdate+0xf4>)
  402716:	601a      	str	r2, [r3, #0]
          break;
  402718:	e7d8      	b.n	4026cc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40271a:	4a05      	ldr	r2, [pc, #20]	; (402730 <SystemCoreClockUpdate+0xf4>)
  40271c:	6813      	ldr	r3, [r2, #0]
  40271e:	4909      	ldr	r1, [pc, #36]	; (402744 <SystemCoreClockUpdate+0x108>)
  402720:	fba1 1303 	umull	r1, r3, r1, r3
  402724:	085b      	lsrs	r3, r3, #1
  402726:	6013      	str	r3, [r2, #0]
  402728:	4770      	bx	lr
  40272a:	bf00      	nop
  40272c:	400e0600 	.word	0x400e0600
  402730:	20400034 	.word	0x20400034
  402734:	400e1810 	.word	0x400e1810
  402738:	00b71b00 	.word	0x00b71b00
  40273c:	003d0900 	.word	0x003d0900
  402740:	007a1200 	.word	0x007a1200
  402744:	aaaaaaab 	.word	0xaaaaaaab

00402748 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402748:	4b16      	ldr	r3, [pc, #88]	; (4027a4 <system_init_flash+0x5c>)
  40274a:	4298      	cmp	r0, r3
  40274c:	d913      	bls.n	402776 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40274e:	4b16      	ldr	r3, [pc, #88]	; (4027a8 <system_init_flash+0x60>)
  402750:	4298      	cmp	r0, r3
  402752:	d915      	bls.n	402780 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402754:	4b15      	ldr	r3, [pc, #84]	; (4027ac <system_init_flash+0x64>)
  402756:	4298      	cmp	r0, r3
  402758:	d916      	bls.n	402788 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40275a:	4b15      	ldr	r3, [pc, #84]	; (4027b0 <system_init_flash+0x68>)
  40275c:	4298      	cmp	r0, r3
  40275e:	d917      	bls.n	402790 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402760:	4b14      	ldr	r3, [pc, #80]	; (4027b4 <system_init_flash+0x6c>)
  402762:	4298      	cmp	r0, r3
  402764:	d918      	bls.n	402798 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402766:	4b14      	ldr	r3, [pc, #80]	; (4027b8 <system_init_flash+0x70>)
  402768:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40276a:	bf94      	ite	ls
  40276c:	4a13      	ldrls	r2, [pc, #76]	; (4027bc <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40276e:	4a14      	ldrhi	r2, [pc, #80]	; (4027c0 <system_init_flash+0x78>)
  402770:	4b14      	ldr	r3, [pc, #80]	; (4027c4 <system_init_flash+0x7c>)
  402772:	601a      	str	r2, [r3, #0]
  402774:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402776:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40277a:	4b12      	ldr	r3, [pc, #72]	; (4027c4 <system_init_flash+0x7c>)
  40277c:	601a      	str	r2, [r3, #0]
  40277e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402780:	4a11      	ldr	r2, [pc, #68]	; (4027c8 <system_init_flash+0x80>)
  402782:	4b10      	ldr	r3, [pc, #64]	; (4027c4 <system_init_flash+0x7c>)
  402784:	601a      	str	r2, [r3, #0]
  402786:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402788:	4a10      	ldr	r2, [pc, #64]	; (4027cc <system_init_flash+0x84>)
  40278a:	4b0e      	ldr	r3, [pc, #56]	; (4027c4 <system_init_flash+0x7c>)
  40278c:	601a      	str	r2, [r3, #0]
  40278e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402790:	4a0f      	ldr	r2, [pc, #60]	; (4027d0 <system_init_flash+0x88>)
  402792:	4b0c      	ldr	r3, [pc, #48]	; (4027c4 <system_init_flash+0x7c>)
  402794:	601a      	str	r2, [r3, #0]
  402796:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402798:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40279c:	4b09      	ldr	r3, [pc, #36]	; (4027c4 <system_init_flash+0x7c>)
  40279e:	601a      	str	r2, [r3, #0]
  4027a0:	4770      	bx	lr
  4027a2:	bf00      	nop
  4027a4:	015ef3bf 	.word	0x015ef3bf
  4027a8:	02bde77f 	.word	0x02bde77f
  4027ac:	041cdb3f 	.word	0x041cdb3f
  4027b0:	057bceff 	.word	0x057bceff
  4027b4:	06dac2bf 	.word	0x06dac2bf
  4027b8:	0839b67f 	.word	0x0839b67f
  4027bc:	04000500 	.word	0x04000500
  4027c0:	04000600 	.word	0x04000600
  4027c4:	400e0c00 	.word	0x400e0c00
  4027c8:	04000100 	.word	0x04000100
  4027cc:	04000200 	.word	0x04000200
  4027d0:	04000300 	.word	0x04000300

004027d4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4027d4:	4b0a      	ldr	r3, [pc, #40]	; (402800 <_sbrk+0x2c>)
  4027d6:	681b      	ldr	r3, [r3, #0]
  4027d8:	b153      	cbz	r3, 4027f0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4027da:	4b09      	ldr	r3, [pc, #36]	; (402800 <_sbrk+0x2c>)
  4027dc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4027de:	181a      	adds	r2, r3, r0
  4027e0:	4908      	ldr	r1, [pc, #32]	; (402804 <_sbrk+0x30>)
  4027e2:	4291      	cmp	r1, r2
  4027e4:	db08      	blt.n	4027f8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4027e6:	4610      	mov	r0, r2
  4027e8:	4a05      	ldr	r2, [pc, #20]	; (402800 <_sbrk+0x2c>)
  4027ea:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4027ec:	4618      	mov	r0, r3
  4027ee:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4027f0:	4a05      	ldr	r2, [pc, #20]	; (402808 <_sbrk+0x34>)
  4027f2:	4b03      	ldr	r3, [pc, #12]	; (402800 <_sbrk+0x2c>)
  4027f4:	601a      	str	r2, [r3, #0]
  4027f6:	e7f0      	b.n	4027da <_sbrk+0x6>
		return (caddr_t) -1;	
  4027f8:	f04f 30ff 	mov.w	r0, #4294967295
}
  4027fc:	4770      	bx	lr
  4027fe:	bf00      	nop
  402800:	20400a9c 	.word	0x20400a9c
  402804:	2045fffc 	.word	0x2045fffc
  402808:	2040e6d8 	.word	0x2040e6d8

0040280c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40280c:	f04f 30ff 	mov.w	r0, #4294967295
  402810:	4770      	bx	lr

00402812 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402816:	604b      	str	r3, [r1, #4]

	return 0;
}
  402818:	2000      	movs	r0, #0
  40281a:	4770      	bx	lr

0040281c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40281c:	2001      	movs	r0, #1
  40281e:	4770      	bx	lr

00402820 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402820:	2000      	movs	r0, #0
  402822:	4770      	bx	lr

00402824 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  402824:	2801      	cmp	r0, #1
  402826:	d901      	bls.n	40282c <disk_initialize+0x8>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  402828:	2001      	movs	r0, #1
  40282a:	4770      	bx	lr
{
  40282c:	b510      	push	{r4, lr}
  40282e:	4604      	mov	r4, r0
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  402830:	4b0a      	ldr	r3, [pc, #40]	; (40285c <disk_initialize+0x38>)
  402832:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  402834:	2803      	cmp	r0, #3
  402836:	d106      	bne.n	402846 <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
  402838:	4620      	mov	r0, r4
  40283a:	4b08      	ldr	r3, [pc, #32]	; (40285c <disk_initialize+0x38>)
  40283c:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  40283e:	2803      	cmp	r0, #3
  402840:	d101      	bne.n	402846 <disk_initialize+0x22>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  402842:	2001      	movs	r0, #1
  402844:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  402846:	b938      	cbnz	r0, 402858 <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  402848:	4620      	mov	r0, r4
  40284a:	4b05      	ldr	r3, [pc, #20]	; (402860 <disk_initialize+0x3c>)
  40284c:	4798      	blx	r3
  40284e:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  402850:	bf14      	ite	ne
  402852:	2004      	movne	r0, #4
  402854:	2000      	moveq	r0, #0
  402856:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  402858:	2001      	movs	r0, #1
}
  40285a:	bd10      	pop	{r4, pc}
  40285c:	00401085 	.word	0x00401085
  402860:	004010b5 	.word	0x004010b5

00402864 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  402864:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  402866:	4b05      	ldr	r3, [pc, #20]	; (40287c <disk_status+0x18>)
  402868:	4798      	blx	r3
  40286a:	b120      	cbz	r0, 402876 <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  40286c:	2802      	cmp	r0, #2
  40286e:	bf0c      	ite	eq
  402870:	2003      	moveq	r0, #3
  402872:	2001      	movne	r0, #1
  402874:	bd08      	pop	{r3, pc}
		return 0;
  402876:	2000      	movs	r0, #0
	}
}
  402878:	bd08      	pop	{r3, pc}
  40287a:	bf00      	nop
  40287c:	00401085 	.word	0x00401085

00402880 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  402880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402884:	b083      	sub	sp, #12
  402886:	4680      	mov	r8, r0
  402888:	460d      	mov	r5, r1
  40288a:	4614      	mov	r4, r2
  40288c:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  40288e:	4b15      	ldr	r3, [pc, #84]	; (4028e4 <disk_read+0x64>)
  402890:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  402892:	b918      	cbnz	r0, 40289c <disk_read+0x1c>
		return RES_ERROR;
  402894:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  402896:	b003      	add	sp, #12
  402898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40289c:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  40289e:	a901      	add	r1, sp, #4
  4028a0:	4640      	mov	r0, r8
  4028a2:	4b11      	ldr	r3, [pc, #68]	; (4028e8 <disk_read+0x68>)
  4028a4:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  4028a6:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  4028a8:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  4028ac:	9b01      	ldr	r3, [sp, #4]
  4028ae:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  4028b2:	429a      	cmp	r2, r3
  4028b4:	d901      	bls.n	4028ba <disk_read+0x3a>
		return RES_PARERR;
  4028b6:	2004      	movs	r0, #4
  4028b8:	e7ed      	b.n	402896 <disk_read+0x16>
	for (i = 0; i < count; i++) {
  4028ba:	46ba      	mov	sl, r7
  4028bc:	b177      	cbz	r7, 4028dc <disk_read+0x5c>
  4028be:	0276      	lsls	r6, r6, #9
  4028c0:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4028c2:	f8df b028 	ldr.w	fp, [pc, #40]	; 4028ec <disk_read+0x6c>
  4028c6:	462a      	mov	r2, r5
  4028c8:	4621      	mov	r1, r4
  4028ca:	4640      	mov	r0, r8
  4028cc:	47d8      	blx	fp
  4028ce:	b938      	cbnz	r0, 4028e0 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  4028d0:	3701      	adds	r7, #1
  4028d2:	444c      	add	r4, r9
  4028d4:	4435      	add	r5, r6
  4028d6:	4557      	cmp	r7, sl
  4028d8:	d1f5      	bne.n	4028c6 <disk_read+0x46>
  4028da:	e7dc      	b.n	402896 <disk_read+0x16>
	return RES_OK;
  4028dc:	2000      	movs	r0, #0
  4028de:	e7da      	b.n	402896 <disk_read+0x16>
			return RES_ERROR;
  4028e0:	2001      	movs	r0, #1
  4028e2:	e7d8      	b.n	402896 <disk_read+0x16>
  4028e4:	004010ad 	.word	0x004010ad
  4028e8:	00401099 	.word	0x00401099
  4028ec:	004010c9 	.word	0x004010c9

004028f0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  4028f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028f4:	b083      	sub	sp, #12
  4028f6:	4680      	mov	r8, r0
  4028f8:	460d      	mov	r5, r1
  4028fa:	4614      	mov	r4, r2
  4028fc:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4028fe:	4b15      	ldr	r3, [pc, #84]	; (402954 <disk_write+0x64>)
  402900:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  402902:	b918      	cbnz	r0, 40290c <disk_write+0x1c>
		return RES_ERROR;
  402904:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  402906:	b003      	add	sp, #12
  402908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40290c:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  40290e:	a901      	add	r1, sp, #4
  402910:	4640      	mov	r0, r8
  402912:	4b11      	ldr	r3, [pc, #68]	; (402958 <disk_write+0x68>)
  402914:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  402916:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  402918:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  40291c:	9b01      	ldr	r3, [sp, #4]
  40291e:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  402922:	429a      	cmp	r2, r3
  402924:	d901      	bls.n	40292a <disk_write+0x3a>
		return RES_PARERR;
  402926:	2004      	movs	r0, #4
  402928:	e7ed      	b.n	402906 <disk_write+0x16>
	for (i = 0; i < count; i++) {
  40292a:	46ba      	mov	sl, r7
  40292c:	b177      	cbz	r7, 40294c <disk_write+0x5c>
  40292e:	0276      	lsls	r6, r6, #9
  402930:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  402932:	f8df b028 	ldr.w	fp, [pc, #40]	; 40295c <disk_write+0x6c>
  402936:	462a      	mov	r2, r5
  402938:	4621      	mov	r1, r4
  40293a:	4640      	mov	r0, r8
  40293c:	47d8      	blx	fp
  40293e:	b938      	cbnz	r0, 402950 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  402940:	3701      	adds	r7, #1
  402942:	444c      	add	r4, r9
  402944:	4435      	add	r5, r6
  402946:	4557      	cmp	r7, sl
  402948:	d1f5      	bne.n	402936 <disk_write+0x46>
  40294a:	e7dc      	b.n	402906 <disk_write+0x16>
	return RES_OK;
  40294c:	2000      	movs	r0, #0
  40294e:	e7da      	b.n	402906 <disk_write+0x16>
			return RES_ERROR;
  402950:	2001      	movs	r0, #1
  402952:	e7d8      	b.n	402906 <disk_write+0x16>
  402954:	004010ad 	.word	0x004010ad
  402958:	00401099 	.word	0x00401099
  40295c:	004010e1 	.word	0x004010e1

00402960 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  402960:	b510      	push	{r4, lr}
  402962:	b082      	sub	sp, #8
  402964:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  402966:	2903      	cmp	r1, #3
  402968:	d825      	bhi.n	4029b6 <disk_ioctl+0x56>
  40296a:	e8df f001 	tbb	[pc, r1]
  40296e:	071d      	.short	0x071d
  402970:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  402972:	2301      	movs	r3, #1
  402974:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  402976:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  402978:	b002      	add	sp, #8
  40297a:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  40297c:	a901      	add	r1, sp, #4
  40297e:	4b11      	ldr	r3, [pc, #68]	; (4029c4 <disk_ioctl+0x64>)
  402980:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  402982:	9b01      	ldr	r3, [sp, #4]
  402984:	3301      	adds	r3, #1
  402986:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  402988:	2000      	movs	r0, #0
	break;
  40298a:	e7f5      	b.n	402978 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  40298c:	4b0e      	ldr	r3, [pc, #56]	; (4029c8 <disk_ioctl+0x68>)
  40298e:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  402990:	2808      	cmp	r0, #8
  402992:	d812      	bhi.n	4029ba <disk_ioctl+0x5a>
  402994:	f44f 738b 	mov.w	r3, #278	; 0x116
  402998:	fa23 f000 	lsr.w	r0, r3, r0
				(uc_sector_size != SECTOR_SIZE_2048) &&
  40299c:	f010 0f01 	tst.w	r0, #1
  4029a0:	d00d      	beq.n	4029be <disk_ioctl+0x5e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  4029a2:	2000      	movs	r0, #0
  4029a4:	7020      	strb	r0, [r4, #0]
	break;
  4029a6:	e7e7      	b.n	402978 <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  4029a8:	4b08      	ldr	r3, [pc, #32]	; (4029cc <disk_ioctl+0x6c>)
  4029aa:	4798      	blx	r3
  4029ac:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  4029ae:	bf0c      	ite	eq
  4029b0:	2000      	moveq	r0, #0
  4029b2:	2003      	movne	r0, #3
  4029b4:	e7e0      	b.n	402978 <disk_ioctl+0x18>
		res = RES_PARERR;
  4029b6:	2004      	movs	r0, #4
  4029b8:	e7de      	b.n	402978 <disk_ioctl+0x18>
			return RES_ERROR;
  4029ba:	2001      	movs	r0, #1
  4029bc:	e7dc      	b.n	402978 <disk_ioctl+0x18>
  4029be:	2001      	movs	r0, #1
  4029c0:	e7da      	b.n	402978 <disk_ioctl+0x18>
  4029c2:	bf00      	nop
  4029c4:	00401099 	.word	0x00401099
  4029c8:	004010ad 	.word	0x004010ad
  4029cc:	00401085 	.word	0x00401085

004029d0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  4029d0:	b530      	push	{r4, r5, lr}
  4029d2:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  4029d4:	4c11      	ldr	r4, [pc, #68]	; (402a1c <get_fattime+0x4c>)
  4029d6:	ab07      	add	r3, sp, #28
  4029d8:	aa08      	add	r2, sp, #32
  4029da:	a909      	add	r1, sp, #36	; 0x24
  4029dc:	4620      	mov	r0, r4
  4029de:	4d10      	ldr	r5, [pc, #64]	; (402a20 <get_fattime+0x50>)
  4029e0:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  4029e2:	ab03      	add	r3, sp, #12
  4029e4:	9300      	str	r3, [sp, #0]
  4029e6:	ab04      	add	r3, sp, #16
  4029e8:	aa05      	add	r2, sp, #20
  4029ea:	a906      	add	r1, sp, #24
  4029ec:	4620      	mov	r0, r4
  4029ee:	4c0d      	ldr	r4, [pc, #52]	; (402a24 <get_fattime+0x54>)
  4029f0:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  4029f2:	9b04      	ldr	r3, [sp, #16]
  4029f4:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  4029f6:	9805      	ldr	r0, [sp, #20]
  4029f8:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  4029fc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4029fe:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  402a02:	9808      	ldr	r0, [sp, #32]
  402a04:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  402a08:	9807      	ldr	r0, [sp, #28]
  402a0a:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  402a0e:	9806      	ldr	r0, [sp, #24]
  402a10:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  402a14:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  402a18:	b00b      	add	sp, #44	; 0x2c
  402a1a:	bd30      	pop	{r4, r5, pc}
  402a1c:	400e1860 	.word	0x400e1860
  402a20:	00401fc7 	.word	0x00401fc7
  402a24:	004020b1 	.word	0x004020b1

00402a28 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  402a28:	b13a      	cbz	r2, 402a3a <mem_cpy+0x12>
  402a2a:	3801      	subs	r0, #1
  402a2c:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  402a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
  402a32:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  402a36:	4291      	cmp	r1, r2
  402a38:	d1f9      	bne.n	402a2e <mem_cpy+0x6>
  402a3a:	4770      	bx	lr

00402a3c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  402a3c:	b122      	cbz	r2, 402a48 <mem_set+0xc>
  402a3e:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  402a40:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  402a44:	4282      	cmp	r2, r0
  402a46:	d1fb      	bne.n	402a40 <mem_set+0x4>
  402a48:	4770      	bx	lr

00402a4a <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  402a4a:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  402a4c:	6983      	ldr	r3, [r0, #24]
  402a4e:	3b02      	subs	r3, #2
  402a50:	4299      	cmp	r1, r3
  402a52:	d204      	bcs.n	402a5e <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  402a54:	7883      	ldrb	r3, [r0, #2]
  402a56:	6a80      	ldr	r0, [r0, #40]	; 0x28
  402a58:	fb01 0003 	mla	r0, r1, r3, r0
  402a5c:	4770      	bx	lr
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  402a5e:	2000      	movs	r0, #0
}
  402a60:	4770      	bx	lr

00402a62 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  402a62:	4602      	mov	r2, r0
  402a64:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  402a68:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  402a6a:	01c3      	lsls	r3, r0, #7
  402a6c:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  402a70:	f812 0b01 	ldrb.w	r0, [r2], #1
  402a74:	fa50 f383 	uxtab	r3, r0, r3
  402a78:	b2d8      	uxtb	r0, r3
  402a7a:	428a      	cmp	r2, r1
  402a7c:	d1f5      	bne.n	402a6a <sum_sfn+0x8>
	return sum;
}
  402a7e:	4770      	bx	lr

00402a80 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  402a80:	b198      	cbz	r0, 402aaa <validate+0x2a>
{
  402a82:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  402a84:	7802      	ldrb	r2, [r0, #0]
  402a86:	b90a      	cbnz	r2, 402a8c <validate+0xc>
		return FR_INVALID_OBJECT;
  402a88:	2009      	movs	r0, #9
  402a8a:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  402a8c:	88c2      	ldrh	r2, [r0, #6]
  402a8e:	428a      	cmp	r2, r1
  402a90:	d001      	beq.n	402a96 <validate+0x16>
		return FR_INVALID_OBJECT;
  402a92:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  402a94:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  402a96:	7840      	ldrb	r0, [r0, #1]
  402a98:	4b05      	ldr	r3, [pc, #20]	; (402ab0 <validate+0x30>)
  402a9a:	4798      	blx	r3
  402a9c:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  402aa0:	2800      	cmp	r0, #0
  402aa2:	bf14      	ite	ne
  402aa4:	2003      	movne	r0, #3
  402aa6:	2000      	moveq	r0, #0
  402aa8:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  402aaa:	2009      	movs	r0, #9
  402aac:	4770      	bx	lr
  402aae:	bf00      	nop
  402ab0:	00402865 	.word	0x00402865

00402ab4 <check_fs>:
{
  402ab4:	b538      	push	{r3, r4, r5, lr}
  402ab6:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  402ab8:	2301      	movs	r3, #1
  402aba:	460a      	mov	r2, r1
  402abc:	f100 0130 	add.w	r1, r0, #48	; 0x30
  402ac0:	7840      	ldrb	r0, [r0, #1]
  402ac2:	4d1d      	ldr	r5, [pc, #116]	; (402b38 <check_fs+0x84>)
  402ac4:	47a8      	blx	r5
  402ac6:	b108      	cbz	r0, 402acc <check_fs+0x18>
		return 3;
  402ac8:	2003      	movs	r0, #3
  402aca:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  402acc:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  402ad0:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  402ad4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402ad8:	b21b      	sxth	r3, r3
  402ada:	4a18      	ldr	r2, [pc, #96]	; (402b3c <check_fs+0x88>)
  402adc:	4293      	cmp	r3, r2
  402ade:	d001      	beq.n	402ae4 <check_fs+0x30>
		return 2;
  402ae0:	2002      	movs	r0, #2
  402ae2:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  402ae4:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  402ae8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  402aec:	041b      	lsls	r3, r3, #16
  402aee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402af2:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  402af6:	4313      	orrs	r3, r2
  402af8:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  402afc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402b00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  402b04:	4a0e      	ldr	r2, [pc, #56]	; (402b40 <check_fs+0x8c>)
  402b06:	4293      	cmp	r3, r2
  402b08:	d013      	beq.n	402b32 <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  402b0a:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  402b0e:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  402b12:	0400      	lsls	r0, r0, #16
  402b14:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  402b18:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  402b1c:	4318      	orrs	r0, r3
  402b1e:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  402b22:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402b26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  402b2a:	1a80      	subs	r0, r0, r2
  402b2c:	bf18      	it	ne
  402b2e:	2001      	movne	r0, #1
  402b30:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  402b32:	2000      	movs	r0, #0
}
  402b34:	bd38      	pop	{r3, r4, r5, pc}
  402b36:	bf00      	nop
  402b38:	00402881 	.word	0x00402881
  402b3c:	ffffaa55 	.word	0xffffaa55
  402b40:	00544146 	.word	0x00544146

00402b44 <chk_mounted>:
{
  402b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  402b46:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  402b48:	781c      	ldrb	r4, [r3, #0]
  402b4a:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  402b4c:	2c09      	cmp	r4, #9
  402b4e:	d80a      	bhi.n	402b66 <chk_mounted+0x22>
  402b50:	785d      	ldrb	r5, [r3, #1]
  402b52:	2d3a      	cmp	r5, #58	; 0x3a
  402b54:	d001      	beq.n	402b5a <chk_mounted+0x16>
  402b56:	2400      	movs	r4, #0
  402b58:	e006      	b.n	402b68 <chk_mounted+0x24>
		p += 2; *path = p;				/* Return pointer to the path name */
  402b5a:	3302      	adds	r3, #2
  402b5c:	6003      	str	r3, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  402b5e:	2c07      	cmp	r4, #7
  402b60:	d902      	bls.n	402b68 <chk_mounted+0x24>
		return FR_INVALID_DRIVE;
  402b62:	200b      	movs	r0, #11
  402b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b66:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  402b68:	4bae      	ldr	r3, [pc, #696]	; (402e24 <chk_mounted+0x2e0>)
  402b6a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  402b6e:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402b70:	2d00      	cmp	r5, #0
  402b72:	f000 813e 	beq.w	402df2 <chk_mounted+0x2ae>
  402b76:	4616      	mov	r6, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  402b78:	782b      	ldrb	r3, [r5, #0]
  402b7a:	b17b      	cbz	r3, 402b9c <chk_mounted+0x58>
		stat = disk_status(fs->drv);
  402b7c:	7868      	ldrb	r0, [r5, #1]
  402b7e:	4baa      	ldr	r3, [pc, #680]	; (402e28 <chk_mounted+0x2e4>)
  402b80:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  402b82:	f010 0f01 	tst.w	r0, #1
  402b86:	d109      	bne.n	402b9c <chk_mounted+0x58>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  402b88:	2e00      	cmp	r6, #0
  402b8a:	f000 8134 	beq.w	402df6 <chk_mounted+0x2b2>
  402b8e:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  402b92:	2800      	cmp	r0, #0
  402b94:	bf0c      	ite	eq
  402b96:	2000      	moveq	r0, #0
  402b98:	200a      	movne	r0, #10
  402b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  402b9c:	2300      	movs	r3, #0
  402b9e:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  402ba0:	b2e0      	uxtb	r0, r4
  402ba2:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  402ba4:	4ba1      	ldr	r3, [pc, #644]	; (402e2c <chk_mounted+0x2e8>)
  402ba6:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  402ba8:	f010 0f01 	tst.w	r0, #1
  402bac:	d001      	beq.n	402bb2 <chk_mounted+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  402bae:	2003      	movs	r0, #3
  402bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  402bb2:	b126      	cbz	r6, 402bbe <chk_mounted+0x7a>
  402bb4:	f010 0f04 	tst.w	r0, #4
  402bb8:	d001      	beq.n	402bbe <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
  402bba:	200a      	movs	r0, #10
  402bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  402bbe:	2100      	movs	r1, #0
  402bc0:	4628      	mov	r0, r5
  402bc2:	4b9b      	ldr	r3, [pc, #620]	; (402e30 <chk_mounted+0x2ec>)
  402bc4:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  402bc6:	2801      	cmp	r0, #1
  402bc8:	d006      	beq.n	402bd8 <chk_mounted+0x94>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  402bca:	2400      	movs	r4, #0
	if (fmt == 3) return FR_DISK_ERR;
  402bcc:	2803      	cmp	r0, #3
  402bce:	f000 8114 	beq.w	402dfa <chk_mounted+0x2b6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402bd2:	b1c8      	cbz	r0, 402c08 <chk_mounted+0xc4>
  402bd4:	200d      	movs	r0, #13
  402bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  402bd8:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  402bdc:	b90b      	cbnz	r3, 402be2 <chk_mounted+0x9e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402bde:	200d      	movs	r0, #13
  402be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  402be2:	f895 31f9 	ldrb.w	r3, [r5, #505]	; 0x1f9
  402be6:	f895 41f8 	ldrb.w	r4, [r5, #504]	; 0x1f8
  402bea:	0424      	lsls	r4, r4, #16
  402bec:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  402bf0:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  402bf4:	431c      	orrs	r4, r3
  402bf6:	f895 31f7 	ldrb.w	r3, [r5, #503]	; 0x1f7
  402bfa:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  402bfe:	4621      	mov	r1, r4
  402c00:	4628      	mov	r0, r5
  402c02:	4b8b      	ldr	r3, [pc, #556]	; (402e30 <chk_mounted+0x2ec>)
  402c04:	4798      	blx	r3
  402c06:	e7e1      	b.n	402bcc <chk_mounted+0x88>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  402c08:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  402c0c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  402c10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402c14:	b21b      	sxth	r3, r3
  402c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402c1a:	d001      	beq.n	402c20 <chk_mounted+0xdc>
		return FR_NO_FILESYSTEM;
  402c1c:	200d      	movs	r0, #13
  402c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  402c20:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
  402c24:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  402c28:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  402c2c:	d10d      	bne.n	402c4a <chk_mounted+0x106>
  402c2e:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
  402c32:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
  402c36:	0412      	lsls	r2, r2, #16
  402c38:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  402c3c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
  402c40:	431a      	orrs	r2, r3
  402c42:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
  402c46:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  402c4a:	61ea      	str	r2, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  402c4c:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  402c50:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  402c54:	f10e 33ff 	add.w	r3, lr, #4294967295
  402c58:	b2db      	uxtb	r3, r3
  402c5a:	2b01      	cmp	r3, #1
  402c5c:	d901      	bls.n	402c62 <chk_mounted+0x11e>
  402c5e:	200d      	movs	r0, #13
  402c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  402c62:	f895 603d 	ldrb.w	r6, [r5, #61]	; 0x3d
  402c66:	70ae      	strb	r6, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  402c68:	2e00      	cmp	r6, #0
  402c6a:	f000 80c8 	beq.w	402dfe <chk_mounted+0x2ba>
  402c6e:	1e73      	subs	r3, r6, #1
  402c70:	4233      	tst	r3, r6
  402c72:	d001      	beq.n	402c78 <chk_mounted+0x134>
  402c74:	200d      	movs	r0, #13
  402c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  402c78:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  402c7c:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
  402c80:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  402c84:	8129      	strh	r1, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402c86:	f011 0f0f 	tst.w	r1, #15
  402c8a:	f040 80ba 	bne.w	402e02 <chk_mounted+0x2be>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  402c8e:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  402c92:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  402c96:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  402c9a:	d10d      	bne.n	402cb8 <chk_mounted+0x174>
  402c9c:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
  402ca0:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
  402ca4:	041b      	lsls	r3, r3, #16
  402ca6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  402caa:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
  402cae:	4303      	orrs	r3, r0
  402cb0:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  402cb4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  402cb8:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
  402cbc:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  402cc0:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  402cc4:	f000 809f 	beq.w	402e06 <chk_mounted+0x2c2>
	fasize *= b;										/* Number of sectors for FAT area */
  402cc8:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  402ccc:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  402cd0:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  402cd2:	4283      	cmp	r3, r0
  402cd4:	f0c0 8099 	bcc.w	402e0a <chk_mounted+0x2c6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  402cd8:	1a1b      	subs	r3, r3, r0
  402cda:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402cde:	2b00      	cmp	r3, #0
  402ce0:	f000 8095 	beq.w	402e0e <chk_mounted+0x2ca>
	fmt = FS_FAT12;
  402ce4:	f640 76f5 	movw	r6, #4085	; 0xff5
  402ce8:	42b3      	cmp	r3, r6
  402cea:	bf8c      	ite	hi
  402cec:	2602      	movhi	r6, #2
  402cee:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  402cf0:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  402cf4:	4563      	cmp	r3, ip
  402cf6:	f200 80a5 	bhi.w	402e44 <chk_mounted+0x300>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402cfa:	3302      	adds	r3, #2
  402cfc:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402cfe:	4420      	add	r0, r4
  402d00:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402d02:	443c      	add	r4, r7
  402d04:	622c      	str	r4, [r5, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  402d06:	2900      	cmp	r1, #0
  402d08:	f000 8089 	beq.w	402e1e <chk_mounted+0x2da>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  402d0c:	4474      	add	r4, lr
  402d0e:	626c      	str	r4, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  402d10:	2e02      	cmp	r6, #2
  402d12:	d10b      	bne.n	402d2c <chk_mounted+0x1e8>
  402d14:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402d16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  402d1a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  402d1e:	d37c      	bcc.n	402e1a <chk_mounted+0x2d6>
	fs->free_clust = 0xFFFFFFFF;
  402d20:	f04f 33ff 	mov.w	r3, #4294967295
  402d24:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  402d26:	2300      	movs	r3, #0
  402d28:	60eb      	str	r3, [r5, #12]
  402d2a:	e051      	b.n	402dd0 <chk_mounted+0x28c>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  402d2c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402d30:	f003 0301 	and.w	r3, r3, #1
  402d34:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  402d38:	e7ed      	b.n	402d16 <chk_mounted+0x1d2>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  402d3a:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  402d3e:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  402d42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  402d46:	b21b      	sxth	r3, r3
  402d48:	4a3a      	ldr	r2, [pc, #232]	; (402e34 <chk_mounted+0x2f0>)
  402d4a:	4293      	cmp	r3, r2
  402d4c:	d14b      	bne.n	402de6 <chk_mounted+0x2a2>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402d4e:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  402d52:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  402d56:	041b      	lsls	r3, r3, #16
  402d58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402d5c:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
  402d60:	4313      	orrs	r3, r2
  402d62:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  402d66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  402d6a:	4a33      	ldr	r2, [pc, #204]	; (402e38 <chk_mounted+0x2f4>)
  402d6c:	4293      	cmp	r3, r2
  402d6e:	d13c      	bne.n	402dea <chk_mounted+0x2a6>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  402d70:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  402d74:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  402d78:	041b      	lsls	r3, r3, #16
  402d7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402d7e:	f895 2214 	ldrb.w	r2, [r5, #532]	; 0x214
  402d82:	4313      	orrs	r3, r2
  402d84:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  402d88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402d8c:	4a2b      	ldr	r2, [pc, #172]	; (402e3c <chk_mounted+0x2f8>)
  402d8e:	4293      	cmp	r3, r2
  402d90:	d12d      	bne.n	402dee <chk_mounted+0x2aa>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  402d92:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  402d96:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  402d9a:	041b      	lsls	r3, r3, #16
  402d9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402da0:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  402da4:	4313      	orrs	r3, r2
  402da6:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  402daa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402dae:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  402db0:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  402db4:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  402db8:	041b      	lsls	r3, r3, #16
  402dba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402dbe:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  402dc2:	4313      	orrs	r3, r2
  402dc4:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  402dc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402dcc:	612b      	str	r3, [r5, #16]
  402dce:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  402dd0:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  402dd2:	4a1b      	ldr	r2, [pc, #108]	; (402e40 <chk_mounted+0x2fc>)
  402dd4:	8813      	ldrh	r3, [r2, #0]
  402dd6:	3301      	adds	r3, #1
  402dd8:	b29b      	uxth	r3, r3
  402dda:	8013      	strh	r3, [r2, #0]
  402ddc:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  402dde:	2000      	movs	r0, #0
  402de0:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  402de2:	7128      	strb	r0, [r5, #4]
	return FR_OK;
  402de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402de6:	2603      	movs	r6, #3
  402de8:	e7f2      	b.n	402dd0 <chk_mounted+0x28c>
  402dea:	2603      	movs	r6, #3
  402dec:	e7f0      	b.n	402dd0 <chk_mounted+0x28c>
  402dee:	2603      	movs	r6, #3
  402df0:	e7ee      	b.n	402dd0 <chk_mounted+0x28c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402df2:	200c      	movs	r0, #12
  402df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  402df6:	2000      	movs	r0, #0
  402df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  402dfa:	2001      	movs	r0, #1
  402dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  402dfe:	200d      	movs	r0, #13
  402e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402e02:	200d      	movs	r0, #13
  402e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  402e06:	200d      	movs	r0, #13
  402e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  402e0a:	200d      	movs	r0, #13
  402e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402e0e:	200d      	movs	r0, #13
  402e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  402e12:	200d      	movs	r0, #13
  402e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402e16:	200d      	movs	r0, #13
  402e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  402e1a:	200d      	movs	r0, #13
  402e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  402e1e:	200d      	movs	r0, #13
  402e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e22:	bf00      	nop
  402e24:	20400aa0 	.word	0x20400aa0
  402e28:	00402865 	.word	0x00402865
  402e2c:	00402825 	.word	0x00402825
  402e30:	00402ab5 	.word	0x00402ab5
  402e34:	ffffaa55 	.word	0xffffaa55
  402e38:	41615252 	.word	0x41615252
  402e3c:	61417272 	.word	0x61417272
  402e40:	20400ac0 	.word	0x20400ac0
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402e44:	3302      	adds	r3, #2
  402e46:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402e48:	4420      	add	r0, r4
  402e4a:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402e4c:	4427      	add	r7, r4
  402e4e:	622f      	str	r7, [r5, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402e50:	2900      	cmp	r1, #0
  402e52:	d1e0      	bne.n	402e16 <chk_mounted+0x2d2>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  402e54:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  402e58:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
  402e5c:	0409      	lsls	r1, r1, #16
  402e5e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  402e62:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
  402e66:	4301      	orrs	r1, r0
  402e68:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  402e6c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  402e70:	6269      	str	r1, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  402e72:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402e74:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  402e78:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  402e7c:	d3c9      	bcc.n	402e12 <chk_mounted+0x2ce>
	fs->free_clust = 0xFFFFFFFF;
  402e7e:	f04f 33ff 	mov.w	r3, #4294967295
  402e82:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  402e84:	2300      	movs	r3, #0
  402e86:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
  402e88:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  402e8a:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
  402e8e:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
  402e92:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  402e96:	4422      	add	r2, r4
  402e98:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  402e9a:	2301      	movs	r3, #1
  402e9c:	f105 0130 	add.w	r1, r5, #48	; 0x30
  402ea0:	7868      	ldrb	r0, [r5, #1]
  402ea2:	4c03      	ldr	r4, [pc, #12]	; (402eb0 <chk_mounted+0x36c>)
  402ea4:	47a0      	blx	r4
  402ea6:	2800      	cmp	r0, #0
  402ea8:	f43f af47 	beq.w	402d3a <chk_mounted+0x1f6>
  402eac:	2603      	movs	r6, #3
  402eae:	e78f      	b.n	402dd0 <chk_mounted+0x28c>
  402eb0:	00402881 	.word	0x00402881

00402eb4 <move_window>:
{
  402eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  402eb8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  402eba:	428f      	cmp	r7, r1
  402ebc:	d035      	beq.n	402f2a <move_window+0x76>
  402ebe:	460e      	mov	r6, r1
  402ec0:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  402ec2:	7903      	ldrb	r3, [r0, #4]
  402ec4:	b91b      	cbnz	r3, 402ece <move_window+0x1a>
		if (sector) {
  402ec6:	bb2e      	cbnz	r6, 402f14 <move_window+0x60>
	return FR_OK;
  402ec8:	2000      	movs	r0, #0
  402eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  402ece:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402ed2:	2301      	movs	r3, #1
  402ed4:	463a      	mov	r2, r7
  402ed6:	4641      	mov	r1, r8
  402ed8:	7840      	ldrb	r0, [r0, #1]
  402eda:	4d18      	ldr	r5, [pc, #96]	; (402f3c <move_window+0x88>)
  402edc:	47a8      	blx	r5
  402ede:	bb38      	cbnz	r0, 402f30 <move_window+0x7c>
			fs->wflag = 0;
  402ee0:	2300      	movs	r3, #0
  402ee2:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  402ee4:	6a23      	ldr	r3, [r4, #32]
  402ee6:	69e2      	ldr	r2, [r4, #28]
  402ee8:	4413      	add	r3, r2
  402eea:	429f      	cmp	r7, r3
  402eec:	d2eb      	bcs.n	402ec6 <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402eee:	78e5      	ldrb	r5, [r4, #3]
  402ef0:	2d01      	cmp	r5, #1
  402ef2:	d9e8      	bls.n	402ec6 <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  402ef4:	f04f 0a01 	mov.w	sl, #1
  402ef8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 402f3c <move_window+0x88>
					wsect += fs->fsize;
  402efc:	69e3      	ldr	r3, [r4, #28]
  402efe:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  402f00:	4653      	mov	r3, sl
  402f02:	463a      	mov	r2, r7
  402f04:	4641      	mov	r1, r8
  402f06:	7860      	ldrb	r0, [r4, #1]
  402f08:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402f0a:	3d01      	subs	r5, #1
  402f0c:	b2ed      	uxtb	r5, r5
  402f0e:	2d01      	cmp	r5, #1
  402f10:	d1f4      	bne.n	402efc <move_window+0x48>
  402f12:	e7d8      	b.n	402ec6 <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  402f14:	2301      	movs	r3, #1
  402f16:	4632      	mov	r2, r6
  402f18:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402f1c:	7860      	ldrb	r0, [r4, #1]
  402f1e:	4d08      	ldr	r5, [pc, #32]	; (402f40 <move_window+0x8c>)
  402f20:	47a8      	blx	r5
  402f22:	b940      	cbnz	r0, 402f36 <move_window+0x82>
			fs->winsect = sector;
  402f24:	62e6      	str	r6, [r4, #44]	; 0x2c
  402f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  402f2a:	2000      	movs	r0, #0
  402f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  402f30:	2001      	movs	r0, #1
  402f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  402f36:	2001      	movs	r0, #1
}
  402f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f3c:	004028f1 	.word	0x004028f1
  402f40:	00402881 	.word	0x00402881

00402f44 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402f44:	2901      	cmp	r1, #1
  402f46:	d96a      	bls.n	40301e <get_fat+0xda>
{
  402f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402f4a:	6983      	ldr	r3, [r0, #24]
  402f4c:	4299      	cmp	r1, r3
  402f4e:	d268      	bcs.n	403022 <get_fat+0xde>
  402f50:	460c      	mov	r4, r1
  402f52:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  402f54:	7803      	ldrb	r3, [r0, #0]
  402f56:	2b02      	cmp	r3, #2
  402f58:	d02f      	beq.n	402fba <get_fat+0x76>
  402f5a:	2b03      	cmp	r3, #3
  402f5c:	d041      	beq.n	402fe2 <get_fat+0x9e>
  402f5e:	2b01      	cmp	r3, #1
  402f60:	d002      	beq.n	402f68 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402f62:	f04f 30ff 	mov.w	r0, #4294967295
  402f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  402f68:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402f6c:	6a01      	ldr	r1, [r0, #32]
  402f6e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402f72:	4b2d      	ldr	r3, [pc, #180]	; (403028 <get_fat+0xe4>)
  402f74:	4798      	blx	r3
  402f76:	b110      	cbz	r0, 402f7e <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402f78:	f04f 30ff 	mov.w	r0, #4294967295
  402f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  402f7e:	f3c7 0308 	ubfx	r3, r7, #0, #9
  402f82:	4433      	add	r3, r6
  402f84:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  402f88:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402f8a:	6a31      	ldr	r1, [r6, #32]
  402f8c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402f90:	4630      	mov	r0, r6
  402f92:	4b25      	ldr	r3, [pc, #148]	; (403028 <get_fat+0xe4>)
  402f94:	4798      	blx	r3
  402f96:	b110      	cbz	r0, 402f9e <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402f98:	f04f 30ff 	mov.w	r0, #4294967295
  402f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  402f9e:	f3c7 0708 	ubfx	r7, r7, #0, #9
  402fa2:	19f0      	adds	r0, r6, r7
  402fa4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402fa8:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  402fac:	f014 0f01 	tst.w	r4, #1
  402fb0:	bf14      	ite	ne
  402fb2:	0900      	lsrne	r0, r0, #4
  402fb4:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  402fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  402fba:	6a01      	ldr	r1, [r0, #32]
  402fbc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402fc0:	4b19      	ldr	r3, [pc, #100]	; (403028 <get_fat+0xe4>)
  402fc2:	4798      	blx	r3
  402fc4:	b110      	cbz	r0, 402fcc <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402fc6:	f04f 30ff 	mov.w	r0, #4294967295
  402fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  402fcc:	0060      	lsls	r0, r4, #1
  402fce:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  402fd2:	4430      	add	r0, r6
  402fd4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  402fd8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402fdc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  402fe2:	6a01      	ldr	r1, [r0, #32]
  402fe4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402fe8:	4b0f      	ldr	r3, [pc, #60]	; (403028 <get_fat+0xe4>)
  402fea:	4798      	blx	r3
  402fec:	b110      	cbz	r0, 402ff4 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402fee:	f04f 30ff 	mov.w	r0, #4294967295
}
  402ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  402ff4:	00a0      	lsls	r0, r4, #2
  402ff6:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  402ffa:	f100 0230 	add.w	r2, r0, #48	; 0x30
  402ffe:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  403000:	78d1      	ldrb	r1, [r2, #3]
  403002:	7893      	ldrb	r3, [r2, #2]
  403004:	041b      	lsls	r3, r3, #16
  403006:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  40300a:	4430      	add	r0, r6
  40300c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  403010:	4318      	orrs	r0, r3
  403012:	7853      	ldrb	r3, [r2, #1]
  403014:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  403018:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  40301c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  40301e:	2001      	movs	r0, #1
  403020:	4770      	bx	lr
  403022:	2001      	movs	r0, #1
  403024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403026:	bf00      	nop
  403028:	00402eb5 	.word	0x00402eb5

0040302c <dir_sdi>:
{
  40302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40302e:	4605      	mov	r5, r0
  403030:	460c      	mov	r4, r1
	dj->index = idx;
  403032:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  403034:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  403036:	2901      	cmp	r1, #1
  403038:	d03d      	beq.n	4030b6 <dir_sdi+0x8a>
  40303a:	6803      	ldr	r3, [r0, #0]
  40303c:	699a      	ldr	r2, [r3, #24]
  40303e:	4291      	cmp	r1, r2
  403040:	d301      	bcc.n	403046 <dir_sdi+0x1a>
		return FR_INT_ERR;
  403042:	2002      	movs	r0, #2
  403044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  403046:	b961      	cbnz	r1, 403062 <dir_sdi+0x36>
  403048:	781a      	ldrb	r2, [r3, #0]
  40304a:	2a03      	cmp	r2, #3
  40304c:	d006      	beq.n	40305c <dir_sdi+0x30>
		dj->clust = clst;
  40304e:	2200      	movs	r2, #0
  403050:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  403052:	891a      	ldrh	r2, [r3, #8]
  403054:	42a2      	cmp	r2, r4
  403056:	d821      	bhi.n	40309c <dir_sdi+0x70>
			return FR_INT_ERR;
  403058:	2002      	movs	r0, #2
  40305a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  40305c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  40305e:	2900      	cmp	r1, #0
  403060:	d0f5      	beq.n	40304e <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  403062:	789e      	ldrb	r6, [r3, #2]
  403064:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  403066:	42b4      	cmp	r4, r6
  403068:	d310      	bcc.n	40308c <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  40306a:	4f17      	ldr	r7, [pc, #92]	; (4030c8 <dir_sdi+0x9c>)
  40306c:	6828      	ldr	r0, [r5, #0]
  40306e:	47b8      	blx	r7
  403070:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  403072:	f1b0 3fff 	cmp.w	r0, #4294967295
  403076:	d020      	beq.n	4030ba <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  403078:	2801      	cmp	r0, #1
  40307a:	d920      	bls.n	4030be <dir_sdi+0x92>
  40307c:	682b      	ldr	r3, [r5, #0]
  40307e:	699b      	ldr	r3, [r3, #24]
  403080:	4298      	cmp	r0, r3
  403082:	d21e      	bcs.n	4030c2 <dir_sdi+0x96>
			idx -= ic;
  403084:	1ba4      	subs	r4, r4, r6
  403086:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  403088:	42a6      	cmp	r6, r4
  40308a:	d9ef      	bls.n	40306c <dir_sdi+0x40>
		dj->clust = clst;
  40308c:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40308e:	6828      	ldr	r0, [r5, #0]
  403090:	4b0e      	ldr	r3, [pc, #56]	; (4030cc <dir_sdi+0xa0>)
  403092:	4798      	blx	r3
  403094:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  403098:	6128      	str	r0, [r5, #16]
  40309a:	e003      	b.n	4030a4 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40309e:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  4030a2:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  4030a4:	682b      	ldr	r3, [r5, #0]
  4030a6:	3330      	adds	r3, #48	; 0x30
  4030a8:	f004 040f 	and.w	r4, r4, #15
  4030ac:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  4030b0:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  4030b2:	2000      	movs	r0, #0
  4030b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  4030b6:	2002      	movs	r0, #2
  4030b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4030ba:	2001      	movs	r0, #1
  4030bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  4030be:	2002      	movs	r0, #2
  4030c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4030c2:	2002      	movs	r0, #2
}
  4030c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4030c6:	bf00      	nop
  4030c8:	00402f45 	.word	0x00402f45
  4030cc:	00402a4b 	.word	0x00402a4b

004030d0 <put_fat>:
{
  4030d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4030d4:	2901      	cmp	r1, #1
  4030d6:	f240 808f 	bls.w	4031f8 <put_fat+0x128>
  4030da:	6983      	ldr	r3, [r0, #24]
  4030dc:	4299      	cmp	r1, r3
  4030de:	d301      	bcc.n	4030e4 <put_fat+0x14>
		res = FR_INT_ERR;
  4030e0:	2702      	movs	r7, #2
	return res;
  4030e2:	e08a      	b.n	4031fa <put_fat+0x12a>
  4030e4:	4615      	mov	r5, r2
  4030e6:	460c      	mov	r4, r1
  4030e8:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  4030ea:	7803      	ldrb	r3, [r0, #0]
  4030ec:	2b02      	cmp	r3, #2
  4030ee:	d04e      	beq.n	40318e <put_fat+0xbe>
  4030f0:	2b03      	cmp	r3, #3
  4030f2:	d05f      	beq.n	4031b4 <put_fat+0xe4>
  4030f4:	2b01      	cmp	r3, #1
  4030f6:	d003      	beq.n	403100 <put_fat+0x30>
			res = FR_INT_ERR;
  4030f8:	2702      	movs	r7, #2
		fs->wflag = 1;
  4030fa:	2301      	movs	r3, #1
  4030fc:	7133      	strb	r3, [r6, #4]
  4030fe:	e07c      	b.n	4031fa <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  403100:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  403104:	6a01      	ldr	r1, [r0, #32]
  403106:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40310a:	4b3d      	ldr	r3, [pc, #244]	; (403200 <put_fat+0x130>)
  40310c:	4798      	blx	r3
			if (res != FR_OK) break;
  40310e:	4607      	mov	r7, r0
  403110:	2800      	cmp	r0, #0
  403112:	d1f2      	bne.n	4030fa <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  403114:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  403118:	f014 0f01 	tst.w	r4, #1
  40311c:	d01c      	beq.n	403158 <put_fat+0x88>
  40311e:	4433      	add	r3, r6
  403120:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  403124:	f002 020f 	and.w	r2, r2, #15
  403128:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  40312c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  403130:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  403134:	2301      	movs	r3, #1
  403136:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  403138:	6a31      	ldr	r1, [r6, #32]
  40313a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40313e:	4630      	mov	r0, r6
  403140:	4b2f      	ldr	r3, [pc, #188]	; (403200 <put_fat+0x130>)
  403142:	4798      	blx	r3
			if (res != FR_OK) break;
  403144:	2800      	cmp	r0, #0
  403146:	d153      	bne.n	4031f0 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  403148:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40314c:	f3c5 1207 	ubfx	r2, r5, #4, #8
  403150:	44b0      	add	r8, r6
  403152:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  403156:	e7d0      	b.n	4030fa <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  403158:	4433      	add	r3, r6
  40315a:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  40315e:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  403162:	2301      	movs	r3, #1
  403164:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  403166:	6a31      	ldr	r1, [r6, #32]
  403168:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40316c:	4630      	mov	r0, r6
  40316e:	4b24      	ldr	r3, [pc, #144]	; (403200 <put_fat+0x130>)
  403170:	4798      	blx	r3
			if (res != FR_OK) break;
  403172:	2800      	cmp	r0, #0
  403174:	d13e      	bne.n	4031f4 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  403176:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40317a:	eb06 0308 	add.w	r3, r6, r8
  40317e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  403182:	f023 030f 	bic.w	r3, r3, #15
  403186:	f3c5 2203 	ubfx	r2, r5, #8, #4
  40318a:	431a      	orrs	r2, r3
  40318c:	e7e0      	b.n	403150 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  40318e:	6a01      	ldr	r1, [r0, #32]
  403190:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  403194:	4b1a      	ldr	r3, [pc, #104]	; (403200 <put_fat+0x130>)
  403196:	4798      	blx	r3
			if (res != FR_OK) break;
  403198:	4607      	mov	r7, r0
  40319a:	2800      	cmp	r0, #0
  40319c:	d1ad      	bne.n	4030fa <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  40319e:	0063      	lsls	r3, r4, #1
  4031a0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  4031a4:	4433      	add	r3, r6
  4031a6:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  4031aa:	f3c5 2207 	ubfx	r2, r5, #8, #8
  4031ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  4031b2:	e7a2      	b.n	4030fa <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  4031b4:	6a01      	ldr	r1, [r0, #32]
  4031b6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  4031ba:	4b11      	ldr	r3, [pc, #68]	; (403200 <put_fat+0x130>)
  4031bc:	4798      	blx	r3
			if (res != FR_OK) break;
  4031be:	4607      	mov	r7, r0
  4031c0:	2800      	cmp	r0, #0
  4031c2:	d19a      	bne.n	4030fa <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  4031c4:	00a1      	lsls	r1, r4, #2
  4031c6:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  4031ca:	f101 0330 	add.w	r3, r1, #48	; 0x30
  4031ce:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  4031d0:	78da      	ldrb	r2, [r3, #3]
  4031d2:	0612      	lsls	r2, r2, #24
  4031d4:	4431      	add	r1, r6
  4031d6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  4031da:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  4031dc:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  4031e0:	f3c2 2107 	ubfx	r1, r2, #8, #8
  4031e4:	7059      	strb	r1, [r3, #1]
  4031e6:	0c11      	lsrs	r1, r2, #16
  4031e8:	7099      	strb	r1, [r3, #2]
  4031ea:	0e12      	lsrs	r2, r2, #24
  4031ec:	70da      	strb	r2, [r3, #3]
			break;
  4031ee:	e784      	b.n	4030fa <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4031f0:	4607      	mov	r7, r0
  4031f2:	e782      	b.n	4030fa <put_fat+0x2a>
  4031f4:	4607      	mov	r7, r0
  4031f6:	e780      	b.n	4030fa <put_fat+0x2a>
		res = FR_INT_ERR;
  4031f8:	2702      	movs	r7, #2
}
  4031fa:	4638      	mov	r0, r7
  4031fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403200:	00402eb5 	.word	0x00402eb5

00403204 <create_chain>:
{
  403204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403208:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  40320a:	4688      	mov	r8, r1
  40320c:	b941      	cbnz	r1, 403220 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  40320e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  403210:	b186      	cbz	r6, 403234 <create_chain+0x30>
  403212:	6983      	ldr	r3, [r0, #24]
  403214:	429e      	cmp	r6, r3
  403216:	bf28      	it	cs
  403218:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  40321a:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  40321c:	4f27      	ldr	r7, [pc, #156]	; (4032bc <create_chain+0xb8>)
  40321e:	e017      	b.n	403250 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  403220:	4b26      	ldr	r3, [pc, #152]	; (4032bc <create_chain+0xb8>)
  403222:	4798      	blx	r3
  403224:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  403226:	2801      	cmp	r0, #1
  403228:	d93e      	bls.n	4032a8 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  40322a:	69aa      	ldr	r2, [r5, #24]
  40322c:	4290      	cmp	r0, r2
  40322e:	d340      	bcc.n	4032b2 <create_chain+0xae>
		scl = clst;
  403230:	4646      	mov	r6, r8
  403232:	e7f2      	b.n	40321a <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  403234:	2601      	movs	r6, #1
  403236:	e7f0      	b.n	40321a <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  403238:	4621      	mov	r1, r4
  40323a:	4628      	mov	r0, r5
  40323c:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  40323e:	4603      	mov	r3, r0
  403240:	b170      	cbz	r0, 403260 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  403242:	f1b0 3fff 	cmp.w	r0, #4294967295
  403246:	d034      	beq.n	4032b2 <create_chain+0xae>
  403248:	2801      	cmp	r0, #1
  40324a:	d032      	beq.n	4032b2 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  40324c:	42b4      	cmp	r4, r6
  40324e:	d02f      	beq.n	4032b0 <create_chain+0xac>
		ncl++;							/* Next cluster */
  403250:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  403252:	69ab      	ldr	r3, [r5, #24]
  403254:	429c      	cmp	r4, r3
  403256:	d3ef      	bcc.n	403238 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  403258:	2e01      	cmp	r6, #1
  40325a:	d927      	bls.n	4032ac <create_chain+0xa8>
			ncl = 2;
  40325c:	2402      	movs	r4, #2
  40325e:	e7eb      	b.n	403238 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  403260:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  403264:	4621      	mov	r1, r4
  403266:	4628      	mov	r0, r5
  403268:	4b15      	ldr	r3, [pc, #84]	; (4032c0 <create_chain+0xbc>)
  40326a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  40326c:	4603      	mov	r3, r0
  40326e:	b910      	cbnz	r0, 403276 <create_chain+0x72>
  403270:	f1b8 0f00 	cmp.w	r8, #0
  403274:	d10b      	bne.n	40328e <create_chain+0x8a>
	if (res == FR_OK) {
  403276:	b98b      	cbnz	r3, 40329c <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
  403278:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  40327a:	692b      	ldr	r3, [r5, #16]
  40327c:	f1b3 3fff 	cmp.w	r3, #4294967295
  403280:	d01a      	beq.n	4032b8 <create_chain+0xb4>
			fs->free_clust--;
  403282:	3b01      	subs	r3, #1
  403284:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  403286:	2301      	movs	r3, #1
  403288:	716b      	strb	r3, [r5, #5]
  40328a:	4623      	mov	r3, r4
  40328c:	e011      	b.n	4032b2 <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  40328e:	4622      	mov	r2, r4
  403290:	4641      	mov	r1, r8
  403292:	4628      	mov	r0, r5
  403294:	4b0a      	ldr	r3, [pc, #40]	; (4032c0 <create_chain+0xbc>)
  403296:	4798      	blx	r3
  403298:	4603      	mov	r3, r0
  40329a:	e7ec      	b.n	403276 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  40329c:	2b01      	cmp	r3, #1
  40329e:	bf0c      	ite	eq
  4032a0:	f04f 33ff 	moveq.w	r3, #4294967295
  4032a4:	2301      	movne	r3, #1
  4032a6:	e004      	b.n	4032b2 <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4032a8:	2301      	movs	r3, #1
  4032aa:	e002      	b.n	4032b2 <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  4032ac:	2300      	movs	r3, #0
  4032ae:	e000      	b.n	4032b2 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4032b0:	2300      	movs	r3, #0
}
  4032b2:	4618      	mov	r0, r3
  4032b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4032b8:	4623      	mov	r3, r4
  4032ba:	e7fa      	b.n	4032b2 <create_chain+0xae>
  4032bc:	00402f45 	.word	0x00402f45
  4032c0:	004030d1 	.word	0x004030d1

004032c4 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4032c4:	2901      	cmp	r1, #1
  4032c6:	d92e      	bls.n	403326 <remove_chain+0x62>
{
  4032c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4032cc:	4604      	mov	r4, r0
  4032ce:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4032d0:	6983      	ldr	r3, [r0, #24]
  4032d2:	4299      	cmp	r1, r3
  4032d4:	d303      	bcc.n	4032de <remove_chain+0x1a>
		res = FR_INT_ERR;
  4032d6:	2202      	movs	r2, #2
}
  4032d8:	4610      	mov	r0, r2
  4032da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  4032de:	4f16      	ldr	r7, [pc, #88]	; (403338 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  4032e0:	f04f 0900 	mov.w	r9, #0
  4032e4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 40333c <remove_chain+0x78>
  4032e8:	e003      	b.n	4032f2 <remove_chain+0x2e>
  4032ea:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  4032ec:	69a3      	ldr	r3, [r4, #24]
  4032ee:	42ab      	cmp	r3, r5
  4032f0:	d9f2      	bls.n	4032d8 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  4032f2:	4631      	mov	r1, r6
  4032f4:	4620      	mov	r0, r4
  4032f6:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  4032f8:	4605      	mov	r5, r0
  4032fa:	b1b8      	cbz	r0, 40332c <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4032fc:	2801      	cmp	r0, #1
  4032fe:	d017      	beq.n	403330 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  403300:	f1b0 3fff 	cmp.w	r0, #4294967295
  403304:	d016      	beq.n	403334 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  403306:	464a      	mov	r2, r9
  403308:	4631      	mov	r1, r6
  40330a:	4620      	mov	r0, r4
  40330c:	47c0      	blx	r8
			if (res != FR_OK) break;
  40330e:	4602      	mov	r2, r0
  403310:	2800      	cmp	r0, #0
  403312:	d1e1      	bne.n	4032d8 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  403314:	6923      	ldr	r3, [r4, #16]
  403316:	f1b3 3fff 	cmp.w	r3, #4294967295
  40331a:	d0e6      	beq.n	4032ea <remove_chain+0x26>
				fs->free_clust++;
  40331c:	3301      	adds	r3, #1
  40331e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  403320:	2301      	movs	r3, #1
  403322:	7163      	strb	r3, [r4, #5]
  403324:	e7e1      	b.n	4032ea <remove_chain+0x26>
		res = FR_INT_ERR;
  403326:	2202      	movs	r2, #2
}
  403328:	4610      	mov	r0, r2
  40332a:	4770      	bx	lr
  40332c:	2200      	movs	r2, #0
  40332e:	e7d3      	b.n	4032d8 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  403330:	2202      	movs	r2, #2
  403332:	e7d1      	b.n	4032d8 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  403334:	2201      	movs	r2, #1
  403336:	e7cf      	b.n	4032d8 <remove_chain+0x14>
  403338:	00402f45 	.word	0x00402f45
  40333c:	004030d1 	.word	0x004030d1

00403340 <dir_next>:
{
  403340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  403344:	88c4      	ldrh	r4, [r0, #6]
  403346:	3401      	adds	r4, #1
  403348:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  40334a:	b914      	cbnz	r4, 403352 <dir_next+0x12>
		return FR_NO_FILE;
  40334c:	2004      	movs	r0, #4
  40334e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  403352:	6903      	ldr	r3, [r0, #16]
  403354:	b913      	cbnz	r3, 40335c <dir_next+0x1c>
		return FR_NO_FILE;
  403356:	2004      	movs	r0, #4
  403358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40335c:	460e      	mov	r6, r1
  40335e:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  403360:	f014 070f 	ands.w	r7, r4, #15
  403364:	d110      	bne.n	403388 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  403366:	3301      	adds	r3, #1
  403368:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  40336a:	68c1      	ldr	r1, [r0, #12]
  40336c:	b931      	cbnz	r1, 40337c <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  40336e:	6803      	ldr	r3, [r0, #0]
  403370:	891b      	ldrh	r3, [r3, #8]
  403372:	42a3      	cmp	r3, r4
  403374:	d808      	bhi.n	403388 <dir_next+0x48>
				return FR_NO_FILE;
  403376:	2004      	movs	r0, #4
  403378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  40337c:	6800      	ldr	r0, [r0, #0]
  40337e:	7883      	ldrb	r3, [r0, #2]
  403380:	3b01      	subs	r3, #1
  403382:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  403386:	d008      	beq.n	40339a <dir_next+0x5a>
	dj->index = i;
  403388:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  40338a:	682b      	ldr	r3, [r5, #0]
  40338c:	3330      	adds	r3, #48	; 0x30
  40338e:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  403392:	616b      	str	r3, [r5, #20]
	return FR_OK;
  403394:	2000      	movs	r0, #0
  403396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  40339a:	4b32      	ldr	r3, [pc, #200]	; (403464 <dir_next+0x124>)
  40339c:	4798      	blx	r3
  40339e:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  4033a0:	2801      	cmp	r0, #1
  4033a2:	d94d      	bls.n	403440 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4033a4:	f1b0 3fff 	cmp.w	r0, #4294967295
  4033a8:	d04d      	beq.n	403446 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  4033aa:	6828      	ldr	r0, [r5, #0]
  4033ac:	6983      	ldr	r3, [r0, #24]
  4033ae:	4598      	cmp	r8, r3
  4033b0:	d33e      	bcc.n	403430 <dir_next+0xf0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  4033b2:	b916      	cbnz	r6, 4033ba <dir_next+0x7a>
  4033b4:	2004      	movs	r0, #4
  4033b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  4033ba:	68e9      	ldr	r1, [r5, #12]
  4033bc:	4b2a      	ldr	r3, [pc, #168]	; (403468 <dir_next+0x128>)
  4033be:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  4033c0:	4680      	mov	r8, r0
  4033c2:	b910      	cbnz	r0, 4033ca <dir_next+0x8a>
  4033c4:	2007      	movs	r0, #7
  4033c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4033ca:	2801      	cmp	r0, #1
  4033cc:	d03e      	beq.n	40344c <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4033ce:	f1b0 3fff 	cmp.w	r0, #4294967295
  4033d2:	d03e      	beq.n	403452 <dir_next+0x112>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4033d4:	2100      	movs	r1, #0
  4033d6:	6828      	ldr	r0, [r5, #0]
  4033d8:	4b24      	ldr	r3, [pc, #144]	; (40346c <dir_next+0x12c>)
  4033da:	4798      	blx	r3
  4033dc:	2800      	cmp	r0, #0
  4033de:	d13b      	bne.n	403458 <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  4033e0:	6828      	ldr	r0, [r5, #0]
  4033e2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4033e6:	2100      	movs	r1, #0
  4033e8:	3030      	adds	r0, #48	; 0x30
  4033ea:	4b21      	ldr	r3, [pc, #132]	; (403470 <dir_next+0x130>)
  4033ec:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  4033ee:	682e      	ldr	r6, [r5, #0]
  4033f0:	4641      	mov	r1, r8
  4033f2:	4630      	mov	r0, r6
  4033f4:	4b1f      	ldr	r3, [pc, #124]	; (403474 <dir_next+0x134>)
  4033f6:	4798      	blx	r3
  4033f8:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  4033fa:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  4033fc:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  403400:	46b2      	mov	sl, r6
  403402:	f8df 9068 	ldr.w	r9, [pc, #104]	; 40346c <dir_next+0x12c>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  403406:	682b      	ldr	r3, [r5, #0]
  403408:	7899      	ldrb	r1, [r3, #2]
  40340a:	b2f2      	uxtb	r2, r6
  40340c:	4291      	cmp	r1, r2
  40340e:	d90b      	bls.n	403428 <dir_next+0xe8>
						dj->fs->wflag = 1;
  403410:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  403414:	4651      	mov	r1, sl
  403416:	6828      	ldr	r0, [r5, #0]
  403418:	47c8      	blx	r9
  40341a:	3601      	adds	r6, #1
  40341c:	b9f8      	cbnz	r0, 40345e <dir_next+0x11e>
						dj->fs->winsect++;
  40341e:	682a      	ldr	r2, [r5, #0]
  403420:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  403422:	3301      	adds	r3, #1
  403424:	62d3      	str	r3, [r2, #44]	; 0x2c
  403426:	e7ee      	b.n	403406 <dir_next+0xc6>
					dj->fs->winsect -= c;						/* Rewind window address */
  403428:	4616      	mov	r6, r2
  40342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40342c:	1b96      	subs	r6, r2, r6
  40342e:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  403430:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  403434:	4641      	mov	r1, r8
  403436:	6828      	ldr	r0, [r5, #0]
  403438:	4b0e      	ldr	r3, [pc, #56]	; (403474 <dir_next+0x134>)
  40343a:	4798      	blx	r3
  40343c:	6128      	str	r0, [r5, #16]
  40343e:	e7a3      	b.n	403388 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  403440:	2002      	movs	r0, #2
  403442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  403446:	2001      	movs	r0, #1
  403448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  40344c:	2002      	movs	r0, #2
  40344e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  403452:	2001      	movs	r0, #1
  403454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  403458:	2001      	movs	r0, #1
  40345a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40345e:	2001      	movs	r0, #1
}
  403460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403464:	00402f45 	.word	0x00402f45
  403468:	00403205 	.word	0x00403205
  40346c:	00402eb5 	.word	0x00402eb5
  403470:	00402a3d 	.word	0x00402a3d
  403474:	00402a4b 	.word	0x00402a4b

00403478 <dir_find>:
{
  403478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40347c:	b085      	sub	sp, #20
  40347e:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  403480:	2100      	movs	r1, #0
  403482:	4b61      	ldr	r3, [pc, #388]	; (403608 <dir_find+0x190>)
  403484:	4798      	blx	r3
	if (res != FR_OK) return res;
  403486:	4680      	mov	r8, r0
  403488:	bb08      	cbnz	r0, 4034ce <dir_find+0x56>
  40348a:	f04f 0bff 	mov.w	fp, #255	; 0xff
  40348e:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  403490:	4f5e      	ldr	r7, [pc, #376]	; (40360c <dir_find+0x194>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  403492:	46da      	mov	sl, fp
  403494:	e094      	b.n	4035c0 <dir_find+0x148>
			if (a == AM_LFN) {			/* An LFN entry is found */
  403496:	2a0f      	cmp	r2, #15
  403498:	d01d      	beq.n	4034d6 <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  40349a:	f1b9 0f00 	cmp.w	r9, #0
  40349e:	d104      	bne.n	4034aa <dir_find+0x32>
  4034a0:	4620      	mov	r0, r4
  4034a2:	4b5b      	ldr	r3, [pc, #364]	; (403610 <dir_find+0x198>)
  4034a4:	4798      	blx	r3
  4034a6:	4582      	cmp	sl, r0
  4034a8:	d011      	beq.n	4034ce <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4034aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4034ae:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  4034b0:	69ab      	ldr	r3, [r5, #24]
  4034b2:	7ada      	ldrb	r2, [r3, #11]
  4034b4:	f012 0f01 	tst.w	r2, #1
  4034b8:	d179      	bne.n	4035ae <dir_find+0x136>
  4034ba:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  4034be:	f814 1b01 	ldrb.w	r1, [r4], #1
  4034c2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4034c6:	4291      	cmp	r1, r2
  4034c8:	d16b      	bne.n	4035a2 <dir_find+0x12a>
  4034ca:	4284      	cmp	r4, r0
  4034cc:	d1f7      	bne.n	4034be <dir_find+0x46>
}
  4034ce:	4640      	mov	r0, r8
  4034d0:	b005      	add	sp, #20
  4034d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  4034d6:	f8d5 801c 	ldr.w	r8, [r5, #28]
  4034da:	f1b8 0f00 	cmp.w	r8, #0
  4034de:	d068      	beq.n	4035b2 <dir_find+0x13a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  4034e0:	f016 0f40 	tst.w	r6, #64	; 0x40
  4034e4:	d00c      	beq.n	403500 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  4034e6:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  4034ea:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  4034ee:	88eb      	ldrh	r3, [r5, #6]
  4034f0:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4034f2:	f894 b00d 	ldrb.w	fp, [r4, #13]
  4034f6:	45d3      	cmp	fp, sl
  4034f8:	d007      	beq.n	40350a <dir_find+0x92>
  4034fa:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4034fe:	e058      	b.n	4035b2 <dir_find+0x13a>
  403500:	45b1      	cmp	r9, r6
  403502:	d0f6      	beq.n	4034f2 <dir_find+0x7a>
  403504:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403508:	e053      	b.n	4035b2 <dir_find+0x13a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  40350a:	f894 a000 	ldrb.w	sl, [r4]
  40350e:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  403512:	f10a 3aff 	add.w	sl, sl, #4294967295
  403516:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  40351a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  40351e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 40361c <dir_find+0x1a4>
  403522:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  403526:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  403528:	9603      	str	r6, [sp, #12]
  40352a:	f8cd b004 	str.w	fp, [sp, #4]
  40352e:	461e      	mov	r6, r3
  403530:	9502      	str	r5, [sp, #8]
  403532:	e00f      	b.n	403554 <dir_find+0xdc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  403534:	4618      	mov	r0, r3
  403536:	4b37      	ldr	r3, [pc, #220]	; (403614 <dir_find+0x19c>)
  403538:	4798      	blx	r3
  40353a:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  40353c:	2efe      	cmp	r6, #254	; 0xfe
  40353e:	d85a      	bhi.n	4035f6 <dir_find+0x17e>
  403540:	1c75      	adds	r5, r6, #1
  403542:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  403546:	4b33      	ldr	r3, [pc, #204]	; (403614 <dir_find+0x19c>)
  403548:	4798      	blx	r3
  40354a:	4583      	cmp	fp, r0
  40354c:	d157      	bne.n	4035fe <dir_find+0x186>
  40354e:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  403550:	45d1      	cmp	r9, sl
  403552:	d013      	beq.n	40357c <dir_find+0x104>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  403554:	f819 2b01 	ldrb.w	r2, [r9], #1
  403558:	18a3      	adds	r3, r4, r2
  40355a:	7859      	ldrb	r1, [r3, #1]
  40355c:	5ca3      	ldrb	r3, [r4, r2]
  40355e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  403562:	2800      	cmp	r0, #0
  403564:	d1e6      	bne.n	403534 <dir_find+0xbc>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  403566:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40356a:	4293      	cmp	r3, r2
  40356c:	d0f0      	beq.n	403550 <dir_find+0xd8>
  40356e:	f8dd b004 	ldr.w	fp, [sp, #4]
  403572:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  403574:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  403576:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40357a:	e01a      	b.n	4035b2 <dir_find+0x13a>
  40357c:	f8dd b004 	ldr.w	fp, [sp, #4]
  403580:	4632      	mov	r2, r6
  403582:	9e03      	ldr	r6, [sp, #12]
  403584:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  403586:	7823      	ldrb	r3, [r4, #0]
  403588:	f013 0f40 	tst.w	r3, #64	; 0x40
  40358c:	d004      	beq.n	403598 <dir_find+0x120>
  40358e:	b118      	cbz	r0, 403598 <dir_find+0x120>
  403590:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  403594:	2b00      	cmp	r3, #0
  403596:	d1ed      	bne.n	403574 <dir_find+0xfc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  403598:	3e01      	subs	r6, #1
  40359a:	fa5f f986 	uxtb.w	r9, r6
  40359e:	46da      	mov	sl, fp
  4035a0:	e007      	b.n	4035b2 <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4035a2:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4035a6:	e004      	b.n	4035b2 <dir_find+0x13a>
			ord = 0xFF;
  4035a8:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4035ac:	e001      	b.n	4035b2 <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4035ae:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  4035b2:	2100      	movs	r1, #0
  4035b4:	4628      	mov	r0, r5
  4035b6:	4b18      	ldr	r3, [pc, #96]	; (403618 <dir_find+0x1a0>)
  4035b8:	4798      	blx	r3
	} while (res == FR_OK);
  4035ba:	4680      	mov	r8, r0
  4035bc:	2800      	cmp	r0, #0
  4035be:	d186      	bne.n	4034ce <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  4035c0:	6929      	ldr	r1, [r5, #16]
  4035c2:	6828      	ldr	r0, [r5, #0]
  4035c4:	47b8      	blx	r7
		if (res != FR_OK) break;
  4035c6:	4680      	mov	r8, r0
  4035c8:	2800      	cmp	r0, #0
  4035ca:	d180      	bne.n	4034ce <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  4035cc:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  4035ce:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4035d0:	b176      	cbz	r6, 4035f0 <dir_find+0x178>
		a = dir[DIR_Attr] & AM_MASK;
  4035d2:	7ae3      	ldrb	r3, [r4, #11]
  4035d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  4035d8:	2ee5      	cmp	r6, #229	; 0xe5
  4035da:	d0e5      	beq.n	4035a8 <dir_find+0x130>
  4035dc:	f013 0f08 	tst.w	r3, #8
  4035e0:	f43f af59 	beq.w	403496 <dir_find+0x1e>
  4035e4:	2a0f      	cmp	r2, #15
  4035e6:	f43f af56 	beq.w	403496 <dir_find+0x1e>
			ord = 0xFF;
  4035ea:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4035ee:	e7e0      	b.n	4035b2 <dir_find+0x13a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4035f0:	f04f 0804 	mov.w	r8, #4
  4035f4:	e76b      	b.n	4034ce <dir_find+0x56>
  4035f6:	f8dd b004 	ldr.w	fp, [sp, #4]
  4035fa:	9d02      	ldr	r5, [sp, #8]
  4035fc:	e7ba      	b.n	403574 <dir_find+0xfc>
  4035fe:	f8dd b004 	ldr.w	fp, [sp, #4]
  403602:	9d02      	ldr	r5, [sp, #8]
  403604:	e7b6      	b.n	403574 <dir_find+0xfc>
  403606:	bf00      	nop
  403608:	0040302d 	.word	0x0040302d
  40360c:	00402eb5 	.word	0x00402eb5
  403610:	00402a63 	.word	0x00402a63
  403614:	00404301 	.word	0x00404301
  403618:	00403341 	.word	0x00403341
  40361c:	0040d110 	.word	0x0040d110

00403620 <dir_register>:
{
  403620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403624:	b089      	sub	sp, #36	; 0x24
  403626:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  403628:	6985      	ldr	r5, [r0, #24]
  40362a:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  40362e:	220c      	movs	r2, #12
  403630:	4629      	mov	r1, r5
  403632:	a805      	add	r0, sp, #20
  403634:	4ba8      	ldr	r3, [pc, #672]	; (4038d8 <dir_register+0x2b8>)
  403636:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  403638:	f89d 301f 	ldrb.w	r3, [sp, #31]
  40363c:	f013 0f01 	tst.w	r3, #1
  403640:	d079      	beq.n	403736 <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  403642:	2300      	movs	r3, #0
  403644:	72eb      	strb	r3, [r5, #11]
  403646:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  403648:	220b      	movs	r2, #11
  40364a:	a905      	add	r1, sp, #20
  40364c:	4628      	mov	r0, r5
  40364e:	4ba2      	ldr	r3, [pc, #648]	; (4038d8 <dir_register+0x2b8>)
  403650:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  403652:	2701      	movs	r7, #1
  403654:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  403656:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  40365a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 4038f8 <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  40365e:	f8df a278 	ldr.w	sl, [pc, #632]	; 4038d8 <dir_register+0x2b8>
  403662:	e032      	b.n	4036ca <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  403664:	463b      	mov	r3, r7
  403666:	e030      	b.n	4036ca <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  403668:	4613      	mov	r3, r2
  40366a:	e002      	b.n	403672 <dir_register+0x52>
  40366c:	2300      	movs	r3, #0
  40366e:	e000      	b.n	403672 <dir_register+0x52>
  403670:	4613      	mov	r3, r2
  403672:	442b      	add	r3, r5
  403674:	e005      	b.n	403682 <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  403676:	4641      	mov	r1, r8
  403678:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  40367c:	1b59      	subs	r1, r3, r5
  40367e:	2907      	cmp	r1, #7
  403680:	d807      	bhi.n	403692 <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  403682:	2a07      	cmp	r2, #7
  403684:	d8f7      	bhi.n	403676 <dir_register+0x56>
  403686:	a908      	add	r1, sp, #32
  403688:	4411      	add	r1, r2
  40368a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  40368e:	3201      	adds	r2, #1
  403690:	e7f2      	b.n	403678 <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  403692:	4620      	mov	r0, r4
  403694:	47c8      	blx	r9
			if (res != FR_OK) break;
  403696:	4606      	mov	r6, r0
  403698:	2800      	cmp	r0, #0
  40369a:	d13e      	bne.n	40371a <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  40369c:	3701      	adds	r7, #1
  40369e:	b2bf      	uxth	r7, r7
  4036a0:	2f64      	cmp	r7, #100	; 0x64
  4036a2:	d038      	beq.n	403716 <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  4036a4:	220b      	movs	r2, #11
  4036a6:	a905      	add	r1, sp, #20
  4036a8:	4628      	mov	r0, r5
  4036aa:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  4036ac:	2f05      	cmp	r7, #5
  4036ae:	d9d9      	bls.n	403664 <dir_register+0x44>
  4036b0:	463b      	mov	r3, r7
  4036b2:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  4036b4:	03da      	lsls	r2, r3, #15
  4036b6:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  4036ba:	f831 2b02 	ldrh.w	r2, [r1], #2
  4036be:	fa12 f383 	uxtah	r3, r2, r3
  4036c2:	b29b      	uxth	r3, r3
  4036c4:	880a      	ldrh	r2, [r1, #0]
  4036c6:	2a00      	cmp	r2, #0
  4036c8:	d1f4      	bne.n	4036b4 <dir_register+0x94>
  4036ca:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  4036ce:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  4036d0:	f003 000f 	and.w	r0, r3, #15
  4036d4:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  4036d8:	2939      	cmp	r1, #57	; 0x39
  4036da:	bf88      	it	hi
  4036dc:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  4036e0:	3a01      	subs	r2, #1
  4036e2:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  4036e6:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  4036ea:	2b00      	cmp	r3, #0
  4036ec:	d1f0      	bne.n	4036d0 <dir_register+0xb0>
	ns[i] = '~';
  4036ee:	217e      	movs	r1, #126	; 0x7e
  4036f0:	ab08      	add	r3, sp, #32
  4036f2:	4413      	add	r3, r2
  4036f4:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4036f8:	2a00      	cmp	r2, #0
  4036fa:	d0b5      	beq.n	403668 <dir_register+0x48>
  4036fc:	782b      	ldrb	r3, [r5, #0]
  4036fe:	2b20      	cmp	r3, #32
  403700:	d0b4      	beq.n	40366c <dir_register+0x4c>
  403702:	4629      	mov	r1, r5
  403704:	2300      	movs	r3, #0
  403706:	3301      	adds	r3, #1
  403708:	429a      	cmp	r2, r3
  40370a:	d0b1      	beq.n	403670 <dir_register+0x50>
  40370c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  403710:	2820      	cmp	r0, #32
  403712:	d1f8      	bne.n	403706 <dir_register+0xe6>
  403714:	e7ad      	b.n	403672 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  403716:	2607      	movs	r6, #7
  403718:	e004      	b.n	403724 <dir_register+0x104>
  40371a:	2f64      	cmp	r7, #100	; 0x64
  40371c:	f000 80ac 	beq.w	403878 <dir_register+0x258>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  403720:	2804      	cmp	r0, #4
  403722:	d003      	beq.n	40372c <dir_register+0x10c>
}
  403724:	4630      	mov	r0, r6
  403726:	b009      	add	sp, #36	; 0x24
  403728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  40372c:	f89d 301f 	ldrb.w	r3, [sp, #31]
  403730:	72eb      	strb	r3, [r5, #11]
  403732:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  403736:	f89d 301f 	ldrb.w	r3, [sp, #31]
  40373a:	f013 0f02 	tst.w	r3, #2
  40373e:	d014      	beq.n	40376a <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  403740:	f8bb 3000 	ldrh.w	r3, [fp]
  403744:	b17b      	cbz	r3, 403766 <dir_register+0x146>
  403746:	2300      	movs	r3, #0
  403748:	3301      	adds	r3, #1
  40374a:	b29b      	uxth	r3, r3
  40374c:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  403750:	2a00      	cmp	r2, #0
  403752:	d1f9      	bne.n	403748 <dir_register+0x128>
		ne = (ne + 25) / 13;
  403754:	3319      	adds	r3, #25
  403756:	4f61      	ldr	r7, [pc, #388]	; (4038dc <dir_register+0x2bc>)
  403758:	fb87 2703 	smull	r2, r7, r7, r3
  40375c:	17db      	asrs	r3, r3, #31
  40375e:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  403762:	b2bf      	uxth	r7, r7
  403764:	e002      	b.n	40376c <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  403766:	2300      	movs	r3, #0
  403768:	e7f4      	b.n	403754 <dir_register+0x134>
		ne = 1;
  40376a:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  40376c:	2100      	movs	r1, #0
  40376e:	4620      	mov	r0, r4
  403770:	4b5b      	ldr	r3, [pc, #364]	; (4038e0 <dir_register+0x2c0>)
  403772:	4798      	blx	r3
	if (res != FR_OK) return res;
  403774:	4606      	mov	r6, r0
  403776:	2800      	cmp	r0, #0
  403778:	d1d4      	bne.n	403724 <dir_register+0x104>
  40377a:	f04f 0a00 	mov.w	sl, #0
  40377e:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  403780:	f8df 8164 	ldr.w	r8, [pc, #356]	; 4038e8 <dir_register+0x2c8>
			n = 0;					/* Not a blank entry. Restart to search */
  403784:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  403786:	f8df 915c 	ldr.w	r9, [pc, #348]	; 4038e4 <dir_register+0x2c4>
  40378a:	e00a      	b.n	4037a2 <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  40378c:	1c6b      	adds	r3, r5, #1
  40378e:	b29b      	uxth	r3, r3
  403790:	429f      	cmp	r7, r3
  403792:	d073      	beq.n	40387c <dir_register+0x25c>
  403794:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  403796:	2101      	movs	r1, #1
  403798:	4620      	mov	r0, r4
  40379a:	47c8      	blx	r9
	} while (res == FR_OK);
  40379c:	4606      	mov	r6, r0
  40379e:	2800      	cmp	r0, #0
  4037a0:	d1c0      	bne.n	403724 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  4037a2:	6921      	ldr	r1, [r4, #16]
  4037a4:	6820      	ldr	r0, [r4, #0]
  4037a6:	47c0      	blx	r8
		if (res != FR_OK) break;
  4037a8:	4606      	mov	r6, r0
  4037aa:	2800      	cmp	r0, #0
  4037ac:	d1ba      	bne.n	403724 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  4037ae:	6963      	ldr	r3, [r4, #20]
  4037b0:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  4037b2:	2be5      	cmp	r3, #229	; 0xe5
  4037b4:	d000      	beq.n	4037b8 <dir_register+0x198>
  4037b6:	b923      	cbnz	r3, 4037c2 <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  4037b8:	2d00      	cmp	r5, #0
  4037ba:	d1e7      	bne.n	40378c <dir_register+0x16c>
  4037bc:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  4037c0:	e7e4      	b.n	40378c <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  4037c2:	465d      	mov	r5, fp
  4037c4:	e7e7      	b.n	403796 <dir_register+0x176>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4037c6:	4671      	mov	r1, lr
  4037c8:	e070      	b.n	4038ac <dir_register+0x28c>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  4037ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4037ce:	4293      	cmp	r3, r2
  4037d0:	d002      	beq.n	4037d8 <dir_register+0x1b8>
  4037d2:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  4037d6:	b90b      	cbnz	r3, 4037dc <dir_register+0x1bc>
  4037d8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  4037dc:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  4037e0:	6823      	ldr	r3, [r4, #0]
  4037e2:	2201      	movs	r2, #1
  4037e4:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  4037e6:	4639      	mov	r1, r7
  4037e8:	4620      	mov	r0, r4
  4037ea:	4b3e      	ldr	r3, [pc, #248]	; (4038e4 <dir_register+0x2c4>)
  4037ec:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  4037ee:	4606      	mov	r6, r0
  4037f0:	2800      	cmp	r0, #0
  4037f2:	d197      	bne.n	403724 <dir_register+0x104>
  4037f4:	3d01      	subs	r5, #1
  4037f6:	b2ad      	uxth	r5, r5
  4037f8:	b315      	cbz	r5, 403840 <dir_register+0x220>
				res = move_window(dj->fs, dj->sect);
  4037fa:	6921      	ldr	r1, [r4, #16]
  4037fc:	6820      	ldr	r0, [r4, #0]
  4037fe:	4b3a      	ldr	r3, [pc, #232]	; (4038e8 <dir_register+0x2c8>)
  403800:	4798      	blx	r3
				if (res != FR_OK) break;
  403802:	4606      	mov	r6, r0
  403804:	2800      	cmp	r0, #0
  403806:	d18d      	bne.n	403724 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  403808:	f8d4 901c 	ldr.w	r9, [r4, #28]
  40380c:	6960      	ldr	r0, [r4, #20]
  40380e:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  403812:	f89d 3000 	ldrb.w	r3, [sp]
  403816:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  403818:	230f      	movs	r3, #15
  40381a:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  40381c:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  40381e:	7687      	strb	r7, [r0, #26]
  403820:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  403822:	f10b 31ff 	add.w	r1, fp, #4294967295
  403826:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  40382a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40382e:	4a2f      	ldr	r2, [pc, #188]	; (4038ec <dir_register+0x2cc>)
  403830:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  403834:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  403836:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40383a:	f04f 0aff 	mov.w	sl, #255	; 0xff
  40383e:	e038      	b.n	4038b2 <dir_register+0x292>
		res = move_window(dj->fs, dj->sect);
  403840:	6921      	ldr	r1, [r4, #16]
  403842:	6820      	ldr	r0, [r4, #0]
  403844:	4b28      	ldr	r3, [pc, #160]	; (4038e8 <dir_register+0x2c8>)
  403846:	4798      	blx	r3
		if (res == FR_OK) {
  403848:	4606      	mov	r6, r0
  40384a:	2800      	cmp	r0, #0
  40384c:	f47f af6a 	bne.w	403724 <dir_register+0x104>
			dir = dj->dir;
  403850:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  403852:	2220      	movs	r2, #32
  403854:	2100      	movs	r1, #0
  403856:	4628      	mov	r0, r5
  403858:	4b25      	ldr	r3, [pc, #148]	; (4038f0 <dir_register+0x2d0>)
  40385a:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  40385c:	220b      	movs	r2, #11
  40385e:	69a1      	ldr	r1, [r4, #24]
  403860:	4628      	mov	r0, r5
  403862:	4b1d      	ldr	r3, [pc, #116]	; (4038d8 <dir_register+0x2b8>)
  403864:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  403866:	69a3      	ldr	r3, [r4, #24]
  403868:	7adb      	ldrb	r3, [r3, #11]
  40386a:	f003 0318 	and.w	r3, r3, #24
  40386e:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  403870:	6823      	ldr	r3, [r4, #0]
  403872:	2201      	movs	r2, #1
  403874:	711a      	strb	r2, [r3, #4]
  403876:	e755      	b.n	403724 <dir_register+0x104>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  403878:	2607      	movs	r6, #7
  40387a:	e753      	b.n	403724 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  40387c:	2b01      	cmp	r3, #1
  40387e:	d9df      	bls.n	403840 <dir_register+0x220>
		res = dir_sdi(dj, is);
  403880:	4651      	mov	r1, sl
  403882:	4620      	mov	r0, r4
  403884:	4b16      	ldr	r3, [pc, #88]	; (4038e0 <dir_register+0x2c0>)
  403886:	4798      	blx	r3
		if (res == FR_OK) {
  403888:	4606      	mov	r6, r0
  40388a:	2800      	cmp	r0, #0
  40388c:	f47f af4a 	bne.w	403724 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  403890:	69a0      	ldr	r0, [r4, #24]
  403892:	4b18      	ldr	r3, [pc, #96]	; (4038f4 <dir_register+0x2d4>)
  403894:	4798      	blx	r3
  403896:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  403898:	2700      	movs	r7, #0
	s = wc = 0;
  40389a:	9701      	str	r7, [sp, #4]
  40389c:	e7ad      	b.n	4037fa <dir_register+0x1da>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40389e:	f892 e000 	ldrb.w	lr, [r2]
  4038a2:	f800 a00e 	strb.w	sl, [r0, lr]
  4038a6:	4486      	add	lr, r0
  4038a8:	f88e a001 	strb.w	sl, [lr, #1]
  4038ac:	3201      	adds	r2, #1
	} while (++s < 13);
  4038ae:	4542      	cmp	r2, r8
  4038b0:	d08b      	beq.n	4037ca <dir_register+0x1aa>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4038b2:	42b3      	cmp	r3, r6
  4038b4:	d0f3      	beq.n	40389e <dir_register+0x27e>
  4038b6:	f101 0e01 	add.w	lr, r1, #1
  4038ba:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4038be:	7811      	ldrb	r1, [r2, #0]
  4038c0:	5443      	strb	r3, [r0, r1]
  4038c2:	4401      	add	r1, r0
  4038c4:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  4038c8:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4038cc:	2b00      	cmp	r3, #0
  4038ce:	f47f af7a 	bne.w	4037c6 <dir_register+0x1a6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4038d2:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4038d4:	4633      	mov	r3, r6
  4038d6:	e7e9      	b.n	4038ac <dir_register+0x28c>
  4038d8:	00402a29 	.word	0x00402a29
  4038dc:	4ec4ec4f 	.word	0x4ec4ec4f
  4038e0:	0040302d 	.word	0x0040302d
  4038e4:	00403341 	.word	0x00403341
  4038e8:	00402eb5 	.word	0x00402eb5
  4038ec:	0040d110 	.word	0x0040d110
  4038f0:	00402a3d 	.word	0x00402a3d
  4038f4:	00402a63 	.word	0x00402a63
  4038f8:	00403479 	.word	0x00403479

004038fc <sync>:
{
  4038fc:	b570      	push	{r4, r5, r6, lr}
  4038fe:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  403900:	2100      	movs	r1, #0
  403902:	4b2d      	ldr	r3, [pc, #180]	; (4039b8 <sync+0xbc>)
  403904:	4798      	blx	r3
	if (res == FR_OK) {
  403906:	4603      	mov	r3, r0
  403908:	b950      	cbnz	r0, 403920 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  40390a:	7823      	ldrb	r3, [r4, #0]
  40390c:	2b03      	cmp	r3, #3
  40390e:	d009      	beq.n	403924 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  403910:	2200      	movs	r2, #0
  403912:	4611      	mov	r1, r2
  403914:	7860      	ldrb	r0, [r4, #1]
  403916:	4b29      	ldr	r3, [pc, #164]	; (4039bc <sync+0xc0>)
  403918:	4798      	blx	r3
	res = move_window(fs, 0);
  40391a:	1c03      	adds	r3, r0, #0
  40391c:	bf18      	it	ne
  40391e:	2301      	movne	r3, #1
}
  403920:	4618      	mov	r0, r3
  403922:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  403924:	7963      	ldrb	r3, [r4, #5]
  403926:	2b00      	cmp	r3, #0
  403928:	d0f2      	beq.n	403910 <sync+0x14>
			fs->winsect = 0;
  40392a:	2600      	movs	r6, #0
  40392c:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  40392e:	f104 0530 	add.w	r5, r4, #48	; 0x30
  403932:	f44f 7200 	mov.w	r2, #512	; 0x200
  403936:	4631      	mov	r1, r6
  403938:	4628      	mov	r0, r5
  40393a:	4b21      	ldr	r3, [pc, #132]	; (4039c0 <sync+0xc4>)
  40393c:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  40393e:	2355      	movs	r3, #85	; 0x55
  403940:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  403944:	23aa      	movs	r3, #170	; 0xaa
  403946:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  40394a:	2352      	movs	r3, #82	; 0x52
  40394c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  403950:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  403954:	2361      	movs	r3, #97	; 0x61
  403956:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  40395a:	2241      	movs	r2, #65	; 0x41
  40395c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  403960:	2172      	movs	r1, #114	; 0x72
  403962:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  403966:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  40396a:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  40396e:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  403972:	6923      	ldr	r3, [r4, #16]
  403974:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  403978:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40397c:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  403980:	0c1a      	lsrs	r2, r3, #16
  403982:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  403986:	0e1b      	lsrs	r3, r3, #24
  403988:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  40398c:	68e3      	ldr	r3, [r4, #12]
  40398e:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  403992:	f3c3 2207 	ubfx	r2, r3, #8, #8
  403996:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  40399a:	0c1a      	lsrs	r2, r3, #16
  40399c:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  4039a0:	0e1b      	lsrs	r3, r3, #24
  4039a2:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  4039a6:	2301      	movs	r3, #1
  4039a8:	6962      	ldr	r2, [r4, #20]
  4039aa:	4629      	mov	r1, r5
  4039ac:	7860      	ldrb	r0, [r4, #1]
  4039ae:	4d05      	ldr	r5, [pc, #20]	; (4039c4 <sync+0xc8>)
  4039b0:	47a8      	blx	r5
			fs->fsi_flag = 0;
  4039b2:	7166      	strb	r6, [r4, #5]
  4039b4:	e7ac      	b.n	403910 <sync+0x14>
  4039b6:	bf00      	nop
  4039b8:	00402eb5 	.word	0x00402eb5
  4039bc:	00402961 	.word	0x00402961
  4039c0:	00402a3d 	.word	0x00402a3d
  4039c4:	004028f1 	.word	0x004028f1

004039c8 <follow_path>:
{
  4039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4039cc:	b083      	sub	sp, #12
  4039ce:	4682      	mov	sl, r0
  4039d0:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  4039d2:	780b      	ldrb	r3, [r1, #0]
  4039d4:	2b2f      	cmp	r3, #47	; 0x2f
  4039d6:	d00a      	beq.n	4039ee <follow_path+0x26>
  4039d8:	2b5c      	cmp	r3, #92	; 0x5c
  4039da:	d008      	beq.n	4039ee <follow_path+0x26>
	dj->sclust = 0;						/* Start from the root dir */
  4039dc:	2300      	movs	r3, #0
  4039de:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  4039e2:	782b      	ldrb	r3, [r5, #0]
  4039e4:	2b1f      	cmp	r3, #31
  4039e6:	d904      	bls.n	4039f2 <follow_path+0x2a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4039e8:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 403ce8 <follow_path+0x320>
  4039ec:	e130      	b.n	403c50 <follow_path+0x288>
		path++;
  4039ee:	3501      	adds	r5, #1
  4039f0:	e7f4      	b.n	4039dc <follow_path+0x14>
		res = dir_sdi(dj, 0);
  4039f2:	2100      	movs	r1, #0
  4039f4:	4650      	mov	r0, sl
  4039f6:	4bb6      	ldr	r3, [pc, #728]	; (403cd0 <follow_path+0x308>)
  4039f8:	4798      	blx	r3
  4039fa:	4603      	mov	r3, r0
		dj->dir = 0;
  4039fc:	2200      	movs	r2, #0
  4039fe:	f8ca 2014 	str.w	r2, [sl, #20]
  403a02:	e15a      	b.n	403cba <follow_path+0x2f2>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  403a04:	2b00      	cmp	r3, #0
  403a06:	f040 8152 	bne.w	403cae <follow_path+0x2e6>
		lfn[di++] = w;					/* Store the Unicode char */
  403a0a:	f827 2f02 	strh.w	r2, [r7, #2]!
		w = p[si++];					/* Get a character */
  403a0e:	1c63      	adds	r3, r4, #1
  403a10:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  403a14:	282f      	cmp	r0, #47	; 0x2f
  403a16:	bf18      	it	ne
  403a18:	281f      	cmpne	r0, #31
  403a1a:	d91b      	bls.n	403a54 <follow_path+0x8c>
  403a1c:	285c      	cmp	r0, #92	; 0x5c
  403a1e:	d019      	beq.n	403a54 <follow_path+0x8c>
		if (di >= _MAX_LFN)				/* Reject too long name */
  403a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403a24:	f000 8143 	beq.w	403cae <follow_path+0x2e6>
		w = p[si++];					/* Get a character */
  403a28:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403a2a:	4641      	mov	r1, r8
  403a2c:	47d8      	blx	fp
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  403a2e:	4602      	mov	r2, r0
  403a30:	2800      	cmp	r0, #0
  403a32:	f000 813c 	beq.w	403cae <follow_path+0x2e6>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  403a36:	287f      	cmp	r0, #127	; 0x7f
  403a38:	d8e7      	bhi.n	403a0a <follow_path+0x42>
	while (*str && *str != chr) str++;
  403a3a:	2822      	cmp	r0, #34	; 0x22
  403a3c:	f000 813c 	beq.w	403cb8 <follow_path+0x2f0>
  403a40:	232a      	movs	r3, #42	; 0x2a
  403a42:	49a4      	ldr	r1, [pc, #656]	; (403cd4 <follow_path+0x30c>)
  403a44:	b298      	uxth	r0, r3
  403a46:	4290      	cmp	r0, r2
  403a48:	d0dc      	beq.n	403a04 <follow_path+0x3c>
  403a4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  403a4e:	2b00      	cmp	r3, #0
  403a50:	d1f8      	bne.n	403a44 <follow_path+0x7c>
  403a52:	e7da      	b.n	403a0a <follow_path+0x42>
	*path = &p[si];						/* Return pointer to the next segment */
  403a54:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403a56:	2820      	cmp	r0, #32
  403a58:	bf34      	ite	cc
  403a5a:	2604      	movcc	r6, #4
  403a5c:	2600      	movcs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  403a5e:	2c00      	cmp	r4, #0
  403a60:	f000 812a 	beq.w	403cb8 <follow_path+0x2f0>
		w = lfn[di-1];
  403a64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  403a68:	4423      	add	r3, r4
  403a6a:	eb09 0243 	add.w	r2, r9, r3, lsl #1
  403a6e:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  403a72:	2b20      	cmp	r3, #32
  403a74:	d001      	beq.n	403a7a <follow_path+0xb2>
  403a76:	2b2e      	cmp	r3, #46	; 0x2e
  403a78:	d108      	bne.n	403a8c <follow_path+0xc4>
	while (di) {						/* Strip trailing spaces and dots */
  403a7a:	3c01      	subs	r4, #1
  403a7c:	f000 811c 	beq.w	403cb8 <follow_path+0x2f0>
		w = lfn[di-1];
  403a80:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  403a84:	2b20      	cmp	r3, #32
  403a86:	d0f8      	beq.n	403a7a <follow_path+0xb2>
  403a88:	2b2e      	cmp	r3, #46	; 0x2e
  403a8a:	d0f6      	beq.n	403a7a <follow_path+0xb2>
	lfn[di] = 0;						/* LFN is created */
  403a8c:	0067      	lsls	r7, r4, #1
  403a8e:	2300      	movs	r3, #0
  403a90:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
	mem_set(dj->fn, ' ', 11);
  403a94:	220b      	movs	r2, #11
  403a96:	2120      	movs	r1, #32
  403a98:	f8da 0018 	ldr.w	r0, [sl, #24]
  403a9c:	4b8e      	ldr	r3, [pc, #568]	; (403cd8 <follow_path+0x310>)
  403a9e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  403aa0:	f8b9 3000 	ldrh.w	r3, [r9]
  403aa4:	2b20      	cmp	r3, #32
  403aa6:	d001      	beq.n	403aac <follow_path+0xe4>
  403aa8:	2b2e      	cmp	r3, #46	; 0x2e
  403aaa:	d11f      	bne.n	403aec <follow_path+0x124>
  403aac:	4649      	mov	r1, r9
  403aae:	2300      	movs	r3, #0
  403ab0:	3301      	adds	r3, #1
  403ab2:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  403ab6:	2a20      	cmp	r2, #32
  403ab8:	d0fa      	beq.n	403ab0 <follow_path+0xe8>
  403aba:	2a2e      	cmp	r2, #46	; 0x2e
  403abc:	d0f8      	beq.n	403ab0 <follow_path+0xe8>
	if (si) cf |= NS_LOSS | NS_LFN;
  403abe:	b10b      	cbz	r3, 403ac4 <follow_path+0xfc>
  403ac0:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  403ac4:	3f02      	subs	r7, #2
  403ac6:	eb09 0207 	add.w	r2, r9, r7
  403aca:	f839 1007 	ldrh.w	r1, [r9, r7]
  403ace:	292e      	cmp	r1, #46	; 0x2e
  403ad0:	d005      	beq.n	403ade <follow_path+0x116>
  403ad2:	3c01      	subs	r4, #1
  403ad4:	d003      	beq.n	403ade <follow_path+0x116>
  403ad6:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  403ada:	292e      	cmp	r1, #46	; 0x2e
  403adc:	d1f9      	bne.n	403ad2 <follow_path+0x10a>
		dj->fn[i++] = (BYTE)w;
  403ade:	2208      	movs	r2, #8
  403ae0:	9200      	str	r2, [sp, #0]
  403ae2:	f04f 0800 	mov.w	r8, #0
  403ae6:	f8cd 8004 	str.w	r8, [sp, #4]
  403aea:	e004      	b.n	403af6 <follow_path+0x12e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  403aec:	2300      	movs	r3, #0
  403aee:	e7e9      	b.n	403ac4 <follow_path+0xfc>
			cf |= NS_LOSS | NS_LFN; continue;
  403af0:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  403af4:	463b      	mov	r3, r7
  403af6:	1c5f      	adds	r7, r3, #1
  403af8:	f839 0013 	ldrh.w	r0, [r9, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  403afc:	2800      	cmp	r0, #0
  403afe:	d066      	beq.n	403bce <follow_path+0x206>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  403b00:	2820      	cmp	r0, #32
  403b02:	d0f5      	beq.n	403af0 <follow_path+0x128>
  403b04:	282e      	cmp	r0, #46	; 0x2e
  403b06:	d101      	bne.n	403b0c <follow_path+0x144>
  403b08:	42a7      	cmp	r7, r4
  403b0a:	d1f1      	bne.n	403af0 <follow_path+0x128>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  403b0c:	9b00      	ldr	r3, [sp, #0]
  403b0e:	4598      	cmp	r8, r3
  403b10:	d218      	bcs.n	403b44 <follow_path+0x17c>
  403b12:	42a7      	cmp	r7, r4
  403b14:	d016      	beq.n	403b44 <follow_path+0x17c>
		if (w >= 0x80) {				/* Non ASCII char */
  403b16:	287f      	cmp	r0, #127	; 0x7f
  403b18:	d831      	bhi.n	403b7e <follow_path+0x1b6>
	while (*str && *str != chr) str++;
  403b1a:	282b      	cmp	r0, #43	; 0x2b
  403b1c:	d03d      	beq.n	403b9a <follow_path+0x1d2>
  403b1e:	232c      	movs	r3, #44	; 0x2c
  403b20:	496e      	ldr	r1, [pc, #440]	; (403cdc <follow_path+0x314>)
  403b22:	b29a      	uxth	r2, r3
  403b24:	4282      	cmp	r2, r0
  403b26:	d043      	beq.n	403bb0 <follow_path+0x1e8>
  403b28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  403b2c:	2b00      	cmp	r3, #0
  403b2e:	d1f8      	bne.n	403b22 <follow_path+0x15a>
				if (IsUpper(w)) {		/* ASCII large capital */
  403b30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  403b34:	b29b      	uxth	r3, r3
  403b36:	2b19      	cmp	r3, #25
  403b38:	d83d      	bhi.n	403bb6 <follow_path+0x1ee>
					b |= 2;
  403b3a:	9b01      	ldr	r3, [sp, #4]
  403b3c:	f043 0302 	orr.w	r3, r3, #2
  403b40:	9301      	str	r3, [sp, #4]
  403b42:	e02d      	b.n	403ba0 <follow_path+0x1d8>
			if (ni == 11) {				/* Long extension */
  403b44:	9b00      	ldr	r3, [sp, #0]
  403b46:	2b0b      	cmp	r3, #11
  403b48:	d00f      	beq.n	403b6a <follow_path+0x1a2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  403b4a:	42a7      	cmp	r7, r4
  403b4c:	bf18      	it	ne
  403b4e:	f046 0603 	orrne.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  403b52:	42a7      	cmp	r7, r4
  403b54:	d83b      	bhi.n	403bce <follow_path+0x206>
			b <<= 2; continue;
  403b56:	9b01      	ldr	r3, [sp, #4]
  403b58:	009b      	lsls	r3, r3, #2
  403b5a:	b2db      	uxtb	r3, r3
  403b5c:	9301      	str	r3, [sp, #4]
  403b5e:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
  403b60:	220b      	movs	r2, #11
  403b62:	9200      	str	r2, [sp, #0]
  403b64:	f04f 0808 	mov.w	r8, #8
  403b68:	e7c5      	b.n	403af6 <follow_path+0x12e>
				cf |= NS_LOSS | NS_LFN; break;
  403b6a:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  403b6e:	f8da 3018 	ldr.w	r3, [sl, #24]
  403b72:	781a      	ldrb	r2, [r3, #0]
  403b74:	2ae5      	cmp	r2, #229	; 0xe5
  403b76:	d132      	bne.n	403bde <follow_path+0x216>
  403b78:	2205      	movs	r2, #5
  403b7a:	701a      	strb	r2, [r3, #0]
  403b7c:	e02c      	b.n	403bd8 <follow_path+0x210>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  403b7e:	2100      	movs	r1, #0
  403b80:	47d8      	blx	fp
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  403b82:	4603      	mov	r3, r0
  403b84:	2800      	cmp	r0, #0
  403b86:	f000 809f 	beq.w	403cc8 <follow_path+0x300>
  403b8a:	4a55      	ldr	r2, [pc, #340]	; (403ce0 <follow_path+0x318>)
  403b8c:	4413      	add	r3, r2
  403b8e:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  403b92:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  403b96:	2800      	cmp	r0, #0
  403b98:	d1bf      	bne.n	403b1a <follow_path+0x152>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  403b9a:	f046 0603 	orr.w	r6, r6, #3
  403b9e:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  403ba0:	f8da 3018 	ldr.w	r3, [sl, #24]
  403ba4:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  403ba8:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  403baa:	f108 0801 	add.w	r8, r8, #1
  403bae:	e7a2      	b.n	403af6 <follow_path+0x12e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  403bb0:	2b00      	cmp	r3, #0
  403bb2:	d1f2      	bne.n	403b9a <follow_path+0x1d2>
  403bb4:	e7bc      	b.n	403b30 <follow_path+0x168>
					if (IsLower(w)) {	/* ASCII small capital */
  403bb6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  403bba:	b29b      	uxth	r3, r3
  403bbc:	2b19      	cmp	r3, #25
  403bbe:	d8ef      	bhi.n	403ba0 <follow_path+0x1d8>
						b |= 1; w -= 0x20;
  403bc0:	9b01      	ldr	r3, [sp, #4]
  403bc2:	f043 0301 	orr.w	r3, r3, #1
  403bc6:	9301      	str	r3, [sp, #4]
  403bc8:	3820      	subs	r0, #32
  403bca:	b280      	uxth	r0, r0
  403bcc:	e7e8      	b.n	403ba0 <follow_path+0x1d8>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  403bce:	f8da 3018 	ldr.w	r3, [sl, #24]
  403bd2:	781a      	ldrb	r2, [r3, #0]
  403bd4:	2ae5      	cmp	r2, #229	; 0xe5
  403bd6:	d0cf      	beq.n	403b78 <follow_path+0x1b0>
	if (ni == 8) b <<= 2;
  403bd8:	9b00      	ldr	r3, [sp, #0]
  403bda:	2b08      	cmp	r3, #8
  403bdc:	d052      	beq.n	403c84 <follow_path+0x2bc>
  403bde:	9a01      	ldr	r2, [sp, #4]
  403be0:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  403be4:	2b0c      	cmp	r3, #12
  403be6:	d054      	beq.n	403c92 <follow_path+0x2ca>
  403be8:	f002 0203 	and.w	r2, r2, #3
  403bec:	2a03      	cmp	r2, #3
  403bee:	d050      	beq.n	403c92 <follow_path+0x2ca>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  403bf0:	f016 0f02 	tst.w	r6, #2
  403bf4:	d10b      	bne.n	403c0e <follow_path+0x246>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  403bf6:	9a01      	ldr	r2, [sp, #4]
  403bf8:	f002 0903 	and.w	r9, r2, #3
  403bfc:	f1b9 0f01 	cmp.w	r9, #1
  403c00:	bf08      	it	eq
  403c02:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  403c06:	2b04      	cmp	r3, #4
  403c08:	bf08      	it	eq
  403c0a:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  403c0e:	f8da 3018 	ldr.w	r3, [sl, #24]
  403c12:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  403c14:	4650      	mov	r0, sl
  403c16:	4b33      	ldr	r3, [pc, #204]	; (403ce4 <follow_path+0x31c>)
  403c18:	4798      	blx	r3
			ns = *(dj->fn+NS);
  403c1a:	f8da 3018 	ldr.w	r3, [sl, #24]
  403c1e:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  403c20:	4603      	mov	r3, r0
  403c22:	2800      	cmp	r0, #0
  403c24:	d138      	bne.n	403c98 <follow_path+0x2d0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  403c26:	f012 0f04 	tst.w	r2, #4
  403c2a:	d146      	bne.n	403cba <follow_path+0x2f2>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  403c2c:	f8da 3014 	ldr.w	r3, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  403c30:	7ada      	ldrb	r2, [r3, #11]
  403c32:	f012 0f10 	tst.w	r2, #16
  403c36:	d038      	beq.n	403caa <follow_path+0x2e2>
			dj->sclust = LD_CLUST(dir);
  403c38:	7d59      	ldrb	r1, [r3, #21]
  403c3a:	7d1a      	ldrb	r2, [r3, #20]
  403c3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403c40:	7ed9      	ldrb	r1, [r3, #27]
  403c42:	7e9b      	ldrb	r3, [r3, #26]
  403c44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403c48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403c4c:	f8ca 3008 	str.w	r3, [sl, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  403c50:	782b      	ldrb	r3, [r5, #0]
  403c52:	2b2f      	cmp	r3, #47	; 0x2f
  403c54:	d001      	beq.n	403c5a <follow_path+0x292>
  403c56:	2b5c      	cmp	r3, #92	; 0x5c
  403c58:	d105      	bne.n	403c66 <follow_path+0x29e>
  403c5a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  403c5e:	2b2f      	cmp	r3, #47	; 0x2f
  403c60:	d0fb      	beq.n	403c5a <follow_path+0x292>
  403c62:	2b5c      	cmp	r3, #92	; 0x5c
  403c64:	d0f9      	beq.n	403c5a <follow_path+0x292>
	lfn = dj->lfn;
  403c66:	f8da 901c 	ldr.w	r9, [sl, #28]
		w = p[si++];					/* Get a character */
  403c6a:	7828      	ldrb	r0, [r5, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  403c6c:	282f      	cmp	r0, #47	; 0x2f
  403c6e:	bf18      	it	ne
  403c70:	281f      	cmpne	r0, #31
  403c72:	d91e      	bls.n	403cb2 <follow_path+0x2ea>
  403c74:	285c      	cmp	r0, #92	; 0x5c
  403c76:	d01c      	beq.n	403cb2 <follow_path+0x2ea>
  403c78:	f1a9 0702 	sub.w	r7, r9, #2
  403c7c:	462e      	mov	r6, r5
  403c7e:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403c80:	46a0      	mov	r8, r4
  403c82:	e6d2      	b.n	403a2a <follow_path+0x62>
	if (ni == 8) b <<= 2;
  403c84:	9b01      	ldr	r3, [sp, #4]
  403c86:	ea4f 0983 	mov.w	r9, r3, lsl #2
  403c8a:	fa5f f389 	uxtb.w	r3, r9
  403c8e:	9301      	str	r3, [sp, #4]
  403c90:	e7a5      	b.n	403bde <follow_path+0x216>
		cf |= NS_LFN;
  403c92:	f046 0602 	orr.w	r6, r6, #2
  403c96:	e7ab      	b.n	403bf0 <follow_path+0x228>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  403c98:	2804      	cmp	r0, #4
  403c9a:	d10e      	bne.n	403cba <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  403c9c:	f002 0204 	and.w	r2, r2, #4
  403ca0:	2a00      	cmp	r2, #0
  403ca2:	bf14      	ite	ne
  403ca4:	4603      	movne	r3, r0
  403ca6:	2305      	moveq	r3, #5
  403ca8:	e007      	b.n	403cba <follow_path+0x2f2>
				res = FR_NO_PATH; break;
  403caa:	2305      	movs	r3, #5
  403cac:	e005      	b.n	403cba <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  403cae:	2306      	movs	r3, #6
	return res;
  403cb0:	e003      	b.n	403cba <follow_path+0x2f2>
	*path = &p[si];						/* Return pointer to the next segment */
  403cb2:	3501      	adds	r5, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403cb4:	281f      	cmp	r0, #31
  403cb6:	d804      	bhi.n	403cc2 <follow_path+0x2fa>
  403cb8:	2306      	movs	r3, #6
}
  403cba:	4618      	mov	r0, r3
  403cbc:	b003      	add	sp, #12
  403cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	si = di = 0;
  403cc2:	2400      	movs	r4, #0
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403cc4:	4626      	mov	r6, r4
  403cc6:	e6ca      	b.n	403a5e <follow_path+0x96>
			cf |= NS_LFN;				/* Force create LFN entry */
  403cc8:	f046 0602 	orr.w	r6, r6, #2
  403ccc:	e765      	b.n	403b9a <follow_path+0x1d2>
  403cce:	bf00      	nop
  403cd0:	0040302d 	.word	0x0040302d
  403cd4:	0040d1a1 	.word	0x0040d1a1
  403cd8:	00402a3d 	.word	0x00402a3d
  403cdc:	0040d1ad 	.word	0x0040d1ad
  403ce0:	0040d120 	.word	0x0040d120
  403ce4:	00403479 	.word	0x00403479
  403ce8:	004042c1 	.word	0x004042c1

00403cec <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  403cec:	2807      	cmp	r0, #7
  403cee:	d901      	bls.n	403cf4 <f_mount+0x8>
		return FR_INVALID_DRIVE;
  403cf0:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  403cf2:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  403cf4:	4b06      	ldr	r3, [pc, #24]	; (403d10 <f_mount+0x24>)
  403cf6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  403cfa:	b10b      	cbz	r3, 403d00 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  403cfc:	2200      	movs	r2, #0
  403cfe:	701a      	strb	r2, [r3, #0]
	if (fs) {
  403d00:	b109      	cbz	r1, 403d06 <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  403d02:	2300      	movs	r3, #0
  403d04:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  403d06:	4b02      	ldr	r3, [pc, #8]	; (403d10 <f_mount+0x24>)
  403d08:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  403d0c:	2000      	movs	r0, #0
  403d0e:	4770      	bx	lr
  403d10:	20400aa0 	.word	0x20400aa0

00403d14 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  403d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d18:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  403d1c:	4605      	mov	r5, r0
  403d1e:	9101      	str	r1, [sp, #4]
  403d20:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  403d22:	2300      	movs	r3, #0
  403d24:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  403d26:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  403d2a:	f002 021e 	and.w	r2, r2, #30
  403d2e:	a985      	add	r1, sp, #532	; 0x214
  403d30:	a801      	add	r0, sp, #4
  403d32:	4b58      	ldr	r3, [pc, #352]	; (403e94 <f_open+0x180>)
  403d34:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  403d36:	ab82      	add	r3, sp, #520	; 0x208
  403d38:	938b      	str	r3, [sp, #556]	; 0x22c
  403d3a:	ab02      	add	r3, sp, #8
  403d3c:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  403d3e:	b168      	cbz	r0, 403d5c <f_open+0x48>
  403d40:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  403d42:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403d44:	f016 0f1c 	tst.w	r6, #28
  403d48:	d158      	bne.n	403dfc <f_open+0xe8>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  403d4a:	2b00      	cmp	r3, #0
  403d4c:	f040 8096 	bne.w	403e7c <f_open+0x168>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  403d50:	7ae3      	ldrb	r3, [r4, #11]
  403d52:	f013 0f10 	tst.w	r3, #16
  403d56:	d062      	beq.n	403e1e <f_open+0x10a>
				res = FR_NO_FILE;
  403d58:	2304      	movs	r3, #4
  403d5a:	e08f      	b.n	403e7c <f_open+0x168>
		res = follow_path(&dj, path);	/* Follow the file path */
  403d5c:	9901      	ldr	r1, [sp, #4]
  403d5e:	a885      	add	r0, sp, #532	; 0x214
  403d60:	4b4d      	ldr	r3, [pc, #308]	; (403e98 <f_open+0x184>)
  403d62:	4798      	blx	r3
  403d64:	4603      	mov	r3, r0
	dir = dj.dir;
  403d66:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (!dir)	/* Current dir itself */
  403d68:	b934      	cbnz	r4, 403d78 <f_open+0x64>
  403d6a:	b928      	cbnz	r0, 403d78 <f_open+0x64>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403d6c:	f016 0f1c 	tst.w	r6, #28
  403d70:	f040 8089 	bne.w	403e86 <f_open+0x172>
			res = FR_INVALID_NAME;
  403d74:	2306      	movs	r3, #6
  403d76:	e046      	b.n	403e06 <f_open+0xf2>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403d78:	f016 0f1c 	tst.w	r6, #28
  403d7c:	d0e5      	beq.n	403d4a <f_open+0x36>
		if (res != FR_OK) {					/* No file, create new */
  403d7e:	2b00      	cmp	r3, #0
  403d80:	d13c      	bne.n	403dfc <f_open+0xe8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  403d82:	7ae3      	ldrb	r3, [r4, #11]
  403d84:	f013 0f11 	tst.w	r3, #17
  403d88:	d17f      	bne.n	403e8a <f_open+0x176>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  403d8a:	f016 0f04 	tst.w	r6, #4
  403d8e:	d17e      	bne.n	403e8e <f_open+0x17a>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  403d90:	f017 0f08 	tst.w	r7, #8
  403d94:	d050      	beq.n	403e38 <f_open+0x124>
			dw = get_fattime();					/* Created time */
  403d96:	4b41      	ldr	r3, [pc, #260]	; (403e9c <f_open+0x188>)
  403d98:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  403d9a:	73a0      	strb	r0, [r4, #14]
  403d9c:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403da0:	73e3      	strb	r3, [r4, #15]
  403da2:	0c03      	lsrs	r3, r0, #16
  403da4:	7423      	strb	r3, [r4, #16]
  403da6:	0e00      	lsrs	r0, r0, #24
  403da8:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  403daa:	2300      	movs	r3, #0
  403dac:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  403dae:	7723      	strb	r3, [r4, #28]
  403db0:	7763      	strb	r3, [r4, #29]
  403db2:	77a3      	strb	r3, [r4, #30]
  403db4:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  403db6:	7d62      	ldrb	r2, [r4, #21]
  403db8:	7d26      	ldrb	r6, [r4, #20]
  403dba:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  403dbe:	7ee1      	ldrb	r1, [r4, #27]
  403dc0:	7ea2      	ldrb	r2, [r4, #26]
  403dc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  403dc6:	76a3      	strb	r3, [r4, #26]
  403dc8:	76e3      	strb	r3, [r4, #27]
  403dca:	7523      	strb	r3, [r4, #20]
  403dcc:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  403dce:	9885      	ldr	r0, [sp, #532]	; 0x214
  403dd0:	2301      	movs	r3, #1
  403dd2:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  403dd4:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  403dd8:	d02c      	beq.n	403e34 <f_open+0x120>
				dw = dj.fs->winsect;
  403dda:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  403dde:	4631      	mov	r1, r6
  403de0:	4b2f      	ldr	r3, [pc, #188]	; (403ea0 <f_open+0x18c>)
  403de2:	4798      	blx	r3
				if (res == FR_OK) {
  403de4:	4603      	mov	r3, r0
  403de6:	2800      	cmp	r0, #0
  403de8:	d148      	bne.n	403e7c <f_open+0x168>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  403dea:	9885      	ldr	r0, [sp, #532]	; 0x214
  403dec:	3e01      	subs	r6, #1
  403dee:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  403df0:	4641      	mov	r1, r8
  403df2:	4b2c      	ldr	r3, [pc, #176]	; (403ea4 <f_open+0x190>)
  403df4:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  403df6:	4603      	mov	r3, r0
  403df8:	b1e0      	cbz	r0, 403e34 <f_open+0x120>
  403dfa:	e03f      	b.n	403e7c <f_open+0x168>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  403dfc:	2b04      	cmp	r3, #4
  403dfe:	d004      	beq.n	403e0a <f_open+0xf6>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  403e00:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  403e04:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  403e06:	b1db      	cbz	r3, 403e40 <f_open+0x12c>
  403e08:	e038      	b.n	403e7c <f_open+0x168>
				res = dir_register(&dj);
  403e0a:	a885      	add	r0, sp, #532	; 0x214
  403e0c:	4b26      	ldr	r3, [pc, #152]	; (403ea8 <f_open+0x194>)
  403e0e:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  403e10:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  403e14:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  403e16:	4603      	mov	r3, r0
  403e18:	2800      	cmp	r0, #0
  403e1a:	d0b9      	beq.n	403d90 <f_open+0x7c>
  403e1c:	e02e      	b.n	403e7c <f_open+0x168>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  403e1e:	f016 0f02 	tst.w	r6, #2
  403e22:	d004      	beq.n	403e2e <f_open+0x11a>
  403e24:	f013 0f01 	tst.w	r3, #1
  403e28:	d001      	beq.n	403e2e <f_open+0x11a>
					res = FR_DENIED;
  403e2a:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  403e2c:	e026      	b.n	403e7c <f_open+0x168>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  403e2e:	f016 0f08 	tst.w	r6, #8
  403e32:	d001      	beq.n	403e38 <f_open+0x124>
			mode |= FA__WRITTEN;
  403e34:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  403e38:	9b85      	ldr	r3, [sp, #532]	; 0x214
  403e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403e3c:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  403e3e:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  403e40:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  403e42:	7d62      	ldrb	r2, [r4, #21]
  403e44:	7d23      	ldrb	r3, [r4, #20]
  403e46:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  403e4a:	7ee1      	ldrb	r1, [r4, #27]
  403e4c:	7ea3      	ldrb	r3, [r4, #26]
  403e4e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403e56:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  403e58:	7fe2      	ldrb	r2, [r4, #31]
  403e5a:	7fa3      	ldrb	r3, [r4, #30]
  403e5c:	041b      	lsls	r3, r3, #16
  403e5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  403e62:	7f22      	ldrb	r2, [r4, #28]
  403e64:	4313      	orrs	r3, r2
  403e66:	7f62      	ldrb	r2, [r4, #29]
  403e68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403e6c:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  403e6e:	2300      	movs	r3, #0
  403e70:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  403e72:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  403e74:	9a85      	ldr	r2, [sp, #532]	; 0x214
  403e76:	602a      	str	r2, [r5, #0]
  403e78:	88d2      	ldrh	r2, [r2, #6]
  403e7a:	80aa      	strh	r2, [r5, #4]
}
  403e7c:	4618      	mov	r0, r3
  403e7e:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  403e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_INVALID_NAME;
  403e86:	2306      	movs	r3, #6
  403e88:	e7ba      	b.n	403e00 <f_open+0xec>
				res = FR_DENIED;
  403e8a:	2307      	movs	r3, #7
  403e8c:	e7f6      	b.n	403e7c <f_open+0x168>
					res = FR_EXIST;
  403e8e:	2308      	movs	r3, #8
  403e90:	e7f4      	b.n	403e7c <f_open+0x168>
  403e92:	bf00      	nop
  403e94:	00402b45 	.word	0x00402b45
  403e98:	004039c9 	.word	0x004039c9
  403e9c:	004029d1 	.word	0x004029d1
  403ea0:	004032c5 	.word	0x004032c5
  403ea4:	00402eb5 	.word	0x00402eb5
  403ea8:	00403621 	.word	0x00403621

00403eac <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  403eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403eb0:	b083      	sub	sp, #12
  403eb2:	4604      	mov	r4, r0
  403eb4:	4689      	mov	r9, r1
  403eb6:	4616      	mov	r6, r2
  403eb8:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  403eba:	2300      	movs	r3, #0
  403ebc:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  403ec0:	8881      	ldrh	r1, [r0, #4]
  403ec2:	6800      	ldr	r0, [r0, #0]
  403ec4:	4b75      	ldr	r3, [pc, #468]	; (40409c <f_write+0x1f0>)
  403ec6:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  403ec8:	9001      	str	r0, [sp, #4]
  403eca:	2800      	cmp	r0, #0
  403ecc:	f040 80e2 	bne.w	404094 <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  403ed0:	79a3      	ldrb	r3, [r4, #6]
  403ed2:	f013 0f80 	tst.w	r3, #128	; 0x80
  403ed6:	f040 80db 	bne.w	404090 <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  403eda:	f013 0f02 	tst.w	r3, #2
  403ede:	d102      	bne.n	403ee6 <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  403ee0:	2307      	movs	r3, #7
  403ee2:	9301      	str	r3, [sp, #4]
  403ee4:	e0d6      	b.n	404094 <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  403ee6:	68e3      	ldr	r3, [r4, #12]
  403ee8:	42f3      	cmn	r3, r6
  403eea:	d20e      	bcs.n	403f0a <f_write+0x5e>

	for ( ;  btw;							/* Repeat until all data written */
  403eec:	2e00      	cmp	r6, #0
  403eee:	d174      	bne.n	403fda <f_write+0x12e>
  403ef0:	e00b      	b.n	403f0a <f_write+0x5e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  403ef2:	2100      	movs	r1, #0
  403ef4:	4b6a      	ldr	r3, [pc, #424]	; (4040a0 <f_write+0x1f4>)
  403ef6:	4798      	blx	r3
  403ef8:	4603      	mov	r3, r0
  403efa:	6120      	str	r0, [r4, #16]
  403efc:	e003      	b.n	403f06 <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  403efe:	6961      	ldr	r1, [r4, #20]
  403f00:	4b67      	ldr	r3, [pc, #412]	; (4040a0 <f_write+0x1f4>)
  403f02:	4798      	blx	r3
  403f04:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  403f06:	2b00      	cmp	r3, #0
  403f08:	d17a      	bne.n	404000 <f_write+0x154>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  403f0a:	68a3      	ldr	r3, [r4, #8]
  403f0c:	68e2      	ldr	r2, [r4, #12]
  403f0e:	4293      	cmp	r3, r2
  403f10:	bf88      	it	hi
  403f12:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  403f14:	79a3      	ldrb	r3, [r4, #6]
  403f16:	f043 0320 	orr.w	r3, r3, #32
  403f1a:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  403f1c:	e0ba      	b.n	404094 <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  403f1e:	79a3      	ldrb	r3, [r4, #6]
  403f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403f24:	71a3      	strb	r3, [r4, #6]
  403f26:	2302      	movs	r3, #2
  403f28:	9301      	str	r3, [sp, #4]
  403f2a:	e0b3      	b.n	404094 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  403f2c:	79a3      	ldrb	r3, [r4, #6]
  403f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403f32:	71a3      	strb	r3, [r4, #6]
  403f34:	2301      	movs	r3, #1
  403f36:	9301      	str	r3, [sp, #4]
  403f38:	e0ac      	b.n	404094 <f_write+0x1e8>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  403f3a:	2100      	movs	r1, #0
  403f3c:	4b59      	ldr	r3, [pc, #356]	; (4040a4 <f_write+0x1f8>)
  403f3e:	4798      	blx	r3
  403f40:	2800      	cmp	r0, #0
  403f42:	d068      	beq.n	404016 <f_write+0x16a>
				ABORT(fp->fs, FR_DISK_ERR);
  403f44:	79a3      	ldrb	r3, [r4, #6]
  403f46:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403f4a:	71a3      	strb	r3, [r4, #6]
  403f4c:	2301      	movs	r3, #1
  403f4e:	9301      	str	r3, [sp, #4]
  403f50:	e0a0      	b.n	404094 <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  403f52:	79a3      	ldrb	r3, [r4, #6]
  403f54:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403f58:	71a3      	strb	r3, [r4, #6]
  403f5a:	2302      	movs	r3, #2
  403f5c:	9301      	str	r3, [sp, #4]
  403f5e:	e099      	b.n	404094 <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  403f60:	79a3      	ldrb	r3, [r4, #6]
  403f62:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403f66:	71a3      	strb	r3, [r4, #6]
  403f68:	2301      	movs	r3, #1
  403f6a:	9301      	str	r3, [sp, #4]
  403f6c:	e092      	b.n	404094 <f_write+0x1e8>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
  403f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
  403f72:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  403f76:	3030      	adds	r0, #48	; 0x30
  403f78:	4b4b      	ldr	r3, [pc, #300]	; (4040a8 <f_write+0x1fc>)
  403f7a:	4798      	blx	r3
					fp->fs->wflag = 0;
  403f7c:	6823      	ldr	r3, [r4, #0]
  403f7e:	2200      	movs	r2, #0
  403f80:	711a      	strb	r2, [r3, #4]
  403f82:	e06c      	b.n	40405e <f_write+0x1b2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
  403f84:	68a2      	ldr	r2, [r4, #8]
  403f86:	68e3      	ldr	r3, [r4, #12]
  403f88:	429a      	cmp	r2, r3
  403f8a:	d26b      	bcs.n	404064 <f_write+0x1b8>
			fp->dsect = sect;
  403f8c:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  403f8e:	68a5      	ldr	r5, [r4, #8]
  403f90:	f3c5 0508 	ubfx	r5, r5, #0, #9
  403f94:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  403f98:	42b5      	cmp	r5, r6
  403f9a:	bf28      	it	cs
  403f9c:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  403f9e:	69a1      	ldr	r1, [r4, #24]
  403fa0:	6820      	ldr	r0, [r4, #0]
  403fa2:	4b40      	ldr	r3, [pc, #256]	; (4040a4 <f_write+0x1f8>)
  403fa4:	4798      	blx	r3
  403fa6:	2800      	cmp	r0, #0
  403fa8:	d16b      	bne.n	404082 <f_write+0x1d6>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  403faa:	68a0      	ldr	r0, [r4, #8]
  403fac:	f3c0 0008 	ubfx	r0, r0, #0, #9
  403fb0:	3030      	adds	r0, #48	; 0x30
  403fb2:	6823      	ldr	r3, [r4, #0]
  403fb4:	462a      	mov	r2, r5
  403fb6:	4649      	mov	r1, r9
  403fb8:	4418      	add	r0, r3
  403fba:	4b3b      	ldr	r3, [pc, #236]	; (4040a8 <f_write+0x1fc>)
  403fbc:	4798      	blx	r3
		fp->fs->wflag = 1;
  403fbe:	6823      	ldr	r3, [r4, #0]
  403fc0:	2201      	movs	r2, #1
  403fc2:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  403fc4:	44a9      	add	r9, r5
  403fc6:	68a3      	ldr	r3, [r4, #8]
  403fc8:	442b      	add	r3, r5
  403fca:	60a3      	str	r3, [r4, #8]
  403fcc:	f8d8 3000 	ldr.w	r3, [r8]
  403fd0:	442b      	add	r3, r5
  403fd2:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  403fd6:	1b76      	subs	r6, r6, r5
  403fd8:	d097      	beq.n	403f0a <f_write+0x5e>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  403fda:	68a2      	ldr	r2, [r4, #8]
  403fdc:	f3c2 0308 	ubfx	r3, r2, #0, #9
  403fe0:	2b00      	cmp	r3, #0
  403fe2:	d1d4      	bne.n	403f8e <f_write+0xe2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  403fe4:	6820      	ldr	r0, [r4, #0]
  403fe6:	7883      	ldrb	r3, [r0, #2]
  403fe8:	3b01      	subs	r3, #1
  403fea:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  403fee:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  403ff2:	d10b      	bne.n	40400c <f_write+0x160>
				if (fp->fptr == 0) {		/* On the top of the file? */
  403ff4:	2a00      	cmp	r2, #0
  403ff6:	d182      	bne.n	403efe <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  403ff8:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  403ffa:	2b00      	cmp	r3, #0
  403ffc:	f43f af79 	beq.w	403ef2 <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  404000:	2b01      	cmp	r3, #1
  404002:	d08c      	beq.n	403f1e <f_write+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  404004:	f1b3 3fff 	cmp.w	r3, #4294967295
  404008:	d090      	beq.n	403f2c <f_write+0x80>
				fp->clust = clst;			/* Update current cluster */
  40400a:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  40400c:	6820      	ldr	r0, [r4, #0]
  40400e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  404010:	69a3      	ldr	r3, [r4, #24]
  404012:	429a      	cmp	r2, r3
  404014:	d091      	beq.n	403f3a <f_write+0x8e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  404016:	f8d4 a000 	ldr.w	sl, [r4]
  40401a:	6961      	ldr	r1, [r4, #20]
  40401c:	4650      	mov	r0, sl
  40401e:	4b23      	ldr	r3, [pc, #140]	; (4040ac <f_write+0x200>)
  404020:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  404022:	4605      	mov	r5, r0
  404024:	2800      	cmp	r0, #0
  404026:	d094      	beq.n	403f52 <f_write+0xa6>
			sect += csect;
  404028:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  40402a:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  40402e:	d0a9      	beq.n	403f84 <f_write+0xd8>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  404030:	f89a 3002 	ldrb.w	r3, [sl, #2]
  404034:	eb07 020b 	add.w	r2, r7, fp
  404038:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  40403a:	bf88      	it	hi
  40403c:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  404040:	fa5f f38b 	uxtb.w	r3, fp
  404044:	462a      	mov	r2, r5
  404046:	4649      	mov	r1, r9
  404048:	f89a 0001 	ldrb.w	r0, [sl, #1]
  40404c:	4f18      	ldr	r7, [pc, #96]	; (4040b0 <f_write+0x204>)
  40404e:	47b8      	blx	r7
  404050:	2800      	cmp	r0, #0
  404052:	d185      	bne.n	403f60 <f_write+0xb4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
  404054:	6820      	ldr	r0, [r4, #0]
  404056:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  404058:	1b49      	subs	r1, r1, r5
  40405a:	458b      	cmp	fp, r1
  40405c:	d887      	bhi.n	403f6e <f_write+0xc2>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  40405e:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  404062:	e7af      	b.n	403fc4 <f_write+0x118>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  404064:	2100      	movs	r1, #0
  404066:	4650      	mov	r0, sl
  404068:	4b0e      	ldr	r3, [pc, #56]	; (4040a4 <f_write+0x1f8>)
  40406a:	4798      	blx	r3
  40406c:	b910      	cbnz	r0, 404074 <f_write+0x1c8>
				fp->fs->winsect = sect;
  40406e:	6823      	ldr	r3, [r4, #0]
  404070:	62dd      	str	r5, [r3, #44]	; 0x2c
  404072:	e78b      	b.n	403f8c <f_write+0xe0>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  404074:	79a3      	ldrb	r3, [r4, #6]
  404076:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40407a:	71a3      	strb	r3, [r4, #6]
  40407c:	2301      	movs	r3, #1
  40407e:	9301      	str	r3, [sp, #4]
  404080:	e008      	b.n	404094 <f_write+0x1e8>
			ABORT(fp->fs, FR_DISK_ERR);
  404082:	79a3      	ldrb	r3, [r4, #6]
  404084:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404088:	71a3      	strb	r3, [r4, #6]
  40408a:	2301      	movs	r3, #1
  40408c:	9301      	str	r3, [sp, #4]
  40408e:	e001      	b.n	404094 <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  404090:	2302      	movs	r3, #2
  404092:	9301      	str	r3, [sp, #4]
}
  404094:	9801      	ldr	r0, [sp, #4]
  404096:	b003      	add	sp, #12
  404098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40409c:	00402a81 	.word	0x00402a81
  4040a0:	00403205 	.word	0x00403205
  4040a4:	00402eb5 	.word	0x00402eb5
  4040a8:	00402a29 	.word	0x00402a29
  4040ac:	00402a4b 	.word	0x00402a4b
  4040b0:	004028f1 	.word	0x004028f1

004040b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  4040b4:	b538      	push	{r3, r4, r5, lr}
  4040b6:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  4040b8:	8881      	ldrh	r1, [r0, #4]
  4040ba:	6800      	ldr	r0, [r0, #0]
  4040bc:	4b1f      	ldr	r3, [pc, #124]	; (40413c <f_sync+0x88>)
  4040be:	4798      	blx	r3
	if (res == FR_OK) {
  4040c0:	4603      	mov	r3, r0
  4040c2:	b918      	cbnz	r0, 4040cc <f_sync+0x18>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  4040c4:	79a2      	ldrb	r2, [r4, #6]
  4040c6:	f012 0f20 	tst.w	r2, #32
  4040ca:	d101      	bne.n	4040d0 <f_sync+0x1c>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  4040cc:	4618      	mov	r0, r3
  4040ce:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
  4040d0:	69e1      	ldr	r1, [r4, #28]
  4040d2:	6820      	ldr	r0, [r4, #0]
  4040d4:	4b1a      	ldr	r3, [pc, #104]	; (404140 <f_sync+0x8c>)
  4040d6:	4798      	blx	r3
			if (res == FR_OK) {
  4040d8:	4603      	mov	r3, r0
  4040da:	2800      	cmp	r0, #0
  4040dc:	d1f6      	bne.n	4040cc <f_sync+0x18>
				dir = fp->dir_ptr;
  4040de:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  4040e0:	7aeb      	ldrb	r3, [r5, #11]
  4040e2:	f043 0320 	orr.w	r3, r3, #32
  4040e6:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  4040e8:	68e3      	ldr	r3, [r4, #12]
  4040ea:	772b      	strb	r3, [r5, #28]
  4040ec:	89a3      	ldrh	r3, [r4, #12]
  4040ee:	0a1b      	lsrs	r3, r3, #8
  4040f0:	776b      	strb	r3, [r5, #29]
  4040f2:	89e3      	ldrh	r3, [r4, #14]
  4040f4:	77ab      	strb	r3, [r5, #30]
  4040f6:	7be3      	ldrb	r3, [r4, #15]
  4040f8:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4040fa:	6923      	ldr	r3, [r4, #16]
  4040fc:	76ab      	strb	r3, [r5, #26]
  4040fe:	8a23      	ldrh	r3, [r4, #16]
  404100:	0a1b      	lsrs	r3, r3, #8
  404102:	76eb      	strb	r3, [r5, #27]
  404104:	8a63      	ldrh	r3, [r4, #18]
  404106:	752b      	strb	r3, [r5, #20]
  404108:	8a63      	ldrh	r3, [r4, #18]
  40410a:	0a1b      	lsrs	r3, r3, #8
  40410c:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  40410e:	4b0d      	ldr	r3, [pc, #52]	; (404144 <f_sync+0x90>)
  404110:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  404112:	75a8      	strb	r0, [r5, #22]
  404114:	f3c0 2307 	ubfx	r3, r0, #8, #8
  404118:	75eb      	strb	r3, [r5, #23]
  40411a:	0c03      	lsrs	r3, r0, #16
  40411c:	762b      	strb	r3, [r5, #24]
  40411e:	0e00      	lsrs	r0, r0, #24
  404120:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  404122:	79a3      	ldrb	r3, [r4, #6]
  404124:	f023 0320 	bic.w	r3, r3, #32
  404128:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  40412a:	6823      	ldr	r3, [r4, #0]
  40412c:	2201      	movs	r2, #1
  40412e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  404130:	6820      	ldr	r0, [r4, #0]
  404132:	4b05      	ldr	r3, [pc, #20]	; (404148 <f_sync+0x94>)
  404134:	4798      	blx	r3
  404136:	4603      	mov	r3, r0
  404138:	e7c8      	b.n	4040cc <f_sync+0x18>
  40413a:	bf00      	nop
  40413c:	00402a81 	.word	0x00402a81
  404140:	00402eb5 	.word	0x00402eb5
  404144:	004029d1 	.word	0x004029d1
  404148:	004038fd 	.word	0x004038fd

0040414c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  40414c:	b510      	push	{r4, lr}
  40414e:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  404150:	4b03      	ldr	r3, [pc, #12]	; (404160 <f_close+0x14>)
  404152:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  404154:	4603      	mov	r3, r0
  404156:	b908      	cbnz	r0, 40415c <f_close+0x10>
  404158:	2200      	movs	r2, #0
  40415a:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  40415c:	4618      	mov	r0, r3
  40415e:	bd10      	pop	{r4, pc}
  404160:	004040b5 	.word	0x004040b5

00404164 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
  404164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404168:	4604      	mov	r4, r0
  40416a:	460d      	mov	r5, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  40416c:	8881      	ldrh	r1, [r0, #4]
  40416e:	6800      	ldr	r0, [r0, #0]
  404170:	4b4f      	ldr	r3, [pc, #316]	; (4042b0 <f_lseek+0x14c>)
  404172:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  404174:	4607      	mov	r7, r0
  404176:	2800      	cmp	r0, #0
  404178:	f040 8096 	bne.w	4042a8 <f_lseek+0x144>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
  40417c:	79a3      	ldrb	r3, [r4, #6]
  40417e:	f013 0f80 	tst.w	r3, #128	; 0x80
  404182:	f040 8090 	bne.w	4042a6 <f_lseek+0x142>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
  404186:	68e2      	ldr	r2, [r4, #12]
  404188:	42aa      	cmp	r2, r5
  40418a:	d204      	bcs.n	404196 <f_lseek+0x32>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
  40418c:	f003 0302 	and.w	r3, r3, #2
#endif
			) ofs = fp->fsize;
  404190:	2b00      	cmp	r3, #0
  404192:	bf08      	it	eq
  404194:	4615      	moveq	r5, r2

		ifptr = fp->fptr;
  404196:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
  404198:	2200      	movs	r2, #0
  40419a:	60a2      	str	r2, [r4, #8]
		if (ofs) {
  40419c:	2d00      	cmp	r5, #0
  40419e:	f000 8083 	beq.w	4042a8 <f_lseek+0x144>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
  4041a2:	6820      	ldr	r0, [r4, #0]
  4041a4:	7886      	ldrb	r6, [r0, #2]
  4041a6:	0276      	lsls	r6, r6, #9
			if (ifptr > 0 &&
  4041a8:	b16b      	cbz	r3, 4041c6 <f_lseek+0x62>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
  4041aa:	3b01      	subs	r3, #1
  4041ac:	1e6a      	subs	r2, r5, #1
  4041ae:	fbb2 f2f6 	udiv	r2, r2, r6
  4041b2:	fbb3 f1f6 	udiv	r1, r3, r6
			if (ifptr > 0 &&
  4041b6:	428a      	cmp	r2, r1
  4041b8:	d305      	bcc.n	4041c6 <f_lseek+0x62>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
  4041ba:	4272      	negs	r2, r6
  4041bc:	4013      	ands	r3, r2
  4041be:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
  4041c0:	1aed      	subs	r5, r5, r3
				clst = fp->clust;
  4041c2:	6961      	ldr	r1, [r4, #20]
  4041c4:	e002      	b.n	4041cc <f_lseek+0x68>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
  4041c6:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
  4041c8:	b149      	cbz	r1, 4041de <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
  4041ca:	6161      	str	r1, [r4, #20]
			}
			if (clst != 0) {
  4041cc:	2900      	cmp	r1, #0
  4041ce:	d059      	beq.n	404284 <f_lseek+0x120>
				while (ofs > bcs) {						/* Cluster following loop */
  4041d0:	42b5      	cmp	r5, r6
  4041d2:	d937      	bls.n	404244 <f_lseek+0xe0>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
  4041d4:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 4042b4 <f_lseek+0x150>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
  4041d8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 4042bc <f_lseek+0x158>
  4041dc:	e028      	b.n	404230 <f_lseek+0xcc>
					clst = create_chain(fp->fs, 0);
  4041de:	4b35      	ldr	r3, [pc, #212]	; (4042b4 <f_lseek+0x150>)
  4041e0:	4798      	blx	r3
  4041e2:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4041e4:	2801      	cmp	r0, #1
  4041e6:	d004      	beq.n	4041f2 <f_lseek+0x8e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4041e8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4041ec:	d007      	beq.n	4041fe <f_lseek+0x9a>
					fp->sclust = clst;
  4041ee:	6120      	str	r0, [r4, #16]
  4041f0:	e7eb      	b.n	4041ca <f_lseek+0x66>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4041f2:	79a3      	ldrb	r3, [r4, #6]
  4041f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4041f8:	71a3      	strb	r3, [r4, #6]
  4041fa:	2702      	movs	r7, #2
  4041fc:	e054      	b.n	4042a8 <f_lseek+0x144>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4041fe:	79a3      	ldrb	r3, [r4, #6]
  404200:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404204:	71a3      	strb	r3, [r4, #6]
  404206:	2701      	movs	r7, #1
  404208:	e04e      	b.n	4042a8 <f_lseek+0x144>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
  40420a:	6820      	ldr	r0, [r4, #0]
  40420c:	47c0      	blx	r8
  40420e:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  404210:	f1b1 3fff 	cmp.w	r1, #4294967295
  404214:	d026      	beq.n	404264 <f_lseek+0x100>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  404216:	2901      	cmp	r1, #1
  404218:	d92a      	bls.n	404270 <f_lseek+0x10c>
  40421a:	6823      	ldr	r3, [r4, #0]
  40421c:	699b      	ldr	r3, [r3, #24]
  40421e:	4299      	cmp	r1, r3
  404220:	d226      	bcs.n	404270 <f_lseek+0x10c>
					fp->clust = clst;
  404222:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
  404224:	68a3      	ldr	r3, [r4, #8]
  404226:	4433      	add	r3, r6
  404228:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
  40422a:	1bad      	subs	r5, r5, r6
				while (ofs > bcs) {						/* Cluster following loop */
  40422c:	42ae      	cmp	r6, r5
  40422e:	d209      	bcs.n	404244 <f_lseek+0xe0>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
  404230:	79a3      	ldrb	r3, [r4, #6]
  404232:	f013 0f02 	tst.w	r3, #2
  404236:	d0e8      	beq.n	40420a <f_lseek+0xa6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
  404238:	6820      	ldr	r0, [r4, #0]
  40423a:	47c8      	blx	r9
						if (clst == 0) {				/* When disk gets full, clip file size */
  40423c:	4601      	mov	r1, r0
  40423e:	2800      	cmp	r0, #0
  404240:	d1e6      	bne.n	404210 <f_lseek+0xac>
							ofs = bcs; break;
  404242:	4635      	mov	r5, r6
				}
				fp->fptr += ofs;
  404244:	68a3      	ldr	r3, [r4, #8]
  404246:	442b      	add	r3, r5
  404248:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
  40424a:	f3c5 0308 	ubfx	r3, r5, #0, #9
  40424e:	b1c3      	cbz	r3, 404282 <f_lseek+0x11e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
  404250:	6820      	ldr	r0, [r4, #0]
  404252:	4b19      	ldr	r3, [pc, #100]	; (4042b8 <f_lseek+0x154>)
  404254:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  404256:	b988      	cbnz	r0, 40427c <f_lseek+0x118>
  404258:	79a3      	ldrb	r3, [r4, #6]
  40425a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40425e:	71a3      	strb	r3, [r4, #6]
  404260:	2702      	movs	r7, #2
  404262:	e021      	b.n	4042a8 <f_lseek+0x144>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  404264:	79a3      	ldrb	r3, [r4, #6]
  404266:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40426a:	71a3      	strb	r3, [r4, #6]
  40426c:	2701      	movs	r7, #1
  40426e:	e01b      	b.n	4042a8 <f_lseek+0x144>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  404270:	79a3      	ldrb	r3, [r4, #6]
  404272:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404276:	71a3      	strb	r3, [r4, #6]
  404278:	2702      	movs	r7, #2
  40427a:	e015      	b.n	4042a8 <f_lseek+0x144>
					nsect += ofs / SS(fp->fs);
  40427c:	eb00 2155 	add.w	r1, r0, r5, lsr #9
  404280:	e000      	b.n	404284 <f_lseek+0x120>
		fp->fptr = nsect = 0;
  404282:	2100      	movs	r1, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
  404284:	68a3      	ldr	r3, [r4, #8]
  404286:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40428a:	b11a      	cbz	r2, 404294 <f_lseek+0x130>
  40428c:	69a2      	ldr	r2, [r4, #24]
  40428e:	4291      	cmp	r1, r2
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
  404290:	bf18      	it	ne
  404292:	61a1      	strne	r1, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
  404294:	68e2      	ldr	r2, [r4, #12]
  404296:	4293      	cmp	r3, r2
  404298:	d906      	bls.n	4042a8 <f_lseek+0x144>
			fp->fsize = fp->fptr;
  40429a:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
  40429c:	79a3      	ldrb	r3, [r4, #6]
  40429e:	f043 0320 	orr.w	r3, r3, #32
  4042a2:	71a3      	strb	r3, [r4, #6]
  4042a4:	e000      	b.n	4042a8 <f_lseek+0x144>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  4042a6:	2702      	movs	r7, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
  4042a8:	4638      	mov	r0, r7
  4042aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4042ae:	bf00      	nop
  4042b0:	00402a81 	.word	0x00402a81
  4042b4:	00403205 	.word	0x00403205
  4042b8:	00402a4b 	.word	0x00402a4b
  4042bc:	00402f45 	.word	0x00402f45

004042c0 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  4042c0:	287f      	cmp	r0, #127	; 0x7f
  4042c2:	d919      	bls.n	4042f8 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  4042c4:	b971      	cbnz	r1, 4042e4 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  4042c6:	28c7      	cmp	r0, #199	; 0xc7
  4042c8:	d013      	beq.n	4042f2 <ff_convert+0x32>
  4042ca:	4a0c      	ldr	r2, [pc, #48]	; (4042fc <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  4042cc:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  4042ce:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  4042d2:	4281      	cmp	r1, r0
  4042d4:	d003      	beq.n	4042de <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  4042d6:	3301      	adds	r3, #1
  4042d8:	b29b      	uxth	r3, r3
  4042da:	2b80      	cmp	r3, #128	; 0x80
  4042dc:	d1f7      	bne.n	4042ce <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  4042de:	3380      	adds	r3, #128	; 0x80
  4042e0:	b2d8      	uxtb	r0, r3
  4042e2:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4042e4:	28ff      	cmp	r0, #255	; 0xff
  4042e6:	d806      	bhi.n	4042f6 <ff_convert+0x36>
  4042e8:	3880      	subs	r0, #128	; 0x80
  4042ea:	4b04      	ldr	r3, [pc, #16]	; (4042fc <ff_convert+0x3c>)
  4042ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  4042f0:	4770      	bx	lr
				if (src == Tbl[c]) break;
  4042f2:	2300      	movs	r3, #0
  4042f4:	e7f3      	b.n	4042de <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4042f6:	2000      	movs	r0, #0
		}
	}

	return c;
}
  4042f8:	4770      	bx	lr
  4042fa:	bf00      	nop
  4042fc:	0040d1b4 	.word	0x0040d1b4

00404300 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  404300:	2861      	cmp	r0, #97	; 0x61
  404302:	d00e      	beq.n	404322 <ff_wtoupper+0x22>
  404304:	4908      	ldr	r1, [pc, #32]	; (404328 <ff_wtoupper+0x28>)
  404306:	2200      	movs	r2, #0
  404308:	3201      	adds	r2, #1
  40430a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  40430e:	4283      	cmp	r3, r0
  404310:	d001      	beq.n	404316 <ff_wtoupper+0x16>
  404312:	2b00      	cmp	r3, #0
  404314:	d1f8      	bne.n	404308 <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  404316:	b11b      	cbz	r3, 404320 <ff_wtoupper+0x20>
  404318:	4b04      	ldr	r3, [pc, #16]	; (40432c <ff_wtoupper+0x2c>)
  40431a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  40431e:	4770      	bx	lr
  404320:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  404322:	2200      	movs	r2, #0
  404324:	e7f8      	b.n	404318 <ff_wtoupper+0x18>
  404326:	bf00      	nop
  404328:	0040d2b4 	.word	0x0040d2b4
  40432c:	0040d494 	.word	0x0040d494

00404330 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  404330:	f100 0308 	add.w	r3, r0, #8
  404334:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  404336:	f04f 32ff 	mov.w	r2, #4294967295
  40433a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40433c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40433e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  404340:	2300      	movs	r3, #0
  404342:	6003      	str	r3, [r0, #0]
  404344:	4770      	bx	lr

00404346 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  404346:	2300      	movs	r3, #0
  404348:	6103      	str	r3, [r0, #16]
  40434a:	4770      	bx	lr

0040434c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40434c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40434e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  404350:	689a      	ldr	r2, [r3, #8]
  404352:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  404354:	689a      	ldr	r2, [r3, #8]
  404356:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  404358:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40435a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40435c:	6803      	ldr	r3, [r0, #0]
  40435e:	3301      	adds	r3, #1
  404360:	6003      	str	r3, [r0, #0]
  404362:	4770      	bx	lr

00404364 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  404364:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  404366:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  404368:	f1b5 3fff 	cmp.w	r5, #4294967295
  40436c:	d002      	beq.n	404374 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40436e:	f100 0208 	add.w	r2, r0, #8
  404372:	e002      	b.n	40437a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  404374:	6902      	ldr	r2, [r0, #16]
  404376:	e004      	b.n	404382 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  404378:	461a      	mov	r2, r3
  40437a:	6853      	ldr	r3, [r2, #4]
  40437c:	681c      	ldr	r4, [r3, #0]
  40437e:	42a5      	cmp	r5, r4
  404380:	d2fa      	bcs.n	404378 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  404382:	6853      	ldr	r3, [r2, #4]
  404384:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  404386:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  404388:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40438a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40438c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40438e:	6803      	ldr	r3, [r0, #0]
  404390:	3301      	adds	r3, #1
  404392:	6003      	str	r3, [r0, #0]
}
  404394:	bc30      	pop	{r4, r5}
  404396:	4770      	bx	lr

00404398 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  404398:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40439a:	6842      	ldr	r2, [r0, #4]
  40439c:	6881      	ldr	r1, [r0, #8]
  40439e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4043a0:	6882      	ldr	r2, [r0, #8]
  4043a2:	6841      	ldr	r1, [r0, #4]
  4043a4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4043a6:	685a      	ldr	r2, [r3, #4]
  4043a8:	4290      	cmp	r0, r2
  4043aa:	d005      	beq.n	4043b8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4043ac:	2200      	movs	r2, #0
  4043ae:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4043b0:	6818      	ldr	r0, [r3, #0]
  4043b2:	3801      	subs	r0, #1
  4043b4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4043b6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4043b8:	6882      	ldr	r2, [r0, #8]
  4043ba:	605a      	str	r2, [r3, #4]
  4043bc:	e7f6      	b.n	4043ac <uxListRemove+0x14>
	...

004043c0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4043c0:	4b0d      	ldr	r3, [pc, #52]	; (4043f8 <prvTaskExitError+0x38>)
  4043c2:	681b      	ldr	r3, [r3, #0]
  4043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4043c8:	d00a      	beq.n	4043e0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4043ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4043ce:	b672      	cpsid	i
  4043d0:	f383 8811 	msr	BASEPRI, r3
  4043d4:	f3bf 8f6f 	isb	sy
  4043d8:	f3bf 8f4f 	dsb	sy
  4043dc:	b662      	cpsie	i
  4043de:	e7fe      	b.n	4043de <prvTaskExitError+0x1e>
  4043e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4043e4:	b672      	cpsid	i
  4043e6:	f383 8811 	msr	BASEPRI, r3
  4043ea:	f3bf 8f6f 	isb	sy
  4043ee:	f3bf 8f4f 	dsb	sy
  4043f2:	b662      	cpsie	i
  4043f4:	e7fe      	b.n	4043f4 <prvTaskExitError+0x34>
  4043f6:	bf00      	nop
  4043f8:	20400038 	.word	0x20400038

004043fc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4043fc:	4806      	ldr	r0, [pc, #24]	; (404418 <prvPortStartFirstTask+0x1c>)
  4043fe:	6800      	ldr	r0, [r0, #0]
  404400:	6800      	ldr	r0, [r0, #0]
  404402:	f380 8808 	msr	MSP, r0
  404406:	b662      	cpsie	i
  404408:	b661      	cpsie	f
  40440a:	f3bf 8f4f 	dsb	sy
  40440e:	f3bf 8f6f 	isb	sy
  404412:	df00      	svc	0
  404414:	bf00      	nop
  404416:	0000      	.short	0x0000
  404418:	e000ed08 	.word	0xe000ed08

0040441c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40441c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40442c <vPortEnableVFP+0x10>
  404420:	6801      	ldr	r1, [r0, #0]
  404422:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404426:	6001      	str	r1, [r0, #0]
  404428:	4770      	bx	lr
  40442a:	0000      	.short	0x0000
  40442c:	e000ed88 	.word	0xe000ed88

00404430 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  404430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  404434:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  404438:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40443c:	4b05      	ldr	r3, [pc, #20]	; (404454 <pxPortInitialiseStack+0x24>)
  40443e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  404442:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  404446:	f06f 0302 	mvn.w	r3, #2
  40444a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40444e:	3844      	subs	r0, #68	; 0x44
  404450:	4770      	bx	lr
  404452:	bf00      	nop
  404454:	004043c1 	.word	0x004043c1

00404458 <SVC_Handler>:
	__asm volatile (
  404458:	4b06      	ldr	r3, [pc, #24]	; (404474 <pxCurrentTCBConst2>)
  40445a:	6819      	ldr	r1, [r3, #0]
  40445c:	6808      	ldr	r0, [r1, #0]
  40445e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404462:	f380 8809 	msr	PSP, r0
  404466:	f3bf 8f6f 	isb	sy
  40446a:	f04f 0000 	mov.w	r0, #0
  40446e:	f380 8811 	msr	BASEPRI, r0
  404472:	4770      	bx	lr

00404474 <pxCurrentTCBConst2>:
  404474:	2040c2d0 	.word	0x2040c2d0
  404478:	4770      	bx	lr
  40447a:	bf00      	nop

0040447c <vPortEnterCritical>:
  40447c:	f04f 0380 	mov.w	r3, #128	; 0x80
  404480:	b672      	cpsid	i
  404482:	f383 8811 	msr	BASEPRI, r3
  404486:	f3bf 8f6f 	isb	sy
  40448a:	f3bf 8f4f 	dsb	sy
  40448e:	b662      	cpsie	i
	uxCriticalNesting++;
  404490:	4a0b      	ldr	r2, [pc, #44]	; (4044c0 <vPortEnterCritical+0x44>)
  404492:	6813      	ldr	r3, [r2, #0]
  404494:	3301      	adds	r3, #1
  404496:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  404498:	2b01      	cmp	r3, #1
  40449a:	d10f      	bne.n	4044bc <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  40449c:	4b09      	ldr	r3, [pc, #36]	; (4044c4 <vPortEnterCritical+0x48>)
  40449e:	681b      	ldr	r3, [r3, #0]
  4044a0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4044a4:	d00a      	beq.n	4044bc <vPortEnterCritical+0x40>
  4044a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4044aa:	b672      	cpsid	i
  4044ac:	f383 8811 	msr	BASEPRI, r3
  4044b0:	f3bf 8f6f 	isb	sy
  4044b4:	f3bf 8f4f 	dsb	sy
  4044b8:	b662      	cpsie	i
  4044ba:	e7fe      	b.n	4044ba <vPortEnterCritical+0x3e>
  4044bc:	4770      	bx	lr
  4044be:	bf00      	nop
  4044c0:	20400038 	.word	0x20400038
  4044c4:	e000ed04 	.word	0xe000ed04

004044c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4044c8:	4b0a      	ldr	r3, [pc, #40]	; (4044f4 <vPortExitCritical+0x2c>)
  4044ca:	681b      	ldr	r3, [r3, #0]
  4044cc:	b953      	cbnz	r3, 4044e4 <vPortExitCritical+0x1c>
  4044ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4044d2:	b672      	cpsid	i
  4044d4:	f383 8811 	msr	BASEPRI, r3
  4044d8:	f3bf 8f6f 	isb	sy
  4044dc:	f3bf 8f4f 	dsb	sy
  4044e0:	b662      	cpsie	i
  4044e2:	e7fe      	b.n	4044e2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4044e4:	3b01      	subs	r3, #1
  4044e6:	4a03      	ldr	r2, [pc, #12]	; (4044f4 <vPortExitCritical+0x2c>)
  4044e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4044ea:	b90b      	cbnz	r3, 4044f0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4044ec:	f383 8811 	msr	BASEPRI, r3
  4044f0:	4770      	bx	lr
  4044f2:	bf00      	nop
  4044f4:	20400038 	.word	0x20400038

004044f8 <PendSV_Handler>:
	__asm volatile
  4044f8:	f3ef 8009 	mrs	r0, PSP
  4044fc:	f3bf 8f6f 	isb	sy
  404500:	4b15      	ldr	r3, [pc, #84]	; (404558 <pxCurrentTCBConst>)
  404502:	681a      	ldr	r2, [r3, #0]
  404504:	f01e 0f10 	tst.w	lr, #16
  404508:	bf08      	it	eq
  40450a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40450e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404512:	6010      	str	r0, [r2, #0]
  404514:	f84d 3d04 	str.w	r3, [sp, #-4]!
  404518:	f04f 0080 	mov.w	r0, #128	; 0x80
  40451c:	b672      	cpsid	i
  40451e:	f380 8811 	msr	BASEPRI, r0
  404522:	f3bf 8f4f 	dsb	sy
  404526:	f3bf 8f6f 	isb	sy
  40452a:	b662      	cpsie	i
  40452c:	f001 f91a 	bl	405764 <vTaskSwitchContext>
  404530:	f04f 0000 	mov.w	r0, #0
  404534:	f380 8811 	msr	BASEPRI, r0
  404538:	bc08      	pop	{r3}
  40453a:	6819      	ldr	r1, [r3, #0]
  40453c:	6808      	ldr	r0, [r1, #0]
  40453e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404542:	f01e 0f10 	tst.w	lr, #16
  404546:	bf08      	it	eq
  404548:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40454c:	f380 8809 	msr	PSP, r0
  404550:	f3bf 8f6f 	isb	sy
  404554:	4770      	bx	lr
  404556:	bf00      	nop

00404558 <pxCurrentTCBConst>:
  404558:	2040c2d0 	.word	0x2040c2d0
  40455c:	4770      	bx	lr
  40455e:	bf00      	nop

00404560 <SysTick_Handler>:
{
  404560:	b508      	push	{r3, lr}
	__asm volatile
  404562:	f3ef 8311 	mrs	r3, BASEPRI
  404566:	f04f 0280 	mov.w	r2, #128	; 0x80
  40456a:	b672      	cpsid	i
  40456c:	f382 8811 	msr	BASEPRI, r2
  404570:	f3bf 8f6f 	isb	sy
  404574:	f3bf 8f4f 	dsb	sy
  404578:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40457a:	4b05      	ldr	r3, [pc, #20]	; (404590 <SysTick_Handler+0x30>)
  40457c:	4798      	blx	r3
  40457e:	b118      	cbz	r0, 404588 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  404580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404584:	4b03      	ldr	r3, [pc, #12]	; (404594 <SysTick_Handler+0x34>)
  404586:	601a      	str	r2, [r3, #0]
	__asm volatile
  404588:	2300      	movs	r3, #0
  40458a:	f383 8811 	msr	BASEPRI, r3
  40458e:	bd08      	pop	{r3, pc}
  404590:	004053d1 	.word	0x004053d1
  404594:	e000ed04 	.word	0xe000ed04

00404598 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  404598:	4a03      	ldr	r2, [pc, #12]	; (4045a8 <vPortSetupTimerInterrupt+0x10>)
  40459a:	4b04      	ldr	r3, [pc, #16]	; (4045ac <vPortSetupTimerInterrupt+0x14>)
  40459c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40459e:	2207      	movs	r2, #7
  4045a0:	3b04      	subs	r3, #4
  4045a2:	601a      	str	r2, [r3, #0]
  4045a4:	4770      	bx	lr
  4045a6:	bf00      	nop
  4045a8:	000927bf 	.word	0x000927bf
  4045ac:	e000e014 	.word	0xe000e014

004045b0 <xPortStartScheduler>:
{
  4045b0:	b500      	push	{lr}
  4045b2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4045b4:	4b25      	ldr	r3, [pc, #148]	; (40464c <xPortStartScheduler+0x9c>)
  4045b6:	781a      	ldrb	r2, [r3, #0]
  4045b8:	b2d2      	uxtb	r2, r2
  4045ba:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4045bc:	22ff      	movs	r2, #255	; 0xff
  4045be:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4045c0:	781b      	ldrb	r3, [r3, #0]
  4045c2:	b2db      	uxtb	r3, r3
  4045c4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4045c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4045cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4045d0:	4a1f      	ldr	r2, [pc, #124]	; (404650 <xPortStartScheduler+0xa0>)
  4045d2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4045d4:	2207      	movs	r2, #7
  4045d6:	4b1f      	ldr	r3, [pc, #124]	; (404654 <xPortStartScheduler+0xa4>)
  4045d8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4045da:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4045de:	f013 0f80 	tst.w	r3, #128	; 0x80
  4045e2:	d010      	beq.n	404606 <xPortStartScheduler+0x56>
  4045e4:	2206      	movs	r2, #6
  4045e6:	e000      	b.n	4045ea <xPortStartScheduler+0x3a>
  4045e8:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4045ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4045ee:	005b      	lsls	r3, r3, #1
  4045f0:	b2db      	uxtb	r3, r3
  4045f2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4045f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4045fa:	1e51      	subs	r1, r2, #1
  4045fc:	f013 0f80 	tst.w	r3, #128	; 0x80
  404600:	d1f2      	bne.n	4045e8 <xPortStartScheduler+0x38>
  404602:	4b14      	ldr	r3, [pc, #80]	; (404654 <xPortStartScheduler+0xa4>)
  404604:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  404606:	4a13      	ldr	r2, [pc, #76]	; (404654 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  404608:	6813      	ldr	r3, [r2, #0]
  40460a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40460c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  404610:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  404612:	9b01      	ldr	r3, [sp, #4]
  404614:	b2db      	uxtb	r3, r3
  404616:	4a0d      	ldr	r2, [pc, #52]	; (40464c <xPortStartScheduler+0x9c>)
  404618:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40461a:	4b0f      	ldr	r3, [pc, #60]	; (404658 <xPortStartScheduler+0xa8>)
  40461c:	681a      	ldr	r2, [r3, #0]
  40461e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  404622:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  404624:	681a      	ldr	r2, [r3, #0]
  404626:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40462a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40462c:	4b0b      	ldr	r3, [pc, #44]	; (40465c <xPortStartScheduler+0xac>)
  40462e:	4798      	blx	r3
	uxCriticalNesting = 0;
  404630:	2200      	movs	r2, #0
  404632:	4b0b      	ldr	r3, [pc, #44]	; (404660 <xPortStartScheduler+0xb0>)
  404634:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  404636:	4b0b      	ldr	r3, [pc, #44]	; (404664 <xPortStartScheduler+0xb4>)
  404638:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40463a:	4a0b      	ldr	r2, [pc, #44]	; (404668 <xPortStartScheduler+0xb8>)
  40463c:	6813      	ldr	r3, [r2, #0]
  40463e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  404642:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  404644:	4b09      	ldr	r3, [pc, #36]	; (40466c <xPortStartScheduler+0xbc>)
  404646:	4798      	blx	r3
	prvTaskExitError();
  404648:	4b09      	ldr	r3, [pc, #36]	; (404670 <xPortStartScheduler+0xc0>)
  40464a:	4798      	blx	r3
  40464c:	e000e400 	.word	0xe000e400
  404650:	20400ac2 	.word	0x20400ac2
  404654:	20400ac4 	.word	0x20400ac4
  404658:	e000ed20 	.word	0xe000ed20
  40465c:	00404599 	.word	0x00404599
  404660:	20400038 	.word	0x20400038
  404664:	0040441d 	.word	0x0040441d
  404668:	e000ef34 	.word	0xe000ef34
  40466c:	004043fd 	.word	0x004043fd
  404670:	004043c1 	.word	0x004043c1

00404674 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  404674:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  404678:	2b0f      	cmp	r3, #15
  40467a:	d911      	bls.n	4046a0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40467c:	4a12      	ldr	r2, [pc, #72]	; (4046c8 <vPortValidateInterruptPriority+0x54>)
  40467e:	5c9b      	ldrb	r3, [r3, r2]
  404680:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  404682:	4a12      	ldr	r2, [pc, #72]	; (4046cc <vPortValidateInterruptPriority+0x58>)
  404684:	7812      	ldrb	r2, [r2, #0]
  404686:	429a      	cmp	r2, r3
  404688:	d90a      	bls.n	4046a0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40468a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40468e:	b672      	cpsid	i
  404690:	f383 8811 	msr	BASEPRI, r3
  404694:	f3bf 8f6f 	isb	sy
  404698:	f3bf 8f4f 	dsb	sy
  40469c:	b662      	cpsie	i
  40469e:	e7fe      	b.n	40469e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4046a0:	4b0b      	ldr	r3, [pc, #44]	; (4046d0 <vPortValidateInterruptPriority+0x5c>)
  4046a2:	681b      	ldr	r3, [r3, #0]
  4046a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4046a8:	4a0a      	ldr	r2, [pc, #40]	; (4046d4 <vPortValidateInterruptPriority+0x60>)
  4046aa:	6812      	ldr	r2, [r2, #0]
  4046ac:	4293      	cmp	r3, r2
  4046ae:	d90a      	bls.n	4046c6 <vPortValidateInterruptPriority+0x52>
  4046b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4046b4:	b672      	cpsid	i
  4046b6:	f383 8811 	msr	BASEPRI, r3
  4046ba:	f3bf 8f6f 	isb	sy
  4046be:	f3bf 8f4f 	dsb	sy
  4046c2:	b662      	cpsie	i
  4046c4:	e7fe      	b.n	4046c4 <vPortValidateInterruptPriority+0x50>
  4046c6:	4770      	bx	lr
  4046c8:	e000e3f0 	.word	0xe000e3f0
  4046cc:	20400ac2 	.word	0x20400ac2
  4046d0:	e000ed0c 	.word	0xe000ed0c
  4046d4:	20400ac4 	.word	0x20400ac4

004046d8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4046d8:	b538      	push	{r3, r4, r5, lr}
  4046da:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4046dc:	f010 0f07 	tst.w	r0, #7
  4046e0:	d002      	beq.n	4046e8 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4046e2:	f020 0407 	bic.w	r4, r0, #7
  4046e6:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4046e8:	4b11      	ldr	r3, [pc, #68]	; (404730 <pvPortMalloc+0x58>)
  4046ea:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4046ec:	4b11      	ldr	r3, [pc, #68]	; (404734 <pvPortMalloc+0x5c>)
  4046ee:	681b      	ldr	r3, [r3, #0]
  4046f0:	b193      	cbz	r3, 404718 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4046f2:	4b11      	ldr	r3, [pc, #68]	; (404738 <pvPortMalloc+0x60>)
  4046f4:	681b      	ldr	r3, [r3, #0]
  4046f6:	441c      	add	r4, r3
  4046f8:	42a3      	cmp	r3, r4
  4046fa:	d213      	bcs.n	404724 <pvPortMalloc+0x4c>
  4046fc:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  404700:	4294      	cmp	r4, r2
  404702:	d80f      	bhi.n	404724 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  404704:	4a0b      	ldr	r2, [pc, #44]	; (404734 <pvPortMalloc+0x5c>)
  404706:	6815      	ldr	r5, [r2, #0]
  404708:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  40470a:	4b0b      	ldr	r3, [pc, #44]	; (404738 <pvPortMalloc+0x60>)
  40470c:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40470e:	4b0b      	ldr	r3, [pc, #44]	; (40473c <pvPortMalloc+0x64>)
  404710:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  404712:	b14d      	cbz	r5, 404728 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  404714:	4628      	mov	r0, r5
  404716:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  404718:	4b09      	ldr	r3, [pc, #36]	; (404740 <pvPortMalloc+0x68>)
  40471a:	f023 0307 	bic.w	r3, r3, #7
  40471e:	4a05      	ldr	r2, [pc, #20]	; (404734 <pvPortMalloc+0x5c>)
  404720:	6013      	str	r3, [r2, #0]
  404722:	e7e6      	b.n	4046f2 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  404724:	4b05      	ldr	r3, [pc, #20]	; (40473c <pvPortMalloc+0x64>)
  404726:	4798      	blx	r3
			vApplicationMallocFailedHook();
  404728:	4b06      	ldr	r3, [pc, #24]	; (404744 <pvPortMalloc+0x6c>)
  40472a:	4798      	blx	r3
  40472c:	2500      	movs	r5, #0
	return pvReturn;
  40472e:	e7f1      	b.n	404714 <pvPortMalloc+0x3c>
  404730:	004053b5 	.word	0x004053b5
  404734:	20400ac8 	.word	0x20400ac8
  404738:	2040c2cc 	.word	0x2040c2cc
  40473c:	0040551d 	.word	0x0040551d
  404740:	20400ad4 	.word	0x20400ad4
  404744:	00406a4f 	.word	0x00406a4f

00404748 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  404748:	b150      	cbz	r0, 404760 <vPortFree+0x18>
  40474a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40474e:	b672      	cpsid	i
  404750:	f383 8811 	msr	BASEPRI, r3
  404754:	f3bf 8f6f 	isb	sy
  404758:	f3bf 8f4f 	dsb	sy
  40475c:	b662      	cpsie	i
  40475e:	e7fe      	b.n	40475e <vPortFree+0x16>
  404760:	4770      	bx	lr
	...

00404764 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  404764:	b538      	push	{r3, r4, r5, lr}
  404766:	4604      	mov	r4, r0
  404768:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40476a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40476c:	b95a      	cbnz	r2, 404786 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40476e:	6803      	ldr	r3, [r0, #0]
  404770:	2b00      	cmp	r3, #0
  404772:	d12e      	bne.n	4047d2 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  404774:	6840      	ldr	r0, [r0, #4]
  404776:	4b1b      	ldr	r3, [pc, #108]	; (4047e4 <prvCopyDataToQueue+0x80>)
  404778:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40477a:	2300      	movs	r3, #0
  40477c:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40477e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404780:	3301      	adds	r3, #1
  404782:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  404784:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  404786:	b96d      	cbnz	r5, 4047a4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  404788:	6880      	ldr	r0, [r0, #8]
  40478a:	4b17      	ldr	r3, [pc, #92]	; (4047e8 <prvCopyDataToQueue+0x84>)
  40478c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40478e:	68a3      	ldr	r3, [r4, #8]
  404790:	6c22      	ldr	r2, [r4, #64]	; 0x40
  404792:	4413      	add	r3, r2
  404794:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  404796:	6862      	ldr	r2, [r4, #4]
  404798:	4293      	cmp	r3, r2
  40479a:	d31c      	bcc.n	4047d6 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40479c:	6823      	ldr	r3, [r4, #0]
  40479e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4047a0:	2000      	movs	r0, #0
  4047a2:	e7ec      	b.n	40477e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4047a4:	68c0      	ldr	r0, [r0, #12]
  4047a6:	4b10      	ldr	r3, [pc, #64]	; (4047e8 <prvCopyDataToQueue+0x84>)
  4047a8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4047aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4047ac:	425b      	negs	r3, r3
  4047ae:	68e2      	ldr	r2, [r4, #12]
  4047b0:	441a      	add	r2, r3
  4047b2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4047b4:	6821      	ldr	r1, [r4, #0]
  4047b6:	428a      	cmp	r2, r1
  4047b8:	d202      	bcs.n	4047c0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4047ba:	6862      	ldr	r2, [r4, #4]
  4047bc:	4413      	add	r3, r2
  4047be:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4047c0:	2d02      	cmp	r5, #2
  4047c2:	d10a      	bne.n	4047da <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4047c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4047c6:	b153      	cbz	r3, 4047de <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4047c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4047ca:	3b01      	subs	r3, #1
  4047cc:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4047ce:	2000      	movs	r0, #0
  4047d0:	e7d5      	b.n	40477e <prvCopyDataToQueue+0x1a>
  4047d2:	2000      	movs	r0, #0
  4047d4:	e7d3      	b.n	40477e <prvCopyDataToQueue+0x1a>
  4047d6:	2000      	movs	r0, #0
  4047d8:	e7d1      	b.n	40477e <prvCopyDataToQueue+0x1a>
  4047da:	2000      	movs	r0, #0
  4047dc:	e7cf      	b.n	40477e <prvCopyDataToQueue+0x1a>
  4047de:	2000      	movs	r0, #0
  4047e0:	e7cd      	b.n	40477e <prvCopyDataToQueue+0x1a>
  4047e2:	bf00      	nop
  4047e4:	00405b65 	.word	0x00405b65
  4047e8:	00406ca5 	.word	0x00406ca5

004047ec <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4047ec:	b530      	push	{r4, r5, lr}
  4047ee:	b083      	sub	sp, #12
  4047f0:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4047f2:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4047f4:	b174      	cbz	r4, 404814 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4047f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4047f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4047fa:	429a      	cmp	r2, r3
  4047fc:	d315      	bcc.n	40482a <prvNotifyQueueSetContainer+0x3e>
  4047fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  404802:	b672      	cpsid	i
  404804:	f383 8811 	msr	BASEPRI, r3
  404808:	f3bf 8f6f 	isb	sy
  40480c:	f3bf 8f4f 	dsb	sy
  404810:	b662      	cpsie	i
  404812:	e7fe      	b.n	404812 <prvNotifyQueueSetContainer+0x26>
  404814:	f04f 0380 	mov.w	r3, #128	; 0x80
  404818:	b672      	cpsid	i
  40481a:	f383 8811 	msr	BASEPRI, r3
  40481e:	f3bf 8f6f 	isb	sy
  404822:	f3bf 8f4f 	dsb	sy
  404826:	b662      	cpsie	i
  404828:	e7fe      	b.n	404828 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40482a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40482c:	4293      	cmp	r3, r2
  40482e:	d803      	bhi.n	404838 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  404830:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  404832:	4628      	mov	r0, r5
  404834:	b003      	add	sp, #12
  404836:	bd30      	pop	{r4, r5, pc}
  404838:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40483a:	a901      	add	r1, sp, #4
  40483c:	4620      	mov	r0, r4
  40483e:	4b0b      	ldr	r3, [pc, #44]	; (40486c <prvNotifyQueueSetContainer+0x80>)
  404840:	4798      	blx	r3
  404842:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  404844:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404846:	f1b3 3fff 	cmp.w	r3, #4294967295
  40484a:	d10a      	bne.n	404862 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40484c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40484e:	2b00      	cmp	r3, #0
  404850:	d0ef      	beq.n	404832 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  404852:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404856:	4b06      	ldr	r3, [pc, #24]	; (404870 <prvNotifyQueueSetContainer+0x84>)
  404858:	4798      	blx	r3
  40485a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40485c:	bf18      	it	ne
  40485e:	2501      	movne	r5, #1
  404860:	e7e7      	b.n	404832 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  404862:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404864:	3301      	adds	r3, #1
  404866:	64a3      	str	r3, [r4, #72]	; 0x48
  404868:	e7e3      	b.n	404832 <prvNotifyQueueSetContainer+0x46>
  40486a:	bf00      	nop
  40486c:	00404765 	.word	0x00404765
  404870:	00405939 	.word	0x00405939

00404874 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  404874:	6c02      	ldr	r2, [r0, #64]	; 0x40
  404876:	b172      	cbz	r2, 404896 <prvCopyDataFromQueue+0x22>
{
  404878:	b510      	push	{r4, lr}
  40487a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40487c:	68c4      	ldr	r4, [r0, #12]
  40487e:	4414      	add	r4, r2
  404880:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  404882:	6840      	ldr	r0, [r0, #4]
  404884:	4284      	cmp	r4, r0
  404886:	d301      	bcc.n	40488c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  404888:	6818      	ldr	r0, [r3, #0]
  40488a:	60d8      	str	r0, [r3, #12]
  40488c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40488e:	68d9      	ldr	r1, [r3, #12]
  404890:	4b01      	ldr	r3, [pc, #4]	; (404898 <prvCopyDataFromQueue+0x24>)
  404892:	4798      	blx	r3
  404894:	bd10      	pop	{r4, pc}
  404896:	4770      	bx	lr
  404898:	00406ca5 	.word	0x00406ca5

0040489c <prvUnlockQueue>:
{
  40489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40489e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4048a0:	4b22      	ldr	r3, [pc, #136]	; (40492c <prvUnlockQueue+0x90>)
  4048a2:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4048a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4048a6:	2b00      	cmp	r3, #0
  4048a8:	dd1b      	ble.n	4048e2 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4048aa:	4d21      	ldr	r5, [pc, #132]	; (404930 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4048ac:	4f21      	ldr	r7, [pc, #132]	; (404934 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4048ae:	4e22      	ldr	r6, [pc, #136]	; (404938 <prvUnlockQueue+0x9c>)
  4048b0:	e00b      	b.n	4048ca <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4048b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4048b4:	b1ab      	cbz	r3, 4048e2 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4048b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4048ba:	47b0      	blx	r6
  4048bc:	b978      	cbnz	r0, 4048de <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4048be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4048c0:	3b01      	subs	r3, #1
  4048c2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4048c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4048c6:	2b00      	cmp	r3, #0
  4048c8:	dd0b      	ble.n	4048e2 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4048ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4048cc:	2b00      	cmp	r3, #0
  4048ce:	d0f0      	beq.n	4048b2 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4048d0:	2100      	movs	r1, #0
  4048d2:	4620      	mov	r0, r4
  4048d4:	47a8      	blx	r5
  4048d6:	2801      	cmp	r0, #1
  4048d8:	d1f1      	bne.n	4048be <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4048da:	47b8      	blx	r7
  4048dc:	e7ef      	b.n	4048be <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4048de:	47b8      	blx	r7
  4048e0:	e7ed      	b.n	4048be <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4048e2:	f04f 33ff 	mov.w	r3, #4294967295
  4048e6:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4048e8:	4b14      	ldr	r3, [pc, #80]	; (40493c <prvUnlockQueue+0xa0>)
  4048ea:	4798      	blx	r3
	taskENTER_CRITICAL();
  4048ec:	4b0f      	ldr	r3, [pc, #60]	; (40492c <prvUnlockQueue+0x90>)
  4048ee:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4048f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4048f2:	2b00      	cmp	r3, #0
  4048f4:	dd14      	ble.n	404920 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4048f6:	6923      	ldr	r3, [r4, #16]
  4048f8:	b193      	cbz	r3, 404920 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4048fa:	f104 0610 	add.w	r6, r4, #16
  4048fe:	4d0e      	ldr	r5, [pc, #56]	; (404938 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  404900:	4f0c      	ldr	r7, [pc, #48]	; (404934 <prvUnlockQueue+0x98>)
  404902:	e007      	b.n	404914 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  404904:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404906:	3b01      	subs	r3, #1
  404908:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40490a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40490c:	2b00      	cmp	r3, #0
  40490e:	dd07      	ble.n	404920 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  404910:	6923      	ldr	r3, [r4, #16]
  404912:	b12b      	cbz	r3, 404920 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  404914:	4630      	mov	r0, r6
  404916:	47a8      	blx	r5
  404918:	2800      	cmp	r0, #0
  40491a:	d0f3      	beq.n	404904 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  40491c:	47b8      	blx	r7
  40491e:	e7f1      	b.n	404904 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  404920:	f04f 33ff 	mov.w	r3, #4294967295
  404924:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  404926:	4b05      	ldr	r3, [pc, #20]	; (40493c <prvUnlockQueue+0xa0>)
  404928:	4798      	blx	r3
  40492a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40492c:	0040447d 	.word	0x0040447d
  404930:	004047ed 	.word	0x004047ed
  404934:	00405a95 	.word	0x00405a95
  404938:	00405939 	.word	0x00405939
  40493c:	004044c9 	.word	0x004044c9

00404940 <xQueueGenericReset>:
{
  404940:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  404942:	b308      	cbz	r0, 404988 <xQueueGenericReset+0x48>
  404944:	4604      	mov	r4, r0
  404946:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  404948:	4b1d      	ldr	r3, [pc, #116]	; (4049c0 <xQueueGenericReset+0x80>)
  40494a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40494c:	6822      	ldr	r2, [r4, #0]
  40494e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  404950:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404952:	fb03 f301 	mul.w	r3, r3, r1
  404956:	18d0      	adds	r0, r2, r3
  404958:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40495a:	2000      	movs	r0, #0
  40495c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40495e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  404960:	1a5b      	subs	r3, r3, r1
  404962:	4413      	add	r3, r2
  404964:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  404966:	f04f 33ff 	mov.w	r3, #4294967295
  40496a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  40496c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  40496e:	b9fd      	cbnz	r5, 4049b0 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  404970:	6923      	ldr	r3, [r4, #16]
  404972:	b12b      	cbz	r3, 404980 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  404974:	f104 0010 	add.w	r0, r4, #16
  404978:	4b12      	ldr	r3, [pc, #72]	; (4049c4 <xQueueGenericReset+0x84>)
  40497a:	4798      	blx	r3
  40497c:	2801      	cmp	r0, #1
  40497e:	d00e      	beq.n	40499e <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  404980:	4b11      	ldr	r3, [pc, #68]	; (4049c8 <xQueueGenericReset+0x88>)
  404982:	4798      	blx	r3
}
  404984:	2001      	movs	r0, #1
  404986:	bd38      	pop	{r3, r4, r5, pc}
  404988:	f04f 0380 	mov.w	r3, #128	; 0x80
  40498c:	b672      	cpsid	i
  40498e:	f383 8811 	msr	BASEPRI, r3
  404992:	f3bf 8f6f 	isb	sy
  404996:	f3bf 8f4f 	dsb	sy
  40499a:	b662      	cpsie	i
  40499c:	e7fe      	b.n	40499c <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  40499e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4049a2:	4b0a      	ldr	r3, [pc, #40]	; (4049cc <xQueueGenericReset+0x8c>)
  4049a4:	601a      	str	r2, [r3, #0]
  4049a6:	f3bf 8f4f 	dsb	sy
  4049aa:	f3bf 8f6f 	isb	sy
  4049ae:	e7e7      	b.n	404980 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4049b0:	f104 0010 	add.w	r0, r4, #16
  4049b4:	4d06      	ldr	r5, [pc, #24]	; (4049d0 <xQueueGenericReset+0x90>)
  4049b6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4049b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4049bc:	47a8      	blx	r5
  4049be:	e7df      	b.n	404980 <xQueueGenericReset+0x40>
  4049c0:	0040447d 	.word	0x0040447d
  4049c4:	00405939 	.word	0x00405939
  4049c8:	004044c9 	.word	0x004044c9
  4049cc:	e000ed04 	.word	0xe000ed04
  4049d0:	00404331 	.word	0x00404331

004049d4 <xQueueGenericCreate>:
{
  4049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4049d6:	b950      	cbnz	r0, 4049ee <xQueueGenericCreate+0x1a>
  4049d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4049dc:	b672      	cpsid	i
  4049de:	f383 8811 	msr	BASEPRI, r3
  4049e2:	f3bf 8f6f 	isb	sy
  4049e6:	f3bf 8f4f 	dsb	sy
  4049ea:	b662      	cpsie	i
  4049ec:	e7fe      	b.n	4049ec <xQueueGenericCreate+0x18>
  4049ee:	4606      	mov	r6, r0
  4049f0:	4617      	mov	r7, r2
  4049f2:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4049f4:	b189      	cbz	r1, 404a1a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4049f6:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4049fa:	3059      	adds	r0, #89	; 0x59
  4049fc:	4b12      	ldr	r3, [pc, #72]	; (404a48 <xQueueGenericCreate+0x74>)
  4049fe:	4798      	blx	r3
	if( pxNewQueue != NULL )
  404a00:	4604      	mov	r4, r0
  404a02:	b9e8      	cbnz	r0, 404a40 <xQueueGenericCreate+0x6c>
  404a04:	f04f 0380 	mov.w	r3, #128	; 0x80
  404a08:	b672      	cpsid	i
  404a0a:	f383 8811 	msr	BASEPRI, r3
  404a0e:	f3bf 8f6f 	isb	sy
  404a12:	f3bf 8f4f 	dsb	sy
  404a16:	b662      	cpsie	i
  404a18:	e7fe      	b.n	404a18 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  404a1a:	2058      	movs	r0, #88	; 0x58
  404a1c:	4b0a      	ldr	r3, [pc, #40]	; (404a48 <xQueueGenericCreate+0x74>)
  404a1e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  404a20:	4604      	mov	r4, r0
  404a22:	2800      	cmp	r0, #0
  404a24:	d0ee      	beq.n	404a04 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  404a26:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  404a28:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  404a2a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  404a2c:	2101      	movs	r1, #1
  404a2e:	4620      	mov	r0, r4
  404a30:	4b06      	ldr	r3, [pc, #24]	; (404a4c <xQueueGenericCreate+0x78>)
  404a32:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  404a34:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  404a38:	2300      	movs	r3, #0
  404a3a:	6563      	str	r3, [r4, #84]	; 0x54
}
  404a3c:	4620      	mov	r0, r4
  404a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  404a40:	f100 0358 	add.w	r3, r0, #88	; 0x58
  404a44:	6003      	str	r3, [r0, #0]
  404a46:	e7ef      	b.n	404a28 <xQueueGenericCreate+0x54>
  404a48:	004046d9 	.word	0x004046d9
  404a4c:	00404941 	.word	0x00404941

00404a50 <xQueueGenericSend>:
{
  404a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a54:	b085      	sub	sp, #20
  404a56:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  404a58:	b1b8      	cbz	r0, 404a8a <xQueueGenericSend+0x3a>
  404a5a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  404a5c:	b301      	cbz	r1, 404aa0 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  404a5e:	2b02      	cmp	r3, #2
  404a60:	d02c      	beq.n	404abc <xQueueGenericSend+0x6c>
  404a62:	461d      	mov	r5, r3
  404a64:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  404a66:	4b66      	ldr	r3, [pc, #408]	; (404c00 <xQueueGenericSend+0x1b0>)
  404a68:	4798      	blx	r3
  404a6a:	2800      	cmp	r0, #0
  404a6c:	d134      	bne.n	404ad8 <xQueueGenericSend+0x88>
  404a6e:	9b01      	ldr	r3, [sp, #4]
  404a70:	2b00      	cmp	r3, #0
  404a72:	d038      	beq.n	404ae6 <xQueueGenericSend+0x96>
  404a74:	f04f 0380 	mov.w	r3, #128	; 0x80
  404a78:	b672      	cpsid	i
  404a7a:	f383 8811 	msr	BASEPRI, r3
  404a7e:	f3bf 8f6f 	isb	sy
  404a82:	f3bf 8f4f 	dsb	sy
  404a86:	b662      	cpsie	i
  404a88:	e7fe      	b.n	404a88 <xQueueGenericSend+0x38>
  404a8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  404a8e:	b672      	cpsid	i
  404a90:	f383 8811 	msr	BASEPRI, r3
  404a94:	f3bf 8f6f 	isb	sy
  404a98:	f3bf 8f4f 	dsb	sy
  404a9c:	b662      	cpsie	i
  404a9e:	e7fe      	b.n	404a9e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  404aa0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  404aa2:	2a00      	cmp	r2, #0
  404aa4:	d0db      	beq.n	404a5e <xQueueGenericSend+0xe>
  404aa6:	f04f 0380 	mov.w	r3, #128	; 0x80
  404aaa:	b672      	cpsid	i
  404aac:	f383 8811 	msr	BASEPRI, r3
  404ab0:	f3bf 8f6f 	isb	sy
  404ab4:	f3bf 8f4f 	dsb	sy
  404ab8:	b662      	cpsie	i
  404aba:	e7fe      	b.n	404aba <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  404abc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  404abe:	2a01      	cmp	r2, #1
  404ac0:	d0cf      	beq.n	404a62 <xQueueGenericSend+0x12>
  404ac2:	f04f 0380 	mov.w	r3, #128	; 0x80
  404ac6:	b672      	cpsid	i
  404ac8:	f383 8811 	msr	BASEPRI, r3
  404acc:	f3bf 8f6f 	isb	sy
  404ad0:	f3bf 8f4f 	dsb	sy
  404ad4:	b662      	cpsie	i
  404ad6:	e7fe      	b.n	404ad6 <xQueueGenericSend+0x86>
  404ad8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  404ada:	4e4a      	ldr	r6, [pc, #296]	; (404c04 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  404adc:	f8df a150 	ldr.w	sl, [pc, #336]	; 404c30 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  404ae0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 404c10 <xQueueGenericSend+0x1c0>
  404ae4:	e042      	b.n	404b6c <xQueueGenericSend+0x11c>
  404ae6:	2700      	movs	r7, #0
  404ae8:	e7f7      	b.n	404ada <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  404aea:	462a      	mov	r2, r5
  404aec:	4641      	mov	r1, r8
  404aee:	4620      	mov	r0, r4
  404af0:	4b45      	ldr	r3, [pc, #276]	; (404c08 <xQueueGenericSend+0x1b8>)
  404af2:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  404af4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  404af6:	b19b      	cbz	r3, 404b20 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  404af8:	4629      	mov	r1, r5
  404afa:	4620      	mov	r0, r4
  404afc:	4b43      	ldr	r3, [pc, #268]	; (404c0c <xQueueGenericSend+0x1bc>)
  404afe:	4798      	blx	r3
  404b00:	2801      	cmp	r0, #1
  404b02:	d107      	bne.n	404b14 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  404b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404b08:	4b41      	ldr	r3, [pc, #260]	; (404c10 <xQueueGenericSend+0x1c0>)
  404b0a:	601a      	str	r2, [r3, #0]
  404b0c:	f3bf 8f4f 	dsb	sy
  404b10:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  404b14:	4b3f      	ldr	r3, [pc, #252]	; (404c14 <xQueueGenericSend+0x1c4>)
  404b16:	4798      	blx	r3
				return pdPASS;
  404b18:	2001      	movs	r0, #1
}
  404b1a:	b005      	add	sp, #20
  404b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  404b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404b22:	b173      	cbz	r3, 404b42 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  404b24:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404b28:	4b3b      	ldr	r3, [pc, #236]	; (404c18 <xQueueGenericSend+0x1c8>)
  404b2a:	4798      	blx	r3
  404b2c:	2801      	cmp	r0, #1
  404b2e:	d1f1      	bne.n	404b14 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  404b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404b34:	4b36      	ldr	r3, [pc, #216]	; (404c10 <xQueueGenericSend+0x1c0>)
  404b36:	601a      	str	r2, [r3, #0]
  404b38:	f3bf 8f4f 	dsb	sy
  404b3c:	f3bf 8f6f 	isb	sy
  404b40:	e7e8      	b.n	404b14 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  404b42:	2800      	cmp	r0, #0
  404b44:	d0e6      	beq.n	404b14 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  404b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404b4a:	4b31      	ldr	r3, [pc, #196]	; (404c10 <xQueueGenericSend+0x1c0>)
  404b4c:	601a      	str	r2, [r3, #0]
  404b4e:	f3bf 8f4f 	dsb	sy
  404b52:	f3bf 8f6f 	isb	sy
  404b56:	e7dd      	b.n	404b14 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  404b58:	4b2e      	ldr	r3, [pc, #184]	; (404c14 <xQueueGenericSend+0x1c4>)
  404b5a:	4798      	blx	r3
					return errQUEUE_FULL;
  404b5c:	2000      	movs	r0, #0
  404b5e:	e7dc      	b.n	404b1a <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  404b60:	4620      	mov	r0, r4
  404b62:	4b2e      	ldr	r3, [pc, #184]	; (404c1c <xQueueGenericSend+0x1cc>)
  404b64:	4798      	blx	r3
				( void ) xTaskResumeAll();
  404b66:	4b2e      	ldr	r3, [pc, #184]	; (404c20 <xQueueGenericSend+0x1d0>)
  404b68:	4798      	blx	r3
  404b6a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  404b6c:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  404b6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404b70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404b72:	429a      	cmp	r2, r3
  404b74:	d3b9      	bcc.n	404aea <xQueueGenericSend+0x9a>
  404b76:	2d02      	cmp	r5, #2
  404b78:	d0b7      	beq.n	404aea <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  404b7a:	9b01      	ldr	r3, [sp, #4]
  404b7c:	2b00      	cmp	r3, #0
  404b7e:	d0eb      	beq.n	404b58 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  404b80:	b90f      	cbnz	r7, 404b86 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  404b82:	a802      	add	r0, sp, #8
  404b84:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  404b86:	4b23      	ldr	r3, [pc, #140]	; (404c14 <xQueueGenericSend+0x1c4>)
  404b88:	4798      	blx	r3
		vTaskSuspendAll();
  404b8a:	4b26      	ldr	r3, [pc, #152]	; (404c24 <xQueueGenericSend+0x1d4>)
  404b8c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  404b8e:	47b0      	blx	r6
  404b90:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404b92:	f1b3 3fff 	cmp.w	r3, #4294967295
  404b96:	d101      	bne.n	404b9c <xQueueGenericSend+0x14c>
  404b98:	2300      	movs	r3, #0
  404b9a:	6463      	str	r3, [r4, #68]	; 0x44
  404b9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
  404ba2:	d101      	bne.n	404ba8 <xQueueGenericSend+0x158>
  404ba4:	2300      	movs	r3, #0
  404ba6:	64a3      	str	r3, [r4, #72]	; 0x48
  404ba8:	4b1a      	ldr	r3, [pc, #104]	; (404c14 <xQueueGenericSend+0x1c4>)
  404baa:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  404bac:	a901      	add	r1, sp, #4
  404bae:	a802      	add	r0, sp, #8
  404bb0:	4b1d      	ldr	r3, [pc, #116]	; (404c28 <xQueueGenericSend+0x1d8>)
  404bb2:	4798      	blx	r3
  404bb4:	b9e0      	cbnz	r0, 404bf0 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  404bb6:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  404bb8:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  404bbc:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  404bbe:	4b15      	ldr	r3, [pc, #84]	; (404c14 <xQueueGenericSend+0x1c4>)
  404bc0:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  404bc2:	45bb      	cmp	fp, r7
  404bc4:	d1cc      	bne.n	404b60 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  404bc6:	9901      	ldr	r1, [sp, #4]
  404bc8:	f104 0010 	add.w	r0, r4, #16
  404bcc:	4b17      	ldr	r3, [pc, #92]	; (404c2c <xQueueGenericSend+0x1dc>)
  404bce:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  404bd0:	4620      	mov	r0, r4
  404bd2:	4b12      	ldr	r3, [pc, #72]	; (404c1c <xQueueGenericSend+0x1cc>)
  404bd4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  404bd6:	4b12      	ldr	r3, [pc, #72]	; (404c20 <xQueueGenericSend+0x1d0>)
  404bd8:	4798      	blx	r3
  404bda:	2800      	cmp	r0, #0
  404bdc:	d1c5      	bne.n	404b6a <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  404bde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  404be2:	f8c9 3000 	str.w	r3, [r9]
  404be6:	f3bf 8f4f 	dsb	sy
  404bea:	f3bf 8f6f 	isb	sy
  404bee:	e7bc      	b.n	404b6a <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  404bf0:	4620      	mov	r0, r4
  404bf2:	4b0a      	ldr	r3, [pc, #40]	; (404c1c <xQueueGenericSend+0x1cc>)
  404bf4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  404bf6:	4b0a      	ldr	r3, [pc, #40]	; (404c20 <xQueueGenericSend+0x1d0>)
  404bf8:	4798      	blx	r3
			return errQUEUE_FULL;
  404bfa:	2000      	movs	r0, #0
  404bfc:	e78d      	b.n	404b1a <xQueueGenericSend+0xca>
  404bfe:	bf00      	nop
  404c00:	00405aa1 	.word	0x00405aa1
  404c04:	0040447d 	.word	0x0040447d
  404c08:	00404765 	.word	0x00404765
  404c0c:	004047ed 	.word	0x004047ed
  404c10:	e000ed04 	.word	0xe000ed04
  404c14:	004044c9 	.word	0x004044c9
  404c18:	00405939 	.word	0x00405939
  404c1c:	0040489d 	.word	0x0040489d
  404c20:	0040551d 	.word	0x0040551d
  404c24:	004053b5 	.word	0x004053b5
  404c28:	00405a01 	.word	0x00405a01
  404c2c:	00405835 	.word	0x00405835
  404c30:	004059d1 	.word	0x004059d1

00404c34 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  404c34:	2800      	cmp	r0, #0
  404c36:	d036      	beq.n	404ca6 <xQueueGenericSendFromISR+0x72>
{
  404c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404c3c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  404c3e:	2900      	cmp	r1, #0
  404c40:	d03c      	beq.n	404cbc <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  404c42:	2b02      	cmp	r3, #2
  404c44:	d048      	beq.n	404cd8 <xQueueGenericSendFromISR+0xa4>
  404c46:	461e      	mov	r6, r3
  404c48:	4615      	mov	r5, r2
  404c4a:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  404c4c:	4b35      	ldr	r3, [pc, #212]	; (404d24 <xQueueGenericSendFromISR+0xf0>)
  404c4e:	4798      	blx	r3
	__asm volatile
  404c50:	f3ef 8711 	mrs	r7, BASEPRI
  404c54:	f04f 0380 	mov.w	r3, #128	; 0x80
  404c58:	b672      	cpsid	i
  404c5a:	f383 8811 	msr	BASEPRI, r3
  404c5e:	f3bf 8f6f 	isb	sy
  404c62:	f3bf 8f4f 	dsb	sy
  404c66:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  404c68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404c6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404c6c:	429a      	cmp	r2, r3
  404c6e:	d301      	bcc.n	404c74 <xQueueGenericSendFromISR+0x40>
  404c70:	2e02      	cmp	r6, #2
  404c72:	d14f      	bne.n	404d14 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  404c74:	4632      	mov	r2, r6
  404c76:	4641      	mov	r1, r8
  404c78:	4620      	mov	r0, r4
  404c7a:	4b2b      	ldr	r3, [pc, #172]	; (404d28 <xQueueGenericSendFromISR+0xf4>)
  404c7c:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  404c7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404c80:	f1b3 3fff 	cmp.w	r3, #4294967295
  404c84:	d141      	bne.n	404d0a <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  404c86:	6d63      	ldr	r3, [r4, #84]	; 0x54
  404c88:	2b00      	cmp	r3, #0
  404c8a:	d033      	beq.n	404cf4 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  404c8c:	4631      	mov	r1, r6
  404c8e:	4620      	mov	r0, r4
  404c90:	4b26      	ldr	r3, [pc, #152]	; (404d2c <xQueueGenericSendFromISR+0xf8>)
  404c92:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  404c94:	2d00      	cmp	r5, #0
  404c96:	d03f      	beq.n	404d18 <xQueueGenericSendFromISR+0xe4>
  404c98:	2801      	cmp	r0, #1
  404c9a:	d13d      	bne.n	404d18 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  404c9c:	6028      	str	r0, [r5, #0]
	__asm volatile
  404c9e:	f387 8811 	msr	BASEPRI, r7
}
  404ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  404ca6:	f04f 0380 	mov.w	r3, #128	; 0x80
  404caa:	b672      	cpsid	i
  404cac:	f383 8811 	msr	BASEPRI, r3
  404cb0:	f3bf 8f6f 	isb	sy
  404cb4:	f3bf 8f4f 	dsb	sy
  404cb8:	b662      	cpsie	i
  404cba:	e7fe      	b.n	404cba <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  404cbc:	6c00      	ldr	r0, [r0, #64]	; 0x40
  404cbe:	2800      	cmp	r0, #0
  404cc0:	d0bf      	beq.n	404c42 <xQueueGenericSendFromISR+0xe>
  404cc2:	f04f 0380 	mov.w	r3, #128	; 0x80
  404cc6:	b672      	cpsid	i
  404cc8:	f383 8811 	msr	BASEPRI, r3
  404ccc:	f3bf 8f6f 	isb	sy
  404cd0:	f3bf 8f4f 	dsb	sy
  404cd4:	b662      	cpsie	i
  404cd6:	e7fe      	b.n	404cd6 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  404cd8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  404cda:	2801      	cmp	r0, #1
  404cdc:	d0b3      	beq.n	404c46 <xQueueGenericSendFromISR+0x12>
  404cde:	f04f 0380 	mov.w	r3, #128	; 0x80
  404ce2:	b672      	cpsid	i
  404ce4:	f383 8811 	msr	BASEPRI, r3
  404ce8:	f3bf 8f6f 	isb	sy
  404cec:	f3bf 8f4f 	dsb	sy
  404cf0:	b662      	cpsie	i
  404cf2:	e7fe      	b.n	404cf2 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  404cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404cf6:	b18b      	cbz	r3, 404d1c <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  404cf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404cfc:	4b0c      	ldr	r3, [pc, #48]	; (404d30 <xQueueGenericSendFromISR+0xfc>)
  404cfe:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  404d00:	b175      	cbz	r5, 404d20 <xQueueGenericSendFromISR+0xec>
  404d02:	b168      	cbz	r0, 404d20 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  404d04:	2001      	movs	r0, #1
  404d06:	6028      	str	r0, [r5, #0]
  404d08:	e7c9      	b.n	404c9e <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  404d0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404d0c:	3301      	adds	r3, #1
  404d0e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  404d10:	2001      	movs	r0, #1
  404d12:	e7c4      	b.n	404c9e <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  404d14:	2000      	movs	r0, #0
  404d16:	e7c2      	b.n	404c9e <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  404d18:	2001      	movs	r0, #1
  404d1a:	e7c0      	b.n	404c9e <xQueueGenericSendFromISR+0x6a>
  404d1c:	2001      	movs	r0, #1
  404d1e:	e7be      	b.n	404c9e <xQueueGenericSendFromISR+0x6a>
  404d20:	2001      	movs	r0, #1
  404d22:	e7bc      	b.n	404c9e <xQueueGenericSendFromISR+0x6a>
  404d24:	00404675 	.word	0x00404675
  404d28:	00404765 	.word	0x00404765
  404d2c:	004047ed 	.word	0x004047ed
  404d30:	00405939 	.word	0x00405939

00404d34 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  404d34:	b170      	cbz	r0, 404d54 <xQueueGiveFromISR+0x20>
{
  404d36:	b570      	push	{r4, r5, r6, lr}
  404d38:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  404d3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404d3c:	b1ab      	cbz	r3, 404d6a <xQueueGiveFromISR+0x36>
  404d3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d42:	b672      	cpsid	i
  404d44:	f383 8811 	msr	BASEPRI, r3
  404d48:	f3bf 8f6f 	isb	sy
  404d4c:	f3bf 8f4f 	dsb	sy
  404d50:	b662      	cpsie	i
  404d52:	e7fe      	b.n	404d52 <xQueueGiveFromISR+0x1e>
  404d54:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d58:	b672      	cpsid	i
  404d5a:	f383 8811 	msr	BASEPRI, r3
  404d5e:	f3bf 8f6f 	isb	sy
  404d62:	f3bf 8f4f 	dsb	sy
  404d66:	b662      	cpsie	i
  404d68:	e7fe      	b.n	404d68 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  404d6a:	6803      	ldr	r3, [r0, #0]
  404d6c:	b333      	cbz	r3, 404dbc <xQueueGiveFromISR+0x88>
  404d6e:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  404d70:	4b25      	ldr	r3, [pc, #148]	; (404e08 <xQueueGiveFromISR+0xd4>)
  404d72:	4798      	blx	r3
	__asm volatile
  404d74:	f3ef 8611 	mrs	r6, BASEPRI
  404d78:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d7c:	b672      	cpsid	i
  404d7e:	f383 8811 	msr	BASEPRI, r3
  404d82:	f3bf 8f6f 	isb	sy
  404d86:	f3bf 8f4f 	dsb	sy
  404d8a:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  404d8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404d8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404d90:	429a      	cmp	r2, r3
  404d92:	d231      	bcs.n	404df8 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  404d94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404d96:	3301      	adds	r3, #1
  404d98:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  404d9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
  404da0:	d125      	bne.n	404dee <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  404da2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  404da4:	b1c3      	cbz	r3, 404dd8 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  404da6:	2100      	movs	r1, #0
  404da8:	4620      	mov	r0, r4
  404daa:	4b18      	ldr	r3, [pc, #96]	; (404e0c <xQueueGiveFromISR+0xd8>)
  404dac:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  404dae:	b32d      	cbz	r5, 404dfc <xQueueGiveFromISR+0xc8>
  404db0:	2801      	cmp	r0, #1
  404db2:	d123      	bne.n	404dfc <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  404db4:	6028      	str	r0, [r5, #0]
	__asm volatile
  404db6:	f386 8811 	msr	BASEPRI, r6
}
  404dba:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  404dbc:	6843      	ldr	r3, [r0, #4]
  404dbe:	2b00      	cmp	r3, #0
  404dc0:	d0d5      	beq.n	404d6e <xQueueGiveFromISR+0x3a>
	__asm volatile
  404dc2:	f04f 0380 	mov.w	r3, #128	; 0x80
  404dc6:	b672      	cpsid	i
  404dc8:	f383 8811 	msr	BASEPRI, r3
  404dcc:	f3bf 8f6f 	isb	sy
  404dd0:	f3bf 8f4f 	dsb	sy
  404dd4:	b662      	cpsie	i
  404dd6:	e7fe      	b.n	404dd6 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  404dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404dda:	b18b      	cbz	r3, 404e00 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  404ddc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404de0:	4b0b      	ldr	r3, [pc, #44]	; (404e10 <xQueueGiveFromISR+0xdc>)
  404de2:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  404de4:	b175      	cbz	r5, 404e04 <xQueueGiveFromISR+0xd0>
  404de6:	b168      	cbz	r0, 404e04 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  404de8:	2001      	movs	r0, #1
  404dea:	6028      	str	r0, [r5, #0]
  404dec:	e7e3      	b.n	404db6 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  404dee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404df0:	3301      	adds	r3, #1
  404df2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  404df4:	2001      	movs	r0, #1
  404df6:	e7de      	b.n	404db6 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  404df8:	2000      	movs	r0, #0
  404dfa:	e7dc      	b.n	404db6 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  404dfc:	2001      	movs	r0, #1
  404dfe:	e7da      	b.n	404db6 <xQueueGiveFromISR+0x82>
  404e00:	2001      	movs	r0, #1
  404e02:	e7d8      	b.n	404db6 <xQueueGiveFromISR+0x82>
  404e04:	2001      	movs	r0, #1
  404e06:	e7d6      	b.n	404db6 <xQueueGiveFromISR+0x82>
  404e08:	00404675 	.word	0x00404675
  404e0c:	004047ed 	.word	0x004047ed
  404e10:	00405939 	.word	0x00405939

00404e14 <xQueueGenericReceive>:
{
  404e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404e18:	b084      	sub	sp, #16
  404e1a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  404e1c:	b198      	cbz	r0, 404e46 <xQueueGenericReceive+0x32>
  404e1e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  404e20:	b1e1      	cbz	r1, 404e5c <xQueueGenericReceive+0x48>
  404e22:	4698      	mov	r8, r3
  404e24:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  404e26:	4b61      	ldr	r3, [pc, #388]	; (404fac <xQueueGenericReceive+0x198>)
  404e28:	4798      	blx	r3
  404e2a:	bb28      	cbnz	r0, 404e78 <xQueueGenericReceive+0x64>
  404e2c:	9b01      	ldr	r3, [sp, #4]
  404e2e:	b353      	cbz	r3, 404e86 <xQueueGenericReceive+0x72>
  404e30:	f04f 0380 	mov.w	r3, #128	; 0x80
  404e34:	b672      	cpsid	i
  404e36:	f383 8811 	msr	BASEPRI, r3
  404e3a:	f3bf 8f6f 	isb	sy
  404e3e:	f3bf 8f4f 	dsb	sy
  404e42:	b662      	cpsie	i
  404e44:	e7fe      	b.n	404e44 <xQueueGenericReceive+0x30>
  404e46:	f04f 0380 	mov.w	r3, #128	; 0x80
  404e4a:	b672      	cpsid	i
  404e4c:	f383 8811 	msr	BASEPRI, r3
  404e50:	f3bf 8f6f 	isb	sy
  404e54:	f3bf 8f4f 	dsb	sy
  404e58:	b662      	cpsie	i
  404e5a:	e7fe      	b.n	404e5a <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  404e5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  404e5e:	2a00      	cmp	r2, #0
  404e60:	d0df      	beq.n	404e22 <xQueueGenericReceive+0xe>
  404e62:	f04f 0380 	mov.w	r3, #128	; 0x80
  404e66:	b672      	cpsid	i
  404e68:	f383 8811 	msr	BASEPRI, r3
  404e6c:	f3bf 8f6f 	isb	sy
  404e70:	f3bf 8f4f 	dsb	sy
  404e74:	b662      	cpsie	i
  404e76:	e7fe      	b.n	404e76 <xQueueGenericReceive+0x62>
  404e78:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  404e7a:	4d4d      	ldr	r5, [pc, #308]	; (404fb0 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  404e7c:	f8df a160 	ldr.w	sl, [pc, #352]	; 404fe0 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  404e80:	f8df 913c 	ldr.w	r9, [pc, #316]	; 404fc0 <xQueueGenericReceive+0x1ac>
  404e84:	e04b      	b.n	404f1e <xQueueGenericReceive+0x10a>
  404e86:	2600      	movs	r6, #0
  404e88:	e7f7      	b.n	404e7a <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  404e8a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  404e8c:	4639      	mov	r1, r7
  404e8e:	4620      	mov	r0, r4
  404e90:	4b48      	ldr	r3, [pc, #288]	; (404fb4 <xQueueGenericReceive+0x1a0>)
  404e92:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  404e94:	f1b8 0f00 	cmp.w	r8, #0
  404e98:	d11d      	bne.n	404ed6 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  404e9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404e9c:	3b01      	subs	r3, #1
  404e9e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  404ea0:	6823      	ldr	r3, [r4, #0]
  404ea2:	b913      	cbnz	r3, 404eaa <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  404ea4:	4b44      	ldr	r3, [pc, #272]	; (404fb8 <xQueueGenericReceive+0x1a4>)
  404ea6:	4798      	blx	r3
  404ea8:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  404eaa:	6923      	ldr	r3, [r4, #16]
  404eac:	b16b      	cbz	r3, 404eca <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  404eae:	f104 0010 	add.w	r0, r4, #16
  404eb2:	4b42      	ldr	r3, [pc, #264]	; (404fbc <xQueueGenericReceive+0x1a8>)
  404eb4:	4798      	blx	r3
  404eb6:	2801      	cmp	r0, #1
  404eb8:	d107      	bne.n	404eca <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  404eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404ebe:	4b40      	ldr	r3, [pc, #256]	; (404fc0 <xQueueGenericReceive+0x1ac>)
  404ec0:	601a      	str	r2, [r3, #0]
  404ec2:	f3bf 8f4f 	dsb	sy
  404ec6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  404eca:	4b3e      	ldr	r3, [pc, #248]	; (404fc4 <xQueueGenericReceive+0x1b0>)
  404ecc:	4798      	blx	r3
				return pdPASS;
  404ece:	2001      	movs	r0, #1
}
  404ed0:	b004      	add	sp, #16
  404ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  404ed6:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  404ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404eda:	2b00      	cmp	r3, #0
  404edc:	d0f5      	beq.n	404eca <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  404ede:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404ee2:	4b36      	ldr	r3, [pc, #216]	; (404fbc <xQueueGenericReceive+0x1a8>)
  404ee4:	4798      	blx	r3
  404ee6:	2800      	cmp	r0, #0
  404ee8:	d0ef      	beq.n	404eca <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  404eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404eee:	4b34      	ldr	r3, [pc, #208]	; (404fc0 <xQueueGenericReceive+0x1ac>)
  404ef0:	601a      	str	r2, [r3, #0]
  404ef2:	f3bf 8f4f 	dsb	sy
  404ef6:	f3bf 8f6f 	isb	sy
  404efa:	e7e6      	b.n	404eca <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  404efc:	4b31      	ldr	r3, [pc, #196]	; (404fc4 <xQueueGenericReceive+0x1b0>)
  404efe:	4798      	blx	r3
					return errQUEUE_EMPTY;
  404f00:	2000      	movs	r0, #0
  404f02:	e7e5      	b.n	404ed0 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  404f04:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  404f06:	6860      	ldr	r0, [r4, #4]
  404f08:	4b2f      	ldr	r3, [pc, #188]	; (404fc8 <xQueueGenericReceive+0x1b4>)
  404f0a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  404f0c:	4b2d      	ldr	r3, [pc, #180]	; (404fc4 <xQueueGenericReceive+0x1b0>)
  404f0e:	4798      	blx	r3
  404f10:	e030      	b.n	404f74 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  404f12:	4620      	mov	r0, r4
  404f14:	4b2d      	ldr	r3, [pc, #180]	; (404fcc <xQueueGenericReceive+0x1b8>)
  404f16:	4798      	blx	r3
				( void ) xTaskResumeAll();
  404f18:	4b2d      	ldr	r3, [pc, #180]	; (404fd0 <xQueueGenericReceive+0x1bc>)
  404f1a:	4798      	blx	r3
  404f1c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  404f1e:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  404f20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404f22:	2b00      	cmp	r3, #0
  404f24:	d1b1      	bne.n	404e8a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  404f26:	9b01      	ldr	r3, [sp, #4]
  404f28:	2b00      	cmp	r3, #0
  404f2a:	d0e7      	beq.n	404efc <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  404f2c:	b90e      	cbnz	r6, 404f32 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  404f2e:	a802      	add	r0, sp, #8
  404f30:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  404f32:	4b24      	ldr	r3, [pc, #144]	; (404fc4 <xQueueGenericReceive+0x1b0>)
  404f34:	4798      	blx	r3
		vTaskSuspendAll();
  404f36:	4b27      	ldr	r3, [pc, #156]	; (404fd4 <xQueueGenericReceive+0x1c0>)
  404f38:	4798      	blx	r3
		prvLockQueue( pxQueue );
  404f3a:	47a8      	blx	r5
  404f3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  404f42:	d101      	bne.n	404f48 <xQueueGenericReceive+0x134>
  404f44:	2300      	movs	r3, #0
  404f46:	6463      	str	r3, [r4, #68]	; 0x44
  404f48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
  404f4e:	d101      	bne.n	404f54 <xQueueGenericReceive+0x140>
  404f50:	2300      	movs	r3, #0
  404f52:	64a3      	str	r3, [r4, #72]	; 0x48
  404f54:	4b1b      	ldr	r3, [pc, #108]	; (404fc4 <xQueueGenericReceive+0x1b0>)
  404f56:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  404f58:	a901      	add	r1, sp, #4
  404f5a:	a802      	add	r0, sp, #8
  404f5c:	4b1e      	ldr	r3, [pc, #120]	; (404fd8 <xQueueGenericReceive+0x1c4>)
  404f5e:	4798      	blx	r3
  404f60:	b9e8      	cbnz	r0, 404f9e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  404f62:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  404f64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  404f66:	4b17      	ldr	r3, [pc, #92]	; (404fc4 <xQueueGenericReceive+0x1b0>)
  404f68:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  404f6a:	2e00      	cmp	r6, #0
  404f6c:	d1d1      	bne.n	404f12 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  404f6e:	6823      	ldr	r3, [r4, #0]
  404f70:	2b00      	cmp	r3, #0
  404f72:	d0c7      	beq.n	404f04 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  404f74:	9901      	ldr	r1, [sp, #4]
  404f76:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404f7a:	4b18      	ldr	r3, [pc, #96]	; (404fdc <xQueueGenericReceive+0x1c8>)
  404f7c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  404f7e:	4620      	mov	r0, r4
  404f80:	4b12      	ldr	r3, [pc, #72]	; (404fcc <xQueueGenericReceive+0x1b8>)
  404f82:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  404f84:	4b12      	ldr	r3, [pc, #72]	; (404fd0 <xQueueGenericReceive+0x1bc>)
  404f86:	4798      	blx	r3
  404f88:	2800      	cmp	r0, #0
  404f8a:	d1c7      	bne.n	404f1c <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  404f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  404f90:	f8c9 3000 	str.w	r3, [r9]
  404f94:	f3bf 8f4f 	dsb	sy
  404f98:	f3bf 8f6f 	isb	sy
  404f9c:	e7be      	b.n	404f1c <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  404f9e:	4620      	mov	r0, r4
  404fa0:	4b0a      	ldr	r3, [pc, #40]	; (404fcc <xQueueGenericReceive+0x1b8>)
  404fa2:	4798      	blx	r3
			( void ) xTaskResumeAll();
  404fa4:	4b0a      	ldr	r3, [pc, #40]	; (404fd0 <xQueueGenericReceive+0x1bc>)
  404fa6:	4798      	blx	r3
			return errQUEUE_EMPTY;
  404fa8:	2000      	movs	r0, #0
  404faa:	e791      	b.n	404ed0 <xQueueGenericReceive+0xbc>
  404fac:	00405aa1 	.word	0x00405aa1
  404fb0:	0040447d 	.word	0x0040447d
  404fb4:	00404875 	.word	0x00404875
  404fb8:	00405c21 	.word	0x00405c21
  404fbc:	00405939 	.word	0x00405939
  404fc0:	e000ed04 	.word	0xe000ed04
  404fc4:	004044c9 	.word	0x004044c9
  404fc8:	00405ac1 	.word	0x00405ac1
  404fcc:	0040489d 	.word	0x0040489d
  404fd0:	0040551d 	.word	0x0040551d
  404fd4:	004053b5 	.word	0x004053b5
  404fd8:	00405a01 	.word	0x00405a01
  404fdc:	00405835 	.word	0x00405835
  404fe0:	004059d1 	.word	0x004059d1

00404fe4 <vQueueAddToRegistry>:
	{
  404fe4:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  404fe6:	4b0b      	ldr	r3, [pc, #44]	; (405014 <vQueueAddToRegistry+0x30>)
  404fe8:	681b      	ldr	r3, [r3, #0]
  404fea:	b153      	cbz	r3, 405002 <vQueueAddToRegistry+0x1e>
  404fec:	2301      	movs	r3, #1
  404fee:	4c09      	ldr	r4, [pc, #36]	; (405014 <vQueueAddToRegistry+0x30>)
  404ff0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  404ff4:	b132      	cbz	r2, 405004 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  404ff6:	3301      	adds	r3, #1
  404ff8:	2b08      	cmp	r3, #8
  404ffa:	d1f9      	bne.n	404ff0 <vQueueAddToRegistry+0xc>
	}
  404ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
  405000:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  405002:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  405004:	4a03      	ldr	r2, [pc, #12]	; (405014 <vQueueAddToRegistry+0x30>)
  405006:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40500a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40500e:	6058      	str	r0, [r3, #4]
				break;
  405010:	e7f4      	b.n	404ffc <vQueueAddToRegistry+0x18>
  405012:	bf00      	nop
  405014:	2040c448 	.word	0x2040c448

00405018 <vQueueWaitForMessageRestricted>:
	{
  405018:	b570      	push	{r4, r5, r6, lr}
  40501a:	4604      	mov	r4, r0
  40501c:	460d      	mov	r5, r1
  40501e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  405020:	4b0f      	ldr	r3, [pc, #60]	; (405060 <vQueueWaitForMessageRestricted+0x48>)
  405022:	4798      	blx	r3
  405024:	6c63      	ldr	r3, [r4, #68]	; 0x44
  405026:	f1b3 3fff 	cmp.w	r3, #4294967295
  40502a:	d00b      	beq.n	405044 <vQueueWaitForMessageRestricted+0x2c>
  40502c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40502e:	f1b3 3fff 	cmp.w	r3, #4294967295
  405032:	d00a      	beq.n	40504a <vQueueWaitForMessageRestricted+0x32>
  405034:	4b0b      	ldr	r3, [pc, #44]	; (405064 <vQueueWaitForMessageRestricted+0x4c>)
  405036:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  405038:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40503a:	b14b      	cbz	r3, 405050 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  40503c:	4620      	mov	r0, r4
  40503e:	4b0a      	ldr	r3, [pc, #40]	; (405068 <vQueueWaitForMessageRestricted+0x50>)
  405040:	4798      	blx	r3
  405042:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  405044:	2300      	movs	r3, #0
  405046:	6463      	str	r3, [r4, #68]	; 0x44
  405048:	e7f0      	b.n	40502c <vQueueWaitForMessageRestricted+0x14>
  40504a:	2300      	movs	r3, #0
  40504c:	64a3      	str	r3, [r4, #72]	; 0x48
  40504e:	e7f1      	b.n	405034 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  405050:	4632      	mov	r2, r6
  405052:	4629      	mov	r1, r5
  405054:	f104 0024 	add.w	r0, r4, #36	; 0x24
  405058:	4b04      	ldr	r3, [pc, #16]	; (40506c <vQueueWaitForMessageRestricted+0x54>)
  40505a:	4798      	blx	r3
  40505c:	e7ee      	b.n	40503c <vQueueWaitForMessageRestricted+0x24>
  40505e:	bf00      	nop
  405060:	0040447d 	.word	0x0040447d
  405064:	004044c9 	.word	0x004044c9
  405068:	0040489d 	.word	0x0040489d
  40506c:	004058b9 	.word	0x004058b9

00405070 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  405070:	4b08      	ldr	r3, [pc, #32]	; (405094 <prvResetNextTaskUnblockTime+0x24>)
  405072:	681b      	ldr	r3, [r3, #0]
  405074:	681b      	ldr	r3, [r3, #0]
  405076:	b13b      	cbz	r3, 405088 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  405078:	4b06      	ldr	r3, [pc, #24]	; (405094 <prvResetNextTaskUnblockTime+0x24>)
  40507a:	681b      	ldr	r3, [r3, #0]
  40507c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40507e:	68db      	ldr	r3, [r3, #12]
  405080:	685a      	ldr	r2, [r3, #4]
  405082:	4b05      	ldr	r3, [pc, #20]	; (405098 <prvResetNextTaskUnblockTime+0x28>)
  405084:	601a      	str	r2, [r3, #0]
  405086:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  405088:	f04f 32ff 	mov.w	r2, #4294967295
  40508c:	4b02      	ldr	r3, [pc, #8]	; (405098 <prvResetNextTaskUnblockTime+0x28>)
  40508e:	601a      	str	r2, [r3, #0]
  405090:	4770      	bx	lr
  405092:	bf00      	nop
  405094:	2040c2d4 	.word	0x2040c2d4
  405098:	2040c380 	.word	0x2040c380

0040509c <prvAddCurrentTaskToDelayedList>:
{
  40509c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40509e:	4b0f      	ldr	r3, [pc, #60]	; (4050dc <prvAddCurrentTaskToDelayedList+0x40>)
  4050a0:	681b      	ldr	r3, [r3, #0]
  4050a2:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4050a4:	4b0e      	ldr	r3, [pc, #56]	; (4050e0 <prvAddCurrentTaskToDelayedList+0x44>)
  4050a6:	681b      	ldr	r3, [r3, #0]
  4050a8:	4298      	cmp	r0, r3
  4050aa:	d30e      	bcc.n	4050ca <prvAddCurrentTaskToDelayedList+0x2e>
  4050ac:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4050ae:	4b0d      	ldr	r3, [pc, #52]	; (4050e4 <prvAddCurrentTaskToDelayedList+0x48>)
  4050b0:	6818      	ldr	r0, [r3, #0]
  4050b2:	4b0a      	ldr	r3, [pc, #40]	; (4050dc <prvAddCurrentTaskToDelayedList+0x40>)
  4050b4:	6819      	ldr	r1, [r3, #0]
  4050b6:	3104      	adds	r1, #4
  4050b8:	4b0b      	ldr	r3, [pc, #44]	; (4050e8 <prvAddCurrentTaskToDelayedList+0x4c>)
  4050ba:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4050bc:	4b0b      	ldr	r3, [pc, #44]	; (4050ec <prvAddCurrentTaskToDelayedList+0x50>)
  4050be:	681b      	ldr	r3, [r3, #0]
  4050c0:	429c      	cmp	r4, r3
  4050c2:	d201      	bcs.n	4050c8 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4050c4:	4b09      	ldr	r3, [pc, #36]	; (4050ec <prvAddCurrentTaskToDelayedList+0x50>)
  4050c6:	601c      	str	r4, [r3, #0]
  4050c8:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4050ca:	4b09      	ldr	r3, [pc, #36]	; (4050f0 <prvAddCurrentTaskToDelayedList+0x54>)
  4050cc:	6818      	ldr	r0, [r3, #0]
  4050ce:	4b03      	ldr	r3, [pc, #12]	; (4050dc <prvAddCurrentTaskToDelayedList+0x40>)
  4050d0:	6819      	ldr	r1, [r3, #0]
  4050d2:	3104      	adds	r1, #4
  4050d4:	4b04      	ldr	r3, [pc, #16]	; (4050e8 <prvAddCurrentTaskToDelayedList+0x4c>)
  4050d6:	4798      	blx	r3
  4050d8:	bd10      	pop	{r4, pc}
  4050da:	bf00      	nop
  4050dc:	2040c2d0 	.word	0x2040c2d0
  4050e0:	2040c3c8 	.word	0x2040c3c8
  4050e4:	2040c2d4 	.word	0x2040c2d4
  4050e8:	00404365 	.word	0x00404365
  4050ec:	2040c380 	.word	0x2040c380
  4050f0:	2040c2d8 	.word	0x2040c2d8

004050f4 <xTaskGenericCreate>:
{
  4050f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050f8:	b083      	sub	sp, #12
  4050fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4050fc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  405100:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  405102:	b160      	cbz	r0, 40511e <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  405104:	2d04      	cmp	r5, #4
  405106:	d915      	bls.n	405134 <xTaskGenericCreate+0x40>
  405108:	f04f 0380 	mov.w	r3, #128	; 0x80
  40510c:	b672      	cpsid	i
  40510e:	f383 8811 	msr	BASEPRI, r3
  405112:	f3bf 8f6f 	isb	sy
  405116:	f3bf 8f4f 	dsb	sy
  40511a:	b662      	cpsie	i
  40511c:	e7fe      	b.n	40511c <xTaskGenericCreate+0x28>
  40511e:	f04f 0380 	mov.w	r3, #128	; 0x80
  405122:	b672      	cpsid	i
  405124:	f383 8811 	msr	BASEPRI, r3
  405128:	f3bf 8f6f 	isb	sy
  40512c:	f3bf 8f4f 	dsb	sy
  405130:	b662      	cpsie	i
  405132:	e7fe      	b.n	405132 <xTaskGenericCreate+0x3e>
  405134:	9001      	str	r0, [sp, #4]
  405136:	4698      	mov	r8, r3
  405138:	4691      	mov	r9, r2
  40513a:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40513c:	b936      	cbnz	r6, 40514c <xTaskGenericCreate+0x58>
  40513e:	0090      	lsls	r0, r2, #2
  405140:	4b62      	ldr	r3, [pc, #392]	; (4052cc <xTaskGenericCreate+0x1d8>)
  405142:	4798      	blx	r3
		if( pxStack != NULL )
  405144:	4606      	mov	r6, r0
  405146:	2800      	cmp	r0, #0
  405148:	f000 809e 	beq.w	405288 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40514c:	2058      	movs	r0, #88	; 0x58
  40514e:	4b5f      	ldr	r3, [pc, #380]	; (4052cc <xTaskGenericCreate+0x1d8>)
  405150:	4798      	blx	r3
			if( pxNewTCB != NULL )
  405152:	4604      	mov	r4, r0
  405154:	2800      	cmp	r0, #0
  405156:	f000 8094 	beq.w	405282 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  40515a:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40515c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  405160:	21a5      	movs	r1, #165	; 0xa5
  405162:	4630      	mov	r0, r6
  405164:	4b5a      	ldr	r3, [pc, #360]	; (4052d0 <xTaskGenericCreate+0x1dc>)
  405166:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  405168:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  40516c:	444e      	add	r6, r9
  40516e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  405170:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  405174:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  405178:	783b      	ldrb	r3, [r7, #0]
  40517a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40517e:	783b      	ldrb	r3, [r7, #0]
  405180:	2b00      	cmp	r3, #0
  405182:	f040 8084 	bne.w	40528e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  405186:	2700      	movs	r7, #0
  405188:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  40518c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40518e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  405190:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  405192:	f104 0904 	add.w	r9, r4, #4
  405196:	4648      	mov	r0, r9
  405198:	f8df b184 	ldr.w	fp, [pc, #388]	; 405320 <xTaskGenericCreate+0x22c>
  40519c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40519e:	f104 0018 	add.w	r0, r4, #24
  4051a2:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4051a4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4051a6:	f1c5 0305 	rsb	r3, r5, #5
  4051aa:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4051ac:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4051ae:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4051b0:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4051b4:	4642      	mov	r2, r8
  4051b6:	9901      	ldr	r1, [sp, #4]
  4051b8:	4630      	mov	r0, r6
  4051ba:	4b46      	ldr	r3, [pc, #280]	; (4052d4 <xTaskGenericCreate+0x1e0>)
  4051bc:	4798      	blx	r3
  4051be:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4051c0:	f1ba 0f00 	cmp.w	sl, #0
  4051c4:	d001      	beq.n	4051ca <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4051c6:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4051ca:	4b43      	ldr	r3, [pc, #268]	; (4052d8 <xTaskGenericCreate+0x1e4>)
  4051cc:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4051ce:	4a43      	ldr	r2, [pc, #268]	; (4052dc <xTaskGenericCreate+0x1e8>)
  4051d0:	6813      	ldr	r3, [r2, #0]
  4051d2:	3301      	adds	r3, #1
  4051d4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4051d6:	4b42      	ldr	r3, [pc, #264]	; (4052e0 <xTaskGenericCreate+0x1ec>)
  4051d8:	681b      	ldr	r3, [r3, #0]
  4051da:	2b00      	cmp	r3, #0
  4051dc:	d166      	bne.n	4052ac <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4051de:	4b40      	ldr	r3, [pc, #256]	; (4052e0 <xTaskGenericCreate+0x1ec>)
  4051e0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4051e2:	6813      	ldr	r3, [r2, #0]
  4051e4:	2b01      	cmp	r3, #1
  4051e6:	d121      	bne.n	40522c <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4051e8:	4f3e      	ldr	r7, [pc, #248]	; (4052e4 <xTaskGenericCreate+0x1f0>)
  4051ea:	4638      	mov	r0, r7
  4051ec:	4e3e      	ldr	r6, [pc, #248]	; (4052e8 <xTaskGenericCreate+0x1f4>)
  4051ee:	47b0      	blx	r6
  4051f0:	f107 0014 	add.w	r0, r7, #20
  4051f4:	47b0      	blx	r6
  4051f6:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4051fa:	47b0      	blx	r6
  4051fc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  405200:	47b0      	blx	r6
  405202:	f107 0050 	add.w	r0, r7, #80	; 0x50
  405206:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  405208:	f8df 8118 	ldr.w	r8, [pc, #280]	; 405324 <xTaskGenericCreate+0x230>
  40520c:	4640      	mov	r0, r8
  40520e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  405210:	4f36      	ldr	r7, [pc, #216]	; (4052ec <xTaskGenericCreate+0x1f8>)
  405212:	4638      	mov	r0, r7
  405214:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  405216:	4836      	ldr	r0, [pc, #216]	; (4052f0 <xTaskGenericCreate+0x1fc>)
  405218:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  40521a:	4836      	ldr	r0, [pc, #216]	; (4052f4 <xTaskGenericCreate+0x200>)
  40521c:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  40521e:	4836      	ldr	r0, [pc, #216]	; (4052f8 <xTaskGenericCreate+0x204>)
  405220:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  405222:	4b36      	ldr	r3, [pc, #216]	; (4052fc <xTaskGenericCreate+0x208>)
  405224:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  405228:	4b35      	ldr	r3, [pc, #212]	; (405300 <xTaskGenericCreate+0x20c>)
  40522a:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  40522c:	4a35      	ldr	r2, [pc, #212]	; (405304 <xTaskGenericCreate+0x210>)
  40522e:	6813      	ldr	r3, [r2, #0]
  405230:	3301      	adds	r3, #1
  405232:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  405234:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  405236:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  405238:	4a33      	ldr	r2, [pc, #204]	; (405308 <xTaskGenericCreate+0x214>)
  40523a:	6811      	ldr	r1, [r2, #0]
  40523c:	2301      	movs	r3, #1
  40523e:	4083      	lsls	r3, r0
  405240:	430b      	orrs	r3, r1
  405242:	6013      	str	r3, [r2, #0]
  405244:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405248:	4649      	mov	r1, r9
  40524a:	4b26      	ldr	r3, [pc, #152]	; (4052e4 <xTaskGenericCreate+0x1f0>)
  40524c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  405250:	4b2e      	ldr	r3, [pc, #184]	; (40530c <xTaskGenericCreate+0x218>)
  405252:	4798      	blx	r3
		taskEXIT_CRITICAL();
  405254:	4b2e      	ldr	r3, [pc, #184]	; (405310 <xTaskGenericCreate+0x21c>)
  405256:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  405258:	4b2e      	ldr	r3, [pc, #184]	; (405314 <xTaskGenericCreate+0x220>)
  40525a:	681b      	ldr	r3, [r3, #0]
  40525c:	2b00      	cmp	r3, #0
  40525e:	d031      	beq.n	4052c4 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  405260:	4b1f      	ldr	r3, [pc, #124]	; (4052e0 <xTaskGenericCreate+0x1ec>)
  405262:	681b      	ldr	r3, [r3, #0]
  405264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405266:	429d      	cmp	r5, r3
  405268:	d92e      	bls.n	4052c8 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  40526a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40526e:	4b2a      	ldr	r3, [pc, #168]	; (405318 <xTaskGenericCreate+0x224>)
  405270:	601a      	str	r2, [r3, #0]
  405272:	f3bf 8f4f 	dsb	sy
  405276:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40527a:	2001      	movs	r0, #1
}
  40527c:	b003      	add	sp, #12
  40527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  405282:	4630      	mov	r0, r6
  405284:	4b25      	ldr	r3, [pc, #148]	; (40531c <xTaskGenericCreate+0x228>)
  405286:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  405288:	f04f 30ff 	mov.w	r0, #4294967295
  40528c:	e7f6      	b.n	40527c <xTaskGenericCreate+0x188>
  40528e:	463b      	mov	r3, r7
  405290:	f104 0234 	add.w	r2, r4, #52	; 0x34
  405294:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  405296:	7859      	ldrb	r1, [r3, #1]
  405298:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40529c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4052a0:	2900      	cmp	r1, #0
  4052a2:	f43f af70 	beq.w	405186 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4052a6:	42bb      	cmp	r3, r7
  4052a8:	d1f5      	bne.n	405296 <xTaskGenericCreate+0x1a2>
  4052aa:	e76c      	b.n	405186 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4052ac:	4b19      	ldr	r3, [pc, #100]	; (405314 <xTaskGenericCreate+0x220>)
  4052ae:	681b      	ldr	r3, [r3, #0]
  4052b0:	2b00      	cmp	r3, #0
  4052b2:	d1bb      	bne.n	40522c <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4052b4:	4b0a      	ldr	r3, [pc, #40]	; (4052e0 <xTaskGenericCreate+0x1ec>)
  4052b6:	681b      	ldr	r3, [r3, #0]
  4052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4052ba:	429d      	cmp	r5, r3
  4052bc:	d3b6      	bcc.n	40522c <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  4052be:	4b08      	ldr	r3, [pc, #32]	; (4052e0 <xTaskGenericCreate+0x1ec>)
  4052c0:	601c      	str	r4, [r3, #0]
  4052c2:	e7b3      	b.n	40522c <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4052c4:	2001      	movs	r0, #1
  4052c6:	e7d9      	b.n	40527c <xTaskGenericCreate+0x188>
  4052c8:	2001      	movs	r0, #1
	return xReturn;
  4052ca:	e7d7      	b.n	40527c <xTaskGenericCreate+0x188>
  4052cc:	004046d9 	.word	0x004046d9
  4052d0:	00406dd9 	.word	0x00406dd9
  4052d4:	00404431 	.word	0x00404431
  4052d8:	0040447d 	.word	0x0040447d
  4052dc:	2040c340 	.word	0x2040c340
  4052e0:	2040c2d0 	.word	0x2040c2d0
  4052e4:	2040c2dc 	.word	0x2040c2dc
  4052e8:	00404331 	.word	0x00404331
  4052ec:	2040c36c 	.word	0x2040c36c
  4052f0:	2040c388 	.word	0x2040c388
  4052f4:	2040c3b4 	.word	0x2040c3b4
  4052f8:	2040c3a0 	.word	0x2040c3a0
  4052fc:	2040c2d4 	.word	0x2040c2d4
  405300:	2040c2d8 	.word	0x2040c2d8
  405304:	2040c34c 	.word	0x2040c34c
  405308:	2040c354 	.word	0x2040c354
  40530c:	0040434d 	.word	0x0040434d
  405310:	004044c9 	.word	0x004044c9
  405314:	2040c39c 	.word	0x2040c39c
  405318:	e000ed04 	.word	0xe000ed04
  40531c:	00404749 	.word	0x00404749
  405320:	00404347 	.word	0x00404347
  405324:	2040c358 	.word	0x2040c358

00405328 <vTaskStartScheduler>:
{
  405328:	b510      	push	{r4, lr}
  40532a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  40532c:	2300      	movs	r3, #0
  40532e:	9303      	str	r3, [sp, #12]
  405330:	9302      	str	r3, [sp, #8]
  405332:	9301      	str	r3, [sp, #4]
  405334:	9300      	str	r3, [sp, #0]
  405336:	2282      	movs	r2, #130	; 0x82
  405338:	4916      	ldr	r1, [pc, #88]	; (405394 <vTaskStartScheduler+0x6c>)
  40533a:	4817      	ldr	r0, [pc, #92]	; (405398 <vTaskStartScheduler+0x70>)
  40533c:	4c17      	ldr	r4, [pc, #92]	; (40539c <vTaskStartScheduler+0x74>)
  40533e:	47a0      	blx	r4
		if( xReturn == pdPASS )
  405340:	2801      	cmp	r0, #1
  405342:	d00b      	beq.n	40535c <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  405344:	bb20      	cbnz	r0, 405390 <vTaskStartScheduler+0x68>
  405346:	f04f 0380 	mov.w	r3, #128	; 0x80
  40534a:	b672      	cpsid	i
  40534c:	f383 8811 	msr	BASEPRI, r3
  405350:	f3bf 8f6f 	isb	sy
  405354:	f3bf 8f4f 	dsb	sy
  405358:	b662      	cpsie	i
  40535a:	e7fe      	b.n	40535a <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  40535c:	4b10      	ldr	r3, [pc, #64]	; (4053a0 <vTaskStartScheduler+0x78>)
  40535e:	4798      	blx	r3
	if( xReturn == pdPASS )
  405360:	2801      	cmp	r0, #1
  405362:	d1ef      	bne.n	405344 <vTaskStartScheduler+0x1c>
  405364:	f04f 0380 	mov.w	r3, #128	; 0x80
  405368:	b672      	cpsid	i
  40536a:	f383 8811 	msr	BASEPRI, r3
  40536e:	f3bf 8f6f 	isb	sy
  405372:	f3bf 8f4f 	dsb	sy
  405376:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  405378:	f04f 32ff 	mov.w	r2, #4294967295
  40537c:	4b09      	ldr	r3, [pc, #36]	; (4053a4 <vTaskStartScheduler+0x7c>)
  40537e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  405380:	2201      	movs	r2, #1
  405382:	4b09      	ldr	r3, [pc, #36]	; (4053a8 <vTaskStartScheduler+0x80>)
  405384:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  405386:	2200      	movs	r2, #0
  405388:	4b08      	ldr	r3, [pc, #32]	; (4053ac <vTaskStartScheduler+0x84>)
  40538a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40538c:	4b08      	ldr	r3, [pc, #32]	; (4053b0 <vTaskStartScheduler+0x88>)
  40538e:	4798      	blx	r3
}
  405390:	b004      	add	sp, #16
  405392:	bd10      	pop	{r4, pc}
  405394:	0040d674 	.word	0x0040d674
  405398:	004056cd 	.word	0x004056cd
  40539c:	004050f5 	.word	0x004050f5
  4053a0:	00405d0d 	.word	0x00405d0d
  4053a4:	2040c380 	.word	0x2040c380
  4053a8:	2040c39c 	.word	0x2040c39c
  4053ac:	2040c3c8 	.word	0x2040c3c8
  4053b0:	004045b1 	.word	0x004045b1

004053b4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4053b4:	4a02      	ldr	r2, [pc, #8]	; (4053c0 <vTaskSuspendAll+0xc>)
  4053b6:	6813      	ldr	r3, [r2, #0]
  4053b8:	3301      	adds	r3, #1
  4053ba:	6013      	str	r3, [r2, #0]
  4053bc:	4770      	bx	lr
  4053be:	bf00      	nop
  4053c0:	2040c348 	.word	0x2040c348

004053c4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4053c4:	4b01      	ldr	r3, [pc, #4]	; (4053cc <xTaskGetTickCount+0x8>)
  4053c6:	6818      	ldr	r0, [r3, #0]
}
  4053c8:	4770      	bx	lr
  4053ca:	bf00      	nop
  4053cc:	2040c3c8 	.word	0x2040c3c8

004053d0 <xTaskIncrementTick>:
{
  4053d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4053d4:	4b42      	ldr	r3, [pc, #264]	; (4054e0 <xTaskIncrementTick+0x110>)
  4053d6:	681b      	ldr	r3, [r3, #0]
  4053d8:	2b00      	cmp	r3, #0
  4053da:	d178      	bne.n	4054ce <xTaskIncrementTick+0xfe>
		++xTickCount;
  4053dc:	4b41      	ldr	r3, [pc, #260]	; (4054e4 <xTaskIncrementTick+0x114>)
  4053de:	681a      	ldr	r2, [r3, #0]
  4053e0:	3201      	adds	r2, #1
  4053e2:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4053e4:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4053e6:	b9d6      	cbnz	r6, 40541e <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4053e8:	4b3f      	ldr	r3, [pc, #252]	; (4054e8 <xTaskIncrementTick+0x118>)
  4053ea:	681b      	ldr	r3, [r3, #0]
  4053ec:	681b      	ldr	r3, [r3, #0]
  4053ee:	b153      	cbz	r3, 405406 <xTaskIncrementTick+0x36>
  4053f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4053f4:	b672      	cpsid	i
  4053f6:	f383 8811 	msr	BASEPRI, r3
  4053fa:	f3bf 8f6f 	isb	sy
  4053fe:	f3bf 8f4f 	dsb	sy
  405402:	b662      	cpsie	i
  405404:	e7fe      	b.n	405404 <xTaskIncrementTick+0x34>
  405406:	4a38      	ldr	r2, [pc, #224]	; (4054e8 <xTaskIncrementTick+0x118>)
  405408:	6811      	ldr	r1, [r2, #0]
  40540a:	4b38      	ldr	r3, [pc, #224]	; (4054ec <xTaskIncrementTick+0x11c>)
  40540c:	6818      	ldr	r0, [r3, #0]
  40540e:	6010      	str	r0, [r2, #0]
  405410:	6019      	str	r1, [r3, #0]
  405412:	4a37      	ldr	r2, [pc, #220]	; (4054f0 <xTaskIncrementTick+0x120>)
  405414:	6813      	ldr	r3, [r2, #0]
  405416:	3301      	adds	r3, #1
  405418:	6013      	str	r3, [r2, #0]
  40541a:	4b36      	ldr	r3, [pc, #216]	; (4054f4 <xTaskIncrementTick+0x124>)
  40541c:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40541e:	4b36      	ldr	r3, [pc, #216]	; (4054f8 <xTaskIncrementTick+0x128>)
  405420:	681b      	ldr	r3, [r3, #0]
  405422:	429e      	cmp	r6, r3
  405424:	d218      	bcs.n	405458 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  405426:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  405428:	4b34      	ldr	r3, [pc, #208]	; (4054fc <xTaskIncrementTick+0x12c>)
  40542a:	681b      	ldr	r3, [r3, #0]
  40542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40542e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  405432:	4a33      	ldr	r2, [pc, #204]	; (405500 <xTaskIncrementTick+0x130>)
  405434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  405438:	2b02      	cmp	r3, #2
  40543a:	bf28      	it	cs
  40543c:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40543e:	4b31      	ldr	r3, [pc, #196]	; (405504 <xTaskIncrementTick+0x134>)
  405440:	681b      	ldr	r3, [r3, #0]
  405442:	b90b      	cbnz	r3, 405448 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  405444:	4b30      	ldr	r3, [pc, #192]	; (405508 <xTaskIncrementTick+0x138>)
  405446:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  405448:	4b30      	ldr	r3, [pc, #192]	; (40550c <xTaskIncrementTick+0x13c>)
  40544a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40544c:	2b00      	cmp	r3, #0
}
  40544e:	bf0c      	ite	eq
  405450:	4620      	moveq	r0, r4
  405452:	2001      	movne	r0, #1
  405454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405458:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40545a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4054e8 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40545e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 405518 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  405462:	4f2b      	ldr	r7, [pc, #172]	; (405510 <xTaskIncrementTick+0x140>)
  405464:	e01f      	b.n	4054a6 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  405466:	f04f 32ff 	mov.w	r2, #4294967295
  40546a:	4b23      	ldr	r3, [pc, #140]	; (4054f8 <xTaskIncrementTick+0x128>)
  40546c:	601a      	str	r2, [r3, #0]
						break;
  40546e:	e7db      	b.n	405428 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  405470:	4a21      	ldr	r2, [pc, #132]	; (4054f8 <xTaskIncrementTick+0x128>)
  405472:	6013      	str	r3, [r2, #0]
							break;
  405474:	e7d8      	b.n	405428 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  405476:	f105 0018 	add.w	r0, r5, #24
  40547a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  40547c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40547e:	683a      	ldr	r2, [r7, #0]
  405480:	2301      	movs	r3, #1
  405482:	4083      	lsls	r3, r0
  405484:	4313      	orrs	r3, r2
  405486:	603b      	str	r3, [r7, #0]
  405488:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40548c:	4651      	mov	r1, sl
  40548e:	4b1c      	ldr	r3, [pc, #112]	; (405500 <xTaskIncrementTick+0x130>)
  405490:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  405494:	4b1f      	ldr	r3, [pc, #124]	; (405514 <xTaskIncrementTick+0x144>)
  405496:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  405498:	4b18      	ldr	r3, [pc, #96]	; (4054fc <xTaskIncrementTick+0x12c>)
  40549a:	681b      	ldr	r3, [r3, #0]
  40549c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4054a0:	429a      	cmp	r2, r3
  4054a2:	bf28      	it	cs
  4054a4:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4054a6:	f8d9 3000 	ldr.w	r3, [r9]
  4054aa:	681b      	ldr	r3, [r3, #0]
  4054ac:	2b00      	cmp	r3, #0
  4054ae:	d0da      	beq.n	405466 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4054b0:	f8d9 3000 	ldr.w	r3, [r9]
  4054b4:	68db      	ldr	r3, [r3, #12]
  4054b6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4054b8:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4054ba:	429e      	cmp	r6, r3
  4054bc:	d3d8      	bcc.n	405470 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4054be:	f105 0a04 	add.w	sl, r5, #4
  4054c2:	4650      	mov	r0, sl
  4054c4:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4054c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4054c8:	2b00      	cmp	r3, #0
  4054ca:	d1d4      	bne.n	405476 <xTaskIncrementTick+0xa6>
  4054cc:	e7d6      	b.n	40547c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4054ce:	4a0d      	ldr	r2, [pc, #52]	; (405504 <xTaskIncrementTick+0x134>)
  4054d0:	6813      	ldr	r3, [r2, #0]
  4054d2:	3301      	adds	r3, #1
  4054d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4054d6:	4b0c      	ldr	r3, [pc, #48]	; (405508 <xTaskIncrementTick+0x138>)
  4054d8:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4054da:	2400      	movs	r4, #0
  4054dc:	e7b4      	b.n	405448 <xTaskIncrementTick+0x78>
  4054de:	bf00      	nop
  4054e0:	2040c348 	.word	0x2040c348
  4054e4:	2040c3c8 	.word	0x2040c3c8
  4054e8:	2040c2d4 	.word	0x2040c2d4
  4054ec:	2040c2d8 	.word	0x2040c2d8
  4054f0:	2040c384 	.word	0x2040c384
  4054f4:	00405071 	.word	0x00405071
  4054f8:	2040c380 	.word	0x2040c380
  4054fc:	2040c2d0 	.word	0x2040c2d0
  405500:	2040c2dc 	.word	0x2040c2dc
  405504:	2040c344 	.word	0x2040c344
  405508:	00406a4d 	.word	0x00406a4d
  40550c:	2040c3cc 	.word	0x2040c3cc
  405510:	2040c354 	.word	0x2040c354
  405514:	0040434d 	.word	0x0040434d
  405518:	00404399 	.word	0x00404399

0040551c <xTaskResumeAll>:
{
  40551c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  405520:	4b38      	ldr	r3, [pc, #224]	; (405604 <xTaskResumeAll+0xe8>)
  405522:	681b      	ldr	r3, [r3, #0]
  405524:	b953      	cbnz	r3, 40553c <xTaskResumeAll+0x20>
  405526:	f04f 0380 	mov.w	r3, #128	; 0x80
  40552a:	b672      	cpsid	i
  40552c:	f383 8811 	msr	BASEPRI, r3
  405530:	f3bf 8f6f 	isb	sy
  405534:	f3bf 8f4f 	dsb	sy
  405538:	b662      	cpsie	i
  40553a:	e7fe      	b.n	40553a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  40553c:	4b32      	ldr	r3, [pc, #200]	; (405608 <xTaskResumeAll+0xec>)
  40553e:	4798      	blx	r3
		--uxSchedulerSuspended;
  405540:	4b30      	ldr	r3, [pc, #192]	; (405604 <xTaskResumeAll+0xe8>)
  405542:	681a      	ldr	r2, [r3, #0]
  405544:	3a01      	subs	r2, #1
  405546:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  405548:	681b      	ldr	r3, [r3, #0]
  40554a:	2b00      	cmp	r3, #0
  40554c:	d155      	bne.n	4055fa <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40554e:	4b2f      	ldr	r3, [pc, #188]	; (40560c <xTaskResumeAll+0xf0>)
  405550:	681b      	ldr	r3, [r3, #0]
  405552:	2b00      	cmp	r3, #0
  405554:	d132      	bne.n	4055bc <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  405556:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  405558:	4b2d      	ldr	r3, [pc, #180]	; (405610 <xTaskResumeAll+0xf4>)
  40555a:	4798      	blx	r3
}
  40555c:	4620      	mov	r0, r4
  40555e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  405562:	68fb      	ldr	r3, [r7, #12]
  405564:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  405566:	f104 0018 	add.w	r0, r4, #24
  40556a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40556c:	f104 0804 	add.w	r8, r4, #4
  405570:	4640      	mov	r0, r8
  405572:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  405574:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  405576:	682a      	ldr	r2, [r5, #0]
  405578:	2301      	movs	r3, #1
  40557a:	4083      	lsls	r3, r0
  40557c:	4313      	orrs	r3, r2
  40557e:	602b      	str	r3, [r5, #0]
  405580:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405584:	4641      	mov	r1, r8
  405586:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40558a:	4b22      	ldr	r3, [pc, #136]	; (405614 <xTaskResumeAll+0xf8>)
  40558c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40558e:	4b22      	ldr	r3, [pc, #136]	; (405618 <xTaskResumeAll+0xfc>)
  405590:	681b      	ldr	r3, [r3, #0]
  405592:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  405594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405596:	429a      	cmp	r2, r3
  405598:	d20c      	bcs.n	4055b4 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40559a:	683b      	ldr	r3, [r7, #0]
  40559c:	2b00      	cmp	r3, #0
  40559e:	d1e0      	bne.n	405562 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4055a0:	4b1e      	ldr	r3, [pc, #120]	; (40561c <xTaskResumeAll+0x100>)
  4055a2:	681b      	ldr	r3, [r3, #0]
  4055a4:	b1db      	cbz	r3, 4055de <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4055a6:	4b1d      	ldr	r3, [pc, #116]	; (40561c <xTaskResumeAll+0x100>)
  4055a8:	681b      	ldr	r3, [r3, #0]
  4055aa:	b1c3      	cbz	r3, 4055de <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4055ac:	4e1c      	ldr	r6, [pc, #112]	; (405620 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4055ae:	4d1d      	ldr	r5, [pc, #116]	; (405624 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4055b0:	4c1a      	ldr	r4, [pc, #104]	; (40561c <xTaskResumeAll+0x100>)
  4055b2:	e00e      	b.n	4055d2 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4055b4:	2201      	movs	r2, #1
  4055b6:	4b1b      	ldr	r3, [pc, #108]	; (405624 <xTaskResumeAll+0x108>)
  4055b8:	601a      	str	r2, [r3, #0]
  4055ba:	e7ee      	b.n	40559a <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4055bc:	4f1a      	ldr	r7, [pc, #104]	; (405628 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4055be:	4e1b      	ldr	r6, [pc, #108]	; (40562c <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4055c0:	4d1b      	ldr	r5, [pc, #108]	; (405630 <xTaskResumeAll+0x114>)
  4055c2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 405638 <xTaskResumeAll+0x11c>
  4055c6:	e7e8      	b.n	40559a <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4055c8:	6823      	ldr	r3, [r4, #0]
  4055ca:	3b01      	subs	r3, #1
  4055cc:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4055ce:	6823      	ldr	r3, [r4, #0]
  4055d0:	b12b      	cbz	r3, 4055de <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4055d2:	47b0      	blx	r6
  4055d4:	2800      	cmp	r0, #0
  4055d6:	d0f7      	beq.n	4055c8 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4055d8:	2301      	movs	r3, #1
  4055da:	602b      	str	r3, [r5, #0]
  4055dc:	e7f4      	b.n	4055c8 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4055de:	4b11      	ldr	r3, [pc, #68]	; (405624 <xTaskResumeAll+0x108>)
  4055e0:	681b      	ldr	r3, [r3, #0]
  4055e2:	2b01      	cmp	r3, #1
  4055e4:	d10b      	bne.n	4055fe <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4055e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4055ea:	4b12      	ldr	r3, [pc, #72]	; (405634 <xTaskResumeAll+0x118>)
  4055ec:	601a      	str	r2, [r3, #0]
  4055ee:	f3bf 8f4f 	dsb	sy
  4055f2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4055f6:	2401      	movs	r4, #1
  4055f8:	e7ae      	b.n	405558 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4055fa:	2400      	movs	r4, #0
  4055fc:	e7ac      	b.n	405558 <xTaskResumeAll+0x3c>
  4055fe:	2400      	movs	r4, #0
  405600:	e7aa      	b.n	405558 <xTaskResumeAll+0x3c>
  405602:	bf00      	nop
  405604:	2040c348 	.word	0x2040c348
  405608:	0040447d 	.word	0x0040447d
  40560c:	2040c340 	.word	0x2040c340
  405610:	004044c9 	.word	0x004044c9
  405614:	0040434d 	.word	0x0040434d
  405618:	2040c2d0 	.word	0x2040c2d0
  40561c:	2040c344 	.word	0x2040c344
  405620:	004053d1 	.word	0x004053d1
  405624:	2040c3cc 	.word	0x2040c3cc
  405628:	2040c388 	.word	0x2040c388
  40562c:	00404399 	.word	0x00404399
  405630:	2040c354 	.word	0x2040c354
  405634:	e000ed04 	.word	0xe000ed04
  405638:	2040c2dc 	.word	0x2040c2dc

0040563c <vTaskDelay>:
	{
  40563c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40563e:	2800      	cmp	r0, #0
  405640:	d029      	beq.n	405696 <vTaskDelay+0x5a>
  405642:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  405644:	4b18      	ldr	r3, [pc, #96]	; (4056a8 <vTaskDelay+0x6c>)
  405646:	681b      	ldr	r3, [r3, #0]
  405648:	b153      	cbz	r3, 405660 <vTaskDelay+0x24>
  40564a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40564e:	b672      	cpsid	i
  405650:	f383 8811 	msr	BASEPRI, r3
  405654:	f3bf 8f6f 	isb	sy
  405658:	f3bf 8f4f 	dsb	sy
  40565c:	b662      	cpsie	i
  40565e:	e7fe      	b.n	40565e <vTaskDelay+0x22>
			vTaskSuspendAll();
  405660:	4b12      	ldr	r3, [pc, #72]	; (4056ac <vTaskDelay+0x70>)
  405662:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  405664:	4b12      	ldr	r3, [pc, #72]	; (4056b0 <vTaskDelay+0x74>)
  405666:	681b      	ldr	r3, [r3, #0]
  405668:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40566a:	4b12      	ldr	r3, [pc, #72]	; (4056b4 <vTaskDelay+0x78>)
  40566c:	6818      	ldr	r0, [r3, #0]
  40566e:	3004      	adds	r0, #4
  405670:	4b11      	ldr	r3, [pc, #68]	; (4056b8 <vTaskDelay+0x7c>)
  405672:	4798      	blx	r3
  405674:	b948      	cbnz	r0, 40568a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  405676:	4b0f      	ldr	r3, [pc, #60]	; (4056b4 <vTaskDelay+0x78>)
  405678:	681a      	ldr	r2, [r3, #0]
  40567a:	4910      	ldr	r1, [pc, #64]	; (4056bc <vTaskDelay+0x80>)
  40567c:	680b      	ldr	r3, [r1, #0]
  40567e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  405680:	2201      	movs	r2, #1
  405682:	4082      	lsls	r2, r0
  405684:	ea23 0302 	bic.w	r3, r3, r2
  405688:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40568a:	4620      	mov	r0, r4
  40568c:	4b0c      	ldr	r3, [pc, #48]	; (4056c0 <vTaskDelay+0x84>)
  40568e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  405690:	4b0c      	ldr	r3, [pc, #48]	; (4056c4 <vTaskDelay+0x88>)
  405692:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  405694:	b938      	cbnz	r0, 4056a6 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  405696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40569a:	4b0b      	ldr	r3, [pc, #44]	; (4056c8 <vTaskDelay+0x8c>)
  40569c:	601a      	str	r2, [r3, #0]
  40569e:	f3bf 8f4f 	dsb	sy
  4056a2:	f3bf 8f6f 	isb	sy
  4056a6:	bd10      	pop	{r4, pc}
  4056a8:	2040c348 	.word	0x2040c348
  4056ac:	004053b5 	.word	0x004053b5
  4056b0:	2040c3c8 	.word	0x2040c3c8
  4056b4:	2040c2d0 	.word	0x2040c2d0
  4056b8:	00404399 	.word	0x00404399
  4056bc:	2040c354 	.word	0x2040c354
  4056c0:	0040509d 	.word	0x0040509d
  4056c4:	0040551d 	.word	0x0040551d
  4056c8:	e000ed04 	.word	0xe000ed04

004056cc <prvIdleTask>:
{
  4056cc:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4056ce:	f8df 8088 	ldr.w	r8, [pc, #136]	; 405758 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4056d2:	4e19      	ldr	r6, [pc, #100]	; (405738 <prvIdleTask+0x6c>)
				taskYIELD();
  4056d4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40575c <prvIdleTask+0x90>
  4056d8:	e02a      	b.n	405730 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4056da:	4b18      	ldr	r3, [pc, #96]	; (40573c <prvIdleTask+0x70>)
  4056dc:	681b      	ldr	r3, [r3, #0]
  4056de:	2b01      	cmp	r3, #1
  4056e0:	d81e      	bhi.n	405720 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4056e2:	682b      	ldr	r3, [r5, #0]
  4056e4:	2b00      	cmp	r3, #0
  4056e6:	d0f8      	beq.n	4056da <prvIdleTask+0xe>
			vTaskSuspendAll();
  4056e8:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4056ea:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4056ec:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4056ee:	2c00      	cmp	r4, #0
  4056f0:	d0f7      	beq.n	4056e2 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4056f2:	4b13      	ldr	r3, [pc, #76]	; (405740 <prvIdleTask+0x74>)
  4056f4:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4056f6:	68f3      	ldr	r3, [r6, #12]
  4056f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4056fa:	1d20      	adds	r0, r4, #4
  4056fc:	4b11      	ldr	r3, [pc, #68]	; (405744 <prvIdleTask+0x78>)
  4056fe:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  405700:	4a11      	ldr	r2, [pc, #68]	; (405748 <prvIdleTask+0x7c>)
  405702:	6813      	ldr	r3, [r2, #0]
  405704:	3b01      	subs	r3, #1
  405706:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  405708:	682b      	ldr	r3, [r5, #0]
  40570a:	3b01      	subs	r3, #1
  40570c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40570e:	4b0f      	ldr	r3, [pc, #60]	; (40574c <prvIdleTask+0x80>)
  405710:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  405712:	6b20      	ldr	r0, [r4, #48]	; 0x30
  405714:	f8df a048 	ldr.w	sl, [pc, #72]	; 405760 <prvIdleTask+0x94>
  405718:	47d0      	blx	sl
		vPortFree( pxTCB );
  40571a:	4620      	mov	r0, r4
  40571c:	47d0      	blx	sl
  40571e:	e7e0      	b.n	4056e2 <prvIdleTask+0x16>
				taskYIELD();
  405720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405724:	f8c9 3000 	str.w	r3, [r9]
  405728:	f3bf 8f4f 	dsb	sy
  40572c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  405730:	4d07      	ldr	r5, [pc, #28]	; (405750 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  405732:	4f08      	ldr	r7, [pc, #32]	; (405754 <prvIdleTask+0x88>)
  405734:	e7d5      	b.n	4056e2 <prvIdleTask+0x16>
  405736:	bf00      	nop
  405738:	2040c3b4 	.word	0x2040c3b4
  40573c:	2040c2dc 	.word	0x2040c2dc
  405740:	0040447d 	.word	0x0040447d
  405744:	00404399 	.word	0x00404399
  405748:	2040c340 	.word	0x2040c340
  40574c:	004044c9 	.word	0x004044c9
  405750:	2040c350 	.word	0x2040c350
  405754:	0040551d 	.word	0x0040551d
  405758:	004053b5 	.word	0x004053b5
  40575c:	e000ed04 	.word	0xe000ed04
  405760:	00404749 	.word	0x00404749

00405764 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  405764:	4b2d      	ldr	r3, [pc, #180]	; (40581c <vTaskSwitchContext+0xb8>)
  405766:	681b      	ldr	r3, [r3, #0]
  405768:	2b00      	cmp	r3, #0
  40576a:	d12c      	bne.n	4057c6 <vTaskSwitchContext+0x62>
{
  40576c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40576e:	2200      	movs	r2, #0
  405770:	4b2b      	ldr	r3, [pc, #172]	; (405820 <vTaskSwitchContext+0xbc>)
  405772:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  405774:	4b2b      	ldr	r3, [pc, #172]	; (405824 <vTaskSwitchContext+0xc0>)
  405776:	681b      	ldr	r3, [r3, #0]
  405778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40577a:	681a      	ldr	r2, [r3, #0]
  40577c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  405780:	d103      	bne.n	40578a <vTaskSwitchContext+0x26>
  405782:	685a      	ldr	r2, [r3, #4]
  405784:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  405788:	d021      	beq.n	4057ce <vTaskSwitchContext+0x6a>
  40578a:	4b26      	ldr	r3, [pc, #152]	; (405824 <vTaskSwitchContext+0xc0>)
  40578c:	6818      	ldr	r0, [r3, #0]
  40578e:	6819      	ldr	r1, [r3, #0]
  405790:	3134      	adds	r1, #52	; 0x34
  405792:	4b25      	ldr	r3, [pc, #148]	; (405828 <vTaskSwitchContext+0xc4>)
  405794:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  405796:	4b25      	ldr	r3, [pc, #148]	; (40582c <vTaskSwitchContext+0xc8>)
  405798:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40579a:	fab3 f383 	clz	r3, r3
  40579e:	b2db      	uxtb	r3, r3
  4057a0:	f1c3 031f 	rsb	r3, r3, #31
  4057a4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4057a8:	4a21      	ldr	r2, [pc, #132]	; (405830 <vTaskSwitchContext+0xcc>)
  4057aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4057ae:	b9ba      	cbnz	r2, 4057e0 <vTaskSwitchContext+0x7c>
	__asm volatile
  4057b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4057b4:	b672      	cpsid	i
  4057b6:	f383 8811 	msr	BASEPRI, r3
  4057ba:	f3bf 8f6f 	isb	sy
  4057be:	f3bf 8f4f 	dsb	sy
  4057c2:	b662      	cpsie	i
  4057c4:	e7fe      	b.n	4057c4 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4057c6:	2201      	movs	r2, #1
  4057c8:	4b15      	ldr	r3, [pc, #84]	; (405820 <vTaskSwitchContext+0xbc>)
  4057ca:	601a      	str	r2, [r3, #0]
  4057cc:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4057ce:	689a      	ldr	r2, [r3, #8]
  4057d0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4057d4:	d1d9      	bne.n	40578a <vTaskSwitchContext+0x26>
  4057d6:	68db      	ldr	r3, [r3, #12]
  4057d8:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4057dc:	d1d5      	bne.n	40578a <vTaskSwitchContext+0x26>
  4057de:	e7da      	b.n	405796 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4057e0:	4a13      	ldr	r2, [pc, #76]	; (405830 <vTaskSwitchContext+0xcc>)
  4057e2:	0099      	lsls	r1, r3, #2
  4057e4:	18c8      	adds	r0, r1, r3
  4057e6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4057ea:	6844      	ldr	r4, [r0, #4]
  4057ec:	6864      	ldr	r4, [r4, #4]
  4057ee:	6044      	str	r4, [r0, #4]
  4057f0:	4419      	add	r1, r3
  4057f2:	4602      	mov	r2, r0
  4057f4:	3208      	adds	r2, #8
  4057f6:	4294      	cmp	r4, r2
  4057f8:	d009      	beq.n	40580e <vTaskSwitchContext+0xaa>
  4057fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4057fe:	4a0c      	ldr	r2, [pc, #48]	; (405830 <vTaskSwitchContext+0xcc>)
  405800:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405804:	685b      	ldr	r3, [r3, #4]
  405806:	68da      	ldr	r2, [r3, #12]
  405808:	4b06      	ldr	r3, [pc, #24]	; (405824 <vTaskSwitchContext+0xc0>)
  40580a:	601a      	str	r2, [r3, #0]
  40580c:	bd10      	pop	{r4, pc}
  40580e:	6860      	ldr	r0, [r4, #4]
  405810:	4a07      	ldr	r2, [pc, #28]	; (405830 <vTaskSwitchContext+0xcc>)
  405812:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  405816:	6050      	str	r0, [r2, #4]
  405818:	e7ef      	b.n	4057fa <vTaskSwitchContext+0x96>
  40581a:	bf00      	nop
  40581c:	2040c348 	.word	0x2040c348
  405820:	2040c3cc 	.word	0x2040c3cc
  405824:	2040c2d0 	.word	0x2040c2d0
  405828:	00406a35 	.word	0x00406a35
  40582c:	2040c354 	.word	0x2040c354
  405830:	2040c2dc 	.word	0x2040c2dc

00405834 <vTaskPlaceOnEventList>:
{
  405834:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  405836:	b1e0      	cbz	r0, 405872 <vTaskPlaceOnEventList+0x3e>
  405838:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40583a:	4d17      	ldr	r5, [pc, #92]	; (405898 <vTaskPlaceOnEventList+0x64>)
  40583c:	6829      	ldr	r1, [r5, #0]
  40583e:	3118      	adds	r1, #24
  405840:	4b16      	ldr	r3, [pc, #88]	; (40589c <vTaskPlaceOnEventList+0x68>)
  405842:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  405844:	6828      	ldr	r0, [r5, #0]
  405846:	3004      	adds	r0, #4
  405848:	4b15      	ldr	r3, [pc, #84]	; (4058a0 <vTaskPlaceOnEventList+0x6c>)
  40584a:	4798      	blx	r3
  40584c:	b940      	cbnz	r0, 405860 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40584e:	682a      	ldr	r2, [r5, #0]
  405850:	4914      	ldr	r1, [pc, #80]	; (4058a4 <vTaskPlaceOnEventList+0x70>)
  405852:	680b      	ldr	r3, [r1, #0]
  405854:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  405856:	2201      	movs	r2, #1
  405858:	4082      	lsls	r2, r0
  40585a:	ea23 0302 	bic.w	r3, r3, r2
  40585e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  405860:	f1b4 3fff 	cmp.w	r4, #4294967295
  405864:	d010      	beq.n	405888 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  405866:	4b10      	ldr	r3, [pc, #64]	; (4058a8 <vTaskPlaceOnEventList+0x74>)
  405868:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40586a:	4420      	add	r0, r4
  40586c:	4b0f      	ldr	r3, [pc, #60]	; (4058ac <vTaskPlaceOnEventList+0x78>)
  40586e:	4798      	blx	r3
  405870:	bd38      	pop	{r3, r4, r5, pc}
  405872:	f04f 0380 	mov.w	r3, #128	; 0x80
  405876:	b672      	cpsid	i
  405878:	f383 8811 	msr	BASEPRI, r3
  40587c:	f3bf 8f6f 	isb	sy
  405880:	f3bf 8f4f 	dsb	sy
  405884:	b662      	cpsie	i
  405886:	e7fe      	b.n	405886 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  405888:	4b03      	ldr	r3, [pc, #12]	; (405898 <vTaskPlaceOnEventList+0x64>)
  40588a:	6819      	ldr	r1, [r3, #0]
  40588c:	3104      	adds	r1, #4
  40588e:	4808      	ldr	r0, [pc, #32]	; (4058b0 <vTaskPlaceOnEventList+0x7c>)
  405890:	4b08      	ldr	r3, [pc, #32]	; (4058b4 <vTaskPlaceOnEventList+0x80>)
  405892:	4798      	blx	r3
  405894:	bd38      	pop	{r3, r4, r5, pc}
  405896:	bf00      	nop
  405898:	2040c2d0 	.word	0x2040c2d0
  40589c:	00404365 	.word	0x00404365
  4058a0:	00404399 	.word	0x00404399
  4058a4:	2040c354 	.word	0x2040c354
  4058a8:	2040c3c8 	.word	0x2040c3c8
  4058ac:	0040509d 	.word	0x0040509d
  4058b0:	2040c3a0 	.word	0x2040c3a0
  4058b4:	0040434d 	.word	0x0040434d

004058b8 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4058b8:	b1e8      	cbz	r0, 4058f6 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4058ba:	b570      	push	{r4, r5, r6, lr}
  4058bc:	4615      	mov	r5, r2
  4058be:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4058c0:	4e16      	ldr	r6, [pc, #88]	; (40591c <vTaskPlaceOnEventListRestricted+0x64>)
  4058c2:	6831      	ldr	r1, [r6, #0]
  4058c4:	3118      	adds	r1, #24
  4058c6:	4b16      	ldr	r3, [pc, #88]	; (405920 <vTaskPlaceOnEventListRestricted+0x68>)
  4058c8:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4058ca:	6830      	ldr	r0, [r6, #0]
  4058cc:	3004      	adds	r0, #4
  4058ce:	4b15      	ldr	r3, [pc, #84]	; (405924 <vTaskPlaceOnEventListRestricted+0x6c>)
  4058d0:	4798      	blx	r3
  4058d2:	b940      	cbnz	r0, 4058e6 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4058d4:	6832      	ldr	r2, [r6, #0]
  4058d6:	4914      	ldr	r1, [pc, #80]	; (405928 <vTaskPlaceOnEventListRestricted+0x70>)
  4058d8:	680b      	ldr	r3, [r1, #0]
  4058da:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4058dc:	2201      	movs	r2, #1
  4058de:	4082      	lsls	r2, r0
  4058e0:	ea23 0302 	bic.w	r3, r3, r2
  4058e4:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4058e6:	2d01      	cmp	r5, #1
  4058e8:	d010      	beq.n	40590c <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4058ea:	4b10      	ldr	r3, [pc, #64]	; (40592c <vTaskPlaceOnEventListRestricted+0x74>)
  4058ec:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4058ee:	4420      	add	r0, r4
  4058f0:	4b0f      	ldr	r3, [pc, #60]	; (405930 <vTaskPlaceOnEventListRestricted+0x78>)
  4058f2:	4798      	blx	r3
  4058f4:	bd70      	pop	{r4, r5, r6, pc}
  4058f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4058fa:	b672      	cpsid	i
  4058fc:	f383 8811 	msr	BASEPRI, r3
  405900:	f3bf 8f6f 	isb	sy
  405904:	f3bf 8f4f 	dsb	sy
  405908:	b662      	cpsie	i
  40590a:	e7fe      	b.n	40590a <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40590c:	4b03      	ldr	r3, [pc, #12]	; (40591c <vTaskPlaceOnEventListRestricted+0x64>)
  40590e:	6819      	ldr	r1, [r3, #0]
  405910:	3104      	adds	r1, #4
  405912:	4808      	ldr	r0, [pc, #32]	; (405934 <vTaskPlaceOnEventListRestricted+0x7c>)
  405914:	4b02      	ldr	r3, [pc, #8]	; (405920 <vTaskPlaceOnEventListRestricted+0x68>)
  405916:	4798      	blx	r3
  405918:	bd70      	pop	{r4, r5, r6, pc}
  40591a:	bf00      	nop
  40591c:	2040c2d0 	.word	0x2040c2d0
  405920:	0040434d 	.word	0x0040434d
  405924:	00404399 	.word	0x00404399
  405928:	2040c354 	.word	0x2040c354
  40592c:	2040c3c8 	.word	0x2040c3c8
  405930:	0040509d 	.word	0x0040509d
  405934:	2040c3a0 	.word	0x2040c3a0

00405938 <xTaskRemoveFromEventList>:
{
  405938:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40593a:	68c3      	ldr	r3, [r0, #12]
  40593c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40593e:	b324      	cbz	r4, 40598a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  405940:	f104 0518 	add.w	r5, r4, #24
  405944:	4628      	mov	r0, r5
  405946:	4b1a      	ldr	r3, [pc, #104]	; (4059b0 <xTaskRemoveFromEventList+0x78>)
  405948:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40594a:	4b1a      	ldr	r3, [pc, #104]	; (4059b4 <xTaskRemoveFromEventList+0x7c>)
  40594c:	681b      	ldr	r3, [r3, #0]
  40594e:	bb3b      	cbnz	r3, 4059a0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  405950:	1d25      	adds	r5, r4, #4
  405952:	4628      	mov	r0, r5
  405954:	4b16      	ldr	r3, [pc, #88]	; (4059b0 <xTaskRemoveFromEventList+0x78>)
  405956:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  405958:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40595a:	4a17      	ldr	r2, [pc, #92]	; (4059b8 <xTaskRemoveFromEventList+0x80>)
  40595c:	6811      	ldr	r1, [r2, #0]
  40595e:	2301      	movs	r3, #1
  405960:	4083      	lsls	r3, r0
  405962:	430b      	orrs	r3, r1
  405964:	6013      	str	r3, [r2, #0]
  405966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40596a:	4629      	mov	r1, r5
  40596c:	4b13      	ldr	r3, [pc, #76]	; (4059bc <xTaskRemoveFromEventList+0x84>)
  40596e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  405972:	4b13      	ldr	r3, [pc, #76]	; (4059c0 <xTaskRemoveFromEventList+0x88>)
  405974:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  405976:	4b13      	ldr	r3, [pc, #76]	; (4059c4 <xTaskRemoveFromEventList+0x8c>)
  405978:	681b      	ldr	r3, [r3, #0]
  40597a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40597e:	429a      	cmp	r2, r3
  405980:	d913      	bls.n	4059aa <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  405982:	2001      	movs	r0, #1
  405984:	4b10      	ldr	r3, [pc, #64]	; (4059c8 <xTaskRemoveFromEventList+0x90>)
  405986:	6018      	str	r0, [r3, #0]
  405988:	bd38      	pop	{r3, r4, r5, pc}
  40598a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40598e:	b672      	cpsid	i
  405990:	f383 8811 	msr	BASEPRI, r3
  405994:	f3bf 8f6f 	isb	sy
  405998:	f3bf 8f4f 	dsb	sy
  40599c:	b662      	cpsie	i
  40599e:	e7fe      	b.n	40599e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4059a0:	4629      	mov	r1, r5
  4059a2:	480a      	ldr	r0, [pc, #40]	; (4059cc <xTaskRemoveFromEventList+0x94>)
  4059a4:	4b06      	ldr	r3, [pc, #24]	; (4059c0 <xTaskRemoveFromEventList+0x88>)
  4059a6:	4798      	blx	r3
  4059a8:	e7e5      	b.n	405976 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4059aa:	2000      	movs	r0, #0
}
  4059ac:	bd38      	pop	{r3, r4, r5, pc}
  4059ae:	bf00      	nop
  4059b0:	00404399 	.word	0x00404399
  4059b4:	2040c348 	.word	0x2040c348
  4059b8:	2040c354 	.word	0x2040c354
  4059bc:	2040c2dc 	.word	0x2040c2dc
  4059c0:	0040434d 	.word	0x0040434d
  4059c4:	2040c2d0 	.word	0x2040c2d0
  4059c8:	2040c3cc 	.word	0x2040c3cc
  4059cc:	2040c388 	.word	0x2040c388

004059d0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  4059d0:	b130      	cbz	r0, 4059e0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4059d2:	4a09      	ldr	r2, [pc, #36]	; (4059f8 <vTaskSetTimeOutState+0x28>)
  4059d4:	6812      	ldr	r2, [r2, #0]
  4059d6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4059d8:	4a08      	ldr	r2, [pc, #32]	; (4059fc <vTaskSetTimeOutState+0x2c>)
  4059da:	6812      	ldr	r2, [r2, #0]
  4059dc:	6042      	str	r2, [r0, #4]
  4059de:	4770      	bx	lr
  4059e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4059e4:	b672      	cpsid	i
  4059e6:	f383 8811 	msr	BASEPRI, r3
  4059ea:	f3bf 8f6f 	isb	sy
  4059ee:	f3bf 8f4f 	dsb	sy
  4059f2:	b662      	cpsie	i
  4059f4:	e7fe      	b.n	4059f4 <vTaskSetTimeOutState+0x24>
  4059f6:	bf00      	nop
  4059f8:	2040c384 	.word	0x2040c384
  4059fc:	2040c3c8 	.word	0x2040c3c8

00405a00 <xTaskCheckForTimeOut>:
{
  405a00:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  405a02:	b1c0      	cbz	r0, 405a36 <xTaskCheckForTimeOut+0x36>
  405a04:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  405a06:	b309      	cbz	r1, 405a4c <xTaskCheckForTimeOut+0x4c>
  405a08:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  405a0a:	4b1d      	ldr	r3, [pc, #116]	; (405a80 <xTaskCheckForTimeOut+0x80>)
  405a0c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  405a0e:	4b1d      	ldr	r3, [pc, #116]	; (405a84 <xTaskCheckForTimeOut+0x84>)
  405a10:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  405a12:	682b      	ldr	r3, [r5, #0]
  405a14:	f1b3 3fff 	cmp.w	r3, #4294967295
  405a18:	d02e      	beq.n	405a78 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  405a1a:	491b      	ldr	r1, [pc, #108]	; (405a88 <xTaskCheckForTimeOut+0x88>)
  405a1c:	6809      	ldr	r1, [r1, #0]
  405a1e:	6820      	ldr	r0, [r4, #0]
  405a20:	4288      	cmp	r0, r1
  405a22:	d002      	beq.n	405a2a <xTaskCheckForTimeOut+0x2a>
  405a24:	6861      	ldr	r1, [r4, #4]
  405a26:	428a      	cmp	r2, r1
  405a28:	d228      	bcs.n	405a7c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  405a2a:	6861      	ldr	r1, [r4, #4]
  405a2c:	1a50      	subs	r0, r2, r1
  405a2e:	4283      	cmp	r3, r0
  405a30:	d817      	bhi.n	405a62 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  405a32:	2401      	movs	r4, #1
  405a34:	e01c      	b.n	405a70 <xTaskCheckForTimeOut+0x70>
  405a36:	f04f 0380 	mov.w	r3, #128	; 0x80
  405a3a:	b672      	cpsid	i
  405a3c:	f383 8811 	msr	BASEPRI, r3
  405a40:	f3bf 8f6f 	isb	sy
  405a44:	f3bf 8f4f 	dsb	sy
  405a48:	b662      	cpsie	i
  405a4a:	e7fe      	b.n	405a4a <xTaskCheckForTimeOut+0x4a>
  405a4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  405a50:	b672      	cpsid	i
  405a52:	f383 8811 	msr	BASEPRI, r3
  405a56:	f3bf 8f6f 	isb	sy
  405a5a:	f3bf 8f4f 	dsb	sy
  405a5e:	b662      	cpsie	i
  405a60:	e7fe      	b.n	405a60 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  405a62:	1a9b      	subs	r3, r3, r2
  405a64:	440b      	add	r3, r1
  405a66:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  405a68:	4620      	mov	r0, r4
  405a6a:	4b08      	ldr	r3, [pc, #32]	; (405a8c <xTaskCheckForTimeOut+0x8c>)
  405a6c:	4798      	blx	r3
			xReturn = pdFALSE;
  405a6e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  405a70:	4b07      	ldr	r3, [pc, #28]	; (405a90 <xTaskCheckForTimeOut+0x90>)
  405a72:	4798      	blx	r3
}
  405a74:	4620      	mov	r0, r4
  405a76:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  405a78:	2400      	movs	r4, #0
  405a7a:	e7f9      	b.n	405a70 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  405a7c:	2401      	movs	r4, #1
  405a7e:	e7f7      	b.n	405a70 <xTaskCheckForTimeOut+0x70>
  405a80:	0040447d 	.word	0x0040447d
  405a84:	2040c3c8 	.word	0x2040c3c8
  405a88:	2040c384 	.word	0x2040c384
  405a8c:	004059d1 	.word	0x004059d1
  405a90:	004044c9 	.word	0x004044c9

00405a94 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  405a94:	2201      	movs	r2, #1
  405a96:	4b01      	ldr	r3, [pc, #4]	; (405a9c <vTaskMissedYield+0x8>)
  405a98:	601a      	str	r2, [r3, #0]
  405a9a:	4770      	bx	lr
  405a9c:	2040c3cc 	.word	0x2040c3cc

00405aa0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  405aa0:	4b05      	ldr	r3, [pc, #20]	; (405ab8 <xTaskGetSchedulerState+0x18>)
  405aa2:	681b      	ldr	r3, [r3, #0]
  405aa4:	b133      	cbz	r3, 405ab4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  405aa6:	4b05      	ldr	r3, [pc, #20]	; (405abc <xTaskGetSchedulerState+0x1c>)
  405aa8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  405aaa:	2b00      	cmp	r3, #0
  405aac:	bf0c      	ite	eq
  405aae:	2002      	moveq	r0, #2
  405ab0:	2000      	movne	r0, #0
  405ab2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  405ab4:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  405ab6:	4770      	bx	lr
  405ab8:	2040c39c 	.word	0x2040c39c
  405abc:	2040c348 	.word	0x2040c348

00405ac0 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  405ac0:	2800      	cmp	r0, #0
  405ac2:	d044      	beq.n	405b4e <vTaskPriorityInherit+0x8e>
	{
  405ac4:	b538      	push	{r3, r4, r5, lr}
  405ac6:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  405ac8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  405aca:	4921      	ldr	r1, [pc, #132]	; (405b50 <vTaskPriorityInherit+0x90>)
  405acc:	6809      	ldr	r1, [r1, #0]
  405ace:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  405ad0:	428a      	cmp	r2, r1
  405ad2:	d214      	bcs.n	405afe <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  405ad4:	6981      	ldr	r1, [r0, #24]
  405ad6:	2900      	cmp	r1, #0
  405ad8:	db05      	blt.n	405ae6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  405ada:	491d      	ldr	r1, [pc, #116]	; (405b50 <vTaskPriorityInherit+0x90>)
  405adc:	6809      	ldr	r1, [r1, #0]
  405ade:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  405ae0:	f1c1 0105 	rsb	r1, r1, #5
  405ae4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  405ae6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  405aea:	491a      	ldr	r1, [pc, #104]	; (405b54 <vTaskPriorityInherit+0x94>)
  405aec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  405af0:	6961      	ldr	r1, [r4, #20]
  405af2:	4291      	cmp	r1, r2
  405af4:	d004      	beq.n	405b00 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  405af6:	4a16      	ldr	r2, [pc, #88]	; (405b50 <vTaskPriorityInherit+0x90>)
  405af8:	6812      	ldr	r2, [r2, #0]
  405afa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  405afc:	62e2      	str	r2, [r4, #44]	; 0x2c
  405afe:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  405b00:	1d25      	adds	r5, r4, #4
  405b02:	4628      	mov	r0, r5
  405b04:	4b14      	ldr	r3, [pc, #80]	; (405b58 <vTaskPriorityInherit+0x98>)
  405b06:	4798      	blx	r3
  405b08:	b970      	cbnz	r0, 405b28 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  405b0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405b0c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  405b10:	4a10      	ldr	r2, [pc, #64]	; (405b54 <vTaskPriorityInherit+0x94>)
  405b12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  405b16:	b93a      	cbnz	r2, 405b28 <vTaskPriorityInherit+0x68>
  405b18:	4810      	ldr	r0, [pc, #64]	; (405b5c <vTaskPriorityInherit+0x9c>)
  405b1a:	6802      	ldr	r2, [r0, #0]
  405b1c:	2101      	movs	r1, #1
  405b1e:	fa01 f303 	lsl.w	r3, r1, r3
  405b22:	ea22 0303 	bic.w	r3, r2, r3
  405b26:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  405b28:	4b09      	ldr	r3, [pc, #36]	; (405b50 <vTaskPriorityInherit+0x90>)
  405b2a:	681b      	ldr	r3, [r3, #0]
  405b2c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  405b2e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  405b30:	4a0a      	ldr	r2, [pc, #40]	; (405b5c <vTaskPriorityInherit+0x9c>)
  405b32:	6811      	ldr	r1, [r2, #0]
  405b34:	2301      	movs	r3, #1
  405b36:	4083      	lsls	r3, r0
  405b38:	430b      	orrs	r3, r1
  405b3a:	6013      	str	r3, [r2, #0]
  405b3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405b40:	4629      	mov	r1, r5
  405b42:	4b04      	ldr	r3, [pc, #16]	; (405b54 <vTaskPriorityInherit+0x94>)
  405b44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  405b48:	4b05      	ldr	r3, [pc, #20]	; (405b60 <vTaskPriorityInherit+0xa0>)
  405b4a:	4798      	blx	r3
  405b4c:	bd38      	pop	{r3, r4, r5, pc}
  405b4e:	4770      	bx	lr
  405b50:	2040c2d0 	.word	0x2040c2d0
  405b54:	2040c2dc 	.word	0x2040c2dc
  405b58:	00404399 	.word	0x00404399
  405b5c:	2040c354 	.word	0x2040c354
  405b60:	0040434d 	.word	0x0040434d

00405b64 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  405b64:	2800      	cmp	r0, #0
  405b66:	d04d      	beq.n	405c04 <xTaskPriorityDisinherit+0xa0>
	{
  405b68:	b538      	push	{r3, r4, r5, lr}
  405b6a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  405b6c:	4a27      	ldr	r2, [pc, #156]	; (405c0c <xTaskPriorityDisinherit+0xa8>)
  405b6e:	6812      	ldr	r2, [r2, #0]
  405b70:	4290      	cmp	r0, r2
  405b72:	d00a      	beq.n	405b8a <xTaskPriorityDisinherit+0x26>
  405b74:	f04f 0380 	mov.w	r3, #128	; 0x80
  405b78:	b672      	cpsid	i
  405b7a:	f383 8811 	msr	BASEPRI, r3
  405b7e:	f3bf 8f6f 	isb	sy
  405b82:	f3bf 8f4f 	dsb	sy
  405b86:	b662      	cpsie	i
  405b88:	e7fe      	b.n	405b88 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  405b8a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  405b8c:	b952      	cbnz	r2, 405ba4 <xTaskPriorityDisinherit+0x40>
  405b8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  405b92:	b672      	cpsid	i
  405b94:	f383 8811 	msr	BASEPRI, r3
  405b98:	f3bf 8f6f 	isb	sy
  405b9c:	f3bf 8f4f 	dsb	sy
  405ba0:	b662      	cpsie	i
  405ba2:	e7fe      	b.n	405ba2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  405ba4:	3a01      	subs	r2, #1
  405ba6:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  405ba8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  405baa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  405bac:	4288      	cmp	r0, r1
  405bae:	d02b      	beq.n	405c08 <xTaskPriorityDisinherit+0xa4>
  405bb0:	bb52      	cbnz	r2, 405c08 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  405bb2:	1d25      	adds	r5, r4, #4
  405bb4:	4628      	mov	r0, r5
  405bb6:	4b16      	ldr	r3, [pc, #88]	; (405c10 <xTaskPriorityDisinherit+0xac>)
  405bb8:	4798      	blx	r3
  405bba:	b968      	cbnz	r0, 405bd8 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  405bbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  405bbe:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405bc2:	4b14      	ldr	r3, [pc, #80]	; (405c14 <xTaskPriorityDisinherit+0xb0>)
  405bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405bc8:	b933      	cbnz	r3, 405bd8 <xTaskPriorityDisinherit+0x74>
  405bca:	4813      	ldr	r0, [pc, #76]	; (405c18 <xTaskPriorityDisinherit+0xb4>)
  405bcc:	6803      	ldr	r3, [r0, #0]
  405bce:	2201      	movs	r2, #1
  405bd0:	408a      	lsls	r2, r1
  405bd2:	ea23 0302 	bic.w	r3, r3, r2
  405bd6:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  405bd8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  405bda:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  405bdc:	f1c0 0305 	rsb	r3, r0, #5
  405be0:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  405be2:	4a0d      	ldr	r2, [pc, #52]	; (405c18 <xTaskPriorityDisinherit+0xb4>)
  405be4:	6811      	ldr	r1, [r2, #0]
  405be6:	2401      	movs	r4, #1
  405be8:	fa04 f300 	lsl.w	r3, r4, r0
  405bec:	430b      	orrs	r3, r1
  405bee:	6013      	str	r3, [r2, #0]
  405bf0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405bf4:	4629      	mov	r1, r5
  405bf6:	4b07      	ldr	r3, [pc, #28]	; (405c14 <xTaskPriorityDisinherit+0xb0>)
  405bf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  405bfc:	4b07      	ldr	r3, [pc, #28]	; (405c1c <xTaskPriorityDisinherit+0xb8>)
  405bfe:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  405c00:	4620      	mov	r0, r4
  405c02:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  405c04:	2000      	movs	r0, #0
  405c06:	4770      	bx	lr
  405c08:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  405c0a:	bd38      	pop	{r3, r4, r5, pc}
  405c0c:	2040c2d0 	.word	0x2040c2d0
  405c10:	00404399 	.word	0x00404399
  405c14:	2040c2dc 	.word	0x2040c2dc
  405c18:	2040c354 	.word	0x2040c354
  405c1c:	0040434d 	.word	0x0040434d

00405c20 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  405c20:	4b05      	ldr	r3, [pc, #20]	; (405c38 <pvTaskIncrementMutexHeldCount+0x18>)
  405c22:	681b      	ldr	r3, [r3, #0]
  405c24:	b123      	cbz	r3, 405c30 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  405c26:	4b04      	ldr	r3, [pc, #16]	; (405c38 <pvTaskIncrementMutexHeldCount+0x18>)
  405c28:	681a      	ldr	r2, [r3, #0]
  405c2a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  405c2c:	3301      	adds	r3, #1
  405c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  405c30:	4b01      	ldr	r3, [pc, #4]	; (405c38 <pvTaskIncrementMutexHeldCount+0x18>)
  405c32:	6818      	ldr	r0, [r3, #0]
	}
  405c34:	4770      	bx	lr
  405c36:	bf00      	nop
  405c38:	2040c2d0 	.word	0x2040c2d0

00405c3c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  405c3c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  405c3e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  405c40:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  405c42:	4291      	cmp	r1, r2
  405c44:	d80c      	bhi.n	405c60 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  405c46:	1ad2      	subs	r2, r2, r3
  405c48:	6983      	ldr	r3, [r0, #24]
  405c4a:	429a      	cmp	r2, r3
  405c4c:	d301      	bcc.n	405c52 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  405c4e:	2001      	movs	r0, #1
  405c50:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  405c52:	1d01      	adds	r1, r0, #4
  405c54:	4b09      	ldr	r3, [pc, #36]	; (405c7c <prvInsertTimerInActiveList+0x40>)
  405c56:	6818      	ldr	r0, [r3, #0]
  405c58:	4b09      	ldr	r3, [pc, #36]	; (405c80 <prvInsertTimerInActiveList+0x44>)
  405c5a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  405c5c:	2000      	movs	r0, #0
  405c5e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  405c60:	429a      	cmp	r2, r3
  405c62:	d203      	bcs.n	405c6c <prvInsertTimerInActiveList+0x30>
  405c64:	4299      	cmp	r1, r3
  405c66:	d301      	bcc.n	405c6c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  405c68:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  405c6a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  405c6c:	1d01      	adds	r1, r0, #4
  405c6e:	4b05      	ldr	r3, [pc, #20]	; (405c84 <prvInsertTimerInActiveList+0x48>)
  405c70:	6818      	ldr	r0, [r3, #0]
  405c72:	4b03      	ldr	r3, [pc, #12]	; (405c80 <prvInsertTimerInActiveList+0x44>)
  405c74:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  405c76:	2000      	movs	r0, #0
  405c78:	bd08      	pop	{r3, pc}
  405c7a:	bf00      	nop
  405c7c:	2040c3d4 	.word	0x2040c3d4
  405c80:	00404365 	.word	0x00404365
  405c84:	2040c3d0 	.word	0x2040c3d0

00405c88 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  405c88:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  405c8a:	4b15      	ldr	r3, [pc, #84]	; (405ce0 <prvCheckForValidListAndQueue+0x58>)
  405c8c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  405c8e:	4b15      	ldr	r3, [pc, #84]	; (405ce4 <prvCheckForValidListAndQueue+0x5c>)
  405c90:	681b      	ldr	r3, [r3, #0]
  405c92:	b113      	cbz	r3, 405c9a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  405c94:	4b14      	ldr	r3, [pc, #80]	; (405ce8 <prvCheckForValidListAndQueue+0x60>)
  405c96:	4798      	blx	r3
  405c98:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  405c9a:	4d14      	ldr	r5, [pc, #80]	; (405cec <prvCheckForValidListAndQueue+0x64>)
  405c9c:	4628      	mov	r0, r5
  405c9e:	4e14      	ldr	r6, [pc, #80]	; (405cf0 <prvCheckForValidListAndQueue+0x68>)
  405ca0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  405ca2:	4c14      	ldr	r4, [pc, #80]	; (405cf4 <prvCheckForValidListAndQueue+0x6c>)
  405ca4:	4620      	mov	r0, r4
  405ca6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  405ca8:	4b13      	ldr	r3, [pc, #76]	; (405cf8 <prvCheckForValidListAndQueue+0x70>)
  405caa:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  405cac:	4b13      	ldr	r3, [pc, #76]	; (405cfc <prvCheckForValidListAndQueue+0x74>)
  405cae:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  405cb0:	2200      	movs	r2, #0
  405cb2:	2110      	movs	r1, #16
  405cb4:	2005      	movs	r0, #5
  405cb6:	4b12      	ldr	r3, [pc, #72]	; (405d00 <prvCheckForValidListAndQueue+0x78>)
  405cb8:	4798      	blx	r3
  405cba:	4b0a      	ldr	r3, [pc, #40]	; (405ce4 <prvCheckForValidListAndQueue+0x5c>)
  405cbc:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  405cbe:	b118      	cbz	r0, 405cc8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  405cc0:	4910      	ldr	r1, [pc, #64]	; (405d04 <prvCheckForValidListAndQueue+0x7c>)
  405cc2:	4b11      	ldr	r3, [pc, #68]	; (405d08 <prvCheckForValidListAndQueue+0x80>)
  405cc4:	4798      	blx	r3
  405cc6:	e7e5      	b.n	405c94 <prvCheckForValidListAndQueue+0xc>
  405cc8:	f04f 0380 	mov.w	r3, #128	; 0x80
  405ccc:	b672      	cpsid	i
  405cce:	f383 8811 	msr	BASEPRI, r3
  405cd2:	f3bf 8f6f 	isb	sy
  405cd6:	f3bf 8f4f 	dsb	sy
  405cda:	b662      	cpsie	i
  405cdc:	e7fe      	b.n	405cdc <prvCheckForValidListAndQueue+0x54>
  405cde:	bf00      	nop
  405ce0:	0040447d 	.word	0x0040447d
  405ce4:	2040c404 	.word	0x2040c404
  405ce8:	004044c9 	.word	0x004044c9
  405cec:	2040c3d8 	.word	0x2040c3d8
  405cf0:	00404331 	.word	0x00404331
  405cf4:	2040c3ec 	.word	0x2040c3ec
  405cf8:	2040c3d0 	.word	0x2040c3d0
  405cfc:	2040c3d4 	.word	0x2040c3d4
  405d00:	004049d5 	.word	0x004049d5
  405d04:	0040d67c 	.word	0x0040d67c
  405d08:	00404fe5 	.word	0x00404fe5

00405d0c <xTimerCreateTimerTask>:
{
  405d0c:	b510      	push	{r4, lr}
  405d0e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  405d10:	4b0f      	ldr	r3, [pc, #60]	; (405d50 <xTimerCreateTimerTask+0x44>)
  405d12:	4798      	blx	r3
	if( xTimerQueue != NULL )
  405d14:	4b0f      	ldr	r3, [pc, #60]	; (405d54 <xTimerCreateTimerTask+0x48>)
  405d16:	681b      	ldr	r3, [r3, #0]
  405d18:	b173      	cbz	r3, 405d38 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  405d1a:	2300      	movs	r3, #0
  405d1c:	9303      	str	r3, [sp, #12]
  405d1e:	9302      	str	r3, [sp, #8]
  405d20:	9301      	str	r3, [sp, #4]
  405d22:	2204      	movs	r2, #4
  405d24:	9200      	str	r2, [sp, #0]
  405d26:	f44f 7282 	mov.w	r2, #260	; 0x104
  405d2a:	490b      	ldr	r1, [pc, #44]	; (405d58 <xTimerCreateTimerTask+0x4c>)
  405d2c:	480b      	ldr	r0, [pc, #44]	; (405d5c <xTimerCreateTimerTask+0x50>)
  405d2e:	4c0c      	ldr	r4, [pc, #48]	; (405d60 <xTimerCreateTimerTask+0x54>)
  405d30:	47a0      	blx	r4
	configASSERT( xReturn );
  405d32:	b108      	cbz	r0, 405d38 <xTimerCreateTimerTask+0x2c>
}
  405d34:	b004      	add	sp, #16
  405d36:	bd10      	pop	{r4, pc}
  405d38:	f04f 0380 	mov.w	r3, #128	; 0x80
  405d3c:	b672      	cpsid	i
  405d3e:	f383 8811 	msr	BASEPRI, r3
  405d42:	f3bf 8f6f 	isb	sy
  405d46:	f3bf 8f4f 	dsb	sy
  405d4a:	b662      	cpsie	i
  405d4c:	e7fe      	b.n	405d4c <xTimerCreateTimerTask+0x40>
  405d4e:	bf00      	nop
  405d50:	00405c89 	.word	0x00405c89
  405d54:	2040c404 	.word	0x2040c404
  405d58:	0040d684 	.word	0x0040d684
  405d5c:	00405e8d 	.word	0x00405e8d
  405d60:	004050f5 	.word	0x004050f5

00405d64 <xTimerGenericCommand>:
	configASSERT( xTimer );
  405d64:	b1d8      	cbz	r0, 405d9e <xTimerGenericCommand+0x3a>
{
  405d66:	b530      	push	{r4, r5, lr}
  405d68:	b085      	sub	sp, #20
  405d6a:	4615      	mov	r5, r2
  405d6c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  405d6e:	4a15      	ldr	r2, [pc, #84]	; (405dc4 <xTimerGenericCommand+0x60>)
  405d70:	6810      	ldr	r0, [r2, #0]
  405d72:	b320      	cbz	r0, 405dbe <xTimerGenericCommand+0x5a>
  405d74:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  405d76:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  405d78:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  405d7a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  405d7c:	2905      	cmp	r1, #5
  405d7e:	dc19      	bgt.n	405db4 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  405d80:	4b11      	ldr	r3, [pc, #68]	; (405dc8 <xTimerGenericCommand+0x64>)
  405d82:	4798      	blx	r3
  405d84:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  405d86:	f04f 0300 	mov.w	r3, #0
  405d8a:	bf0c      	ite	eq
  405d8c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  405d8e:	461a      	movne	r2, r3
  405d90:	4669      	mov	r1, sp
  405d92:	480c      	ldr	r0, [pc, #48]	; (405dc4 <xTimerGenericCommand+0x60>)
  405d94:	6800      	ldr	r0, [r0, #0]
  405d96:	4c0d      	ldr	r4, [pc, #52]	; (405dcc <xTimerGenericCommand+0x68>)
  405d98:	47a0      	blx	r4
}
  405d9a:	b005      	add	sp, #20
  405d9c:	bd30      	pop	{r4, r5, pc}
  405d9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  405da2:	b672      	cpsid	i
  405da4:	f383 8811 	msr	BASEPRI, r3
  405da8:	f3bf 8f6f 	isb	sy
  405dac:	f3bf 8f4f 	dsb	sy
  405db0:	b662      	cpsie	i
  405db2:	e7fe      	b.n	405db2 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  405db4:	2300      	movs	r3, #0
  405db6:	4669      	mov	r1, sp
  405db8:	4c05      	ldr	r4, [pc, #20]	; (405dd0 <xTimerGenericCommand+0x6c>)
  405dba:	47a0      	blx	r4
  405dbc:	e7ed      	b.n	405d9a <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  405dbe:	2000      	movs	r0, #0
	return xReturn;
  405dc0:	e7eb      	b.n	405d9a <xTimerGenericCommand+0x36>
  405dc2:	bf00      	nop
  405dc4:	2040c404 	.word	0x2040c404
  405dc8:	00405aa1 	.word	0x00405aa1
  405dcc:	00404a51 	.word	0x00404a51
  405dd0:	00404c35 	.word	0x00404c35

00405dd4 <prvSampleTimeNow>:
{
  405dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405dd8:	b082      	sub	sp, #8
  405dda:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  405ddc:	4b24      	ldr	r3, [pc, #144]	; (405e70 <prvSampleTimeNow+0x9c>)
  405dde:	4798      	blx	r3
  405de0:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  405de2:	4b24      	ldr	r3, [pc, #144]	; (405e74 <prvSampleTimeNow+0xa0>)
  405de4:	681b      	ldr	r3, [r3, #0]
  405de6:	4298      	cmp	r0, r3
  405de8:	d31b      	bcc.n	405e22 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  405dea:	2300      	movs	r3, #0
  405dec:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  405df0:	4b20      	ldr	r3, [pc, #128]	; (405e74 <prvSampleTimeNow+0xa0>)
  405df2:	601f      	str	r7, [r3, #0]
}
  405df4:	4638      	mov	r0, r7
  405df6:	b002      	add	sp, #8
  405df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  405dfc:	2100      	movs	r1, #0
  405dfe:	9100      	str	r1, [sp, #0]
  405e00:	460b      	mov	r3, r1
  405e02:	4652      	mov	r2, sl
  405e04:	4620      	mov	r0, r4
  405e06:	4c1c      	ldr	r4, [pc, #112]	; (405e78 <prvSampleTimeNow+0xa4>)
  405e08:	47a0      	blx	r4
				configASSERT( xResult );
  405e0a:	b960      	cbnz	r0, 405e26 <prvSampleTimeNow+0x52>
  405e0c:	f04f 0380 	mov.w	r3, #128	; 0x80
  405e10:	b672      	cpsid	i
  405e12:	f383 8811 	msr	BASEPRI, r3
  405e16:	f3bf 8f6f 	isb	sy
  405e1a:	f3bf 8f4f 	dsb	sy
  405e1e:	b662      	cpsie	i
  405e20:	e7fe      	b.n	405e20 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  405e22:	4d16      	ldr	r5, [pc, #88]	; (405e7c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  405e24:	4e16      	ldr	r6, [pc, #88]	; (405e80 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  405e26:	682b      	ldr	r3, [r5, #0]
  405e28:	681a      	ldr	r2, [r3, #0]
  405e2a:	b1c2      	cbz	r2, 405e5e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  405e2c:	68db      	ldr	r3, [r3, #12]
  405e2e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  405e32:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  405e34:	f104 0904 	add.w	r9, r4, #4
  405e38:	4648      	mov	r0, r9
  405e3a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  405e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405e3e:	4620      	mov	r0, r4
  405e40:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  405e42:	69e3      	ldr	r3, [r4, #28]
  405e44:	2b01      	cmp	r3, #1
  405e46:	d1ee      	bne.n	405e26 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  405e48:	69a3      	ldr	r3, [r4, #24]
  405e4a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  405e4c:	459a      	cmp	sl, r3
  405e4e:	d2d5      	bcs.n	405dfc <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  405e50:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  405e52:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  405e54:	4649      	mov	r1, r9
  405e56:	6828      	ldr	r0, [r5, #0]
  405e58:	4b0a      	ldr	r3, [pc, #40]	; (405e84 <prvSampleTimeNow+0xb0>)
  405e5a:	4798      	blx	r3
  405e5c:	e7e3      	b.n	405e26 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  405e5e:	4a0a      	ldr	r2, [pc, #40]	; (405e88 <prvSampleTimeNow+0xb4>)
  405e60:	6810      	ldr	r0, [r2, #0]
  405e62:	4906      	ldr	r1, [pc, #24]	; (405e7c <prvSampleTimeNow+0xa8>)
  405e64:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  405e66:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  405e68:	2301      	movs	r3, #1
  405e6a:	f8c8 3000 	str.w	r3, [r8]
  405e6e:	e7bf      	b.n	405df0 <prvSampleTimeNow+0x1c>
  405e70:	004053c5 	.word	0x004053c5
  405e74:	2040c400 	.word	0x2040c400
  405e78:	00405d65 	.word	0x00405d65
  405e7c:	2040c3d0 	.word	0x2040c3d0
  405e80:	00404399 	.word	0x00404399
  405e84:	00404365 	.word	0x00404365
  405e88:	2040c3d4 	.word	0x2040c3d4

00405e8c <prvTimerTask>:
{
  405e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405e90:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  405e92:	4e75      	ldr	r6, [pc, #468]	; (406068 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  405e94:	4f75      	ldr	r7, [pc, #468]	; (40606c <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  405e96:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 406094 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  405e9a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 406098 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  405e9e:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  405ea0:	681a      	ldr	r2, [r3, #0]
  405ea2:	2a00      	cmp	r2, #0
  405ea4:	f000 80ce 	beq.w	406044 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  405ea8:	68db      	ldr	r3, [r3, #12]
  405eaa:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  405eac:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  405eae:	a804      	add	r0, sp, #16
  405eb0:	4b6f      	ldr	r3, [pc, #444]	; (406070 <prvTimerTask+0x1e4>)
  405eb2:	4798      	blx	r3
  405eb4:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  405eb6:	9b04      	ldr	r3, [sp, #16]
  405eb8:	2b00      	cmp	r3, #0
  405eba:	d144      	bne.n	405f46 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  405ebc:	42a0      	cmp	r0, r4
  405ebe:	d212      	bcs.n	405ee6 <prvTimerTask+0x5a>
  405ec0:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  405ec2:	1b61      	subs	r1, r4, r5
  405ec4:	4b6b      	ldr	r3, [pc, #428]	; (406074 <prvTimerTask+0x1e8>)
  405ec6:	6818      	ldr	r0, [r3, #0]
  405ec8:	4b6b      	ldr	r3, [pc, #428]	; (406078 <prvTimerTask+0x1ec>)
  405eca:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  405ecc:	4b6b      	ldr	r3, [pc, #428]	; (40607c <prvTimerTask+0x1f0>)
  405ece:	4798      	blx	r3
  405ed0:	2800      	cmp	r0, #0
  405ed2:	d13a      	bne.n	405f4a <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  405ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405ed8:	f8c9 3000 	str.w	r3, [r9]
  405edc:	f3bf 8f4f 	dsb	sy
  405ee0:	f3bf 8f6f 	isb	sy
  405ee4:	e031      	b.n	405f4a <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  405ee6:	4b65      	ldr	r3, [pc, #404]	; (40607c <prvTimerTask+0x1f0>)
  405ee8:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  405eea:	6833      	ldr	r3, [r6, #0]
  405eec:	68db      	ldr	r3, [r3, #12]
  405eee:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  405ef2:	f10a 0004 	add.w	r0, sl, #4
  405ef6:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  405ef8:	f8da 301c 	ldr.w	r3, [sl, #28]
  405efc:	2b01      	cmp	r3, #1
  405efe:	d004      	beq.n	405f0a <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  405f00:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  405f04:	4650      	mov	r0, sl
  405f06:	4798      	blx	r3
  405f08:	e01f      	b.n	405f4a <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  405f0a:	f8da 1018 	ldr.w	r1, [sl, #24]
  405f0e:	4623      	mov	r3, r4
  405f10:	462a      	mov	r2, r5
  405f12:	4421      	add	r1, r4
  405f14:	4650      	mov	r0, sl
  405f16:	4d5a      	ldr	r5, [pc, #360]	; (406080 <prvTimerTask+0x1f4>)
  405f18:	47a8      	blx	r5
  405f1a:	2801      	cmp	r0, #1
  405f1c:	d1f0      	bne.n	405f00 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  405f1e:	2100      	movs	r1, #0
  405f20:	9100      	str	r1, [sp, #0]
  405f22:	460b      	mov	r3, r1
  405f24:	4622      	mov	r2, r4
  405f26:	4650      	mov	r0, sl
  405f28:	4c56      	ldr	r4, [pc, #344]	; (406084 <prvTimerTask+0x1f8>)
  405f2a:	47a0      	blx	r4
			configASSERT( xResult );
  405f2c:	2800      	cmp	r0, #0
  405f2e:	d1e7      	bne.n	405f00 <prvTimerTask+0x74>
  405f30:	f04f 0380 	mov.w	r3, #128	; 0x80
  405f34:	b672      	cpsid	i
  405f36:	f383 8811 	msr	BASEPRI, r3
  405f3a:	f3bf 8f6f 	isb	sy
  405f3e:	f3bf 8f4f 	dsb	sy
  405f42:	b662      	cpsie	i
  405f44:	e7fe      	b.n	405f44 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  405f46:	4b4d      	ldr	r3, [pc, #308]	; (40607c <prvTimerTask+0x1f0>)
  405f48:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  405f4a:	4d4a      	ldr	r5, [pc, #296]	; (406074 <prvTimerTask+0x1e8>)
  405f4c:	4c4e      	ldr	r4, [pc, #312]	; (406088 <prvTimerTask+0x1fc>)
  405f4e:	e006      	b.n	405f5e <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  405f50:	9907      	ldr	r1, [sp, #28]
  405f52:	9806      	ldr	r0, [sp, #24]
  405f54:	9b05      	ldr	r3, [sp, #20]
  405f56:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  405f58:	9b04      	ldr	r3, [sp, #16]
  405f5a:	2b00      	cmp	r3, #0
  405f5c:	da09      	bge.n	405f72 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  405f5e:	2300      	movs	r3, #0
  405f60:	461a      	mov	r2, r3
  405f62:	a904      	add	r1, sp, #16
  405f64:	6828      	ldr	r0, [r5, #0]
  405f66:	47a0      	blx	r4
  405f68:	2800      	cmp	r0, #0
  405f6a:	d098      	beq.n	405e9e <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  405f6c:	9b04      	ldr	r3, [sp, #16]
  405f6e:	2b00      	cmp	r3, #0
  405f70:	dbee      	blt.n	405f50 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  405f72:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  405f76:	f8da 3014 	ldr.w	r3, [sl, #20]
  405f7a:	b113      	cbz	r3, 405f82 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  405f7c:	f10a 0004 	add.w	r0, sl, #4
  405f80:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  405f82:	a803      	add	r0, sp, #12
  405f84:	4b3a      	ldr	r3, [pc, #232]	; (406070 <prvTimerTask+0x1e4>)
  405f86:	4798      	blx	r3
			switch( xMessage.xMessageID )
  405f88:	9b04      	ldr	r3, [sp, #16]
  405f8a:	2b09      	cmp	r3, #9
  405f8c:	d8e7      	bhi.n	405f5e <prvTimerTask+0xd2>
  405f8e:	a201      	add	r2, pc, #4	; (adr r2, 405f94 <prvTimerTask+0x108>)
  405f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405f94:	00405fbd 	.word	0x00405fbd
  405f98:	00405fbd 	.word	0x00405fbd
  405f9c:	00405fbd 	.word	0x00405fbd
  405fa0:	00405f5f 	.word	0x00405f5f
  405fa4:	00406011 	.word	0x00406011
  405fa8:	0040603d 	.word	0x0040603d
  405fac:	00405fbd 	.word	0x00405fbd
  405fb0:	00405fbd 	.word	0x00405fbd
  405fb4:	00405f5f 	.word	0x00405f5f
  405fb8:	00406011 	.word	0x00406011
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  405fbc:	9c05      	ldr	r4, [sp, #20]
  405fbe:	f8da 1018 	ldr.w	r1, [sl, #24]
  405fc2:	4623      	mov	r3, r4
  405fc4:	4602      	mov	r2, r0
  405fc6:	4421      	add	r1, r4
  405fc8:	4650      	mov	r0, sl
  405fca:	4c2d      	ldr	r4, [pc, #180]	; (406080 <prvTimerTask+0x1f4>)
  405fcc:	47a0      	blx	r4
  405fce:	2801      	cmp	r0, #1
  405fd0:	d1bc      	bne.n	405f4c <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  405fd2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  405fd6:	4650      	mov	r0, sl
  405fd8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  405fda:	f8da 301c 	ldr.w	r3, [sl, #28]
  405fde:	2b01      	cmp	r3, #1
  405fe0:	d1b4      	bne.n	405f4c <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  405fe2:	f8da 2018 	ldr.w	r2, [sl, #24]
  405fe6:	2100      	movs	r1, #0
  405fe8:	9100      	str	r1, [sp, #0]
  405fea:	460b      	mov	r3, r1
  405fec:	9805      	ldr	r0, [sp, #20]
  405fee:	4402      	add	r2, r0
  405ff0:	4650      	mov	r0, sl
  405ff2:	4c24      	ldr	r4, [pc, #144]	; (406084 <prvTimerTask+0x1f8>)
  405ff4:	47a0      	blx	r4
							configASSERT( xResult );
  405ff6:	2800      	cmp	r0, #0
  405ff8:	d1a8      	bne.n	405f4c <prvTimerTask+0xc0>
  405ffa:	f04f 0380 	mov.w	r3, #128	; 0x80
  405ffe:	b672      	cpsid	i
  406000:	f383 8811 	msr	BASEPRI, r3
  406004:	f3bf 8f6f 	isb	sy
  406008:	f3bf 8f4f 	dsb	sy
  40600c:	b662      	cpsie	i
  40600e:	e7fe      	b.n	40600e <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  406010:	9905      	ldr	r1, [sp, #20]
  406012:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  406016:	b131      	cbz	r1, 406026 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  406018:	4603      	mov	r3, r0
  40601a:	4602      	mov	r2, r0
  40601c:	4401      	add	r1, r0
  40601e:	4650      	mov	r0, sl
  406020:	4c17      	ldr	r4, [pc, #92]	; (406080 <prvTimerTask+0x1f4>)
  406022:	47a0      	blx	r4
  406024:	e792      	b.n	405f4c <prvTimerTask+0xc0>
  406026:	f04f 0380 	mov.w	r3, #128	; 0x80
  40602a:	b672      	cpsid	i
  40602c:	f383 8811 	msr	BASEPRI, r3
  406030:	f3bf 8f6f 	isb	sy
  406034:	f3bf 8f4f 	dsb	sy
  406038:	b662      	cpsie	i
  40603a:	e7fe      	b.n	40603a <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  40603c:	4650      	mov	r0, sl
  40603e:	4b13      	ldr	r3, [pc, #76]	; (40608c <prvTimerTask+0x200>)
  406040:	4798      	blx	r3
  406042:	e783      	b.n	405f4c <prvTimerTask+0xc0>
	vTaskSuspendAll();
  406044:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  406046:	a804      	add	r0, sp, #16
  406048:	4b09      	ldr	r3, [pc, #36]	; (406070 <prvTimerTask+0x1e4>)
  40604a:	4798      	blx	r3
  40604c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40604e:	9b04      	ldr	r3, [sp, #16]
  406050:	2b00      	cmp	r3, #0
  406052:	f47f af78 	bne.w	405f46 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  406056:	4b0e      	ldr	r3, [pc, #56]	; (406090 <prvTimerTask+0x204>)
  406058:	681b      	ldr	r3, [r3, #0]
  40605a:	681a      	ldr	r2, [r3, #0]
  40605c:	fab2 f282 	clz	r2, r2
  406060:	0952      	lsrs	r2, r2, #5
  406062:	2400      	movs	r4, #0
  406064:	e72d      	b.n	405ec2 <prvTimerTask+0x36>
  406066:	bf00      	nop
  406068:	2040c3d0 	.word	0x2040c3d0
  40606c:	004053b5 	.word	0x004053b5
  406070:	00405dd5 	.word	0x00405dd5
  406074:	2040c404 	.word	0x2040c404
  406078:	00405019 	.word	0x00405019
  40607c:	0040551d 	.word	0x0040551d
  406080:	00405c3d 	.word	0x00405c3d
  406084:	00405d65 	.word	0x00405d65
  406088:	00404e15 	.word	0x00404e15
  40608c:	00404749 	.word	0x00404749
  406090:	2040c3d4 	.word	0x2040c3d4
  406094:	e000ed04 	.word	0xe000ed04
  406098:	00404399 	.word	0x00404399

0040609c <task_terminal>:
		xQueueSendToBackFromISR(xQueueSdcard, &frase, 0);
		vTaskDelay(400);
	}
}

void task_terminal(void){				
  40609c:	b570      	push	{r4, r5, r6, lr}
  40609e:	b082      	sub	sp, #8
	int print_mode = 0;
	char frase[6];
	
	while (true) {
		//printf("TO no while t\r\n");
		if( xSemaphoreTake(xSemaphoreT, ( TickType_t ) 10) == pdTRUE ){
  4060a0:	4e0d      	ldr	r6, [pc, #52]	; (4060d8 <task_terminal+0x3c>)
  4060a2:	2500      	movs	r5, #0
  4060a4:	4c0d      	ldr	r4, [pc, #52]	; (4060dc <task_terminal+0x40>)
  4060a6:	e003      	b.n	4060b0 <task_terminal+0x14>
		}
		if(print_mode){
			//printf("PRINTANDO\r\n");
		}
		//printf("Starting ADC\n");
		vTaskDelay(400);
  4060a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4060ac:	4b0c      	ldr	r3, [pc, #48]	; (4060e0 <task_terminal+0x44>)
  4060ae:	4798      	blx	r3
		if( xSemaphoreTake(xSemaphoreT, ( TickType_t ) 10) == pdTRUE ){
  4060b0:	462b      	mov	r3, r5
  4060b2:	220a      	movs	r2, #10
  4060b4:	4629      	mov	r1, r5
  4060b6:	6830      	ldr	r0, [r6, #0]
  4060b8:	47a0      	blx	r4
		if (xQueueReceive( xQueueTerminal, &(frase), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  4060ba:	462b      	mov	r3, r5
  4060bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4060c0:	4669      	mov	r1, sp
  4060c2:	4808      	ldr	r0, [pc, #32]	; (4060e4 <task_terminal+0x48>)
  4060c4:	6800      	ldr	r0, [r0, #0]
  4060c6:	47a0      	blx	r4
  4060c8:	2800      	cmp	r0, #0
  4060ca:	d0ed      	beq.n	4060a8 <task_terminal+0xc>
			printf("%s\n", frase);
  4060cc:	4669      	mov	r1, sp
  4060ce:	4806      	ldr	r0, [pc, #24]	; (4060e8 <task_terminal+0x4c>)
  4060d0:	4b06      	ldr	r3, [pc, #24]	; (4060ec <task_terminal+0x50>)
  4060d2:	4798      	blx	r3
  4060d4:	e7e8      	b.n	4060a8 <task_terminal+0xc>
  4060d6:	bf00      	nop
  4060d8:	2040c4a4 	.word	0x2040c4a4
  4060dc:	00404e15 	.word	0x00404e15
  4060e0:	0040563d 	.word	0x0040563d
  4060e4:	2040c49c 	.word	0x2040c49c
  4060e8:	0040d970 	.word	0x0040d970
  4060ec:	00406c7d 	.word	0x00406c7d

004060f0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4060f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4060f2:	b083      	sub	sp, #12
  4060f4:	4605      	mov	r5, r0
  4060f6:	460c      	mov	r4, r1
	uint32_t val = 0;
  4060f8:	2300      	movs	r3, #0
  4060fa:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4060fc:	4b2a      	ldr	r3, [pc, #168]	; (4061a8 <usart_serial_getchar+0xb8>)
  4060fe:	4298      	cmp	r0, r3
  406100:	d013      	beq.n	40612a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406102:	4b2a      	ldr	r3, [pc, #168]	; (4061ac <usart_serial_getchar+0xbc>)
  406104:	4298      	cmp	r0, r3
  406106:	d018      	beq.n	40613a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406108:	4b29      	ldr	r3, [pc, #164]	; (4061b0 <usart_serial_getchar+0xc0>)
  40610a:	4298      	cmp	r0, r3
  40610c:	d01d      	beq.n	40614a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40610e:	4b29      	ldr	r3, [pc, #164]	; (4061b4 <usart_serial_getchar+0xc4>)
  406110:	429d      	cmp	r5, r3
  406112:	d022      	beq.n	40615a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406114:	4b28      	ldr	r3, [pc, #160]	; (4061b8 <usart_serial_getchar+0xc8>)
  406116:	429d      	cmp	r5, r3
  406118:	d027      	beq.n	40616a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40611a:	4b28      	ldr	r3, [pc, #160]	; (4061bc <usart_serial_getchar+0xcc>)
  40611c:	429d      	cmp	r5, r3
  40611e:	d02e      	beq.n	40617e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406120:	4b27      	ldr	r3, [pc, #156]	; (4061c0 <usart_serial_getchar+0xd0>)
  406122:	429d      	cmp	r5, r3
  406124:	d035      	beq.n	406192 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  406126:	b003      	add	sp, #12
  406128:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40612a:	461f      	mov	r7, r3
  40612c:	4e25      	ldr	r6, [pc, #148]	; (4061c4 <usart_serial_getchar+0xd4>)
  40612e:	4621      	mov	r1, r4
  406130:	4638      	mov	r0, r7
  406132:	47b0      	blx	r6
  406134:	2800      	cmp	r0, #0
  406136:	d1fa      	bne.n	40612e <usart_serial_getchar+0x3e>
  406138:	e7e9      	b.n	40610e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40613a:	461f      	mov	r7, r3
  40613c:	4e21      	ldr	r6, [pc, #132]	; (4061c4 <usart_serial_getchar+0xd4>)
  40613e:	4621      	mov	r1, r4
  406140:	4638      	mov	r0, r7
  406142:	47b0      	blx	r6
  406144:	2800      	cmp	r0, #0
  406146:	d1fa      	bne.n	40613e <usart_serial_getchar+0x4e>
  406148:	e7e4      	b.n	406114 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40614a:	461f      	mov	r7, r3
  40614c:	4e1d      	ldr	r6, [pc, #116]	; (4061c4 <usart_serial_getchar+0xd4>)
  40614e:	4621      	mov	r1, r4
  406150:	4638      	mov	r0, r7
  406152:	47b0      	blx	r6
  406154:	2800      	cmp	r0, #0
  406156:	d1fa      	bne.n	40614e <usart_serial_getchar+0x5e>
  406158:	e7df      	b.n	40611a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40615a:	461f      	mov	r7, r3
  40615c:	4e19      	ldr	r6, [pc, #100]	; (4061c4 <usart_serial_getchar+0xd4>)
  40615e:	4621      	mov	r1, r4
  406160:	4638      	mov	r0, r7
  406162:	47b0      	blx	r6
  406164:	2800      	cmp	r0, #0
  406166:	d1fa      	bne.n	40615e <usart_serial_getchar+0x6e>
  406168:	e7da      	b.n	406120 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40616a:	461e      	mov	r6, r3
  40616c:	4d16      	ldr	r5, [pc, #88]	; (4061c8 <usart_serial_getchar+0xd8>)
  40616e:	a901      	add	r1, sp, #4
  406170:	4630      	mov	r0, r6
  406172:	47a8      	blx	r5
  406174:	2800      	cmp	r0, #0
  406176:	d1fa      	bne.n	40616e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  406178:	9b01      	ldr	r3, [sp, #4]
  40617a:	7023      	strb	r3, [r4, #0]
  40617c:	e7d3      	b.n	406126 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40617e:	461e      	mov	r6, r3
  406180:	4d11      	ldr	r5, [pc, #68]	; (4061c8 <usart_serial_getchar+0xd8>)
  406182:	a901      	add	r1, sp, #4
  406184:	4630      	mov	r0, r6
  406186:	47a8      	blx	r5
  406188:	2800      	cmp	r0, #0
  40618a:	d1fa      	bne.n	406182 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40618c:	9b01      	ldr	r3, [sp, #4]
  40618e:	7023      	strb	r3, [r4, #0]
  406190:	e7c9      	b.n	406126 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  406192:	461e      	mov	r6, r3
  406194:	4d0c      	ldr	r5, [pc, #48]	; (4061c8 <usart_serial_getchar+0xd8>)
  406196:	a901      	add	r1, sp, #4
  406198:	4630      	mov	r0, r6
  40619a:	47a8      	blx	r5
  40619c:	2800      	cmp	r0, #0
  40619e:	d1fa      	bne.n	406196 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4061a0:	9b01      	ldr	r3, [sp, #4]
  4061a2:	7023      	strb	r3, [r4, #0]
}
  4061a4:	e7bf      	b.n	406126 <usart_serial_getchar+0x36>
  4061a6:	bf00      	nop
  4061a8:	400e0800 	.word	0x400e0800
  4061ac:	400e0a00 	.word	0x400e0a00
  4061b0:	400e1a00 	.word	0x400e1a00
  4061b4:	400e1c00 	.word	0x400e1c00
  4061b8:	40024000 	.word	0x40024000
  4061bc:	40028000 	.word	0x40028000
  4061c0:	4002c000 	.word	0x4002c000
  4061c4:	00402413 	.word	0x00402413
  4061c8:	0040251f 	.word	0x0040251f

004061cc <usart_serial_putchar>:
{
  4061cc:	b570      	push	{r4, r5, r6, lr}
  4061ce:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4061d0:	4b2a      	ldr	r3, [pc, #168]	; (40627c <usart_serial_putchar+0xb0>)
  4061d2:	4298      	cmp	r0, r3
  4061d4:	d013      	beq.n	4061fe <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4061d6:	4b2a      	ldr	r3, [pc, #168]	; (406280 <usart_serial_putchar+0xb4>)
  4061d8:	4298      	cmp	r0, r3
  4061da:	d019      	beq.n	406210 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4061dc:	4b29      	ldr	r3, [pc, #164]	; (406284 <usart_serial_putchar+0xb8>)
  4061de:	4298      	cmp	r0, r3
  4061e0:	d01f      	beq.n	406222 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4061e2:	4b29      	ldr	r3, [pc, #164]	; (406288 <usart_serial_putchar+0xbc>)
  4061e4:	4298      	cmp	r0, r3
  4061e6:	d025      	beq.n	406234 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4061e8:	4b28      	ldr	r3, [pc, #160]	; (40628c <usart_serial_putchar+0xc0>)
  4061ea:	4298      	cmp	r0, r3
  4061ec:	d02b      	beq.n	406246 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4061ee:	4b28      	ldr	r3, [pc, #160]	; (406290 <usart_serial_putchar+0xc4>)
  4061f0:	4298      	cmp	r0, r3
  4061f2:	d031      	beq.n	406258 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4061f4:	4b27      	ldr	r3, [pc, #156]	; (406294 <usart_serial_putchar+0xc8>)
  4061f6:	4298      	cmp	r0, r3
  4061f8:	d037      	beq.n	40626a <usart_serial_putchar+0x9e>
	return 0;
  4061fa:	2000      	movs	r0, #0
}
  4061fc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4061fe:	461e      	mov	r6, r3
  406200:	4d25      	ldr	r5, [pc, #148]	; (406298 <usart_serial_putchar+0xcc>)
  406202:	4621      	mov	r1, r4
  406204:	4630      	mov	r0, r6
  406206:	47a8      	blx	r5
  406208:	2800      	cmp	r0, #0
  40620a:	d1fa      	bne.n	406202 <usart_serial_putchar+0x36>
		return 1;
  40620c:	2001      	movs	r0, #1
  40620e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406210:	461e      	mov	r6, r3
  406212:	4d21      	ldr	r5, [pc, #132]	; (406298 <usart_serial_putchar+0xcc>)
  406214:	4621      	mov	r1, r4
  406216:	4630      	mov	r0, r6
  406218:	47a8      	blx	r5
  40621a:	2800      	cmp	r0, #0
  40621c:	d1fa      	bne.n	406214 <usart_serial_putchar+0x48>
		return 1;
  40621e:	2001      	movs	r0, #1
  406220:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406222:	461e      	mov	r6, r3
  406224:	4d1c      	ldr	r5, [pc, #112]	; (406298 <usart_serial_putchar+0xcc>)
  406226:	4621      	mov	r1, r4
  406228:	4630      	mov	r0, r6
  40622a:	47a8      	blx	r5
  40622c:	2800      	cmp	r0, #0
  40622e:	d1fa      	bne.n	406226 <usart_serial_putchar+0x5a>
		return 1;
  406230:	2001      	movs	r0, #1
  406232:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406234:	461e      	mov	r6, r3
  406236:	4d18      	ldr	r5, [pc, #96]	; (406298 <usart_serial_putchar+0xcc>)
  406238:	4621      	mov	r1, r4
  40623a:	4630      	mov	r0, r6
  40623c:	47a8      	blx	r5
  40623e:	2800      	cmp	r0, #0
  406240:	d1fa      	bne.n	406238 <usart_serial_putchar+0x6c>
		return 1;
  406242:	2001      	movs	r0, #1
  406244:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406246:	461e      	mov	r6, r3
  406248:	4d14      	ldr	r5, [pc, #80]	; (40629c <usart_serial_putchar+0xd0>)
  40624a:	4621      	mov	r1, r4
  40624c:	4630      	mov	r0, r6
  40624e:	47a8      	blx	r5
  406250:	2800      	cmp	r0, #0
  406252:	d1fa      	bne.n	40624a <usart_serial_putchar+0x7e>
		return 1;
  406254:	2001      	movs	r0, #1
  406256:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406258:	461e      	mov	r6, r3
  40625a:	4d10      	ldr	r5, [pc, #64]	; (40629c <usart_serial_putchar+0xd0>)
  40625c:	4621      	mov	r1, r4
  40625e:	4630      	mov	r0, r6
  406260:	47a8      	blx	r5
  406262:	2800      	cmp	r0, #0
  406264:	d1fa      	bne.n	40625c <usart_serial_putchar+0x90>
		return 1;
  406266:	2001      	movs	r0, #1
  406268:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40626a:	461e      	mov	r6, r3
  40626c:	4d0b      	ldr	r5, [pc, #44]	; (40629c <usart_serial_putchar+0xd0>)
  40626e:	4621      	mov	r1, r4
  406270:	4630      	mov	r0, r6
  406272:	47a8      	blx	r5
  406274:	2800      	cmp	r0, #0
  406276:	d1fa      	bne.n	40626e <usart_serial_putchar+0xa2>
		return 1;
  406278:	2001      	movs	r0, #1
  40627a:	bd70      	pop	{r4, r5, r6, pc}
  40627c:	400e0800 	.word	0x400e0800
  406280:	400e0a00 	.word	0x400e0a00
  406284:	400e1a00 	.word	0x400e1a00
  406288:	400e1c00 	.word	0x400e1c00
  40628c:	40024000 	.word	0x40024000
  406290:	40028000 	.word	0x40028000
  406294:	4002c000 	.word	0x4002c000
  406298:	00402401 	.word	0x00402401
  40629c:	00402509 	.word	0x00402509

004062a0 <task_sdcard>:
	}
}

void task_sdcard(void){		
  4062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062a4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
	char test_file_name[] = "0:sd_mmc_test.txt";
  4062a8:	ac9d      	add	r4, sp, #628	; 0x274
  4062aa:	4d5e      	ldr	r5, [pc, #376]	; (406424 <task_sdcard+0x184>)
  4062ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4062ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4062b0:	682b      	ldr	r3, [r5, #0]
  4062b2:	8023      	strh	r3, [r4, #0]
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};
	
	irq_initialize_vectors();
	cpu_irq_enable();
  4062b4:	2201      	movs	r2, #1
  4062b6:	4b5c      	ldr	r3, [pc, #368]	; (406428 <task_sdcard+0x188>)
  4062b8:	701a      	strb	r2, [r3, #0]
  4062ba:	f3bf 8f5f 	dmb	sy
  4062be:	b662      	cpsie	i
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4062c0:	4d5a      	ldr	r5, [pc, #360]	; (40642c <task_sdcard+0x18c>)
  4062c2:	4b5b      	ldr	r3, [pc, #364]	; (406430 <task_sdcard+0x190>)
  4062c4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4062c6:	4a5b      	ldr	r2, [pc, #364]	; (406434 <task_sdcard+0x194>)
  4062c8:	4b5b      	ldr	r3, [pc, #364]	; (406438 <task_sdcard+0x198>)
  4062ca:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4062cc:	4a5b      	ldr	r2, [pc, #364]	; (40643c <task_sdcard+0x19c>)
  4062ce:	4b5c      	ldr	r3, [pc, #368]	; (406440 <task_sdcard+0x1a0>)
  4062d0:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4062d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4062d6:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  4062d8:	23c0      	movs	r3, #192	; 0xc0
  4062da:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  4062dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4062e0:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  4062e2:	2400      	movs	r4, #0
  4062e4:	9404      	str	r4, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4062e6:	9405      	str	r4, [sp, #20]
  4062e8:	200e      	movs	r0, #14
  4062ea:	4b56      	ldr	r3, [pc, #344]	; (406444 <task_sdcard+0x1a4>)
  4062ec:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4062ee:	4a56      	ldr	r2, [pc, #344]	; (406448 <task_sdcard+0x1a8>)
  4062f0:	a901      	add	r1, sp, #4
  4062f2:	4628      	mov	r0, r5
  4062f4:	4b55      	ldr	r3, [pc, #340]	; (40644c <task_sdcard+0x1ac>)
  4062f6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4062f8:	4628      	mov	r0, r5
  4062fa:	4b55      	ldr	r3, [pc, #340]	; (406450 <task_sdcard+0x1b0>)
  4062fc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4062fe:	4628      	mov	r0, r5
  406300:	4b54      	ldr	r3, [pc, #336]	; (406454 <task_sdcard+0x1b4>)
  406302:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  406304:	4e54      	ldr	r6, [pc, #336]	; (406458 <task_sdcard+0x1b8>)
  406306:	6833      	ldr	r3, [r6, #0]
  406308:	4621      	mov	r1, r4
  40630a:	6898      	ldr	r0, [r3, #8]
  40630c:	4d53      	ldr	r5, [pc, #332]	; (40645c <task_sdcard+0x1bc>)
  40630e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  406310:	6833      	ldr	r3, [r6, #0]
  406312:	4621      	mov	r1, r4
  406314:	6858      	ldr	r0, [r3, #4]
  406316:	47a8      	blx	r5

	stdio_serial_init(CONF_TEST_USART, &usart_serial_options);
	
	/* Initialize SD MMC stack */
	sd_mmc_init();
  406318:	4b51      	ldr	r3, [pc, #324]	; (406460 <task_sdcard+0x1c0>)
  40631a:	4798      	blx	r3

	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  40631c:	4851      	ldr	r0, [pc, #324]	; (406464 <task_sdcard+0x1c4>)
  40631e:	4d52      	ldr	r5, [pc, #328]	; (406468 <task_sdcard+0x1c8>)
  406320:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  406322:	4a52      	ldr	r2, [pc, #328]	; (40646c <task_sdcard+0x1cc>)
  406324:	4952      	ldr	r1, [pc, #328]	; (406470 <task_sdcard+0x1d0>)
  406326:	4853      	ldr	r0, [pc, #332]	; (406474 <task_sdcard+0x1d4>)
  406328:	47a8      	blx	r5
	
	uint written;
	FIL fdst;
	DWORD size;
	int save_mode = 0;
  40632a:	46a1      	mov	r9, r4
			printf("[OK]\r\n");

			main_end_of_test:
			printf("Please unplug the card.\n\r");
			while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
				printf("Write to test file (f_puts)...\r\n");
  40632c:	4f52      	ldr	r7, [pc, #328]	; (406478 <task_sdcard+0x1d8>)
				}
				//written += 18;
				printf("[OK]\r\n");
				f_close(&file_object);
				printf("Test is successful.\n\r");
				delay_s(2);
  40632e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 4064cc <task_sdcard+0x22c>
		if( xSemaphoreTake(xSemaphoreSD, ( TickType_t ) 10) == pdTRUE ){
  406332:	2300      	movs	r3, #0
  406334:	220a      	movs	r2, #10
  406336:	4619      	mov	r1, r3
  406338:	4850      	ldr	r0, [pc, #320]	; (40647c <task_sdcard+0x1dc>)
  40633a:	6800      	ldr	r0, [r0, #0]
  40633c:	4c50      	ldr	r4, [pc, #320]	; (406480 <task_sdcard+0x1e0>)
  40633e:	47a0      	blx	r4
  406340:	2801      	cmp	r0, #1
			save_mode = !save_mode;
  406342:	bf08      	it	eq
  406344:	f089 0901 	eoreq.w	r9, r9, #1
		if(save_mode){
  406348:	f1b9 0f00 	cmp.w	r9, #0
  40634c:	d0f1      	beq.n	406332 <task_sdcard+0x92>
			printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  40634e:	484d      	ldr	r0, [pc, #308]	; (406484 <task_sdcard+0x1e4>)
  406350:	4b45      	ldr	r3, [pc, #276]	; (406468 <task_sdcard+0x1c8>)
  406352:	4798      	blx	r3
				status = sd_mmc_test_unit_ready(0);
  406354:	4d4c      	ldr	r5, [pc, #304]	; (406488 <task_sdcard+0x1e8>)
					printf("Card install FAIL\n\r");
  406356:	f8df a178 	ldr.w	sl, [pc, #376]	; 4064d0 <task_sdcard+0x230>
  40635a:	4e43      	ldr	r6, [pc, #268]	; (406468 <task_sdcard+0x1c8>)
  40635c:	e00a      	b.n	406374 <task_sdcard+0xd4>
  40635e:	4650      	mov	r0, sl
  406360:	47b0      	blx	r6
					printf("Please unplug and re-plug the card.\n\r");
  406362:	484a      	ldr	r0, [pc, #296]	; (40648c <task_sdcard+0x1ec>)
  406364:	47b0      	blx	r6
					while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  406366:	f04f 0b00 	mov.w	fp, #0
  40636a:	4c49      	ldr	r4, [pc, #292]	; (406490 <task_sdcard+0x1f0>)
  40636c:	4658      	mov	r0, fp
  40636e:	47a0      	blx	r4
  406370:	2802      	cmp	r0, #2
  406372:	d1fb      	bne.n	40636c <task_sdcard+0xcc>
				status = sd_mmc_test_unit_ready(0);
  406374:	2000      	movs	r0, #0
  406376:	47a8      	blx	r5
				if (CTRL_FAIL == status) {
  406378:	2801      	cmp	r0, #1
  40637a:	d0f0      	beq.n	40635e <task_sdcard+0xbe>
			} while (CTRL_GOOD != status);
  40637c:	2800      	cmp	r0, #0
  40637e:	d1f9      	bne.n	406374 <task_sdcard+0xd4>
			printf("Mount disk (f_mount)...\r\n");
  406380:	4844      	ldr	r0, [pc, #272]	; (406494 <task_sdcard+0x1f4>)
  406382:	4b39      	ldr	r3, [pc, #228]	; (406468 <task_sdcard+0x1c8>)
  406384:	4798      	blx	r3
			memset(&fs, 0, sizeof(FATFS));
  406386:	f44f 720c 	mov.w	r2, #560	; 0x230
  40638a:	2100      	movs	r1, #0
  40638c:	a811      	add	r0, sp, #68	; 0x44
  40638e:	4b42      	ldr	r3, [pc, #264]	; (406498 <task_sdcard+0x1f8>)
  406390:	4798      	blx	r3
			res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  406392:	a911      	add	r1, sp, #68	; 0x44
  406394:	2000      	movs	r0, #0
  406396:	4b41      	ldr	r3, [pc, #260]	; (40649c <task_sdcard+0x1fc>)
  406398:	4798      	blx	r3
			if (FR_INVALID_DRIVE == res) {
  40639a:	280b      	cmp	r0, #11
  40639c:	d033      	beq.n	406406 <task_sdcard+0x166>
			printf("[OK]\r\n");
  40639e:	4840      	ldr	r0, [pc, #256]	; (4064a0 <task_sdcard+0x200>)
  4063a0:	4c31      	ldr	r4, [pc, #196]	; (406468 <task_sdcard+0x1c8>)
  4063a2:	47a0      	blx	r4
			printf("Create a file (f_open)...\r\n");
  4063a4:	483f      	ldr	r0, [pc, #252]	; (4064a4 <task_sdcard+0x204>)
  4063a6:	47a0      	blx	r4
			test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  4063a8:	a9a2      	add	r1, sp, #648	; 0x288
  4063aa:	2330      	movs	r3, #48	; 0x30
  4063ac:	f801 3d14 	strb.w	r3, [r1, #-20]!
			res = f_open(&file_object, (char const *)test_file_name, FA_OPEN_ALWAYS | FA_WRITE);
  4063b0:	2212      	movs	r2, #18
  4063b2:	a808      	add	r0, sp, #32
  4063b4:	4b3c      	ldr	r3, [pc, #240]	; (4064a8 <task_sdcard+0x208>)
  4063b6:	4798      	blx	r3
			if (res != FR_OK) {
  4063b8:	4601      	mov	r1, r0
  4063ba:	2800      	cmp	r0, #0
  4063bc:	d028      	beq.n	406410 <task_sdcard+0x170>
				printf("[FAIL] res %d\r\n", res);
  4063be:	483b      	ldr	r0, [pc, #236]	; (4064ac <task_sdcard+0x20c>)
  4063c0:	47a0      	blx	r4
			printf("Please unplug the card.\n\r");
  4063c2:	f8df a110 	ldr.w	sl, [pc, #272]	; 4064d4 <task_sdcard+0x234>
  4063c6:	4c28      	ldr	r4, [pc, #160]	; (406468 <task_sdcard+0x1c8>)
  4063c8:	4650      	mov	r0, sl
  4063ca:	47a0      	blx	r4
			while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  4063cc:	4e30      	ldr	r6, [pc, #192]	; (406490 <task_sdcard+0x1f0>)
  4063ce:	2000      	movs	r0, #0
  4063d0:	47b0      	blx	r6
  4063d2:	2802      	cmp	r0, #2
  4063d4:	d0ad      	beq.n	406332 <task_sdcard+0x92>
				printf("Write to test file (f_puts)...\r\n");
  4063d6:	4638      	mov	r0, r7
  4063d8:	47a0      	blx	r4
				res = f_lseek(&file_object,size);
  4063da:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4063dc:	a808      	add	r0, sp, #32
  4063de:	4b34      	ldr	r3, [pc, #208]	; (4064b0 <task_sdcard+0x210>)
  4063e0:	4798      	blx	r3
				if (0 == f_write(&file_object, "Test SD/MMC stack\n", 18, &written)) {
  4063e2:	ab07      	add	r3, sp, #28
  4063e4:	2212      	movs	r2, #18
  4063e6:	4933      	ldr	r1, [pc, #204]	; (4064b4 <task_sdcard+0x214>)
  4063e8:	a808      	add	r0, sp, #32
  4063ea:	4d33      	ldr	r5, [pc, #204]	; (4064b8 <task_sdcard+0x218>)
  4063ec:	47a8      	blx	r5
  4063ee:	b198      	cbz	r0, 406418 <task_sdcard+0x178>
				printf("[OK]\r\n");
  4063f0:	482b      	ldr	r0, [pc, #172]	; (4064a0 <task_sdcard+0x200>)
  4063f2:	47a0      	blx	r4
				f_close(&file_object);
  4063f4:	a808      	add	r0, sp, #32
  4063f6:	4b31      	ldr	r3, [pc, #196]	; (4064bc <task_sdcard+0x21c>)
  4063f8:	4798      	blx	r3
				printf("Test is successful.\n\r");
  4063fa:	4831      	ldr	r0, [pc, #196]	; (4064c0 <task_sdcard+0x220>)
  4063fc:	47a0      	blx	r4
				delay_s(2);
  4063fe:	4640      	mov	r0, r8
  406400:	4b30      	ldr	r3, [pc, #192]	; (4064c4 <task_sdcard+0x224>)
  406402:	4798      	blx	r3
  406404:	e7e3      	b.n	4063ce <task_sdcard+0x12e>
				printf("[FAIL] res %d\r\n", res);
  406406:	210b      	movs	r1, #11
  406408:	4828      	ldr	r0, [pc, #160]	; (4064ac <task_sdcard+0x20c>)
  40640a:	4b17      	ldr	r3, [pc, #92]	; (406468 <task_sdcard+0x1c8>)
  40640c:	4798      	blx	r3
				goto main_end_of_test;
  40640e:	e7d8      	b.n	4063c2 <task_sdcard+0x122>
			printf("[OK]\r\n");
  406410:	4823      	ldr	r0, [pc, #140]	; (4064a0 <task_sdcard+0x200>)
  406412:	4b15      	ldr	r3, [pc, #84]	; (406468 <task_sdcard+0x1c8>)
  406414:	4798      	blx	r3
  406416:	e7d4      	b.n	4063c2 <task_sdcard+0x122>
					f_close(&file_object);
  406418:	a808      	add	r0, sp, #32
  40641a:	4b28      	ldr	r3, [pc, #160]	; (4064bc <task_sdcard+0x21c>)
  40641c:	4798      	blx	r3
					printf("[FAIL]\r\n");
  40641e:	482a      	ldr	r0, [pc, #168]	; (4064c8 <task_sdcard+0x228>)
  406420:	47a0      	blx	r4
					goto main_end_of_test;
  406422:	e7d1      	b.n	4063c8 <task_sdcard+0x128>
  406424:	0040d88c 	.word	0x0040d88c
  406428:	20400030 	.word	0x20400030
  40642c:	40028000 	.word	0x40028000
  406430:	2040c444 	.word	0x2040c444
  406434:	004061cd 	.word	0x004061cd
  406438:	2040c440 	.word	0x2040c440
  40643c:	004060f1 	.word	0x004060f1
  406440:	2040c43c 	.word	0x2040c43c
  406444:	00401f59 	.word	0x00401f59
  406448:	08f0d180 	.word	0x08f0d180
  40644c:	004024a9 	.word	0x004024a9
  406450:	004024fd 	.word	0x004024fd
  406454:	00402503 	.word	0x00402503
  406458:	20400040 	.word	0x20400040
  40645c:	00406e75 	.word	0x00406e75
  406460:	0040035d 	.word	0x0040035d
  406464:	0040d6f8 	.word	0x0040d6f8
  406468:	00406c7d 	.word	0x00406c7d
  40646c:	0040d728 	.word	0x0040d728
  406470:	0040d734 	.word	0x0040d734
  406474:	0040d740 	.word	0x0040d740
  406478:	0040d830 	.word	0x0040d830
  40647c:	2040c490 	.word	0x2040c490
  406480:	00404e15 	.word	0x00404e15
  406484:	0040d758 	.word	0x0040d758
  406488:	00400ed5 	.word	0x00400ed5
  40648c:	0040d79c 	.word	0x0040d79c
  406490:	00400389 	.word	0x00400389
  406494:	0040d7c4 	.word	0x0040d7c4
  406498:	00406dd9 	.word	0x00406dd9
  40649c:	00403ced 	.word	0x00403ced
  4064a0:	0040d7f0 	.word	0x0040d7f0
  4064a4:	0040d7f8 	.word	0x0040d7f8
  4064a8:	00403d15 	.word	0x00403d15
  4064ac:	0040d7e0 	.word	0x0040d7e0
  4064b0:	00404165 	.word	0x00404165
  4064b4:	0040d854 	.word	0x0040d854
  4064b8:	00403ead 	.word	0x00403ead
  4064bc:	0040414d 	.word	0x0040414d
  4064c0:	0040d874 	.word	0x0040d874
  4064c4:	20400001 	.word	0x20400001
  4064c8:	0040d868 	.word	0x0040d868
  4064cc:	06075ed6 	.word	0x06075ed6
  4064d0:	0040d788 	.word	0x0040d788
  4064d4:	0040d814 	.word	0x0040d814

004064d8 <bme280_i2c_bus_init>:
{
  4064d8:	b500      	push	{lr}
  4064da:	b085      	sub	sp, #20
	pmc_enable_periph_clk(TWIHS_MCU6050_ID);
  4064dc:	2013      	movs	r0, #19
  4064de:	4b07      	ldr	r3, [pc, #28]	; (4064fc <bme280_i2c_bus_init+0x24>)
  4064e0:	4798      	blx	r3
	bno055_option.master_clk = sysclk_get_cpu_hz();
  4064e2:	4b07      	ldr	r3, [pc, #28]	; (406500 <bme280_i2c_bus_init+0x28>)
  4064e4:	9301      	str	r3, [sp, #4]
	bno055_option.speed      = 10000;
  4064e6:	f242 7310 	movw	r3, #10000	; 0x2710
  4064ea:	9302      	str	r3, [sp, #8]
	twihs_master_init(TWIHS_MCU6050, &bno055_option);
  4064ec:	a901      	add	r1, sp, #4
  4064ee:	4805      	ldr	r0, [pc, #20]	; (406504 <bme280_i2c_bus_init+0x2c>)
  4064f0:	4b05      	ldr	r3, [pc, #20]	; (406508 <bme280_i2c_bus_init+0x30>)
  4064f2:	4798      	blx	r3
}
  4064f4:	b005      	add	sp, #20
  4064f6:	f85d fb04 	ldr.w	pc, [sp], #4
  4064fa:	bf00      	nop
  4064fc:	00401f59 	.word	0x00401f59
  406500:	11e1a300 	.word	0x11e1a300
  406504:	40018000 	.word	0x40018000
  406508:	00402295 	.word	0x00402295

0040650c <bme280_i2c_read_reg>:
uint8_t bme280_i2c_read_reg(uint CHIP_ADDRESS, uint reg_address, char *value){
  40650c:	b510      	push	{r4, lr}
  40650e:	b086      	sub	sp, #24
  406510:	4614      	mov	r4, r2
  	  p_packet.chip         = CHIP_ADDRESS;//BME280_ADDRESS;
  406512:	f88d 0014 	strb.w	r0, [sp, #20]
  	  p_packet.addr_length  = 0;
  406516:	2300      	movs	r3, #0
  406518:	9302      	str	r3, [sp, #8]
  	  char data = reg_address; //BME280_CHIP_ID_REG;
  40651a:	ab06      	add	r3, sp, #24
  40651c:	f803 1d15 	strb.w	r1, [r3, #-21]!
  	  p_packet.buffer       = &data;
  406520:	9303      	str	r3, [sp, #12]
  	  p_packet.length       = 1;
  406522:	2301      	movs	r3, #1
  406524:	9304      	str	r3, [sp, #16]
  	  if(twihs_master_write(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  406526:	a901      	add	r1, sp, #4
  406528:	4809      	ldr	r0, [pc, #36]	; (406550 <bme280_i2c_read_reg+0x44>)
  40652a:	4b0a      	ldr	r3, [pc, #40]	; (406554 <bme280_i2c_read_reg+0x48>)
  40652c:	4798      	blx	r3
  40652e:	b110      	cbz	r0, 406536 <bme280_i2c_read_reg+0x2a>
  	    return 1;
  406530:	2001      	movs	r0, #1
}
  406532:	b006      	add	sp, #24
  406534:	bd10      	pop	{r4, pc}
  	  p_packet.addr_length  = 0;
  406536:	2300      	movs	r3, #0
  406538:	9302      	str	r3, [sp, #8]
  	  p_packet.length       = 1;
  40653a:	2301      	movs	r3, #1
  40653c:	9304      	str	r3, [sp, #16]
      p_packet.buffer       = value;
  40653e:	9403      	str	r4, [sp, #12]
  	  if(twihs_master_read(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  406540:	a901      	add	r1, sp, #4
  406542:	4803      	ldr	r0, [pc, #12]	; (406550 <bme280_i2c_read_reg+0x44>)
  406544:	4b04      	ldr	r3, [pc, #16]	; (406558 <bme280_i2c_read_reg+0x4c>)
  406546:	4798      	blx	r3
  	    return 1;
  406548:	3000      	adds	r0, #0
  40654a:	bf18      	it	ne
  40654c:	2001      	movne	r0, #1
  40654e:	e7f0      	b.n	406532 <bme280_i2c_read_reg+0x26>
  406550:	40018000 	.word	0x40018000
  406554:	00402361 	.word	0x00402361
  406558:	004022c9 	.word	0x004022c9

0040655c <bme280_i2c_config_temp>:
int8_t bme280_i2c_config_temp(void){
  40655c:	b500      	push	{lr}
  40655e:	b087      	sub	sp, #28
  	p_packet.chip         = BME280_ADDRESS;//BME280_ADDRESS;
  406560:	2377      	movs	r3, #119	; 0x77
  406562:	f88d 3014 	strb.w	r3, [sp, #20]
    p_packet.addr[0]      = BME280_CTRL_MEAS_REG;
  406566:	23f4      	movs	r3, #244	; 0xf4
  406568:	f88d 3004 	strb.w	r3, [sp, #4]
  	p_packet.addr_length  = 1;
  40656c:	2201      	movs	r2, #1
  40656e:	9202      	str	r2, [sp, #8]
  	char data = 0b00100111; //BME280_CHIP_ID_REG;
  406570:	ab06      	add	r3, sp, #24
  406572:	2127      	movs	r1, #39	; 0x27
  406574:	f803 1d15 	strb.w	r1, [r3, #-21]!
  	p_packet.buffer       = &data;
  406578:	9303      	str	r3, [sp, #12]
  	p_packet.length       = 1;
  40657a:	9204      	str	r2, [sp, #16]
  	if(twihs_master_write(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  40657c:	a901      	add	r1, sp, #4
  40657e:	4804      	ldr	r0, [pc, #16]	; (406590 <bme280_i2c_config_temp+0x34>)
  406580:	4b04      	ldr	r3, [pc, #16]	; (406594 <bme280_i2c_config_temp+0x38>)
  406582:	4798      	blx	r3
  406584:	b100      	cbz	r0, 406588 <bme280_i2c_config_temp+0x2c>
  	return 1;
  406586:	2001      	movs	r0, #1
}
  406588:	b007      	add	sp, #28
  40658a:	f85d fb04 	ldr.w	pc, [sp], #4
  40658e:	bf00      	nop
  406590:	40018000 	.word	0x40018000
  406594:	00402361 	.word	0x00402361

00406598 <bme280_i2c_read_temp>:
{
  406598:	b530      	push	{r4, r5, lr}
  40659a:	b083      	sub	sp, #12
  40659c:	4605      	mov	r5, r0
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_MSB_REG, &tmp[2]);
  40659e:	f10d 0206 	add.w	r2, sp, #6
  4065a2:	21fa      	movs	r1, #250	; 0xfa
  4065a4:	2077      	movs	r0, #119	; 0x77
  4065a6:	4c0d      	ldr	r4, [pc, #52]	; (4065dc <bme280_i2c_read_temp+0x44>)
  4065a8:	47a0      	blx	r4
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_MSB_REG, &tmp[2]);
  4065aa:	f10d 0206 	add.w	r2, sp, #6
  4065ae:	21fa      	movs	r1, #250	; 0xfa
  4065b0:	2077      	movs	r0, #119	; 0x77
  4065b2:	47a0      	blx	r4
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_LSB_REG, &tmp[1]);
  4065b4:	f10d 0205 	add.w	r2, sp, #5
  4065b8:	21fb      	movs	r1, #251	; 0xfb
  4065ba:	2077      	movs	r0, #119	; 0x77
  4065bc:	47a0      	blx	r4
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_LSB_REG, &tmp[1]);
  4065be:	f10d 0205 	add.w	r2, sp, #5
  4065c2:	21fb      	movs	r1, #251	; 0xfb
  4065c4:	2077      	movs	r0, #119	; 0x77
  4065c6:	47a0      	blx	r4
  *temp = tmp[2] << 8 | tmp[1];
  4065c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
  4065cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4065d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4065d4:	602b      	str	r3, [r5, #0]
}
  4065d6:	2000      	movs	r0, #0
  4065d8:	b003      	add	sp, #12
  4065da:	bd30      	pop	{r4, r5, pc}
  4065dc:	0040650d 	.word	0x0040650d

004065e0 <bme280_i2c_read_humd>:
{
  4065e0:	b530      	push	{r4, r5, lr}
  4065e2:	b083      	sub	sp, #12
  4065e4:	4605      	mov	r5, r0
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_MSB_REG, &hum[2]);
  4065e6:	f10d 0206 	add.w	r2, sp, #6
  4065ea:	21fd      	movs	r1, #253	; 0xfd
  4065ec:	2077      	movs	r0, #119	; 0x77
  4065ee:	4c0d      	ldr	r4, [pc, #52]	; (406624 <bme280_i2c_read_humd+0x44>)
  4065f0:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_MSB_REG, &hum[2]);
  4065f2:	f10d 0206 	add.w	r2, sp, #6
  4065f6:	21fd      	movs	r1, #253	; 0xfd
  4065f8:	2077      	movs	r0, #119	; 0x77
  4065fa:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_LSB_REG, &hum[1]);
  4065fc:	f10d 0205 	add.w	r2, sp, #5
  406600:	21fe      	movs	r1, #254	; 0xfe
  406602:	2077      	movs	r0, #119	; 0x77
  406604:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_LSB_REG, &hum[1]);
  406606:	f10d 0205 	add.w	r2, sp, #5
  40660a:	21fe      	movs	r1, #254	; 0xfe
  40660c:	2077      	movs	r0, #119	; 0x77
  40660e:	47a0      	blx	r4
	*humd = hum[2] << 8 | hum[1];
  406610:	f89d 2006 	ldrb.w	r2, [sp, #6]
  406614:	f89d 3005 	ldrb.w	r3, [sp, #5]
  406618:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40661c:	602b      	str	r3, [r5, #0]
}
  40661e:	2000      	movs	r0, #0
  406620:	b003      	add	sp, #12
  406622:	bd30      	pop	{r4, r5, pc}
  406624:	0040650d 	.word	0x0040650d

00406628 <bme280_i2c_read_prss>:
{
  406628:	b530      	push	{r4, r5, lr}
  40662a:	b083      	sub	sp, #12
  40662c:	4605      	mov	r5, r0
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_MSB_REG, &prs[2]);
  40662e:	f10d 0206 	add.w	r2, sp, #6
  406632:	21f7      	movs	r1, #247	; 0xf7
  406634:	2077      	movs	r0, #119	; 0x77
  406636:	4c0d      	ldr	r4, [pc, #52]	; (40666c <bme280_i2c_read_prss+0x44>)
  406638:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_MSB_REG, &prs[2]);
  40663a:	f10d 0206 	add.w	r2, sp, #6
  40663e:	21f7      	movs	r1, #247	; 0xf7
  406640:	2077      	movs	r0, #119	; 0x77
  406642:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_LSB_REG, &prs[1]);
  406644:	f10d 0205 	add.w	r2, sp, #5
  406648:	21f8      	movs	r1, #248	; 0xf8
  40664a:	2077      	movs	r0, #119	; 0x77
  40664c:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_LSB_REG, &prs[1]);
  40664e:	f10d 0205 	add.w	r2, sp, #5
  406652:	21f8      	movs	r1, #248	; 0xf8
  406654:	2077      	movs	r0, #119	; 0x77
  406656:	47a0      	blx	r4
	*prss = prs[2] << 8 | prs[1];
  406658:	f89d 2006 	ldrb.w	r2, [sp, #6]
  40665c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  406660:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  406664:	602b      	str	r3, [r5, #0]
}
  406666:	2000      	movs	r0, #0
  406668:	b003      	add	sp, #12
  40666a:	bd30      	pop	{r4, r5, pc}
  40666c:	0040650d 	.word	0x0040650d

00406670 <bme280_validate_id>:
uint8_t bme280_validate_id(void){
  406670:	b510      	push	{r4, lr}
  406672:	b082      	sub	sp, #8
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_CHIP_ID_REG, &id );
  406674:	f10d 0207 	add.w	r2, sp, #7
  406678:	21d0      	movs	r1, #208	; 0xd0
  40667a:	2077      	movs	r0, #119	; 0x77
  40667c:	4c08      	ldr	r4, [pc, #32]	; (4066a0 <bme280_validate_id+0x30>)
  40667e:	47a0      	blx	r4
  if (bme280_i2c_read_reg(BME280_ADDRESS, BME280_CHIP_ID_REG, &id )) 
  406680:	f10d 0207 	add.w	r2, sp, #7
  406684:	21d0      	movs	r1, #208	; 0xd0
  406686:	2077      	movs	r0, #119	; 0x77
  406688:	47a0      	blx	r4
  40668a:	b930      	cbnz	r0, 40669a <bme280_validate_id+0x2a>
  if (id != 0x60)
  40668c:	f89d 0007 	ldrb.w	r0, [sp, #7]
  406690:	3860      	subs	r0, #96	; 0x60
  406692:	bf18      	it	ne
  406694:	2001      	movne	r0, #1
}
  406696:	b002      	add	sp, #8
  406698:	bd10      	pop	{r4, pc}
  40669a:	2001      	movs	r0, #1
  40669c:	e7fb      	b.n	406696 <bme280_validate_id+0x26>
  40669e:	bf00      	nop
  4066a0:	0040650d 	.word	0x0040650d

004066a4 <task_sensor>:
void task_sensor(void){
  4066a4:	b580      	push	{r7, lr}
  4066a6:	b086      	sub	sp, #24
	xQueueTerminal = xQueueCreate( 10, sizeof( char ) * 10);
  4066a8:	2200      	movs	r2, #0
  4066aa:	210a      	movs	r1, #10
  4066ac:	4608      	mov	r0, r1
  4066ae:	4c55      	ldr	r4, [pc, #340]	; (406804 <task_sensor+0x160>)
  4066b0:	47a0      	blx	r4
  4066b2:	4b55      	ldr	r3, [pc, #340]	; (406808 <task_sensor+0x164>)
  4066b4:	6018      	str	r0, [r3, #0]
	xQueueSdcard = xQueueCreate( 10, sizeof( char ) * 10 );
  4066b6:	2200      	movs	r2, #0
  4066b8:	210a      	movs	r1, #10
  4066ba:	4608      	mov	r0, r1
  4066bc:	47a0      	blx	r4
  4066be:	4b53      	ldr	r3, [pc, #332]	; (40680c <task_sensor+0x168>)
  4066c0:	6018      	str	r0, [r3, #0]
	printf("Inicializando bus i2c \n");
  4066c2:	4853      	ldr	r0, [pc, #332]	; (406810 <task_sensor+0x16c>)
  4066c4:	4b53      	ldr	r3, [pc, #332]	; (406814 <task_sensor+0x170>)
  4066c6:	4798      	blx	r3
	bme280_i2c_bus_init();
  4066c8:	4b53      	ldr	r3, [pc, #332]	; (406818 <task_sensor+0x174>)
  4066ca:	4798      	blx	r3
	delay_ms(10);
  4066cc:	4853      	ldr	r0, [pc, #332]	; (40681c <task_sensor+0x178>)
  4066ce:	4b54      	ldr	r3, [pc, #336]	; (406820 <task_sensor+0x17c>)
  4066d0:	4798      	blx	r3
	while(bme280_validate_id()){
  4066d2:	4e54      	ldr	r6, [pc, #336]	; (406824 <task_sensor+0x180>)
		printf("Chip nao encontrado\n");
  4066d4:	4d54      	ldr	r5, [pc, #336]	; (406828 <task_sensor+0x184>)
		delay_ms(200);
  4066d6:	4c55      	ldr	r4, [pc, #340]	; (40682c <task_sensor+0x188>)
	while(bme280_validate_id()){
  4066d8:	e005      	b.n	4066e6 <task_sensor+0x42>
		printf("Chip nao encontrado\n");
  4066da:	4628      	mov	r0, r5
  4066dc:	4b4d      	ldr	r3, [pc, #308]	; (406814 <task_sensor+0x170>)
  4066de:	4798      	blx	r3
		delay_ms(200);
  4066e0:	4620      	mov	r0, r4
  4066e2:	4b4f      	ldr	r3, [pc, #316]	; (406820 <task_sensor+0x17c>)
  4066e4:	4798      	blx	r3
	while(bme280_validate_id()){
  4066e6:	47b0      	blx	r6
  4066e8:	2800      	cmp	r0, #0
  4066ea:	d1f6      	bne.n	4066da <task_sensor+0x36>
	printf("Chip encontrado, inicializando temperatura \n");
  4066ec:	4850      	ldr	r0, [pc, #320]	; (406830 <task_sensor+0x18c>)
  4066ee:	4b49      	ldr	r3, [pc, #292]	; (406814 <task_sensor+0x170>)
  4066f0:	4798      	blx	r3
	bme280_i2c_config_temp();
  4066f2:	4b50      	ldr	r3, [pc, #320]	; (406834 <task_sensor+0x190>)
  4066f4:	4798      	blx	r3
		xQueueSendToBackFromISR(xQueueTerminal, &frase, 0);
  4066f6:	f8df 9110 	ldr.w	r9, [pc, #272]	; 406808 <task_sensor+0x164>
  4066fa:	2600      	movs	r6, #0
  4066fc:	4d4e      	ldr	r5, [pc, #312]	; (406838 <task_sensor+0x194>)
		xQueueSendToBackFromISR(xQueueSdcard, &frase, 0);
  4066fe:	f8df 810c 	ldr.w	r8, [pc, #268]	; 40680c <task_sensor+0x168>
		vTaskDelay(400);
  406702:	4f4e      	ldr	r7, [pc, #312]	; (40683c <task_sensor+0x198>)
  406704:	e02b      	b.n	40675e <task_sensor+0xba>
			sprintf(frase, "T: %d \r\n", temp/100);
  406706:	4b4e      	ldr	r3, [pc, #312]	; (406840 <task_sensor+0x19c>)
  406708:	9a05      	ldr	r2, [sp, #20]
  40670a:	fba3 3202 	umull	r3, r2, r3, r2
  40670e:	0952      	lsrs	r2, r2, #5
  406710:	494c      	ldr	r1, [pc, #304]	; (406844 <task_sensor+0x1a0>)
  406712:	4668      	mov	r0, sp
  406714:	4b4c      	ldr	r3, [pc, #304]	; (406848 <task_sensor+0x1a4>)
  406716:	4798      	blx	r3
  406718:	e033      	b.n	406782 <task_sensor+0xde>
			sprintf(frase, "H: %d \r\n", humd/100);
  40671a:	4b49      	ldr	r3, [pc, #292]	; (406840 <task_sensor+0x19c>)
  40671c:	9a04      	ldr	r2, [sp, #16]
  40671e:	fba3 3202 	umull	r3, r2, r3, r2
  406722:	0952      	lsrs	r2, r2, #5
  406724:	4949      	ldr	r1, [pc, #292]	; (40684c <task_sensor+0x1a8>)
  406726:	4668      	mov	r0, sp
  406728:	4b47      	ldr	r3, [pc, #284]	; (406848 <task_sensor+0x1a4>)
  40672a:	4798      	blx	r3
  40672c:	e047      	b.n	4067be <task_sensor+0x11a>
			sprintf(frase, "P: %d \n", humd/100);
  40672e:	4b44      	ldr	r3, [pc, #272]	; (406840 <task_sensor+0x19c>)
  406730:	9a04      	ldr	r2, [sp, #16]
  406732:	fba3 3202 	umull	r3, r2, r3, r2
  406736:	0952      	lsrs	r2, r2, #5
  406738:	4945      	ldr	r1, [pc, #276]	; (406850 <task_sensor+0x1ac>)
  40673a:	4668      	mov	r0, sp
  40673c:	4b42      	ldr	r3, [pc, #264]	; (406848 <task_sensor+0x1a4>)
  40673e:	4798      	blx	r3
		xQueueSendToBackFromISR(xQueueTerminal, &frase, 0);
  406740:	4633      	mov	r3, r6
  406742:	4632      	mov	r2, r6
  406744:	4669      	mov	r1, sp
  406746:	f8d9 0000 	ldr.w	r0, [r9]
  40674a:	47a8      	blx	r5
		xQueueSendToBackFromISR(xQueueSdcard, &frase, 0);
  40674c:	4633      	mov	r3, r6
  40674e:	4632      	mov	r2, r6
  406750:	4669      	mov	r1, sp
  406752:	f8d8 0000 	ldr.w	r0, [r8]
  406756:	47a8      	blx	r5
		vTaskDelay(400);
  406758:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40675c:	47b8      	blx	r7
		if (bme280_i2c_read_temp(&temp)){
  40675e:	a805      	add	r0, sp, #20
  406760:	4b3c      	ldr	r3, [pc, #240]	; (406854 <task_sensor+0x1b0>)
  406762:	4798      	blx	r3
  406764:	2800      	cmp	r0, #0
  406766:	d0ce      	beq.n	406706 <task_sensor+0x62>
			sprintf(frase, "erro readinG temperature \n");
  406768:	466c      	mov	r4, sp
  40676a:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 406860 <task_sensor+0x1bc>
  40676e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  406772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  406774:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  406778:	c403      	stmia	r4!, {r0, r1}
  40677a:	f824 2b02 	strh.w	r2, [r4], #2
  40677e:	0c12      	lsrs	r2, r2, #16
  406780:	7022      	strb	r2, [r4, #0]
		xQueueSendToBackFromISR(xQueueTerminal, &frase, 0);
  406782:	4633      	mov	r3, r6
  406784:	4632      	mov	r2, r6
  406786:	4669      	mov	r1, sp
  406788:	f8d9 0000 	ldr.w	r0, [r9]
  40678c:	47a8      	blx	r5
		xQueueSendToBackFromISR(xQueueSdcard, &frase, 0);
  40678e:	4633      	mov	r3, r6
  406790:	4632      	mov	r2, r6
  406792:	4669      	mov	r1, sp
  406794:	f8d8 0000 	ldr.w	r0, [r8]
  406798:	47a8      	blx	r5
		vTaskDelay(400);
  40679a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40679e:	47b8      	blx	r7
		if (bme280_i2c_read_humd(&humd)){
  4067a0:	a804      	add	r0, sp, #16
  4067a2:	4b2d      	ldr	r3, [pc, #180]	; (406858 <task_sensor+0x1b4>)
  4067a4:	4798      	blx	r3
  4067a6:	2800      	cmp	r0, #0
  4067a8:	d0b7      	beq.n	40671a <task_sensor+0x76>
			sprintf(frase, "erro reading humidade \r\n");
  4067aa:	466c      	mov	r4, sp
  4067ac:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 406864 <task_sensor+0x1c0>
  4067b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  4067b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4067b6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  4067ba:	c403      	stmia	r4!, {r0, r1}
  4067bc:	7022      	strb	r2, [r4, #0]
		xQueueSendToBackFromISR(xQueueTerminal, &frase, 0);
  4067be:	4633      	mov	r3, r6
  4067c0:	4632      	mov	r2, r6
  4067c2:	4669      	mov	r1, sp
  4067c4:	f8d9 0000 	ldr.w	r0, [r9]
  4067c8:	47a8      	blx	r5
		xQueueSendToBackFromISR(xQueueSdcard, &frase, 0);
  4067ca:	4633      	mov	r3, r6
  4067cc:	4632      	mov	r2, r6
  4067ce:	4669      	mov	r1, sp
  4067d0:	f8d8 0000 	ldr.w	r0, [r8]
  4067d4:	47a8      	blx	r5
		vTaskDelay(400);
  4067d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4067da:	47b8      	blx	r7
		if (bme280_i2c_read_prss(&prss)){
  4067dc:	a803      	add	r0, sp, #12
  4067de:	4b1f      	ldr	r3, [pc, #124]	; (40685c <task_sensor+0x1b8>)
  4067e0:	4798      	blx	r3
  4067e2:	2800      	cmp	r0, #0
  4067e4:	d0a3      	beq.n	40672e <task_sensor+0x8a>
			sprintf(frase, "erro reading pressao \n");
  4067e6:	466c      	mov	r4, sp
  4067e8:	f8df e07c 	ldr.w	lr, [pc, #124]	; 406868 <task_sensor+0x1c4>
  4067ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  4067f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4067f2:	e89e 0003 	ldmia.w	lr, {r0, r1}
  4067f6:	f844 0b04 	str.w	r0, [r4], #4
  4067fa:	f824 1b02 	strh.w	r1, [r4], #2
  4067fe:	0c09      	lsrs	r1, r1, #16
  406800:	7021      	strb	r1, [r4, #0]
  406802:	e79d      	b.n	406740 <task_sensor+0x9c>
  406804:	004049d5 	.word	0x004049d5
  406808:	2040c49c 	.word	0x2040c49c
  40680c:	2040c4ac 	.word	0x2040c4ac
  406810:	0040d8a0 	.word	0x0040d8a0
  406814:	00406c7d 	.word	0x00406c7d
  406818:	004064d9 	.word	0x004064d9
  40681c:	0007b784 	.word	0x0007b784
  406820:	20400001 	.word	0x20400001
  406824:	00406671 	.word	0x00406671
  406828:	0040d8b8 	.word	0x0040d8b8
  40682c:	009a5649 	.word	0x009a5649
  406830:	0040d8d0 	.word	0x0040d8d0
  406834:	0040655d 	.word	0x0040655d
  406838:	00404c35 	.word	0x00404c35
  40683c:	0040563d 	.word	0x0040563d
  406840:	51eb851f 	.word	0x51eb851f
  406844:	0040d91c 	.word	0x0040d91c
  406848:	00407015 	.word	0x00407015
  40684c:	0040d944 	.word	0x0040d944
  406850:	0040d968 	.word	0x0040d968
  406854:	00406599 	.word	0x00406599
  406858:	004065e1 	.word	0x004065e1
  40685c:	00406629 	.word	0x00406629
  406860:	0040d900 	.word	0x0040d900
  406864:	0040d928 	.word	0x0040d928
  406868:	0040d950 	.word	0x0040d950

0040686c <RTC_Handler>:
{
  40686c:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  40686e:	480f      	ldr	r0, [pc, #60]	; (4068ac <RTC_Handler+0x40>)
  406870:	4b0f      	ldr	r3, [pc, #60]	; (4068b0 <RTC_Handler+0x44>)
  406872:	4798      	blx	r3
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  406874:	f010 0f04 	tst.w	r0, #4
  406878:	d10e      	bne.n	406898 <RTC_Handler+0x2c>
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  40687a:	4d0c      	ldr	r5, [pc, #48]	; (4068ac <RTC_Handler+0x40>)
  40687c:	2101      	movs	r1, #1
  40687e:	4628      	mov	r0, r5
  406880:	4c0c      	ldr	r4, [pc, #48]	; (4068b4 <RTC_Handler+0x48>)
  406882:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  406884:	2108      	movs	r1, #8
  406886:	4628      	mov	r0, r5
  406888:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  40688a:	2110      	movs	r1, #16
  40688c:	4628      	mov	r0, r5
  40688e:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  406890:	2120      	movs	r1, #32
  406892:	4628      	mov	r0, r5
  406894:	47a0      	blx	r4
  406896:	bd38      	pop	{r3, r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  406898:	2104      	movs	r1, #4
  40689a:	4804      	ldr	r0, [pc, #16]	; (4068ac <RTC_Handler+0x40>)
  40689c:	4b05      	ldr	r3, [pc, #20]	; (4068b4 <RTC_Handler+0x48>)
  40689e:	4798      	blx	r3
		timestamp++;
  4068a0:	4a05      	ldr	r2, [pc, #20]	; (4068b8 <RTC_Handler+0x4c>)
  4068a2:	6813      	ldr	r3, [r2, #0]
  4068a4:	3301      	adds	r3, #1
  4068a6:	6013      	str	r3, [r2, #0]
  4068a8:	e7e7      	b.n	40687a <RTC_Handler+0xe>
  4068aa:	bf00      	nop
  4068ac:	400e1860 	.word	0x400e1860
  4068b0:	004021dd 	.word	0x004021dd
  4068b4:	004021e1 	.word	0x004021e1
  4068b8:	2040003c 	.word	0x2040003c

004068bc <RTC_init>:
void RTC_init(){
  4068bc:	b530      	push	{r4, r5, lr}
  4068be:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_RTC);
  4068c0:	2002      	movs	r0, #2
  4068c2:	4b12      	ldr	r3, [pc, #72]	; (40690c <RTC_init+0x50>)
  4068c4:	4798      	blx	r3
	rtc_set_hour_mode(RTC, 0);
  4068c6:	4c12      	ldr	r4, [pc, #72]	; (406910 <RTC_init+0x54>)
  4068c8:	2100      	movs	r1, #0
  4068ca:	4620      	mov	r0, r4
  4068cc:	4b11      	ldr	r3, [pc, #68]	; (406914 <RTC_init+0x58>)
  4068ce:	4798      	blx	r3
	rtc_set_date(RTC, YEAR, MONTH, DAY, WEEK);
  4068d0:	2318      	movs	r3, #24
  4068d2:	9300      	str	r3, [sp, #0]
  4068d4:	230d      	movs	r3, #13
  4068d6:	2206      	movs	r2, #6
  4068d8:	f240 71e3 	movw	r1, #2019	; 0x7e3
  4068dc:	4620      	mov	r0, r4
  4068de:	4d0e      	ldr	r5, [pc, #56]	; (406918 <RTC_init+0x5c>)
  4068e0:	47a8      	blx	r5
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  4068e2:	2300      	movs	r3, #0
  4068e4:	461a      	mov	r2, r3
  4068e6:	2110      	movs	r1, #16
  4068e8:	4620      	mov	r0, r4
  4068ea:	4d0c      	ldr	r5, [pc, #48]	; (40691c <RTC_init+0x60>)
  4068ec:	47a8      	blx	r5
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4068ee:	4b0c      	ldr	r3, [pc, #48]	; (406920 <RTC_init+0x64>)
  4068f0:	2104      	movs	r1, #4
  4068f2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4068f6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4068fa:	22c0      	movs	r2, #192	; 0xc0
  4068fc:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  406900:	6019      	str	r1, [r3, #0]
	rtc_enable_interrupt(RTC,  RTC_IER_SECEN);
  406902:	4620      	mov	r0, r4
  406904:	4b07      	ldr	r3, [pc, #28]	; (406924 <RTC_init+0x68>)
  406906:	4798      	blx	r3
}
  406908:	b003      	add	sp, #12
  40690a:	bd30      	pop	{r4, r5, pc}
  40690c:	00401f59 	.word	0x00401f59
  406910:	400e1860 	.word	0x400e1860
  406914:	00401fad 	.word	0x00401fad
  406918:	00402125 	.word	0x00402125
  40691c:	00402021 	.word	0x00402021
  406920:	e000e100 	.word	0xe000e100
  406924:	00401fc3 	.word	0x00401fc3

00406928 <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask){
  406928:	b538      	push	{r3, r4, r5, lr}
  40692a:	4604      	mov	r4, r0
  40692c:	460d      	mov	r5, r1
   if(pio_get_output_data_status(pio, mask))
  40692e:	4b06      	ldr	r3, [pc, #24]	; (406948 <pin_toggle+0x20>)
  406930:	4798      	blx	r3
  406932:	b920      	cbnz	r0, 40693e <pin_toggle+0x16>
    pio_set(pio,mask);
  406934:	4629      	mov	r1, r5
  406936:	4620      	mov	r0, r4
  406938:	4b04      	ldr	r3, [pc, #16]	; (40694c <pin_toggle+0x24>)
  40693a:	4798      	blx	r3
  40693c:	bd38      	pop	{r3, r4, r5, pc}
    pio_clear(pio, mask);
  40693e:	4629      	mov	r1, r5
  406940:	4620      	mov	r0, r4
  406942:	4b03      	ldr	r3, [pc, #12]	; (406950 <pin_toggle+0x28>)
  406944:	4798      	blx	r3
  406946:	bd38      	pop	{r3, r4, r5, pc}
  406948:	00401cc9 	.word	0x00401cc9
  40694c:	00401bd1 	.word	0x00401bd1
  406950:	00401bd5 	.word	0x00401bd5

00406954 <Button1_Handler>:
{
  406954:	b530      	push	{r4, r5, lr}
  406956:	b083      	sub	sp, #12
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  406958:	2500      	movs	r5, #0
  40695a:	a902      	add	r1, sp, #8
  40695c:	f841 5d04 	str.w	r5, [r1, #-4]!
  xSemaphoreGiveFromISR(xSemaphoreT, &xHigherPriorityTaskWoken);
  406960:	4b0a      	ldr	r3, [pc, #40]	; (40698c <Button1_Handler+0x38>)
  406962:	6818      	ldr	r0, [r3, #0]
  406964:	4c0a      	ldr	r4, [pc, #40]	; (406990 <Button1_Handler+0x3c>)
  406966:	47a0      	blx	r4
  BaseType_t xHigherPriorityTaskWoken2 = pdFALSE;
  406968:	a902      	add	r1, sp, #8
  40696a:	f841 5d08 	str.w	r5, [r1, #-8]!
  xSemaphoreGiveFromISR(xSemaphoreSD, &xHigherPriorityTaskWoken2);
  40696e:	4b09      	ldr	r3, [pc, #36]	; (406994 <Button1_Handler+0x40>)
  406970:	6818      	ldr	r0, [r3, #0]
  406972:	47a0      	blx	r4
  pin_toggle(PIOD, (1<<28));
  406974:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406978:	4807      	ldr	r0, [pc, #28]	; (406998 <Button1_Handler+0x44>)
  40697a:	4c08      	ldr	r4, [pc, #32]	; (40699c <Button1_Handler+0x48>)
  40697c:	47a0      	blx	r4
  pin_toggle(LED_PIO, LED_PIN_MASK);
  40697e:	f44f 7180 	mov.w	r1, #256	; 0x100
  406982:	4807      	ldr	r0, [pc, #28]	; (4069a0 <Button1_Handler+0x4c>)
  406984:	47a0      	blx	r4
}
  406986:	b003      	add	sp, #12
  406988:	bd30      	pop	{r4, r5, pc}
  40698a:	bf00      	nop
  40698c:	2040c4a4 	.word	0x2040c4a4
  406990:	00404d35 	.word	0x00404d35
  406994:	2040c490 	.word	0x2040c490
  406998:	400e1400 	.word	0x400e1400
  40699c:	00406929 	.word	0x00406929
  4069a0:	400e1200 	.word	0x400e1200

004069a4 <BUT_init>:
void BUT_init(void){
  4069a4:	b510      	push	{r4, lr}
  4069a6:	b082      	sub	sp, #8
    pmc_enable_periph_clk(BUT_PIO_ID);
  4069a8:	200a      	movs	r0, #10
  4069aa:	4b10      	ldr	r3, [pc, #64]	; (4069ec <BUT_init+0x48>)
  4069ac:	4798      	blx	r3
    pio_set_input(BUT_PIO, BUT_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4069ae:	4c10      	ldr	r4, [pc, #64]	; (4069f0 <BUT_init+0x4c>)
  4069b0:	2209      	movs	r2, #9
  4069b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4069b6:	4620      	mov	r0, r4
  4069b8:	4b0e      	ldr	r3, [pc, #56]	; (4069f4 <BUT_init+0x50>)
  4069ba:	4798      	blx	r3
    pio_enable_interrupt(BUT_PIO, BUT_PIN_MASK);
  4069bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4069c0:	4620      	mov	r0, r4
  4069c2:	4b0d      	ldr	r3, [pc, #52]	; (4069f8 <BUT_init+0x54>)
  4069c4:	4798      	blx	r3
    pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIN_MASK, PIO_IT_FALL_EDGE, Button1_Handler);
  4069c6:	4b0d      	ldr	r3, [pc, #52]	; (4069fc <BUT_init+0x58>)
  4069c8:	9300      	str	r3, [sp, #0]
  4069ca:	2350      	movs	r3, #80	; 0x50
  4069cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4069d0:	210a      	movs	r1, #10
  4069d2:	4620      	mov	r0, r4
  4069d4:	4c0a      	ldr	r4, [pc, #40]	; (406a00 <BUT_init+0x5c>)
  4069d6:	47a0      	blx	r4
  4069d8:	4b0a      	ldr	r3, [pc, #40]	; (406a04 <BUT_init+0x60>)
  4069da:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4069de:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4069e0:	2220      	movs	r2, #32
  4069e2:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
};
  4069e6:	b002      	add	sp, #8
  4069e8:	bd10      	pop	{r4, pc}
  4069ea:	bf00      	nop
  4069ec:	00401f59 	.word	0x00401f59
  4069f0:	400e0e00 	.word	0x400e0e00
  4069f4:	00401c6b 	.word	0x00401c6b
  4069f8:	00401d07 	.word	0x00401d07
  4069fc:	00406955 	.word	0x00406955
  406a00:	00401d65 	.word	0x00401d65
  406a04:	e000e100 	.word	0xe000e100

00406a08 <LED_init>:
void LED_init(int estado){
  406a08:	b510      	push	{r4, lr}
  406a0a:	b082      	sub	sp, #8
  406a0c:	4604      	mov	r4, r0
    pmc_enable_periph_clk(LED_PIO_ID);
  406a0e:	200c      	movs	r0, #12
  406a10:	4b05      	ldr	r3, [pc, #20]	; (406a28 <LED_init+0x20>)
  406a12:	4798      	blx	r3
    pio_set_output(LED_PIO, LED_PIN_MASK, estado, 0, 0 );
  406a14:	2300      	movs	r3, #0
  406a16:	9300      	str	r3, [sp, #0]
  406a18:	4622      	mov	r2, r4
  406a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
  406a1e:	4803      	ldr	r0, [pc, #12]	; (406a2c <LED_init+0x24>)
  406a20:	4c03      	ldr	r4, [pc, #12]	; (406a30 <LED_init+0x28>)
  406a22:	47a0      	blx	r4
};
  406a24:	b002      	add	sp, #8
  406a26:	bd10      	pop	{r4, pc}
  406a28:	00401f59 	.word	0x00401f59
  406a2c:	400e1200 	.word	0x400e1200
  406a30:	00401ca1 	.word	0x00401ca1

00406a34 <vApplicationStackOverflowHook>:
{
  406a34:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  406a36:	460a      	mov	r2, r1
  406a38:	4601      	mov	r1, r0
  406a3a:	4802      	ldr	r0, [pc, #8]	; (406a44 <vApplicationStackOverflowHook+0x10>)
  406a3c:	4b02      	ldr	r3, [pc, #8]	; (406a48 <vApplicationStackOverflowHook+0x14>)
  406a3e:	4798      	blx	r3
  406a40:	e7fe      	b.n	406a40 <vApplicationStackOverflowHook+0xc>
  406a42:	bf00      	nop
  406a44:	0040d974 	.word	0x0040d974
  406a48:	00406c7d 	.word	0x00406c7d

00406a4c <vApplicationTickHook>:
{
  406a4c:	4770      	bx	lr

00406a4e <vApplicationMallocFailedHook>:
  406a4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  406a52:	b672      	cpsid	i
  406a54:	f383 8811 	msr	BASEPRI, r3
  406a58:	f3bf 8f6f 	isb	sy
  406a5c:	f3bf 8f4f 	dsb	sy
  406a60:	b662      	cpsie	i
  406a62:	e7fe      	b.n	406a62 <vApplicationMallocFailedHook+0x14>

00406a64 <main>:
}

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  406a64:	b500      	push	{lr}
  406a66:	b08b      	sub	sp, #44	; 0x2c
	
  RTC_init();
  406a68:	4b4b      	ldr	r3, [pc, #300]	; (406b98 <main+0x134>)
  406a6a:	4798      	blx	r3
  uint8_t bufferTX[100];
  
  uint8_t rtn;

  /* Initialize the SAM system */
  sysclk_init();
  406a6c:	4b4b      	ldr	r3, [pc, #300]	; (406b9c <main+0x138>)
  406a6e:	4798      	blx	r3
  board_init();
  406a70:	4b4b      	ldr	r3, [pc, #300]	; (406ba0 <main+0x13c>)
  406a72:	4798      	blx	r3
  
  xSemaphoreT = xSemaphoreCreateBinary();
  406a74:	2203      	movs	r2, #3
  406a76:	2100      	movs	r1, #0
  406a78:	2001      	movs	r0, #1
  406a7a:	4c4a      	ldr	r4, [pc, #296]	; (406ba4 <main+0x140>)
  406a7c:	47a0      	blx	r4
  406a7e:	4b4a      	ldr	r3, [pc, #296]	; (406ba8 <main+0x144>)
  406a80:	6018      	str	r0, [r3, #0]
  xSemaphoreSD = xSemaphoreCreateBinary();
  406a82:	2203      	movs	r2, #3
  406a84:	2100      	movs	r1, #0
  406a86:	2001      	movs	r0, #1
  406a88:	47a0      	blx	r4
  406a8a:	4b48      	ldr	r3, [pc, #288]	; (406bac <main+0x148>)
  406a8c:	6018      	str	r0, [r3, #0]
  
  /* Configura Leds */
  LED_init(1);
  406a8e:	2001      	movs	r0, #1
  406a90:	4b47      	ldr	r3, [pc, #284]	; (406bb0 <main+0x14c>)
  406a92:	4798      	blx	r3
  
  /* Configura os bot?es */
  BUT_init();
  406a94:	4b47      	ldr	r3, [pc, #284]	; (406bb4 <main+0x150>)
  406a96:	4798      	blx	r3
   
  /* Disable the watchdog */
  WDT->WDT_MR = WDT_MR_WDDIS;
  406a98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  406a9c:	4b46      	ldr	r3, [pc, #280]	; (406bb8 <main+0x154>)
  406a9e:	605a      	str	r2, [r3, #4]
  406aa0:	200b      	movs	r0, #11
  406aa2:	4e46      	ldr	r6, [pc, #280]	; (406bbc <main+0x158>)
  406aa4:	47b0      	blx	r6
  406aa6:	200a      	movs	r0, #10
  406aa8:	47b0      	blx	r6
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  406aaa:	2210      	movs	r2, #16
  406aac:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406ab0:	4843      	ldr	r0, [pc, #268]	; (406bc0 <main+0x15c>)
  406ab2:	4c44      	ldr	r4, [pc, #272]	; (406bc4 <main+0x160>)
  406ab4:	47a0      	blx	r4
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  406ab6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  406aba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  406abe:	4842      	ldr	r0, [pc, #264]	; (406bc8 <main+0x164>)
  406ac0:	47a0      	blx	r4
 	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  406ac2:	4a42      	ldr	r2, [pc, #264]	; (406bcc <main+0x168>)
  406ac4:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  406ac8:	f043 0310 	orr.w	r3, r3, #16
  406acc:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  406ad0:	200e      	movs	r0, #14
  406ad2:	47b0      	blx	r6
	stdio_base = (void *)usart;
  406ad4:	4d3e      	ldr	r5, [pc, #248]	; (406bd0 <main+0x16c>)
  406ad6:	4b3f      	ldr	r3, [pc, #252]	; (406bd4 <main+0x170>)
  406ad8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  406ada:	4a3f      	ldr	r2, [pc, #252]	; (406bd8 <main+0x174>)
  406adc:	4b3f      	ldr	r3, [pc, #252]	; (406bdc <main+0x178>)
  406ade:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  406ae0:	4a3f      	ldr	r2, [pc, #252]	; (406be0 <main+0x17c>)
  406ae2:	4b40      	ldr	r3, [pc, #256]	; (406be4 <main+0x180>)
  406ae4:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  406ae6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  406aea:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  406aec:	23c0      	movs	r3, #192	; 0xc0
  406aee:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  406af0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406af4:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  406af6:	2400      	movs	r4, #0
  406af8:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  406afa:	9408      	str	r4, [sp, #32]
  406afc:	200e      	movs	r0, #14
  406afe:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  406b00:	4a39      	ldr	r2, [pc, #228]	; (406be8 <main+0x184>)
  406b02:	a904      	add	r1, sp, #16
  406b04:	4628      	mov	r0, r5
  406b06:	4b39      	ldr	r3, [pc, #228]	; (406bec <main+0x188>)
  406b08:	4798      	blx	r3
		usart_enable_tx(p_usart);
  406b0a:	4628      	mov	r0, r5
  406b0c:	4b38      	ldr	r3, [pc, #224]	; (406bf0 <main+0x18c>)
  406b0e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406b10:	4628      	mov	r0, r5
  406b12:	4b38      	ldr	r3, [pc, #224]	; (406bf4 <main+0x190>)
  406b14:	4798      	blx	r3
	setbuf(stdout, NULL);
  406b16:	4e38      	ldr	r6, [pc, #224]	; (406bf8 <main+0x194>)
  406b18:	6833      	ldr	r3, [r6, #0]
  406b1a:	4621      	mov	r1, r4
  406b1c:	6898      	ldr	r0, [r3, #8]
  406b1e:	4d37      	ldr	r5, [pc, #220]	; (406bfc <main+0x198>)
  406b20:	47a8      	blx	r5
	setbuf(stdin, NULL);
  406b22:	6833      	ldr	r3, [r6, #0]
  406b24:	4621      	mov	r1, r4
  406b26:	6858      	ldr	r0, [r3, #4]
  406b28:	47a8      	blx	r5
  
  /* Inicializa com serial com PC*/
  configure_console();
  printf("Demo do sensor BME280, sem calibracao! \n"); 
  406b2a:	4835      	ldr	r0, [pc, #212]	; (406c00 <main+0x19c>)
  406b2c:	4b35      	ldr	r3, [pc, #212]	; (406c04 <main+0x1a0>)
  406b2e:	4798      	blx	r3
  
  /* Inicializa funcao de delay */
  delay_init( sysclk_get_cpu_hz());
  
  if (xTaskCreate(task_sensor, "sensor", TASK_SENSOR_STACK_SIZE, NULL, TASK_SENSOR_STACK_PRIORITY, NULL) != pdPASS) {
  406b30:	9403      	str	r4, [sp, #12]
  406b32:	9402      	str	r4, [sp, #8]
  406b34:	9401      	str	r4, [sp, #4]
  406b36:	9400      	str	r4, [sp, #0]
  406b38:	4623      	mov	r3, r4
  406b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
  406b3e:	4932      	ldr	r1, [pc, #200]	; (406c08 <main+0x1a4>)
  406b40:	4832      	ldr	r0, [pc, #200]	; (406c0c <main+0x1a8>)
  406b42:	4c33      	ldr	r4, [pc, #204]	; (406c10 <main+0x1ac>)
  406b44:	47a0      	blx	r4
  406b46:	2801      	cmp	r0, #1
  406b48:	d002      	beq.n	406b50 <main+0xec>
	  printf("Failed to create test led task\r\n");
  406b4a:	4832      	ldr	r0, [pc, #200]	; (406c14 <main+0x1b0>)
  406b4c:	4b2d      	ldr	r3, [pc, #180]	; (406c04 <main+0x1a0>)
  406b4e:	4798      	blx	r3
  }

  /* Create task to handler touch */
  if (xTaskCreate(task_terminal, "terminal", TASK_TERMINAL_STACK_SIZE, NULL, TASK_TERMINAL_STACK_PRIORITY, NULL) != pdPASS) {
  406b50:	2300      	movs	r3, #0
  406b52:	9303      	str	r3, [sp, #12]
  406b54:	9302      	str	r3, [sp, #8]
  406b56:	9301      	str	r3, [sp, #4]
  406b58:	9300      	str	r3, [sp, #0]
  406b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
  406b5e:	492e      	ldr	r1, [pc, #184]	; (406c18 <main+0x1b4>)
  406b60:	482e      	ldr	r0, [pc, #184]	; (406c1c <main+0x1b8>)
  406b62:	4c2b      	ldr	r4, [pc, #172]	; (406c10 <main+0x1ac>)
  406b64:	47a0      	blx	r4
  406b66:	2801      	cmp	r0, #1
  406b68:	d002      	beq.n	406b70 <main+0x10c>
	  printf("Failed to create test led task\r\n");
  406b6a:	482a      	ldr	r0, [pc, #168]	; (406c14 <main+0x1b0>)
  406b6c:	4b25      	ldr	r3, [pc, #148]	; (406c04 <main+0x1a0>)
  406b6e:	4798      	blx	r3
  }
  
  /* Create task to handler LCD */
  if (xTaskCreate(task_sdcard, "sdcard", TASK_SDCARD_STACK_SIZE, NULL, TASK_SDCARD_STACK_PRIORITY, NULL) != pdPASS) {
  406b70:	2300      	movs	r3, #0
  406b72:	9303      	str	r3, [sp, #12]
  406b74:	9302      	str	r3, [sp, #8]
  406b76:	9301      	str	r3, [sp, #4]
  406b78:	9300      	str	r3, [sp, #0]
  406b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
  406b7e:	4928      	ldr	r1, [pc, #160]	; (406c20 <main+0x1bc>)
  406b80:	4828      	ldr	r0, [pc, #160]	; (406c24 <main+0x1c0>)
  406b82:	4c23      	ldr	r4, [pc, #140]	; (406c10 <main+0x1ac>)
  406b84:	47a0      	blx	r4
  406b86:	2801      	cmp	r0, #1
  406b88:	d002      	beq.n	406b90 <main+0x12c>
	  printf("Failed to create test led task\r\n");
  406b8a:	4822      	ldr	r0, [pc, #136]	; (406c14 <main+0x1b0>)
  406b8c:	4b1d      	ldr	r3, [pc, #116]	; (406c04 <main+0x1a0>)
  406b8e:	4798      	blx	r3
  }
	/* Start the scheduler. */
	vTaskStartScheduler();
  406b90:	4b25      	ldr	r3, [pc, #148]	; (406c28 <main+0x1c4>)
  406b92:	4798      	blx	r3
  406b94:	e7fe      	b.n	406b94 <main+0x130>
  406b96:	bf00      	nop
  406b98:	004068bd 	.word	0x004068bd
  406b9c:	00401015 	.word	0x00401015
  406ba0:	00401185 	.word	0x00401185
  406ba4:	004049d5 	.word	0x004049d5
  406ba8:	2040c4a4 	.word	0x2040c4a4
  406bac:	2040c490 	.word	0x2040c490
  406bb0:	00406a09 	.word	0x00406a09
  406bb4:	004069a5 	.word	0x004069a5
  406bb8:	400e1850 	.word	0x400e1850
  406bbc:	00401f59 	.word	0x00401f59
  406bc0:	400e1000 	.word	0x400e1000
  406bc4:	00401bd9 	.word	0x00401bd9
  406bc8:	400e0e00 	.word	0x400e0e00
  406bcc:	40088000 	.word	0x40088000
  406bd0:	40028000 	.word	0x40028000
  406bd4:	2040c444 	.word	0x2040c444
  406bd8:	004061cd 	.word	0x004061cd
  406bdc:	2040c440 	.word	0x2040c440
  406be0:	004060f1 	.word	0x004060f1
  406be4:	2040c43c 	.word	0x2040c43c
  406be8:	08f0d180 	.word	0x08f0d180
  406bec:	004024a9 	.word	0x004024a9
  406bf0:	004024fd 	.word	0x004024fd
  406bf4:	00402503 	.word	0x00402503
  406bf8:	20400040 	.word	0x20400040
  406bfc:	00406e75 	.word	0x00406e75
  406c00:	0040d68c 	.word	0x0040d68c
  406c04:	00406c7d 	.word	0x00406c7d
  406c08:	0040d6b8 	.word	0x0040d6b8
  406c0c:	004066a5 	.word	0x004066a5
  406c10:	004050f5 	.word	0x004050f5
  406c14:	0040d6c0 	.word	0x0040d6c0
  406c18:	0040d6e4 	.word	0x0040d6e4
  406c1c:	0040609d 	.word	0x0040609d
  406c20:	0040d6f0 	.word	0x0040d6f0
  406c24:	004062a1 	.word	0x004062a1
  406c28:	00405329 	.word	0x00405329

00406c2c <__libc_init_array>:
  406c2c:	b570      	push	{r4, r5, r6, lr}
  406c2e:	4e0f      	ldr	r6, [pc, #60]	; (406c6c <__libc_init_array+0x40>)
  406c30:	4d0f      	ldr	r5, [pc, #60]	; (406c70 <__libc_init_array+0x44>)
  406c32:	1b76      	subs	r6, r6, r5
  406c34:	10b6      	asrs	r6, r6, #2
  406c36:	bf18      	it	ne
  406c38:	2400      	movne	r4, #0
  406c3a:	d005      	beq.n	406c48 <__libc_init_array+0x1c>
  406c3c:	3401      	adds	r4, #1
  406c3e:	f855 3b04 	ldr.w	r3, [r5], #4
  406c42:	4798      	blx	r3
  406c44:	42a6      	cmp	r6, r4
  406c46:	d1f9      	bne.n	406c3c <__libc_init_array+0x10>
  406c48:	4e0a      	ldr	r6, [pc, #40]	; (406c74 <__libc_init_array+0x48>)
  406c4a:	4d0b      	ldr	r5, [pc, #44]	; (406c78 <__libc_init_array+0x4c>)
  406c4c:	1b76      	subs	r6, r6, r5
  406c4e:	f006 fff3 	bl	40dc38 <_init>
  406c52:	10b6      	asrs	r6, r6, #2
  406c54:	bf18      	it	ne
  406c56:	2400      	movne	r4, #0
  406c58:	d006      	beq.n	406c68 <__libc_init_array+0x3c>
  406c5a:	3401      	adds	r4, #1
  406c5c:	f855 3b04 	ldr.w	r3, [r5], #4
  406c60:	4798      	blx	r3
  406c62:	42a6      	cmp	r6, r4
  406c64:	d1f9      	bne.n	406c5a <__libc_init_array+0x2e>
  406c66:	bd70      	pop	{r4, r5, r6, pc}
  406c68:	bd70      	pop	{r4, r5, r6, pc}
  406c6a:	bf00      	nop
  406c6c:	0040dc44 	.word	0x0040dc44
  406c70:	0040dc44 	.word	0x0040dc44
  406c74:	0040dc4c 	.word	0x0040dc4c
  406c78:	0040dc44 	.word	0x0040dc44

00406c7c <iprintf>:
  406c7c:	b40f      	push	{r0, r1, r2, r3}
  406c7e:	b500      	push	{lr}
  406c80:	4907      	ldr	r1, [pc, #28]	; (406ca0 <iprintf+0x24>)
  406c82:	b083      	sub	sp, #12
  406c84:	ab04      	add	r3, sp, #16
  406c86:	6808      	ldr	r0, [r1, #0]
  406c88:	f853 2b04 	ldr.w	r2, [r3], #4
  406c8c:	6881      	ldr	r1, [r0, #8]
  406c8e:	9301      	str	r3, [sp, #4]
  406c90:	f001 fcd2 	bl	408638 <_vfiprintf_r>
  406c94:	b003      	add	sp, #12
  406c96:	f85d eb04 	ldr.w	lr, [sp], #4
  406c9a:	b004      	add	sp, #16
  406c9c:	4770      	bx	lr
  406c9e:	bf00      	nop
  406ca0:	20400040 	.word	0x20400040

00406ca4 <memcpy>:
  406ca4:	4684      	mov	ip, r0
  406ca6:	ea41 0300 	orr.w	r3, r1, r0
  406caa:	f013 0303 	ands.w	r3, r3, #3
  406cae:	d16d      	bne.n	406d8c <memcpy+0xe8>
  406cb0:	3a40      	subs	r2, #64	; 0x40
  406cb2:	d341      	bcc.n	406d38 <memcpy+0x94>
  406cb4:	f851 3b04 	ldr.w	r3, [r1], #4
  406cb8:	f840 3b04 	str.w	r3, [r0], #4
  406cbc:	f851 3b04 	ldr.w	r3, [r1], #4
  406cc0:	f840 3b04 	str.w	r3, [r0], #4
  406cc4:	f851 3b04 	ldr.w	r3, [r1], #4
  406cc8:	f840 3b04 	str.w	r3, [r0], #4
  406ccc:	f851 3b04 	ldr.w	r3, [r1], #4
  406cd0:	f840 3b04 	str.w	r3, [r0], #4
  406cd4:	f851 3b04 	ldr.w	r3, [r1], #4
  406cd8:	f840 3b04 	str.w	r3, [r0], #4
  406cdc:	f851 3b04 	ldr.w	r3, [r1], #4
  406ce0:	f840 3b04 	str.w	r3, [r0], #4
  406ce4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ce8:	f840 3b04 	str.w	r3, [r0], #4
  406cec:	f851 3b04 	ldr.w	r3, [r1], #4
  406cf0:	f840 3b04 	str.w	r3, [r0], #4
  406cf4:	f851 3b04 	ldr.w	r3, [r1], #4
  406cf8:	f840 3b04 	str.w	r3, [r0], #4
  406cfc:	f851 3b04 	ldr.w	r3, [r1], #4
  406d00:	f840 3b04 	str.w	r3, [r0], #4
  406d04:	f851 3b04 	ldr.w	r3, [r1], #4
  406d08:	f840 3b04 	str.w	r3, [r0], #4
  406d0c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d10:	f840 3b04 	str.w	r3, [r0], #4
  406d14:	f851 3b04 	ldr.w	r3, [r1], #4
  406d18:	f840 3b04 	str.w	r3, [r0], #4
  406d1c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d20:	f840 3b04 	str.w	r3, [r0], #4
  406d24:	f851 3b04 	ldr.w	r3, [r1], #4
  406d28:	f840 3b04 	str.w	r3, [r0], #4
  406d2c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d30:	f840 3b04 	str.w	r3, [r0], #4
  406d34:	3a40      	subs	r2, #64	; 0x40
  406d36:	d2bd      	bcs.n	406cb4 <memcpy+0x10>
  406d38:	3230      	adds	r2, #48	; 0x30
  406d3a:	d311      	bcc.n	406d60 <memcpy+0xbc>
  406d3c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d40:	f840 3b04 	str.w	r3, [r0], #4
  406d44:	f851 3b04 	ldr.w	r3, [r1], #4
  406d48:	f840 3b04 	str.w	r3, [r0], #4
  406d4c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d50:	f840 3b04 	str.w	r3, [r0], #4
  406d54:	f851 3b04 	ldr.w	r3, [r1], #4
  406d58:	f840 3b04 	str.w	r3, [r0], #4
  406d5c:	3a10      	subs	r2, #16
  406d5e:	d2ed      	bcs.n	406d3c <memcpy+0x98>
  406d60:	320c      	adds	r2, #12
  406d62:	d305      	bcc.n	406d70 <memcpy+0xcc>
  406d64:	f851 3b04 	ldr.w	r3, [r1], #4
  406d68:	f840 3b04 	str.w	r3, [r0], #4
  406d6c:	3a04      	subs	r2, #4
  406d6e:	d2f9      	bcs.n	406d64 <memcpy+0xc0>
  406d70:	3204      	adds	r2, #4
  406d72:	d008      	beq.n	406d86 <memcpy+0xe2>
  406d74:	07d2      	lsls	r2, r2, #31
  406d76:	bf1c      	itt	ne
  406d78:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406d7c:	f800 3b01 	strbne.w	r3, [r0], #1
  406d80:	d301      	bcc.n	406d86 <memcpy+0xe2>
  406d82:	880b      	ldrh	r3, [r1, #0]
  406d84:	8003      	strh	r3, [r0, #0]
  406d86:	4660      	mov	r0, ip
  406d88:	4770      	bx	lr
  406d8a:	bf00      	nop
  406d8c:	2a08      	cmp	r2, #8
  406d8e:	d313      	bcc.n	406db8 <memcpy+0x114>
  406d90:	078b      	lsls	r3, r1, #30
  406d92:	d08d      	beq.n	406cb0 <memcpy+0xc>
  406d94:	f010 0303 	ands.w	r3, r0, #3
  406d98:	d08a      	beq.n	406cb0 <memcpy+0xc>
  406d9a:	f1c3 0304 	rsb	r3, r3, #4
  406d9e:	1ad2      	subs	r2, r2, r3
  406da0:	07db      	lsls	r3, r3, #31
  406da2:	bf1c      	itt	ne
  406da4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406da8:	f800 3b01 	strbne.w	r3, [r0], #1
  406dac:	d380      	bcc.n	406cb0 <memcpy+0xc>
  406dae:	f831 3b02 	ldrh.w	r3, [r1], #2
  406db2:	f820 3b02 	strh.w	r3, [r0], #2
  406db6:	e77b      	b.n	406cb0 <memcpy+0xc>
  406db8:	3a04      	subs	r2, #4
  406dba:	d3d9      	bcc.n	406d70 <memcpy+0xcc>
  406dbc:	3a01      	subs	r2, #1
  406dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
  406dc2:	f800 3b01 	strb.w	r3, [r0], #1
  406dc6:	d2f9      	bcs.n	406dbc <memcpy+0x118>
  406dc8:	780b      	ldrb	r3, [r1, #0]
  406dca:	7003      	strb	r3, [r0, #0]
  406dcc:	784b      	ldrb	r3, [r1, #1]
  406dce:	7043      	strb	r3, [r0, #1]
  406dd0:	788b      	ldrb	r3, [r1, #2]
  406dd2:	7083      	strb	r3, [r0, #2]
  406dd4:	4660      	mov	r0, ip
  406dd6:	4770      	bx	lr

00406dd8 <memset>:
  406dd8:	b470      	push	{r4, r5, r6}
  406dda:	0786      	lsls	r6, r0, #30
  406ddc:	d046      	beq.n	406e6c <memset+0x94>
  406dde:	1e54      	subs	r4, r2, #1
  406de0:	2a00      	cmp	r2, #0
  406de2:	d041      	beq.n	406e68 <memset+0x90>
  406de4:	b2ca      	uxtb	r2, r1
  406de6:	4603      	mov	r3, r0
  406de8:	e002      	b.n	406df0 <memset+0x18>
  406dea:	f114 34ff 	adds.w	r4, r4, #4294967295
  406dee:	d33b      	bcc.n	406e68 <memset+0x90>
  406df0:	f803 2b01 	strb.w	r2, [r3], #1
  406df4:	079d      	lsls	r5, r3, #30
  406df6:	d1f8      	bne.n	406dea <memset+0x12>
  406df8:	2c03      	cmp	r4, #3
  406dfa:	d92e      	bls.n	406e5a <memset+0x82>
  406dfc:	b2cd      	uxtb	r5, r1
  406dfe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406e02:	2c0f      	cmp	r4, #15
  406e04:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406e08:	d919      	bls.n	406e3e <memset+0x66>
  406e0a:	f103 0210 	add.w	r2, r3, #16
  406e0e:	4626      	mov	r6, r4
  406e10:	3e10      	subs	r6, #16
  406e12:	2e0f      	cmp	r6, #15
  406e14:	f842 5c10 	str.w	r5, [r2, #-16]
  406e18:	f842 5c0c 	str.w	r5, [r2, #-12]
  406e1c:	f842 5c08 	str.w	r5, [r2, #-8]
  406e20:	f842 5c04 	str.w	r5, [r2, #-4]
  406e24:	f102 0210 	add.w	r2, r2, #16
  406e28:	d8f2      	bhi.n	406e10 <memset+0x38>
  406e2a:	f1a4 0210 	sub.w	r2, r4, #16
  406e2e:	f022 020f 	bic.w	r2, r2, #15
  406e32:	f004 040f 	and.w	r4, r4, #15
  406e36:	3210      	adds	r2, #16
  406e38:	2c03      	cmp	r4, #3
  406e3a:	4413      	add	r3, r2
  406e3c:	d90d      	bls.n	406e5a <memset+0x82>
  406e3e:	461e      	mov	r6, r3
  406e40:	4622      	mov	r2, r4
  406e42:	3a04      	subs	r2, #4
  406e44:	2a03      	cmp	r2, #3
  406e46:	f846 5b04 	str.w	r5, [r6], #4
  406e4a:	d8fa      	bhi.n	406e42 <memset+0x6a>
  406e4c:	1f22      	subs	r2, r4, #4
  406e4e:	f022 0203 	bic.w	r2, r2, #3
  406e52:	3204      	adds	r2, #4
  406e54:	4413      	add	r3, r2
  406e56:	f004 0403 	and.w	r4, r4, #3
  406e5a:	b12c      	cbz	r4, 406e68 <memset+0x90>
  406e5c:	b2c9      	uxtb	r1, r1
  406e5e:	441c      	add	r4, r3
  406e60:	f803 1b01 	strb.w	r1, [r3], #1
  406e64:	429c      	cmp	r4, r3
  406e66:	d1fb      	bne.n	406e60 <memset+0x88>
  406e68:	bc70      	pop	{r4, r5, r6}
  406e6a:	4770      	bx	lr
  406e6c:	4614      	mov	r4, r2
  406e6e:	4603      	mov	r3, r0
  406e70:	e7c2      	b.n	406df8 <memset+0x20>
  406e72:	bf00      	nop

00406e74 <setbuf>:
  406e74:	2900      	cmp	r1, #0
  406e76:	bf0c      	ite	eq
  406e78:	2202      	moveq	r2, #2
  406e7a:	2200      	movne	r2, #0
  406e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406e80:	f000 b800 	b.w	406e84 <setvbuf>

00406e84 <setvbuf>:
  406e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406e88:	4c61      	ldr	r4, [pc, #388]	; (407010 <setvbuf+0x18c>)
  406e8a:	6825      	ldr	r5, [r4, #0]
  406e8c:	b083      	sub	sp, #12
  406e8e:	4604      	mov	r4, r0
  406e90:	460f      	mov	r7, r1
  406e92:	4690      	mov	r8, r2
  406e94:	461e      	mov	r6, r3
  406e96:	b115      	cbz	r5, 406e9e <setvbuf+0x1a>
  406e98:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406e9a:	2b00      	cmp	r3, #0
  406e9c:	d064      	beq.n	406f68 <setvbuf+0xe4>
  406e9e:	f1b8 0f02 	cmp.w	r8, #2
  406ea2:	d006      	beq.n	406eb2 <setvbuf+0x2e>
  406ea4:	f1b8 0f01 	cmp.w	r8, #1
  406ea8:	f200 809f 	bhi.w	406fea <setvbuf+0x166>
  406eac:	2e00      	cmp	r6, #0
  406eae:	f2c0 809c 	blt.w	406fea <setvbuf+0x166>
  406eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406eb4:	07d8      	lsls	r0, r3, #31
  406eb6:	d534      	bpl.n	406f22 <setvbuf+0x9e>
  406eb8:	4621      	mov	r1, r4
  406eba:	4628      	mov	r0, r5
  406ebc:	f003 fb1a 	bl	40a4f4 <_fflush_r>
  406ec0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406ec2:	b141      	cbz	r1, 406ed6 <setvbuf+0x52>
  406ec4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406ec8:	4299      	cmp	r1, r3
  406eca:	d002      	beq.n	406ed2 <setvbuf+0x4e>
  406ecc:	4628      	mov	r0, r5
  406ece:	f003 fc8f 	bl	40a7f0 <_free_r>
  406ed2:	2300      	movs	r3, #0
  406ed4:	6323      	str	r3, [r4, #48]	; 0x30
  406ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406eda:	2200      	movs	r2, #0
  406edc:	61a2      	str	r2, [r4, #24]
  406ede:	6062      	str	r2, [r4, #4]
  406ee0:	061a      	lsls	r2, r3, #24
  406ee2:	d43a      	bmi.n	406f5a <setvbuf+0xd6>
  406ee4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  406ee8:	f023 0303 	bic.w	r3, r3, #3
  406eec:	f1b8 0f02 	cmp.w	r8, #2
  406ef0:	81a3      	strh	r3, [r4, #12]
  406ef2:	d01d      	beq.n	406f30 <setvbuf+0xac>
  406ef4:	ab01      	add	r3, sp, #4
  406ef6:	466a      	mov	r2, sp
  406ef8:	4621      	mov	r1, r4
  406efa:	4628      	mov	r0, r5
  406efc:	f003 ff24 	bl	40ad48 <__swhatbuf_r>
  406f00:	89a3      	ldrh	r3, [r4, #12]
  406f02:	4318      	orrs	r0, r3
  406f04:	81a0      	strh	r0, [r4, #12]
  406f06:	2e00      	cmp	r6, #0
  406f08:	d132      	bne.n	406f70 <setvbuf+0xec>
  406f0a:	9e00      	ldr	r6, [sp, #0]
  406f0c:	4630      	mov	r0, r6
  406f0e:	f003 ff93 	bl	40ae38 <malloc>
  406f12:	4607      	mov	r7, r0
  406f14:	2800      	cmp	r0, #0
  406f16:	d06b      	beq.n	406ff0 <setvbuf+0x16c>
  406f18:	89a3      	ldrh	r3, [r4, #12]
  406f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406f1e:	81a3      	strh	r3, [r4, #12]
  406f20:	e028      	b.n	406f74 <setvbuf+0xf0>
  406f22:	89a3      	ldrh	r3, [r4, #12]
  406f24:	0599      	lsls	r1, r3, #22
  406f26:	d4c7      	bmi.n	406eb8 <setvbuf+0x34>
  406f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406f2a:	f003 ff09 	bl	40ad40 <__retarget_lock_acquire_recursive>
  406f2e:	e7c3      	b.n	406eb8 <setvbuf+0x34>
  406f30:	2500      	movs	r5, #0
  406f32:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406f34:	2600      	movs	r6, #0
  406f36:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406f3a:	f043 0302 	orr.w	r3, r3, #2
  406f3e:	2001      	movs	r0, #1
  406f40:	60a6      	str	r6, [r4, #8]
  406f42:	07ce      	lsls	r6, r1, #31
  406f44:	81a3      	strh	r3, [r4, #12]
  406f46:	6022      	str	r2, [r4, #0]
  406f48:	6122      	str	r2, [r4, #16]
  406f4a:	6160      	str	r0, [r4, #20]
  406f4c:	d401      	bmi.n	406f52 <setvbuf+0xce>
  406f4e:	0598      	lsls	r0, r3, #22
  406f50:	d53e      	bpl.n	406fd0 <setvbuf+0x14c>
  406f52:	4628      	mov	r0, r5
  406f54:	b003      	add	sp, #12
  406f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406f5a:	6921      	ldr	r1, [r4, #16]
  406f5c:	4628      	mov	r0, r5
  406f5e:	f003 fc47 	bl	40a7f0 <_free_r>
  406f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f66:	e7bd      	b.n	406ee4 <setvbuf+0x60>
  406f68:	4628      	mov	r0, r5
  406f6a:	f003 fb1b 	bl	40a5a4 <__sinit>
  406f6e:	e796      	b.n	406e9e <setvbuf+0x1a>
  406f70:	2f00      	cmp	r7, #0
  406f72:	d0cb      	beq.n	406f0c <setvbuf+0x88>
  406f74:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406f76:	2b00      	cmp	r3, #0
  406f78:	d033      	beq.n	406fe2 <setvbuf+0x15e>
  406f7a:	9b00      	ldr	r3, [sp, #0]
  406f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f80:	6027      	str	r7, [r4, #0]
  406f82:	429e      	cmp	r6, r3
  406f84:	bf1c      	itt	ne
  406f86:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  406f8a:	81a2      	strhne	r2, [r4, #12]
  406f8c:	f1b8 0f01 	cmp.w	r8, #1
  406f90:	bf04      	itt	eq
  406f92:	f042 0201 	orreq.w	r2, r2, #1
  406f96:	81a2      	strheq	r2, [r4, #12]
  406f98:	b292      	uxth	r2, r2
  406f9a:	f012 0308 	ands.w	r3, r2, #8
  406f9e:	6127      	str	r7, [r4, #16]
  406fa0:	6166      	str	r6, [r4, #20]
  406fa2:	d00e      	beq.n	406fc2 <setvbuf+0x13e>
  406fa4:	07d1      	lsls	r1, r2, #31
  406fa6:	d51a      	bpl.n	406fde <setvbuf+0x15a>
  406fa8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406faa:	4276      	negs	r6, r6
  406fac:	2300      	movs	r3, #0
  406fae:	f015 0501 	ands.w	r5, r5, #1
  406fb2:	61a6      	str	r6, [r4, #24]
  406fb4:	60a3      	str	r3, [r4, #8]
  406fb6:	d009      	beq.n	406fcc <setvbuf+0x148>
  406fb8:	2500      	movs	r5, #0
  406fba:	4628      	mov	r0, r5
  406fbc:	b003      	add	sp, #12
  406fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406fc2:	60a3      	str	r3, [r4, #8]
  406fc4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406fc6:	f015 0501 	ands.w	r5, r5, #1
  406fca:	d1f5      	bne.n	406fb8 <setvbuf+0x134>
  406fcc:	0593      	lsls	r3, r2, #22
  406fce:	d4c0      	bmi.n	406f52 <setvbuf+0xce>
  406fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406fd2:	f003 feb7 	bl	40ad44 <__retarget_lock_release_recursive>
  406fd6:	4628      	mov	r0, r5
  406fd8:	b003      	add	sp, #12
  406fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406fde:	60a6      	str	r6, [r4, #8]
  406fe0:	e7f0      	b.n	406fc4 <setvbuf+0x140>
  406fe2:	4628      	mov	r0, r5
  406fe4:	f003 fade 	bl	40a5a4 <__sinit>
  406fe8:	e7c7      	b.n	406f7a <setvbuf+0xf6>
  406fea:	f04f 35ff 	mov.w	r5, #4294967295
  406fee:	e7b0      	b.n	406f52 <setvbuf+0xce>
  406ff0:	f8dd 9000 	ldr.w	r9, [sp]
  406ff4:	45b1      	cmp	r9, r6
  406ff6:	d004      	beq.n	407002 <setvbuf+0x17e>
  406ff8:	4648      	mov	r0, r9
  406ffa:	f003 ff1d 	bl	40ae38 <malloc>
  406ffe:	4607      	mov	r7, r0
  407000:	b920      	cbnz	r0, 40700c <setvbuf+0x188>
  407002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407006:	f04f 35ff 	mov.w	r5, #4294967295
  40700a:	e792      	b.n	406f32 <setvbuf+0xae>
  40700c:	464e      	mov	r6, r9
  40700e:	e783      	b.n	406f18 <setvbuf+0x94>
  407010:	20400040 	.word	0x20400040

00407014 <sprintf>:
  407014:	b40e      	push	{r1, r2, r3}
  407016:	b5f0      	push	{r4, r5, r6, r7, lr}
  407018:	b09c      	sub	sp, #112	; 0x70
  40701a:	ab21      	add	r3, sp, #132	; 0x84
  40701c:	490f      	ldr	r1, [pc, #60]	; (40705c <sprintf+0x48>)
  40701e:	f853 2b04 	ldr.w	r2, [r3], #4
  407022:	9301      	str	r3, [sp, #4]
  407024:	4605      	mov	r5, r0
  407026:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40702a:	6808      	ldr	r0, [r1, #0]
  40702c:	9502      	str	r5, [sp, #8]
  40702e:	f44f 7702 	mov.w	r7, #520	; 0x208
  407032:	f64f 76ff 	movw	r6, #65535	; 0xffff
  407036:	a902      	add	r1, sp, #8
  407038:	9506      	str	r5, [sp, #24]
  40703a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40703e:	9404      	str	r4, [sp, #16]
  407040:	9407      	str	r4, [sp, #28]
  407042:	f8ad 6016 	strh.w	r6, [sp, #22]
  407046:	f000 f889 	bl	40715c <_svfprintf_r>
  40704a:	9b02      	ldr	r3, [sp, #8]
  40704c:	2200      	movs	r2, #0
  40704e:	701a      	strb	r2, [r3, #0]
  407050:	b01c      	add	sp, #112	; 0x70
  407052:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407056:	b003      	add	sp, #12
  407058:	4770      	bx	lr
  40705a:	bf00      	nop
  40705c:	20400040 	.word	0x20400040
	...

00407080 <strlen>:
  407080:	f890 f000 	pld	[r0]
  407084:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407088:	f020 0107 	bic.w	r1, r0, #7
  40708c:	f06f 0c00 	mvn.w	ip, #0
  407090:	f010 0407 	ands.w	r4, r0, #7
  407094:	f891 f020 	pld	[r1, #32]
  407098:	f040 8049 	bne.w	40712e <strlen+0xae>
  40709c:	f04f 0400 	mov.w	r4, #0
  4070a0:	f06f 0007 	mvn.w	r0, #7
  4070a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4070a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4070ac:	f100 0008 	add.w	r0, r0, #8
  4070b0:	fa82 f24c 	uadd8	r2, r2, ip
  4070b4:	faa4 f28c 	sel	r2, r4, ip
  4070b8:	fa83 f34c 	uadd8	r3, r3, ip
  4070bc:	faa2 f38c 	sel	r3, r2, ip
  4070c0:	bb4b      	cbnz	r3, 407116 <strlen+0x96>
  4070c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4070c6:	fa82 f24c 	uadd8	r2, r2, ip
  4070ca:	f100 0008 	add.w	r0, r0, #8
  4070ce:	faa4 f28c 	sel	r2, r4, ip
  4070d2:	fa83 f34c 	uadd8	r3, r3, ip
  4070d6:	faa2 f38c 	sel	r3, r2, ip
  4070da:	b9e3      	cbnz	r3, 407116 <strlen+0x96>
  4070dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4070e0:	fa82 f24c 	uadd8	r2, r2, ip
  4070e4:	f100 0008 	add.w	r0, r0, #8
  4070e8:	faa4 f28c 	sel	r2, r4, ip
  4070ec:	fa83 f34c 	uadd8	r3, r3, ip
  4070f0:	faa2 f38c 	sel	r3, r2, ip
  4070f4:	b97b      	cbnz	r3, 407116 <strlen+0x96>
  4070f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4070fa:	f101 0120 	add.w	r1, r1, #32
  4070fe:	fa82 f24c 	uadd8	r2, r2, ip
  407102:	f100 0008 	add.w	r0, r0, #8
  407106:	faa4 f28c 	sel	r2, r4, ip
  40710a:	fa83 f34c 	uadd8	r3, r3, ip
  40710e:	faa2 f38c 	sel	r3, r2, ip
  407112:	2b00      	cmp	r3, #0
  407114:	d0c6      	beq.n	4070a4 <strlen+0x24>
  407116:	2a00      	cmp	r2, #0
  407118:	bf04      	itt	eq
  40711a:	3004      	addeq	r0, #4
  40711c:	461a      	moveq	r2, r3
  40711e:	ba12      	rev	r2, r2
  407120:	fab2 f282 	clz	r2, r2
  407124:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407128:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40712c:	4770      	bx	lr
  40712e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407132:	f004 0503 	and.w	r5, r4, #3
  407136:	f1c4 0000 	rsb	r0, r4, #0
  40713a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40713e:	f014 0f04 	tst.w	r4, #4
  407142:	f891 f040 	pld	[r1, #64]	; 0x40
  407146:	fa0c f505 	lsl.w	r5, ip, r5
  40714a:	ea62 0205 	orn	r2, r2, r5
  40714e:	bf1c      	itt	ne
  407150:	ea63 0305 	ornne	r3, r3, r5
  407154:	4662      	movne	r2, ip
  407156:	f04f 0400 	mov.w	r4, #0
  40715a:	e7a9      	b.n	4070b0 <strlen+0x30>

0040715c <_svfprintf_r>:
  40715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407160:	b0c3      	sub	sp, #268	; 0x10c
  407162:	460c      	mov	r4, r1
  407164:	910b      	str	r1, [sp, #44]	; 0x2c
  407166:	4692      	mov	sl, r2
  407168:	930f      	str	r3, [sp, #60]	; 0x3c
  40716a:	900c      	str	r0, [sp, #48]	; 0x30
  40716c:	f003 fdd6 	bl	40ad1c <_localeconv_r>
  407170:	6803      	ldr	r3, [r0, #0]
  407172:	931a      	str	r3, [sp, #104]	; 0x68
  407174:	4618      	mov	r0, r3
  407176:	f7ff ff83 	bl	407080 <strlen>
  40717a:	89a3      	ldrh	r3, [r4, #12]
  40717c:	9019      	str	r0, [sp, #100]	; 0x64
  40717e:	0619      	lsls	r1, r3, #24
  407180:	d503      	bpl.n	40718a <_svfprintf_r+0x2e>
  407182:	6923      	ldr	r3, [r4, #16]
  407184:	2b00      	cmp	r3, #0
  407186:	f001 8003 	beq.w	408190 <_svfprintf_r+0x1034>
  40718a:	2300      	movs	r3, #0
  40718c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  407190:	9313      	str	r3, [sp, #76]	; 0x4c
  407192:	9315      	str	r3, [sp, #84]	; 0x54
  407194:	9314      	str	r3, [sp, #80]	; 0x50
  407196:	9327      	str	r3, [sp, #156]	; 0x9c
  407198:	9326      	str	r3, [sp, #152]	; 0x98
  40719a:	9318      	str	r3, [sp, #96]	; 0x60
  40719c:	931b      	str	r3, [sp, #108]	; 0x6c
  40719e:	9309      	str	r3, [sp, #36]	; 0x24
  4071a0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4071a4:	46c8      	mov	r8, r9
  4071a6:	9316      	str	r3, [sp, #88]	; 0x58
  4071a8:	9317      	str	r3, [sp, #92]	; 0x5c
  4071aa:	f89a 3000 	ldrb.w	r3, [sl]
  4071ae:	4654      	mov	r4, sl
  4071b0:	b1e3      	cbz	r3, 4071ec <_svfprintf_r+0x90>
  4071b2:	2b25      	cmp	r3, #37	; 0x25
  4071b4:	d102      	bne.n	4071bc <_svfprintf_r+0x60>
  4071b6:	e019      	b.n	4071ec <_svfprintf_r+0x90>
  4071b8:	2b25      	cmp	r3, #37	; 0x25
  4071ba:	d003      	beq.n	4071c4 <_svfprintf_r+0x68>
  4071bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4071c0:	2b00      	cmp	r3, #0
  4071c2:	d1f9      	bne.n	4071b8 <_svfprintf_r+0x5c>
  4071c4:	eba4 050a 	sub.w	r5, r4, sl
  4071c8:	b185      	cbz	r5, 4071ec <_svfprintf_r+0x90>
  4071ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4071cc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4071ce:	f8c8 a000 	str.w	sl, [r8]
  4071d2:	3301      	adds	r3, #1
  4071d4:	442a      	add	r2, r5
  4071d6:	2b07      	cmp	r3, #7
  4071d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4071dc:	9227      	str	r2, [sp, #156]	; 0x9c
  4071de:	9326      	str	r3, [sp, #152]	; 0x98
  4071e0:	dc7f      	bgt.n	4072e2 <_svfprintf_r+0x186>
  4071e2:	f108 0808 	add.w	r8, r8, #8
  4071e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4071e8:	442b      	add	r3, r5
  4071ea:	9309      	str	r3, [sp, #36]	; 0x24
  4071ec:	7823      	ldrb	r3, [r4, #0]
  4071ee:	2b00      	cmp	r3, #0
  4071f0:	d07f      	beq.n	4072f2 <_svfprintf_r+0x196>
  4071f2:	2300      	movs	r3, #0
  4071f4:	461a      	mov	r2, r3
  4071f6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4071fa:	4619      	mov	r1, r3
  4071fc:	930d      	str	r3, [sp, #52]	; 0x34
  4071fe:	469b      	mov	fp, r3
  407200:	f04f 30ff 	mov.w	r0, #4294967295
  407204:	7863      	ldrb	r3, [r4, #1]
  407206:	900a      	str	r0, [sp, #40]	; 0x28
  407208:	f104 0a01 	add.w	sl, r4, #1
  40720c:	f10a 0a01 	add.w	sl, sl, #1
  407210:	f1a3 0020 	sub.w	r0, r3, #32
  407214:	2858      	cmp	r0, #88	; 0x58
  407216:	f200 83c1 	bhi.w	40799c <_svfprintf_r+0x840>
  40721a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40721e:	0238      	.short	0x0238
  407220:	03bf03bf 	.word	0x03bf03bf
  407224:	03bf0240 	.word	0x03bf0240
  407228:	03bf03bf 	.word	0x03bf03bf
  40722c:	03bf03bf 	.word	0x03bf03bf
  407230:	024503bf 	.word	0x024503bf
  407234:	03bf0203 	.word	0x03bf0203
  407238:	026b005d 	.word	0x026b005d
  40723c:	028603bf 	.word	0x028603bf
  407240:	039d039d 	.word	0x039d039d
  407244:	039d039d 	.word	0x039d039d
  407248:	039d039d 	.word	0x039d039d
  40724c:	039d039d 	.word	0x039d039d
  407250:	03bf039d 	.word	0x03bf039d
  407254:	03bf03bf 	.word	0x03bf03bf
  407258:	03bf03bf 	.word	0x03bf03bf
  40725c:	03bf03bf 	.word	0x03bf03bf
  407260:	03bf03bf 	.word	0x03bf03bf
  407264:	033703bf 	.word	0x033703bf
  407268:	03bf0357 	.word	0x03bf0357
  40726c:	03bf0357 	.word	0x03bf0357
  407270:	03bf03bf 	.word	0x03bf03bf
  407274:	039803bf 	.word	0x039803bf
  407278:	03bf03bf 	.word	0x03bf03bf
  40727c:	03bf03ad 	.word	0x03bf03ad
  407280:	03bf03bf 	.word	0x03bf03bf
  407284:	03bf03bf 	.word	0x03bf03bf
  407288:	03bf0259 	.word	0x03bf0259
  40728c:	031e03bf 	.word	0x031e03bf
  407290:	03bf03bf 	.word	0x03bf03bf
  407294:	03bf03bf 	.word	0x03bf03bf
  407298:	03bf03bf 	.word	0x03bf03bf
  40729c:	03bf03bf 	.word	0x03bf03bf
  4072a0:	03bf03bf 	.word	0x03bf03bf
  4072a4:	02db02c6 	.word	0x02db02c6
  4072a8:	03570357 	.word	0x03570357
  4072ac:	028b0357 	.word	0x028b0357
  4072b0:	03bf02db 	.word	0x03bf02db
  4072b4:	029003bf 	.word	0x029003bf
  4072b8:	029d03bf 	.word	0x029d03bf
  4072bc:	02b401cc 	.word	0x02b401cc
  4072c0:	03bf0208 	.word	0x03bf0208
  4072c4:	03bf01e1 	.word	0x03bf01e1
  4072c8:	03bf007e 	.word	0x03bf007e
  4072cc:	020d03bf 	.word	0x020d03bf
  4072d0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4072d2:	930f      	str	r3, [sp, #60]	; 0x3c
  4072d4:	4240      	negs	r0, r0
  4072d6:	900d      	str	r0, [sp, #52]	; 0x34
  4072d8:	f04b 0b04 	orr.w	fp, fp, #4
  4072dc:	f89a 3000 	ldrb.w	r3, [sl]
  4072e0:	e794      	b.n	40720c <_svfprintf_r+0xb0>
  4072e2:	aa25      	add	r2, sp, #148	; 0x94
  4072e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4072e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4072e8:	f004 fe30 	bl	40bf4c <__ssprint_r>
  4072ec:	b940      	cbnz	r0, 407300 <_svfprintf_r+0x1a4>
  4072ee:	46c8      	mov	r8, r9
  4072f0:	e779      	b.n	4071e6 <_svfprintf_r+0x8a>
  4072f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4072f4:	b123      	cbz	r3, 407300 <_svfprintf_r+0x1a4>
  4072f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4072f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4072fa:	aa25      	add	r2, sp, #148	; 0x94
  4072fc:	f004 fe26 	bl	40bf4c <__ssprint_r>
  407300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407302:	899b      	ldrh	r3, [r3, #12]
  407304:	f013 0f40 	tst.w	r3, #64	; 0x40
  407308:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40730a:	bf18      	it	ne
  40730c:	f04f 33ff 	movne.w	r3, #4294967295
  407310:	9309      	str	r3, [sp, #36]	; 0x24
  407312:	9809      	ldr	r0, [sp, #36]	; 0x24
  407314:	b043      	add	sp, #268	; 0x10c
  407316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40731a:	f01b 0f20 	tst.w	fp, #32
  40731e:	9311      	str	r3, [sp, #68]	; 0x44
  407320:	f040 81dd 	bne.w	4076de <_svfprintf_r+0x582>
  407324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407326:	f01b 0f10 	tst.w	fp, #16
  40732a:	4613      	mov	r3, r2
  40732c:	f040 856e 	bne.w	407e0c <_svfprintf_r+0xcb0>
  407330:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407334:	f000 856a 	beq.w	407e0c <_svfprintf_r+0xcb0>
  407338:	8814      	ldrh	r4, [r2, #0]
  40733a:	3204      	adds	r2, #4
  40733c:	2500      	movs	r5, #0
  40733e:	2301      	movs	r3, #1
  407340:	920f      	str	r2, [sp, #60]	; 0x3c
  407342:	2700      	movs	r7, #0
  407344:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407348:	990a      	ldr	r1, [sp, #40]	; 0x28
  40734a:	1c4a      	adds	r2, r1, #1
  40734c:	f000 8265 	beq.w	40781a <_svfprintf_r+0x6be>
  407350:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  407354:	9207      	str	r2, [sp, #28]
  407356:	ea54 0205 	orrs.w	r2, r4, r5
  40735a:	f040 8264 	bne.w	407826 <_svfprintf_r+0x6ca>
  40735e:	2900      	cmp	r1, #0
  407360:	f040 843c 	bne.w	407bdc <_svfprintf_r+0xa80>
  407364:	2b00      	cmp	r3, #0
  407366:	f040 84d7 	bne.w	407d18 <_svfprintf_r+0xbbc>
  40736a:	f01b 0301 	ands.w	r3, fp, #1
  40736e:	930e      	str	r3, [sp, #56]	; 0x38
  407370:	f000 8604 	beq.w	407f7c <_svfprintf_r+0xe20>
  407374:	ae42      	add	r6, sp, #264	; 0x108
  407376:	2330      	movs	r3, #48	; 0x30
  407378:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40737c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40737e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407380:	4293      	cmp	r3, r2
  407382:	bfb8      	it	lt
  407384:	4613      	movlt	r3, r2
  407386:	9308      	str	r3, [sp, #32]
  407388:	2300      	movs	r3, #0
  40738a:	9312      	str	r3, [sp, #72]	; 0x48
  40738c:	b117      	cbz	r7, 407394 <_svfprintf_r+0x238>
  40738e:	9b08      	ldr	r3, [sp, #32]
  407390:	3301      	adds	r3, #1
  407392:	9308      	str	r3, [sp, #32]
  407394:	9b07      	ldr	r3, [sp, #28]
  407396:	f013 0302 	ands.w	r3, r3, #2
  40739a:	9310      	str	r3, [sp, #64]	; 0x40
  40739c:	d002      	beq.n	4073a4 <_svfprintf_r+0x248>
  40739e:	9b08      	ldr	r3, [sp, #32]
  4073a0:	3302      	adds	r3, #2
  4073a2:	9308      	str	r3, [sp, #32]
  4073a4:	9b07      	ldr	r3, [sp, #28]
  4073a6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4073aa:	f040 830e 	bne.w	4079ca <_svfprintf_r+0x86e>
  4073ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4073b0:	9a08      	ldr	r2, [sp, #32]
  4073b2:	eba3 0b02 	sub.w	fp, r3, r2
  4073b6:	f1bb 0f00 	cmp.w	fp, #0
  4073ba:	f340 8306 	ble.w	4079ca <_svfprintf_r+0x86e>
  4073be:	f1bb 0f10 	cmp.w	fp, #16
  4073c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4073c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4073c6:	dd29      	ble.n	40741c <_svfprintf_r+0x2c0>
  4073c8:	4643      	mov	r3, r8
  4073ca:	4621      	mov	r1, r4
  4073cc:	46a8      	mov	r8, r5
  4073ce:	2710      	movs	r7, #16
  4073d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4073d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4073d4:	e006      	b.n	4073e4 <_svfprintf_r+0x288>
  4073d6:	f1ab 0b10 	sub.w	fp, fp, #16
  4073da:	f1bb 0f10 	cmp.w	fp, #16
  4073de:	f103 0308 	add.w	r3, r3, #8
  4073e2:	dd18      	ble.n	407416 <_svfprintf_r+0x2ba>
  4073e4:	3201      	adds	r2, #1
  4073e6:	48b7      	ldr	r0, [pc, #732]	; (4076c4 <_svfprintf_r+0x568>)
  4073e8:	9226      	str	r2, [sp, #152]	; 0x98
  4073ea:	3110      	adds	r1, #16
  4073ec:	2a07      	cmp	r2, #7
  4073ee:	9127      	str	r1, [sp, #156]	; 0x9c
  4073f0:	e883 0081 	stmia.w	r3, {r0, r7}
  4073f4:	ddef      	ble.n	4073d6 <_svfprintf_r+0x27a>
  4073f6:	aa25      	add	r2, sp, #148	; 0x94
  4073f8:	4629      	mov	r1, r5
  4073fa:	4620      	mov	r0, r4
  4073fc:	f004 fda6 	bl	40bf4c <__ssprint_r>
  407400:	2800      	cmp	r0, #0
  407402:	f47f af7d 	bne.w	407300 <_svfprintf_r+0x1a4>
  407406:	f1ab 0b10 	sub.w	fp, fp, #16
  40740a:	f1bb 0f10 	cmp.w	fp, #16
  40740e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407410:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407412:	464b      	mov	r3, r9
  407414:	dce6      	bgt.n	4073e4 <_svfprintf_r+0x288>
  407416:	4645      	mov	r5, r8
  407418:	460c      	mov	r4, r1
  40741a:	4698      	mov	r8, r3
  40741c:	3201      	adds	r2, #1
  40741e:	4ba9      	ldr	r3, [pc, #676]	; (4076c4 <_svfprintf_r+0x568>)
  407420:	9226      	str	r2, [sp, #152]	; 0x98
  407422:	445c      	add	r4, fp
  407424:	2a07      	cmp	r2, #7
  407426:	9427      	str	r4, [sp, #156]	; 0x9c
  407428:	e888 0808 	stmia.w	r8, {r3, fp}
  40742c:	f300 8498 	bgt.w	407d60 <_svfprintf_r+0xc04>
  407430:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407434:	f108 0808 	add.w	r8, r8, #8
  407438:	b177      	cbz	r7, 407458 <_svfprintf_r+0x2fc>
  40743a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40743c:	3301      	adds	r3, #1
  40743e:	3401      	adds	r4, #1
  407440:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  407444:	2201      	movs	r2, #1
  407446:	2b07      	cmp	r3, #7
  407448:	9427      	str	r4, [sp, #156]	; 0x9c
  40744a:	9326      	str	r3, [sp, #152]	; 0x98
  40744c:	e888 0006 	stmia.w	r8, {r1, r2}
  407450:	f300 83db 	bgt.w	407c0a <_svfprintf_r+0xaae>
  407454:	f108 0808 	add.w	r8, r8, #8
  407458:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40745a:	b16b      	cbz	r3, 407478 <_svfprintf_r+0x31c>
  40745c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40745e:	3301      	adds	r3, #1
  407460:	3402      	adds	r4, #2
  407462:	a91e      	add	r1, sp, #120	; 0x78
  407464:	2202      	movs	r2, #2
  407466:	2b07      	cmp	r3, #7
  407468:	9427      	str	r4, [sp, #156]	; 0x9c
  40746a:	9326      	str	r3, [sp, #152]	; 0x98
  40746c:	e888 0006 	stmia.w	r8, {r1, r2}
  407470:	f300 83d6 	bgt.w	407c20 <_svfprintf_r+0xac4>
  407474:	f108 0808 	add.w	r8, r8, #8
  407478:	2d80      	cmp	r5, #128	; 0x80
  40747a:	f000 8315 	beq.w	407aa8 <_svfprintf_r+0x94c>
  40747e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407482:	1a9f      	subs	r7, r3, r2
  407484:	2f00      	cmp	r7, #0
  407486:	dd36      	ble.n	4074f6 <_svfprintf_r+0x39a>
  407488:	2f10      	cmp	r7, #16
  40748a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40748c:	4d8e      	ldr	r5, [pc, #568]	; (4076c8 <_svfprintf_r+0x56c>)
  40748e:	dd27      	ble.n	4074e0 <_svfprintf_r+0x384>
  407490:	4642      	mov	r2, r8
  407492:	4621      	mov	r1, r4
  407494:	46b0      	mov	r8, r6
  407496:	f04f 0b10 	mov.w	fp, #16
  40749a:	462e      	mov	r6, r5
  40749c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40749e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4074a0:	e004      	b.n	4074ac <_svfprintf_r+0x350>
  4074a2:	3f10      	subs	r7, #16
  4074a4:	2f10      	cmp	r7, #16
  4074a6:	f102 0208 	add.w	r2, r2, #8
  4074aa:	dd15      	ble.n	4074d8 <_svfprintf_r+0x37c>
  4074ac:	3301      	adds	r3, #1
  4074ae:	3110      	adds	r1, #16
  4074b0:	2b07      	cmp	r3, #7
  4074b2:	9127      	str	r1, [sp, #156]	; 0x9c
  4074b4:	9326      	str	r3, [sp, #152]	; 0x98
  4074b6:	e882 0840 	stmia.w	r2, {r6, fp}
  4074ba:	ddf2      	ble.n	4074a2 <_svfprintf_r+0x346>
  4074bc:	aa25      	add	r2, sp, #148	; 0x94
  4074be:	4629      	mov	r1, r5
  4074c0:	4620      	mov	r0, r4
  4074c2:	f004 fd43 	bl	40bf4c <__ssprint_r>
  4074c6:	2800      	cmp	r0, #0
  4074c8:	f47f af1a 	bne.w	407300 <_svfprintf_r+0x1a4>
  4074cc:	3f10      	subs	r7, #16
  4074ce:	2f10      	cmp	r7, #16
  4074d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4074d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4074d4:	464a      	mov	r2, r9
  4074d6:	dce9      	bgt.n	4074ac <_svfprintf_r+0x350>
  4074d8:	4635      	mov	r5, r6
  4074da:	460c      	mov	r4, r1
  4074dc:	4646      	mov	r6, r8
  4074de:	4690      	mov	r8, r2
  4074e0:	3301      	adds	r3, #1
  4074e2:	443c      	add	r4, r7
  4074e4:	2b07      	cmp	r3, #7
  4074e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4074e8:	9326      	str	r3, [sp, #152]	; 0x98
  4074ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  4074ee:	f300 8381 	bgt.w	407bf4 <_svfprintf_r+0xa98>
  4074f2:	f108 0808 	add.w	r8, r8, #8
  4074f6:	9b07      	ldr	r3, [sp, #28]
  4074f8:	05df      	lsls	r7, r3, #23
  4074fa:	f100 8268 	bmi.w	4079ce <_svfprintf_r+0x872>
  4074fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407500:	990e      	ldr	r1, [sp, #56]	; 0x38
  407502:	f8c8 6000 	str.w	r6, [r8]
  407506:	3301      	adds	r3, #1
  407508:	440c      	add	r4, r1
  40750a:	2b07      	cmp	r3, #7
  40750c:	9427      	str	r4, [sp, #156]	; 0x9c
  40750e:	f8c8 1004 	str.w	r1, [r8, #4]
  407512:	9326      	str	r3, [sp, #152]	; 0x98
  407514:	f300 834d 	bgt.w	407bb2 <_svfprintf_r+0xa56>
  407518:	f108 0808 	add.w	r8, r8, #8
  40751c:	9b07      	ldr	r3, [sp, #28]
  40751e:	075b      	lsls	r3, r3, #29
  407520:	d53a      	bpl.n	407598 <_svfprintf_r+0x43c>
  407522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407524:	9a08      	ldr	r2, [sp, #32]
  407526:	1a9d      	subs	r5, r3, r2
  407528:	2d00      	cmp	r5, #0
  40752a:	dd35      	ble.n	407598 <_svfprintf_r+0x43c>
  40752c:	2d10      	cmp	r5, #16
  40752e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407530:	dd20      	ble.n	407574 <_svfprintf_r+0x418>
  407532:	2610      	movs	r6, #16
  407534:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407536:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40753a:	e004      	b.n	407546 <_svfprintf_r+0x3ea>
  40753c:	3d10      	subs	r5, #16
  40753e:	2d10      	cmp	r5, #16
  407540:	f108 0808 	add.w	r8, r8, #8
  407544:	dd16      	ble.n	407574 <_svfprintf_r+0x418>
  407546:	3301      	adds	r3, #1
  407548:	4a5e      	ldr	r2, [pc, #376]	; (4076c4 <_svfprintf_r+0x568>)
  40754a:	9326      	str	r3, [sp, #152]	; 0x98
  40754c:	3410      	adds	r4, #16
  40754e:	2b07      	cmp	r3, #7
  407550:	9427      	str	r4, [sp, #156]	; 0x9c
  407552:	e888 0044 	stmia.w	r8, {r2, r6}
  407556:	ddf1      	ble.n	40753c <_svfprintf_r+0x3e0>
  407558:	aa25      	add	r2, sp, #148	; 0x94
  40755a:	4659      	mov	r1, fp
  40755c:	4638      	mov	r0, r7
  40755e:	f004 fcf5 	bl	40bf4c <__ssprint_r>
  407562:	2800      	cmp	r0, #0
  407564:	f47f aecc 	bne.w	407300 <_svfprintf_r+0x1a4>
  407568:	3d10      	subs	r5, #16
  40756a:	2d10      	cmp	r5, #16
  40756c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40756e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407570:	46c8      	mov	r8, r9
  407572:	dce8      	bgt.n	407546 <_svfprintf_r+0x3ea>
  407574:	3301      	adds	r3, #1
  407576:	4a53      	ldr	r2, [pc, #332]	; (4076c4 <_svfprintf_r+0x568>)
  407578:	9326      	str	r3, [sp, #152]	; 0x98
  40757a:	442c      	add	r4, r5
  40757c:	2b07      	cmp	r3, #7
  40757e:	9427      	str	r4, [sp, #156]	; 0x9c
  407580:	e888 0024 	stmia.w	r8, {r2, r5}
  407584:	dd08      	ble.n	407598 <_svfprintf_r+0x43c>
  407586:	aa25      	add	r2, sp, #148	; 0x94
  407588:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40758a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40758c:	f004 fcde 	bl	40bf4c <__ssprint_r>
  407590:	2800      	cmp	r0, #0
  407592:	f47f aeb5 	bne.w	407300 <_svfprintf_r+0x1a4>
  407596:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407598:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40759a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40759c:	9908      	ldr	r1, [sp, #32]
  40759e:	428a      	cmp	r2, r1
  4075a0:	bfac      	ite	ge
  4075a2:	189b      	addge	r3, r3, r2
  4075a4:	185b      	addlt	r3, r3, r1
  4075a6:	9309      	str	r3, [sp, #36]	; 0x24
  4075a8:	2c00      	cmp	r4, #0
  4075aa:	f040 830d 	bne.w	407bc8 <_svfprintf_r+0xa6c>
  4075ae:	2300      	movs	r3, #0
  4075b0:	9326      	str	r3, [sp, #152]	; 0x98
  4075b2:	46c8      	mov	r8, r9
  4075b4:	e5f9      	b.n	4071aa <_svfprintf_r+0x4e>
  4075b6:	9311      	str	r3, [sp, #68]	; 0x44
  4075b8:	f01b 0320 	ands.w	r3, fp, #32
  4075bc:	f040 81e3 	bne.w	407986 <_svfprintf_r+0x82a>
  4075c0:	f01b 0210 	ands.w	r2, fp, #16
  4075c4:	f040 842e 	bne.w	407e24 <_svfprintf_r+0xcc8>
  4075c8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4075cc:	f000 842a 	beq.w	407e24 <_svfprintf_r+0xcc8>
  4075d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4075d2:	4613      	mov	r3, r2
  4075d4:	460a      	mov	r2, r1
  4075d6:	3204      	adds	r2, #4
  4075d8:	880c      	ldrh	r4, [r1, #0]
  4075da:	920f      	str	r2, [sp, #60]	; 0x3c
  4075dc:	2500      	movs	r5, #0
  4075de:	e6b0      	b.n	407342 <_svfprintf_r+0x1e6>
  4075e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4075e2:	9311      	str	r3, [sp, #68]	; 0x44
  4075e4:	6816      	ldr	r6, [r2, #0]
  4075e6:	2400      	movs	r4, #0
  4075e8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4075ec:	1d15      	adds	r5, r2, #4
  4075ee:	2e00      	cmp	r6, #0
  4075f0:	f000 86a7 	beq.w	408342 <_svfprintf_r+0x11e6>
  4075f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4075f6:	1c53      	adds	r3, r2, #1
  4075f8:	f000 8609 	beq.w	40820e <_svfprintf_r+0x10b2>
  4075fc:	4621      	mov	r1, r4
  4075fe:	4630      	mov	r0, r6
  407600:	f003 feee 	bl	40b3e0 <memchr>
  407604:	2800      	cmp	r0, #0
  407606:	f000 86e1 	beq.w	4083cc <_svfprintf_r+0x1270>
  40760a:	1b83      	subs	r3, r0, r6
  40760c:	930e      	str	r3, [sp, #56]	; 0x38
  40760e:	940a      	str	r4, [sp, #40]	; 0x28
  407610:	950f      	str	r5, [sp, #60]	; 0x3c
  407612:	f8cd b01c 	str.w	fp, [sp, #28]
  407616:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40761a:	9308      	str	r3, [sp, #32]
  40761c:	9412      	str	r4, [sp, #72]	; 0x48
  40761e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407622:	e6b3      	b.n	40738c <_svfprintf_r+0x230>
  407624:	f89a 3000 	ldrb.w	r3, [sl]
  407628:	2201      	movs	r2, #1
  40762a:	212b      	movs	r1, #43	; 0x2b
  40762c:	e5ee      	b.n	40720c <_svfprintf_r+0xb0>
  40762e:	f04b 0b20 	orr.w	fp, fp, #32
  407632:	f89a 3000 	ldrb.w	r3, [sl]
  407636:	e5e9      	b.n	40720c <_svfprintf_r+0xb0>
  407638:	9311      	str	r3, [sp, #68]	; 0x44
  40763a:	2a00      	cmp	r2, #0
  40763c:	f040 8795 	bne.w	40856a <_svfprintf_r+0x140e>
  407640:	4b22      	ldr	r3, [pc, #136]	; (4076cc <_svfprintf_r+0x570>)
  407642:	9318      	str	r3, [sp, #96]	; 0x60
  407644:	f01b 0f20 	tst.w	fp, #32
  407648:	f040 8111 	bne.w	40786e <_svfprintf_r+0x712>
  40764c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40764e:	f01b 0f10 	tst.w	fp, #16
  407652:	4613      	mov	r3, r2
  407654:	f040 83e1 	bne.w	407e1a <_svfprintf_r+0xcbe>
  407658:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40765c:	f000 83dd 	beq.w	407e1a <_svfprintf_r+0xcbe>
  407660:	3304      	adds	r3, #4
  407662:	8814      	ldrh	r4, [r2, #0]
  407664:	930f      	str	r3, [sp, #60]	; 0x3c
  407666:	2500      	movs	r5, #0
  407668:	f01b 0f01 	tst.w	fp, #1
  40766c:	f000 810c 	beq.w	407888 <_svfprintf_r+0x72c>
  407670:	ea54 0305 	orrs.w	r3, r4, r5
  407674:	f000 8108 	beq.w	407888 <_svfprintf_r+0x72c>
  407678:	2330      	movs	r3, #48	; 0x30
  40767a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40767e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  407682:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  407686:	f04b 0b02 	orr.w	fp, fp, #2
  40768a:	2302      	movs	r3, #2
  40768c:	e659      	b.n	407342 <_svfprintf_r+0x1e6>
  40768e:	f89a 3000 	ldrb.w	r3, [sl]
  407692:	2900      	cmp	r1, #0
  407694:	f47f adba 	bne.w	40720c <_svfprintf_r+0xb0>
  407698:	2201      	movs	r2, #1
  40769a:	2120      	movs	r1, #32
  40769c:	e5b6      	b.n	40720c <_svfprintf_r+0xb0>
  40769e:	f04b 0b01 	orr.w	fp, fp, #1
  4076a2:	f89a 3000 	ldrb.w	r3, [sl]
  4076a6:	e5b1      	b.n	40720c <_svfprintf_r+0xb0>
  4076a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4076aa:	6823      	ldr	r3, [r4, #0]
  4076ac:	930d      	str	r3, [sp, #52]	; 0x34
  4076ae:	4618      	mov	r0, r3
  4076b0:	2800      	cmp	r0, #0
  4076b2:	4623      	mov	r3, r4
  4076b4:	f103 0304 	add.w	r3, r3, #4
  4076b8:	f6ff ae0a 	blt.w	4072d0 <_svfprintf_r+0x174>
  4076bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4076be:	f89a 3000 	ldrb.w	r3, [sl]
  4076c2:	e5a3      	b.n	40720c <_svfprintf_r+0xb0>
  4076c4:	0040d9d4 	.word	0x0040d9d4
  4076c8:	0040d9e4 	.word	0x0040d9e4
  4076cc:	0040d9b4 	.word	0x0040d9b4
  4076d0:	f04b 0b10 	orr.w	fp, fp, #16
  4076d4:	f01b 0f20 	tst.w	fp, #32
  4076d8:	9311      	str	r3, [sp, #68]	; 0x44
  4076da:	f43f ae23 	beq.w	407324 <_svfprintf_r+0x1c8>
  4076de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4076e0:	3507      	adds	r5, #7
  4076e2:	f025 0307 	bic.w	r3, r5, #7
  4076e6:	f103 0208 	add.w	r2, r3, #8
  4076ea:	e9d3 4500 	ldrd	r4, r5, [r3]
  4076ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4076f0:	2301      	movs	r3, #1
  4076f2:	e626      	b.n	407342 <_svfprintf_r+0x1e6>
  4076f4:	f89a 3000 	ldrb.w	r3, [sl]
  4076f8:	2b2a      	cmp	r3, #42	; 0x2a
  4076fa:	f10a 0401 	add.w	r4, sl, #1
  4076fe:	f000 8727 	beq.w	408550 <_svfprintf_r+0x13f4>
  407702:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407706:	2809      	cmp	r0, #9
  407708:	46a2      	mov	sl, r4
  40770a:	f200 86ad 	bhi.w	408468 <_svfprintf_r+0x130c>
  40770e:	2300      	movs	r3, #0
  407710:	461c      	mov	r4, r3
  407712:	f81a 3b01 	ldrb.w	r3, [sl], #1
  407716:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40771a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40771e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407722:	2809      	cmp	r0, #9
  407724:	d9f5      	bls.n	407712 <_svfprintf_r+0x5b6>
  407726:	940a      	str	r4, [sp, #40]	; 0x28
  407728:	e572      	b.n	407210 <_svfprintf_r+0xb4>
  40772a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40772e:	f89a 3000 	ldrb.w	r3, [sl]
  407732:	e56b      	b.n	40720c <_svfprintf_r+0xb0>
  407734:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  407738:	f89a 3000 	ldrb.w	r3, [sl]
  40773c:	e566      	b.n	40720c <_svfprintf_r+0xb0>
  40773e:	f89a 3000 	ldrb.w	r3, [sl]
  407742:	2b6c      	cmp	r3, #108	; 0x6c
  407744:	bf03      	ittte	eq
  407746:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40774a:	f04b 0b20 	orreq.w	fp, fp, #32
  40774e:	f10a 0a01 	addeq.w	sl, sl, #1
  407752:	f04b 0b10 	orrne.w	fp, fp, #16
  407756:	e559      	b.n	40720c <_svfprintf_r+0xb0>
  407758:	2a00      	cmp	r2, #0
  40775a:	f040 8711 	bne.w	408580 <_svfprintf_r+0x1424>
  40775e:	f01b 0f20 	tst.w	fp, #32
  407762:	f040 84f9 	bne.w	408158 <_svfprintf_r+0xffc>
  407766:	f01b 0f10 	tst.w	fp, #16
  40776a:	f040 84ac 	bne.w	4080c6 <_svfprintf_r+0xf6a>
  40776e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407772:	f000 84a8 	beq.w	4080c6 <_svfprintf_r+0xf6a>
  407776:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407778:	6813      	ldr	r3, [r2, #0]
  40777a:	3204      	adds	r2, #4
  40777c:	920f      	str	r2, [sp, #60]	; 0x3c
  40777e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  407782:	801a      	strh	r2, [r3, #0]
  407784:	e511      	b.n	4071aa <_svfprintf_r+0x4e>
  407786:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407788:	4bb3      	ldr	r3, [pc, #716]	; (407a58 <_svfprintf_r+0x8fc>)
  40778a:	680c      	ldr	r4, [r1, #0]
  40778c:	9318      	str	r3, [sp, #96]	; 0x60
  40778e:	2230      	movs	r2, #48	; 0x30
  407790:	2378      	movs	r3, #120	; 0x78
  407792:	3104      	adds	r1, #4
  407794:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  407798:	9311      	str	r3, [sp, #68]	; 0x44
  40779a:	f04b 0b02 	orr.w	fp, fp, #2
  40779e:	910f      	str	r1, [sp, #60]	; 0x3c
  4077a0:	2500      	movs	r5, #0
  4077a2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4077a6:	2302      	movs	r3, #2
  4077a8:	e5cb      	b.n	407342 <_svfprintf_r+0x1e6>
  4077aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4077ac:	9311      	str	r3, [sp, #68]	; 0x44
  4077ae:	680a      	ldr	r2, [r1, #0]
  4077b0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4077b4:	2300      	movs	r3, #0
  4077b6:	460a      	mov	r2, r1
  4077b8:	461f      	mov	r7, r3
  4077ba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4077be:	3204      	adds	r2, #4
  4077c0:	2301      	movs	r3, #1
  4077c2:	9308      	str	r3, [sp, #32]
  4077c4:	f8cd b01c 	str.w	fp, [sp, #28]
  4077c8:	970a      	str	r7, [sp, #40]	; 0x28
  4077ca:	9712      	str	r7, [sp, #72]	; 0x48
  4077cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4077ce:	930e      	str	r3, [sp, #56]	; 0x38
  4077d0:	ae28      	add	r6, sp, #160	; 0xa0
  4077d2:	e5df      	b.n	407394 <_svfprintf_r+0x238>
  4077d4:	9311      	str	r3, [sp, #68]	; 0x44
  4077d6:	2a00      	cmp	r2, #0
  4077d8:	f040 86ea 	bne.w	4085b0 <_svfprintf_r+0x1454>
  4077dc:	f01b 0f20 	tst.w	fp, #32
  4077e0:	d15d      	bne.n	40789e <_svfprintf_r+0x742>
  4077e2:	f01b 0f10 	tst.w	fp, #16
  4077e6:	f040 8308 	bne.w	407dfa <_svfprintf_r+0xc9e>
  4077ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4077ee:	f000 8304 	beq.w	407dfa <_svfprintf_r+0xc9e>
  4077f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4077f4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4077f8:	3104      	adds	r1, #4
  4077fa:	17e5      	asrs	r5, r4, #31
  4077fc:	4622      	mov	r2, r4
  4077fe:	462b      	mov	r3, r5
  407800:	910f      	str	r1, [sp, #60]	; 0x3c
  407802:	2a00      	cmp	r2, #0
  407804:	f173 0300 	sbcs.w	r3, r3, #0
  407808:	db58      	blt.n	4078bc <_svfprintf_r+0x760>
  40780a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40780c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407810:	1c4a      	adds	r2, r1, #1
  407812:	f04f 0301 	mov.w	r3, #1
  407816:	f47f ad9b 	bne.w	407350 <_svfprintf_r+0x1f4>
  40781a:	ea54 0205 	orrs.w	r2, r4, r5
  40781e:	f000 81df 	beq.w	407be0 <_svfprintf_r+0xa84>
  407822:	f8cd b01c 	str.w	fp, [sp, #28]
  407826:	2b01      	cmp	r3, #1
  407828:	f000 827b 	beq.w	407d22 <_svfprintf_r+0xbc6>
  40782c:	2b02      	cmp	r3, #2
  40782e:	f040 8206 	bne.w	407c3e <_svfprintf_r+0xae2>
  407832:	9818      	ldr	r0, [sp, #96]	; 0x60
  407834:	464e      	mov	r6, r9
  407836:	0923      	lsrs	r3, r4, #4
  407838:	f004 010f 	and.w	r1, r4, #15
  40783c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407840:	092a      	lsrs	r2, r5, #4
  407842:	461c      	mov	r4, r3
  407844:	4615      	mov	r5, r2
  407846:	5c43      	ldrb	r3, [r0, r1]
  407848:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40784c:	ea54 0305 	orrs.w	r3, r4, r5
  407850:	d1f1      	bne.n	407836 <_svfprintf_r+0x6da>
  407852:	eba9 0306 	sub.w	r3, r9, r6
  407856:	930e      	str	r3, [sp, #56]	; 0x38
  407858:	e590      	b.n	40737c <_svfprintf_r+0x220>
  40785a:	9311      	str	r3, [sp, #68]	; 0x44
  40785c:	2a00      	cmp	r2, #0
  40785e:	f040 86a3 	bne.w	4085a8 <_svfprintf_r+0x144c>
  407862:	4b7e      	ldr	r3, [pc, #504]	; (407a5c <_svfprintf_r+0x900>)
  407864:	9318      	str	r3, [sp, #96]	; 0x60
  407866:	f01b 0f20 	tst.w	fp, #32
  40786a:	f43f aeef 	beq.w	40764c <_svfprintf_r+0x4f0>
  40786e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407870:	3507      	adds	r5, #7
  407872:	f025 0307 	bic.w	r3, r5, #7
  407876:	f103 0208 	add.w	r2, r3, #8
  40787a:	f01b 0f01 	tst.w	fp, #1
  40787e:	920f      	str	r2, [sp, #60]	; 0x3c
  407880:	e9d3 4500 	ldrd	r4, r5, [r3]
  407884:	f47f aef4 	bne.w	407670 <_svfprintf_r+0x514>
  407888:	2302      	movs	r3, #2
  40788a:	e55a      	b.n	407342 <_svfprintf_r+0x1e6>
  40788c:	9311      	str	r3, [sp, #68]	; 0x44
  40788e:	2a00      	cmp	r2, #0
  407890:	f040 8686 	bne.w	4085a0 <_svfprintf_r+0x1444>
  407894:	f04b 0b10 	orr.w	fp, fp, #16
  407898:	f01b 0f20 	tst.w	fp, #32
  40789c:	d0a1      	beq.n	4077e2 <_svfprintf_r+0x686>
  40789e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4078a0:	3507      	adds	r5, #7
  4078a2:	f025 0507 	bic.w	r5, r5, #7
  4078a6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4078aa:	2a00      	cmp	r2, #0
  4078ac:	f105 0108 	add.w	r1, r5, #8
  4078b0:	461d      	mov	r5, r3
  4078b2:	f173 0300 	sbcs.w	r3, r3, #0
  4078b6:	910f      	str	r1, [sp, #60]	; 0x3c
  4078b8:	4614      	mov	r4, r2
  4078ba:	daa6      	bge.n	40780a <_svfprintf_r+0x6ae>
  4078bc:	272d      	movs	r7, #45	; 0x2d
  4078be:	4264      	negs	r4, r4
  4078c0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4078c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4078c8:	2301      	movs	r3, #1
  4078ca:	e53d      	b.n	407348 <_svfprintf_r+0x1ec>
  4078cc:	9311      	str	r3, [sp, #68]	; 0x44
  4078ce:	2a00      	cmp	r2, #0
  4078d0:	f040 8662 	bne.w	408598 <_svfprintf_r+0x143c>
  4078d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4078d6:	3507      	adds	r5, #7
  4078d8:	f025 0307 	bic.w	r3, r5, #7
  4078dc:	f103 0208 	add.w	r2, r3, #8
  4078e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4078e2:	681a      	ldr	r2, [r3, #0]
  4078e4:	9215      	str	r2, [sp, #84]	; 0x54
  4078e6:	685b      	ldr	r3, [r3, #4]
  4078e8:	9314      	str	r3, [sp, #80]	; 0x50
  4078ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4078ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4078ee:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4078f2:	4628      	mov	r0, r5
  4078f4:	4621      	mov	r1, r4
  4078f6:	f04f 32ff 	mov.w	r2, #4294967295
  4078fa:	4b59      	ldr	r3, [pc, #356]	; (407a60 <_svfprintf_r+0x904>)
  4078fc:	f005 f9f4 	bl	40cce8 <__aeabi_dcmpun>
  407900:	2800      	cmp	r0, #0
  407902:	f040 834a 	bne.w	407f9a <_svfprintf_r+0xe3e>
  407906:	4628      	mov	r0, r5
  407908:	4621      	mov	r1, r4
  40790a:	f04f 32ff 	mov.w	r2, #4294967295
  40790e:	4b54      	ldr	r3, [pc, #336]	; (407a60 <_svfprintf_r+0x904>)
  407910:	f005 f9cc 	bl	40ccac <__aeabi_dcmple>
  407914:	2800      	cmp	r0, #0
  407916:	f040 8340 	bne.w	407f9a <_svfprintf_r+0xe3e>
  40791a:	a815      	add	r0, sp, #84	; 0x54
  40791c:	c80d      	ldmia	r0, {r0, r2, r3}
  40791e:	9914      	ldr	r1, [sp, #80]	; 0x50
  407920:	f005 f9ba 	bl	40cc98 <__aeabi_dcmplt>
  407924:	2800      	cmp	r0, #0
  407926:	f040 8530 	bne.w	40838a <_svfprintf_r+0x122e>
  40792a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40792e:	4e4d      	ldr	r6, [pc, #308]	; (407a64 <_svfprintf_r+0x908>)
  407930:	4b4d      	ldr	r3, [pc, #308]	; (407a68 <_svfprintf_r+0x90c>)
  407932:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  407936:	9007      	str	r0, [sp, #28]
  407938:	9811      	ldr	r0, [sp, #68]	; 0x44
  40793a:	2203      	movs	r2, #3
  40793c:	2100      	movs	r1, #0
  40793e:	9208      	str	r2, [sp, #32]
  407940:	910a      	str	r1, [sp, #40]	; 0x28
  407942:	2847      	cmp	r0, #71	; 0x47
  407944:	bfd8      	it	le
  407946:	461e      	movle	r6, r3
  407948:	920e      	str	r2, [sp, #56]	; 0x38
  40794a:	9112      	str	r1, [sp, #72]	; 0x48
  40794c:	e51e      	b.n	40738c <_svfprintf_r+0x230>
  40794e:	f04b 0b08 	orr.w	fp, fp, #8
  407952:	f89a 3000 	ldrb.w	r3, [sl]
  407956:	e459      	b.n	40720c <_svfprintf_r+0xb0>
  407958:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40795c:	2300      	movs	r3, #0
  40795e:	461c      	mov	r4, r3
  407960:	f81a 3b01 	ldrb.w	r3, [sl], #1
  407964:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407968:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40796c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407970:	2809      	cmp	r0, #9
  407972:	d9f5      	bls.n	407960 <_svfprintf_r+0x804>
  407974:	940d      	str	r4, [sp, #52]	; 0x34
  407976:	e44b      	b.n	407210 <_svfprintf_r+0xb4>
  407978:	f04b 0b10 	orr.w	fp, fp, #16
  40797c:	9311      	str	r3, [sp, #68]	; 0x44
  40797e:	f01b 0320 	ands.w	r3, fp, #32
  407982:	f43f ae1d 	beq.w	4075c0 <_svfprintf_r+0x464>
  407986:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407988:	3507      	adds	r5, #7
  40798a:	f025 0307 	bic.w	r3, r5, #7
  40798e:	f103 0208 	add.w	r2, r3, #8
  407992:	e9d3 4500 	ldrd	r4, r5, [r3]
  407996:	920f      	str	r2, [sp, #60]	; 0x3c
  407998:	2300      	movs	r3, #0
  40799a:	e4d2      	b.n	407342 <_svfprintf_r+0x1e6>
  40799c:	9311      	str	r3, [sp, #68]	; 0x44
  40799e:	2a00      	cmp	r2, #0
  4079a0:	f040 85e7 	bne.w	408572 <_svfprintf_r+0x1416>
  4079a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4079a6:	2a00      	cmp	r2, #0
  4079a8:	f43f aca3 	beq.w	4072f2 <_svfprintf_r+0x196>
  4079ac:	2300      	movs	r3, #0
  4079ae:	2101      	movs	r1, #1
  4079b0:	461f      	mov	r7, r3
  4079b2:	9108      	str	r1, [sp, #32]
  4079b4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4079b8:	f8cd b01c 	str.w	fp, [sp, #28]
  4079bc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4079c0:	930a      	str	r3, [sp, #40]	; 0x28
  4079c2:	9312      	str	r3, [sp, #72]	; 0x48
  4079c4:	910e      	str	r1, [sp, #56]	; 0x38
  4079c6:	ae28      	add	r6, sp, #160	; 0xa0
  4079c8:	e4e4      	b.n	407394 <_svfprintf_r+0x238>
  4079ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4079cc:	e534      	b.n	407438 <_svfprintf_r+0x2dc>
  4079ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4079d0:	2b65      	cmp	r3, #101	; 0x65
  4079d2:	f340 80a7 	ble.w	407b24 <_svfprintf_r+0x9c8>
  4079d6:	a815      	add	r0, sp, #84	; 0x54
  4079d8:	c80d      	ldmia	r0, {r0, r2, r3}
  4079da:	9914      	ldr	r1, [sp, #80]	; 0x50
  4079dc:	f005 f952 	bl	40cc84 <__aeabi_dcmpeq>
  4079e0:	2800      	cmp	r0, #0
  4079e2:	f000 8150 	beq.w	407c86 <_svfprintf_r+0xb2a>
  4079e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4079e8:	4a20      	ldr	r2, [pc, #128]	; (407a6c <_svfprintf_r+0x910>)
  4079ea:	f8c8 2000 	str.w	r2, [r8]
  4079ee:	3301      	adds	r3, #1
  4079f0:	3401      	adds	r4, #1
  4079f2:	2201      	movs	r2, #1
  4079f4:	2b07      	cmp	r3, #7
  4079f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4079f8:	9326      	str	r3, [sp, #152]	; 0x98
  4079fa:	f8c8 2004 	str.w	r2, [r8, #4]
  4079fe:	f300 836a 	bgt.w	4080d6 <_svfprintf_r+0xf7a>
  407a02:	f108 0808 	add.w	r8, r8, #8
  407a06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407a08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407a0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407a0c:	4293      	cmp	r3, r2
  407a0e:	db03      	blt.n	407a18 <_svfprintf_r+0x8bc>
  407a10:	9b07      	ldr	r3, [sp, #28]
  407a12:	07dd      	lsls	r5, r3, #31
  407a14:	f57f ad82 	bpl.w	40751c <_svfprintf_r+0x3c0>
  407a18:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407a1a:	9919      	ldr	r1, [sp, #100]	; 0x64
  407a1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407a1e:	f8c8 2000 	str.w	r2, [r8]
  407a22:	3301      	adds	r3, #1
  407a24:	440c      	add	r4, r1
  407a26:	2b07      	cmp	r3, #7
  407a28:	f8c8 1004 	str.w	r1, [r8, #4]
  407a2c:	9427      	str	r4, [sp, #156]	; 0x9c
  407a2e:	9326      	str	r3, [sp, #152]	; 0x98
  407a30:	f300 839e 	bgt.w	408170 <_svfprintf_r+0x1014>
  407a34:	f108 0808 	add.w	r8, r8, #8
  407a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407a3a:	1e5e      	subs	r6, r3, #1
  407a3c:	2e00      	cmp	r6, #0
  407a3e:	f77f ad6d 	ble.w	40751c <_svfprintf_r+0x3c0>
  407a42:	2e10      	cmp	r6, #16
  407a44:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407a46:	4d0a      	ldr	r5, [pc, #40]	; (407a70 <_svfprintf_r+0x914>)
  407a48:	f340 81f5 	ble.w	407e36 <_svfprintf_r+0xcda>
  407a4c:	4622      	mov	r2, r4
  407a4e:	2710      	movs	r7, #16
  407a50:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407a54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407a56:	e013      	b.n	407a80 <_svfprintf_r+0x924>
  407a58:	0040d9b4 	.word	0x0040d9b4
  407a5c:	0040d9a0 	.word	0x0040d9a0
  407a60:	7fefffff 	.word	0x7fefffff
  407a64:	0040d994 	.word	0x0040d994
  407a68:	0040d990 	.word	0x0040d990
  407a6c:	0040d9d0 	.word	0x0040d9d0
  407a70:	0040d9e4 	.word	0x0040d9e4
  407a74:	f108 0808 	add.w	r8, r8, #8
  407a78:	3e10      	subs	r6, #16
  407a7a:	2e10      	cmp	r6, #16
  407a7c:	f340 81da 	ble.w	407e34 <_svfprintf_r+0xcd8>
  407a80:	3301      	adds	r3, #1
  407a82:	3210      	adds	r2, #16
  407a84:	2b07      	cmp	r3, #7
  407a86:	9227      	str	r2, [sp, #156]	; 0x9c
  407a88:	9326      	str	r3, [sp, #152]	; 0x98
  407a8a:	e888 00a0 	stmia.w	r8, {r5, r7}
  407a8e:	ddf1      	ble.n	407a74 <_svfprintf_r+0x918>
  407a90:	aa25      	add	r2, sp, #148	; 0x94
  407a92:	4621      	mov	r1, r4
  407a94:	4658      	mov	r0, fp
  407a96:	f004 fa59 	bl	40bf4c <__ssprint_r>
  407a9a:	2800      	cmp	r0, #0
  407a9c:	f47f ac30 	bne.w	407300 <_svfprintf_r+0x1a4>
  407aa0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407aa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407aa4:	46c8      	mov	r8, r9
  407aa6:	e7e7      	b.n	407a78 <_svfprintf_r+0x91c>
  407aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407aaa:	9a08      	ldr	r2, [sp, #32]
  407aac:	1a9f      	subs	r7, r3, r2
  407aae:	2f00      	cmp	r7, #0
  407ab0:	f77f ace5 	ble.w	40747e <_svfprintf_r+0x322>
  407ab4:	2f10      	cmp	r7, #16
  407ab6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407ab8:	4db6      	ldr	r5, [pc, #728]	; (407d94 <_svfprintf_r+0xc38>)
  407aba:	dd27      	ble.n	407b0c <_svfprintf_r+0x9b0>
  407abc:	4642      	mov	r2, r8
  407abe:	4621      	mov	r1, r4
  407ac0:	46b0      	mov	r8, r6
  407ac2:	f04f 0b10 	mov.w	fp, #16
  407ac6:	462e      	mov	r6, r5
  407ac8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407aca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407acc:	e004      	b.n	407ad8 <_svfprintf_r+0x97c>
  407ace:	3f10      	subs	r7, #16
  407ad0:	2f10      	cmp	r7, #16
  407ad2:	f102 0208 	add.w	r2, r2, #8
  407ad6:	dd15      	ble.n	407b04 <_svfprintf_r+0x9a8>
  407ad8:	3301      	adds	r3, #1
  407ada:	3110      	adds	r1, #16
  407adc:	2b07      	cmp	r3, #7
  407ade:	9127      	str	r1, [sp, #156]	; 0x9c
  407ae0:	9326      	str	r3, [sp, #152]	; 0x98
  407ae2:	e882 0840 	stmia.w	r2, {r6, fp}
  407ae6:	ddf2      	ble.n	407ace <_svfprintf_r+0x972>
  407ae8:	aa25      	add	r2, sp, #148	; 0x94
  407aea:	4629      	mov	r1, r5
  407aec:	4620      	mov	r0, r4
  407aee:	f004 fa2d 	bl	40bf4c <__ssprint_r>
  407af2:	2800      	cmp	r0, #0
  407af4:	f47f ac04 	bne.w	407300 <_svfprintf_r+0x1a4>
  407af8:	3f10      	subs	r7, #16
  407afa:	2f10      	cmp	r7, #16
  407afc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407afe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407b00:	464a      	mov	r2, r9
  407b02:	dce9      	bgt.n	407ad8 <_svfprintf_r+0x97c>
  407b04:	4635      	mov	r5, r6
  407b06:	460c      	mov	r4, r1
  407b08:	4646      	mov	r6, r8
  407b0a:	4690      	mov	r8, r2
  407b0c:	3301      	adds	r3, #1
  407b0e:	443c      	add	r4, r7
  407b10:	2b07      	cmp	r3, #7
  407b12:	9427      	str	r4, [sp, #156]	; 0x9c
  407b14:	9326      	str	r3, [sp, #152]	; 0x98
  407b16:	e888 00a0 	stmia.w	r8, {r5, r7}
  407b1a:	f300 8232 	bgt.w	407f82 <_svfprintf_r+0xe26>
  407b1e:	f108 0808 	add.w	r8, r8, #8
  407b22:	e4ac      	b.n	40747e <_svfprintf_r+0x322>
  407b24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407b26:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407b28:	2b01      	cmp	r3, #1
  407b2a:	f340 81fe 	ble.w	407f2a <_svfprintf_r+0xdce>
  407b2e:	3701      	adds	r7, #1
  407b30:	3401      	adds	r4, #1
  407b32:	2301      	movs	r3, #1
  407b34:	2f07      	cmp	r7, #7
  407b36:	9427      	str	r4, [sp, #156]	; 0x9c
  407b38:	9726      	str	r7, [sp, #152]	; 0x98
  407b3a:	f8c8 6000 	str.w	r6, [r8]
  407b3e:	f8c8 3004 	str.w	r3, [r8, #4]
  407b42:	f300 8203 	bgt.w	407f4c <_svfprintf_r+0xdf0>
  407b46:	f108 0808 	add.w	r8, r8, #8
  407b4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407b4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  407b4e:	f8c8 3000 	str.w	r3, [r8]
  407b52:	3701      	adds	r7, #1
  407b54:	4414      	add	r4, r2
  407b56:	2f07      	cmp	r7, #7
  407b58:	9427      	str	r4, [sp, #156]	; 0x9c
  407b5a:	9726      	str	r7, [sp, #152]	; 0x98
  407b5c:	f8c8 2004 	str.w	r2, [r8, #4]
  407b60:	f300 8200 	bgt.w	407f64 <_svfprintf_r+0xe08>
  407b64:	f108 0808 	add.w	r8, r8, #8
  407b68:	a815      	add	r0, sp, #84	; 0x54
  407b6a:	c80d      	ldmia	r0, {r0, r2, r3}
  407b6c:	9914      	ldr	r1, [sp, #80]	; 0x50
  407b6e:	f005 f889 	bl	40cc84 <__aeabi_dcmpeq>
  407b72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407b74:	2800      	cmp	r0, #0
  407b76:	f040 8101 	bne.w	407d7c <_svfprintf_r+0xc20>
  407b7a:	3b01      	subs	r3, #1
  407b7c:	3701      	adds	r7, #1
  407b7e:	3601      	adds	r6, #1
  407b80:	441c      	add	r4, r3
  407b82:	2f07      	cmp	r7, #7
  407b84:	9726      	str	r7, [sp, #152]	; 0x98
  407b86:	9427      	str	r4, [sp, #156]	; 0x9c
  407b88:	f8c8 6000 	str.w	r6, [r8]
  407b8c:	f8c8 3004 	str.w	r3, [r8, #4]
  407b90:	f300 8127 	bgt.w	407de2 <_svfprintf_r+0xc86>
  407b94:	f108 0808 	add.w	r8, r8, #8
  407b98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  407b9a:	f8c8 2004 	str.w	r2, [r8, #4]
  407b9e:	3701      	adds	r7, #1
  407ba0:	4414      	add	r4, r2
  407ba2:	ab21      	add	r3, sp, #132	; 0x84
  407ba4:	2f07      	cmp	r7, #7
  407ba6:	9427      	str	r4, [sp, #156]	; 0x9c
  407ba8:	9726      	str	r7, [sp, #152]	; 0x98
  407baa:	f8c8 3000 	str.w	r3, [r8]
  407bae:	f77f acb3 	ble.w	407518 <_svfprintf_r+0x3bc>
  407bb2:	aa25      	add	r2, sp, #148	; 0x94
  407bb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bb8:	f004 f9c8 	bl	40bf4c <__ssprint_r>
  407bbc:	2800      	cmp	r0, #0
  407bbe:	f47f ab9f 	bne.w	407300 <_svfprintf_r+0x1a4>
  407bc2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407bc4:	46c8      	mov	r8, r9
  407bc6:	e4a9      	b.n	40751c <_svfprintf_r+0x3c0>
  407bc8:	aa25      	add	r2, sp, #148	; 0x94
  407bca:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407bcc:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bce:	f004 f9bd 	bl	40bf4c <__ssprint_r>
  407bd2:	2800      	cmp	r0, #0
  407bd4:	f43f aceb 	beq.w	4075ae <_svfprintf_r+0x452>
  407bd8:	f7ff bb92 	b.w	407300 <_svfprintf_r+0x1a4>
  407bdc:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407be0:	2b01      	cmp	r3, #1
  407be2:	f000 8134 	beq.w	407e4e <_svfprintf_r+0xcf2>
  407be6:	2b02      	cmp	r3, #2
  407be8:	d125      	bne.n	407c36 <_svfprintf_r+0xada>
  407bea:	f8cd b01c 	str.w	fp, [sp, #28]
  407bee:	2400      	movs	r4, #0
  407bf0:	2500      	movs	r5, #0
  407bf2:	e61e      	b.n	407832 <_svfprintf_r+0x6d6>
  407bf4:	aa25      	add	r2, sp, #148	; 0x94
  407bf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407bf8:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bfa:	f004 f9a7 	bl	40bf4c <__ssprint_r>
  407bfe:	2800      	cmp	r0, #0
  407c00:	f47f ab7e 	bne.w	407300 <_svfprintf_r+0x1a4>
  407c04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c06:	46c8      	mov	r8, r9
  407c08:	e475      	b.n	4074f6 <_svfprintf_r+0x39a>
  407c0a:	aa25      	add	r2, sp, #148	; 0x94
  407c0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c0e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c10:	f004 f99c 	bl	40bf4c <__ssprint_r>
  407c14:	2800      	cmp	r0, #0
  407c16:	f47f ab73 	bne.w	407300 <_svfprintf_r+0x1a4>
  407c1a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c1c:	46c8      	mov	r8, r9
  407c1e:	e41b      	b.n	407458 <_svfprintf_r+0x2fc>
  407c20:	aa25      	add	r2, sp, #148	; 0x94
  407c22:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c24:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c26:	f004 f991 	bl	40bf4c <__ssprint_r>
  407c2a:	2800      	cmp	r0, #0
  407c2c:	f47f ab68 	bne.w	407300 <_svfprintf_r+0x1a4>
  407c30:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c32:	46c8      	mov	r8, r9
  407c34:	e420      	b.n	407478 <_svfprintf_r+0x31c>
  407c36:	f8cd b01c 	str.w	fp, [sp, #28]
  407c3a:	2400      	movs	r4, #0
  407c3c:	2500      	movs	r5, #0
  407c3e:	4649      	mov	r1, r9
  407c40:	e000      	b.n	407c44 <_svfprintf_r+0xae8>
  407c42:	4631      	mov	r1, r6
  407c44:	08e2      	lsrs	r2, r4, #3
  407c46:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  407c4a:	08e8      	lsrs	r0, r5, #3
  407c4c:	f004 0307 	and.w	r3, r4, #7
  407c50:	4605      	mov	r5, r0
  407c52:	4614      	mov	r4, r2
  407c54:	3330      	adds	r3, #48	; 0x30
  407c56:	ea54 0205 	orrs.w	r2, r4, r5
  407c5a:	f801 3c01 	strb.w	r3, [r1, #-1]
  407c5e:	f101 36ff 	add.w	r6, r1, #4294967295
  407c62:	d1ee      	bne.n	407c42 <_svfprintf_r+0xae6>
  407c64:	9a07      	ldr	r2, [sp, #28]
  407c66:	07d2      	lsls	r2, r2, #31
  407c68:	f57f adf3 	bpl.w	407852 <_svfprintf_r+0x6f6>
  407c6c:	2b30      	cmp	r3, #48	; 0x30
  407c6e:	f43f adf0 	beq.w	407852 <_svfprintf_r+0x6f6>
  407c72:	3902      	subs	r1, #2
  407c74:	2330      	movs	r3, #48	; 0x30
  407c76:	f806 3c01 	strb.w	r3, [r6, #-1]
  407c7a:	eba9 0301 	sub.w	r3, r9, r1
  407c7e:	930e      	str	r3, [sp, #56]	; 0x38
  407c80:	460e      	mov	r6, r1
  407c82:	f7ff bb7b 	b.w	40737c <_svfprintf_r+0x220>
  407c86:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407c88:	2900      	cmp	r1, #0
  407c8a:	f340 822e 	ble.w	4080ea <_svfprintf_r+0xf8e>
  407c8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407c92:	4293      	cmp	r3, r2
  407c94:	bfa8      	it	ge
  407c96:	4613      	movge	r3, r2
  407c98:	2b00      	cmp	r3, #0
  407c9a:	461f      	mov	r7, r3
  407c9c:	dd0d      	ble.n	407cba <_svfprintf_r+0xb5e>
  407c9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407ca0:	f8c8 6000 	str.w	r6, [r8]
  407ca4:	3301      	adds	r3, #1
  407ca6:	443c      	add	r4, r7
  407ca8:	2b07      	cmp	r3, #7
  407caa:	9427      	str	r4, [sp, #156]	; 0x9c
  407cac:	f8c8 7004 	str.w	r7, [r8, #4]
  407cb0:	9326      	str	r3, [sp, #152]	; 0x98
  407cb2:	f300 831f 	bgt.w	4082f4 <_svfprintf_r+0x1198>
  407cb6:	f108 0808 	add.w	r8, r8, #8
  407cba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407cbc:	2f00      	cmp	r7, #0
  407cbe:	bfa8      	it	ge
  407cc0:	1bdb      	subge	r3, r3, r7
  407cc2:	2b00      	cmp	r3, #0
  407cc4:	461f      	mov	r7, r3
  407cc6:	f340 80d6 	ble.w	407e76 <_svfprintf_r+0xd1a>
  407cca:	2f10      	cmp	r7, #16
  407ccc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407cce:	4d31      	ldr	r5, [pc, #196]	; (407d94 <_svfprintf_r+0xc38>)
  407cd0:	f340 81ed 	ble.w	4080ae <_svfprintf_r+0xf52>
  407cd4:	4642      	mov	r2, r8
  407cd6:	4621      	mov	r1, r4
  407cd8:	46b0      	mov	r8, r6
  407cda:	f04f 0b10 	mov.w	fp, #16
  407cde:	462e      	mov	r6, r5
  407ce0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407ce2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407ce4:	e004      	b.n	407cf0 <_svfprintf_r+0xb94>
  407ce6:	3208      	adds	r2, #8
  407ce8:	3f10      	subs	r7, #16
  407cea:	2f10      	cmp	r7, #16
  407cec:	f340 81db 	ble.w	4080a6 <_svfprintf_r+0xf4a>
  407cf0:	3301      	adds	r3, #1
  407cf2:	3110      	adds	r1, #16
  407cf4:	2b07      	cmp	r3, #7
  407cf6:	9127      	str	r1, [sp, #156]	; 0x9c
  407cf8:	9326      	str	r3, [sp, #152]	; 0x98
  407cfa:	e882 0840 	stmia.w	r2, {r6, fp}
  407cfe:	ddf2      	ble.n	407ce6 <_svfprintf_r+0xb8a>
  407d00:	aa25      	add	r2, sp, #148	; 0x94
  407d02:	4629      	mov	r1, r5
  407d04:	4620      	mov	r0, r4
  407d06:	f004 f921 	bl	40bf4c <__ssprint_r>
  407d0a:	2800      	cmp	r0, #0
  407d0c:	f47f aaf8 	bne.w	407300 <_svfprintf_r+0x1a4>
  407d10:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407d12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407d14:	464a      	mov	r2, r9
  407d16:	e7e7      	b.n	407ce8 <_svfprintf_r+0xb8c>
  407d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407d1a:	930e      	str	r3, [sp, #56]	; 0x38
  407d1c:	464e      	mov	r6, r9
  407d1e:	f7ff bb2d 	b.w	40737c <_svfprintf_r+0x220>
  407d22:	2d00      	cmp	r5, #0
  407d24:	bf08      	it	eq
  407d26:	2c0a      	cmpeq	r4, #10
  407d28:	f0c0 808f 	bcc.w	407e4a <_svfprintf_r+0xcee>
  407d2c:	464e      	mov	r6, r9
  407d2e:	4620      	mov	r0, r4
  407d30:	4629      	mov	r1, r5
  407d32:	220a      	movs	r2, #10
  407d34:	2300      	movs	r3, #0
  407d36:	f005 f815 	bl	40cd64 <__aeabi_uldivmod>
  407d3a:	3230      	adds	r2, #48	; 0x30
  407d3c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407d40:	4620      	mov	r0, r4
  407d42:	4629      	mov	r1, r5
  407d44:	2300      	movs	r3, #0
  407d46:	220a      	movs	r2, #10
  407d48:	f005 f80c 	bl	40cd64 <__aeabi_uldivmod>
  407d4c:	4604      	mov	r4, r0
  407d4e:	460d      	mov	r5, r1
  407d50:	ea54 0305 	orrs.w	r3, r4, r5
  407d54:	d1eb      	bne.n	407d2e <_svfprintf_r+0xbd2>
  407d56:	eba9 0306 	sub.w	r3, r9, r6
  407d5a:	930e      	str	r3, [sp, #56]	; 0x38
  407d5c:	f7ff bb0e 	b.w	40737c <_svfprintf_r+0x220>
  407d60:	aa25      	add	r2, sp, #148	; 0x94
  407d62:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d64:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d66:	f004 f8f1 	bl	40bf4c <__ssprint_r>
  407d6a:	2800      	cmp	r0, #0
  407d6c:	f47f aac8 	bne.w	407300 <_svfprintf_r+0x1a4>
  407d70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407d74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407d76:	46c8      	mov	r8, r9
  407d78:	f7ff bb5e 	b.w	407438 <_svfprintf_r+0x2dc>
  407d7c:	1e5e      	subs	r6, r3, #1
  407d7e:	2e00      	cmp	r6, #0
  407d80:	f77f af0a 	ble.w	407b98 <_svfprintf_r+0xa3c>
  407d84:	2e10      	cmp	r6, #16
  407d86:	4d03      	ldr	r5, [pc, #12]	; (407d94 <_svfprintf_r+0xc38>)
  407d88:	dd22      	ble.n	407dd0 <_svfprintf_r+0xc74>
  407d8a:	4622      	mov	r2, r4
  407d8c:	f04f 0b10 	mov.w	fp, #16
  407d90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407d92:	e006      	b.n	407da2 <_svfprintf_r+0xc46>
  407d94:	0040d9e4 	.word	0x0040d9e4
  407d98:	3e10      	subs	r6, #16
  407d9a:	2e10      	cmp	r6, #16
  407d9c:	f108 0808 	add.w	r8, r8, #8
  407da0:	dd15      	ble.n	407dce <_svfprintf_r+0xc72>
  407da2:	3701      	adds	r7, #1
  407da4:	3210      	adds	r2, #16
  407da6:	2f07      	cmp	r7, #7
  407da8:	9227      	str	r2, [sp, #156]	; 0x9c
  407daa:	9726      	str	r7, [sp, #152]	; 0x98
  407dac:	e888 0820 	stmia.w	r8, {r5, fp}
  407db0:	ddf2      	ble.n	407d98 <_svfprintf_r+0xc3c>
  407db2:	aa25      	add	r2, sp, #148	; 0x94
  407db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407db6:	4620      	mov	r0, r4
  407db8:	f004 f8c8 	bl	40bf4c <__ssprint_r>
  407dbc:	2800      	cmp	r0, #0
  407dbe:	f47f aa9f 	bne.w	407300 <_svfprintf_r+0x1a4>
  407dc2:	3e10      	subs	r6, #16
  407dc4:	2e10      	cmp	r6, #16
  407dc6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407dc8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407dca:	46c8      	mov	r8, r9
  407dcc:	dce9      	bgt.n	407da2 <_svfprintf_r+0xc46>
  407dce:	4614      	mov	r4, r2
  407dd0:	3701      	adds	r7, #1
  407dd2:	4434      	add	r4, r6
  407dd4:	2f07      	cmp	r7, #7
  407dd6:	9427      	str	r4, [sp, #156]	; 0x9c
  407dd8:	9726      	str	r7, [sp, #152]	; 0x98
  407dda:	e888 0060 	stmia.w	r8, {r5, r6}
  407dde:	f77f aed9 	ble.w	407b94 <_svfprintf_r+0xa38>
  407de2:	aa25      	add	r2, sp, #148	; 0x94
  407de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407de6:	980c      	ldr	r0, [sp, #48]	; 0x30
  407de8:	f004 f8b0 	bl	40bf4c <__ssprint_r>
  407dec:	2800      	cmp	r0, #0
  407dee:	f47f aa87 	bne.w	407300 <_svfprintf_r+0x1a4>
  407df2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407df4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407df6:	46c8      	mov	r8, r9
  407df8:	e6ce      	b.n	407b98 <_svfprintf_r+0xa3c>
  407dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407dfc:	6814      	ldr	r4, [r2, #0]
  407dfe:	4613      	mov	r3, r2
  407e00:	3304      	adds	r3, #4
  407e02:	17e5      	asrs	r5, r4, #31
  407e04:	930f      	str	r3, [sp, #60]	; 0x3c
  407e06:	4622      	mov	r2, r4
  407e08:	462b      	mov	r3, r5
  407e0a:	e4fa      	b.n	407802 <_svfprintf_r+0x6a6>
  407e0c:	3204      	adds	r2, #4
  407e0e:	681c      	ldr	r4, [r3, #0]
  407e10:	920f      	str	r2, [sp, #60]	; 0x3c
  407e12:	2301      	movs	r3, #1
  407e14:	2500      	movs	r5, #0
  407e16:	f7ff ba94 	b.w	407342 <_svfprintf_r+0x1e6>
  407e1a:	681c      	ldr	r4, [r3, #0]
  407e1c:	3304      	adds	r3, #4
  407e1e:	930f      	str	r3, [sp, #60]	; 0x3c
  407e20:	2500      	movs	r5, #0
  407e22:	e421      	b.n	407668 <_svfprintf_r+0x50c>
  407e24:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407e26:	460a      	mov	r2, r1
  407e28:	3204      	adds	r2, #4
  407e2a:	680c      	ldr	r4, [r1, #0]
  407e2c:	920f      	str	r2, [sp, #60]	; 0x3c
  407e2e:	2500      	movs	r5, #0
  407e30:	f7ff ba87 	b.w	407342 <_svfprintf_r+0x1e6>
  407e34:	4614      	mov	r4, r2
  407e36:	3301      	adds	r3, #1
  407e38:	4434      	add	r4, r6
  407e3a:	2b07      	cmp	r3, #7
  407e3c:	9427      	str	r4, [sp, #156]	; 0x9c
  407e3e:	9326      	str	r3, [sp, #152]	; 0x98
  407e40:	e888 0060 	stmia.w	r8, {r5, r6}
  407e44:	f77f ab68 	ble.w	407518 <_svfprintf_r+0x3bc>
  407e48:	e6b3      	b.n	407bb2 <_svfprintf_r+0xa56>
  407e4a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407e4e:	f8cd b01c 	str.w	fp, [sp, #28]
  407e52:	ae42      	add	r6, sp, #264	; 0x108
  407e54:	3430      	adds	r4, #48	; 0x30
  407e56:	2301      	movs	r3, #1
  407e58:	f806 4d41 	strb.w	r4, [r6, #-65]!
  407e5c:	930e      	str	r3, [sp, #56]	; 0x38
  407e5e:	f7ff ba8d 	b.w	40737c <_svfprintf_r+0x220>
  407e62:	aa25      	add	r2, sp, #148	; 0x94
  407e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407e66:	980c      	ldr	r0, [sp, #48]	; 0x30
  407e68:	f004 f870 	bl	40bf4c <__ssprint_r>
  407e6c:	2800      	cmp	r0, #0
  407e6e:	f47f aa47 	bne.w	407300 <_svfprintf_r+0x1a4>
  407e72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407e74:	46c8      	mov	r8, r9
  407e76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407e7a:	429a      	cmp	r2, r3
  407e7c:	db44      	blt.n	407f08 <_svfprintf_r+0xdac>
  407e7e:	9b07      	ldr	r3, [sp, #28]
  407e80:	07d9      	lsls	r1, r3, #31
  407e82:	d441      	bmi.n	407f08 <_svfprintf_r+0xdac>
  407e84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407e86:	9812      	ldr	r0, [sp, #72]	; 0x48
  407e88:	1a9a      	subs	r2, r3, r2
  407e8a:	1a1d      	subs	r5, r3, r0
  407e8c:	4295      	cmp	r5, r2
  407e8e:	bfa8      	it	ge
  407e90:	4615      	movge	r5, r2
  407e92:	2d00      	cmp	r5, #0
  407e94:	dd0e      	ble.n	407eb4 <_svfprintf_r+0xd58>
  407e96:	9926      	ldr	r1, [sp, #152]	; 0x98
  407e98:	f8c8 5004 	str.w	r5, [r8, #4]
  407e9c:	3101      	adds	r1, #1
  407e9e:	4406      	add	r6, r0
  407ea0:	442c      	add	r4, r5
  407ea2:	2907      	cmp	r1, #7
  407ea4:	f8c8 6000 	str.w	r6, [r8]
  407ea8:	9427      	str	r4, [sp, #156]	; 0x9c
  407eaa:	9126      	str	r1, [sp, #152]	; 0x98
  407eac:	f300 823b 	bgt.w	408326 <_svfprintf_r+0x11ca>
  407eb0:	f108 0808 	add.w	r8, r8, #8
  407eb4:	2d00      	cmp	r5, #0
  407eb6:	bfac      	ite	ge
  407eb8:	1b56      	subge	r6, r2, r5
  407eba:	4616      	movlt	r6, r2
  407ebc:	2e00      	cmp	r6, #0
  407ebe:	f77f ab2d 	ble.w	40751c <_svfprintf_r+0x3c0>
  407ec2:	2e10      	cmp	r6, #16
  407ec4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407ec6:	4db0      	ldr	r5, [pc, #704]	; (408188 <_svfprintf_r+0x102c>)
  407ec8:	ddb5      	ble.n	407e36 <_svfprintf_r+0xcda>
  407eca:	4622      	mov	r2, r4
  407ecc:	2710      	movs	r7, #16
  407ece:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407ed2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407ed4:	e004      	b.n	407ee0 <_svfprintf_r+0xd84>
  407ed6:	f108 0808 	add.w	r8, r8, #8
  407eda:	3e10      	subs	r6, #16
  407edc:	2e10      	cmp	r6, #16
  407ede:	dda9      	ble.n	407e34 <_svfprintf_r+0xcd8>
  407ee0:	3301      	adds	r3, #1
  407ee2:	3210      	adds	r2, #16
  407ee4:	2b07      	cmp	r3, #7
  407ee6:	9227      	str	r2, [sp, #156]	; 0x9c
  407ee8:	9326      	str	r3, [sp, #152]	; 0x98
  407eea:	e888 00a0 	stmia.w	r8, {r5, r7}
  407eee:	ddf2      	ble.n	407ed6 <_svfprintf_r+0xd7a>
  407ef0:	aa25      	add	r2, sp, #148	; 0x94
  407ef2:	4621      	mov	r1, r4
  407ef4:	4658      	mov	r0, fp
  407ef6:	f004 f829 	bl	40bf4c <__ssprint_r>
  407efa:	2800      	cmp	r0, #0
  407efc:	f47f aa00 	bne.w	407300 <_svfprintf_r+0x1a4>
  407f00:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407f02:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407f04:	46c8      	mov	r8, r9
  407f06:	e7e8      	b.n	407eda <_svfprintf_r+0xd7e>
  407f08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407f0a:	9819      	ldr	r0, [sp, #100]	; 0x64
  407f0c:	991a      	ldr	r1, [sp, #104]	; 0x68
  407f0e:	f8c8 1000 	str.w	r1, [r8]
  407f12:	3301      	adds	r3, #1
  407f14:	4404      	add	r4, r0
  407f16:	2b07      	cmp	r3, #7
  407f18:	9427      	str	r4, [sp, #156]	; 0x9c
  407f1a:	f8c8 0004 	str.w	r0, [r8, #4]
  407f1e:	9326      	str	r3, [sp, #152]	; 0x98
  407f20:	f300 81f5 	bgt.w	40830e <_svfprintf_r+0x11b2>
  407f24:	f108 0808 	add.w	r8, r8, #8
  407f28:	e7ac      	b.n	407e84 <_svfprintf_r+0xd28>
  407f2a:	9b07      	ldr	r3, [sp, #28]
  407f2c:	07da      	lsls	r2, r3, #31
  407f2e:	f53f adfe 	bmi.w	407b2e <_svfprintf_r+0x9d2>
  407f32:	3701      	adds	r7, #1
  407f34:	3401      	adds	r4, #1
  407f36:	2301      	movs	r3, #1
  407f38:	2f07      	cmp	r7, #7
  407f3a:	9427      	str	r4, [sp, #156]	; 0x9c
  407f3c:	9726      	str	r7, [sp, #152]	; 0x98
  407f3e:	f8c8 6000 	str.w	r6, [r8]
  407f42:	f8c8 3004 	str.w	r3, [r8, #4]
  407f46:	f77f ae25 	ble.w	407b94 <_svfprintf_r+0xa38>
  407f4a:	e74a      	b.n	407de2 <_svfprintf_r+0xc86>
  407f4c:	aa25      	add	r2, sp, #148	; 0x94
  407f4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407f50:	980c      	ldr	r0, [sp, #48]	; 0x30
  407f52:	f003 fffb 	bl	40bf4c <__ssprint_r>
  407f56:	2800      	cmp	r0, #0
  407f58:	f47f a9d2 	bne.w	407300 <_svfprintf_r+0x1a4>
  407f5c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407f5e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407f60:	46c8      	mov	r8, r9
  407f62:	e5f2      	b.n	407b4a <_svfprintf_r+0x9ee>
  407f64:	aa25      	add	r2, sp, #148	; 0x94
  407f66:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407f68:	980c      	ldr	r0, [sp, #48]	; 0x30
  407f6a:	f003 ffef 	bl	40bf4c <__ssprint_r>
  407f6e:	2800      	cmp	r0, #0
  407f70:	f47f a9c6 	bne.w	407300 <_svfprintf_r+0x1a4>
  407f74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407f76:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407f78:	46c8      	mov	r8, r9
  407f7a:	e5f5      	b.n	407b68 <_svfprintf_r+0xa0c>
  407f7c:	464e      	mov	r6, r9
  407f7e:	f7ff b9fd 	b.w	40737c <_svfprintf_r+0x220>
  407f82:	aa25      	add	r2, sp, #148	; 0x94
  407f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407f86:	980c      	ldr	r0, [sp, #48]	; 0x30
  407f88:	f003 ffe0 	bl	40bf4c <__ssprint_r>
  407f8c:	2800      	cmp	r0, #0
  407f8e:	f47f a9b7 	bne.w	407300 <_svfprintf_r+0x1a4>
  407f92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407f94:	46c8      	mov	r8, r9
  407f96:	f7ff ba72 	b.w	40747e <_svfprintf_r+0x322>
  407f9a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  407f9c:	4622      	mov	r2, r4
  407f9e:	4620      	mov	r0, r4
  407fa0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  407fa2:	4623      	mov	r3, r4
  407fa4:	4621      	mov	r1, r4
  407fa6:	f004 fe9f 	bl	40cce8 <__aeabi_dcmpun>
  407faa:	2800      	cmp	r0, #0
  407fac:	f040 8286 	bne.w	4084bc <_svfprintf_r+0x1360>
  407fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407fb2:	3301      	adds	r3, #1
  407fb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407fb6:	f023 0320 	bic.w	r3, r3, #32
  407fba:	930e      	str	r3, [sp, #56]	; 0x38
  407fbc:	f000 81e2 	beq.w	408384 <_svfprintf_r+0x1228>
  407fc0:	2b47      	cmp	r3, #71	; 0x47
  407fc2:	f000 811e 	beq.w	408202 <_svfprintf_r+0x10a6>
  407fc6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  407fca:	9307      	str	r3, [sp, #28]
  407fcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407fce:	1e1f      	subs	r7, r3, #0
  407fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407fd2:	9308      	str	r3, [sp, #32]
  407fd4:	bfbb      	ittet	lt
  407fd6:	463b      	movlt	r3, r7
  407fd8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  407fdc:	2300      	movge	r3, #0
  407fde:	232d      	movlt	r3, #45	; 0x2d
  407fe0:	9310      	str	r3, [sp, #64]	; 0x40
  407fe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407fe4:	2b66      	cmp	r3, #102	; 0x66
  407fe6:	f000 81bb 	beq.w	408360 <_svfprintf_r+0x1204>
  407fea:	2b46      	cmp	r3, #70	; 0x46
  407fec:	f000 80df 	beq.w	4081ae <_svfprintf_r+0x1052>
  407ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407ff2:	9a08      	ldr	r2, [sp, #32]
  407ff4:	2b45      	cmp	r3, #69	; 0x45
  407ff6:	bf0c      	ite	eq
  407ff8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  407ffa:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  407ffc:	a823      	add	r0, sp, #140	; 0x8c
  407ffe:	a920      	add	r1, sp, #128	; 0x80
  408000:	bf08      	it	eq
  408002:	1c5d      	addeq	r5, r3, #1
  408004:	9004      	str	r0, [sp, #16]
  408006:	9103      	str	r1, [sp, #12]
  408008:	a81f      	add	r0, sp, #124	; 0x7c
  40800a:	2102      	movs	r1, #2
  40800c:	463b      	mov	r3, r7
  40800e:	9002      	str	r0, [sp, #8]
  408010:	9501      	str	r5, [sp, #4]
  408012:	9100      	str	r1, [sp, #0]
  408014:	980c      	ldr	r0, [sp, #48]	; 0x30
  408016:	f001 faa3 	bl	409560 <_dtoa_r>
  40801a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40801c:	2b67      	cmp	r3, #103	; 0x67
  40801e:	4606      	mov	r6, r0
  408020:	f040 81e0 	bne.w	4083e4 <_svfprintf_r+0x1288>
  408024:	f01b 0f01 	tst.w	fp, #1
  408028:	f000 8246 	beq.w	4084b8 <_svfprintf_r+0x135c>
  40802c:	1974      	adds	r4, r6, r5
  40802e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408030:	9808      	ldr	r0, [sp, #32]
  408032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408034:	4639      	mov	r1, r7
  408036:	f004 fe25 	bl	40cc84 <__aeabi_dcmpeq>
  40803a:	2800      	cmp	r0, #0
  40803c:	f040 8165 	bne.w	40830a <_svfprintf_r+0x11ae>
  408040:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408042:	42a3      	cmp	r3, r4
  408044:	d206      	bcs.n	408054 <_svfprintf_r+0xef8>
  408046:	2130      	movs	r1, #48	; 0x30
  408048:	1c5a      	adds	r2, r3, #1
  40804a:	9223      	str	r2, [sp, #140]	; 0x8c
  40804c:	7019      	strb	r1, [r3, #0]
  40804e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408050:	429c      	cmp	r4, r3
  408052:	d8f9      	bhi.n	408048 <_svfprintf_r+0xeec>
  408054:	1b9b      	subs	r3, r3, r6
  408056:	9313      	str	r3, [sp, #76]	; 0x4c
  408058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40805a:	2b47      	cmp	r3, #71	; 0x47
  40805c:	f000 80e9 	beq.w	408232 <_svfprintf_r+0x10d6>
  408060:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408062:	2b65      	cmp	r3, #101	; 0x65
  408064:	f340 81cd 	ble.w	408402 <_svfprintf_r+0x12a6>
  408068:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40806a:	2b66      	cmp	r3, #102	; 0x66
  40806c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40806e:	9312      	str	r3, [sp, #72]	; 0x48
  408070:	f000 819e 	beq.w	4083b0 <_svfprintf_r+0x1254>
  408074:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408076:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408078:	4619      	mov	r1, r3
  40807a:	4291      	cmp	r1, r2
  40807c:	f300 818a 	bgt.w	408394 <_svfprintf_r+0x1238>
  408080:	f01b 0f01 	tst.w	fp, #1
  408084:	f040 8213 	bne.w	4084ae <_svfprintf_r+0x1352>
  408088:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40808c:	9308      	str	r3, [sp, #32]
  40808e:	2367      	movs	r3, #103	; 0x67
  408090:	920e      	str	r2, [sp, #56]	; 0x38
  408092:	9311      	str	r3, [sp, #68]	; 0x44
  408094:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408096:	2b00      	cmp	r3, #0
  408098:	f040 80c4 	bne.w	408224 <_svfprintf_r+0x10c8>
  40809c:	930a      	str	r3, [sp, #40]	; 0x28
  40809e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4080a2:	f7ff b973 	b.w	40738c <_svfprintf_r+0x230>
  4080a6:	4635      	mov	r5, r6
  4080a8:	460c      	mov	r4, r1
  4080aa:	4646      	mov	r6, r8
  4080ac:	4690      	mov	r8, r2
  4080ae:	3301      	adds	r3, #1
  4080b0:	443c      	add	r4, r7
  4080b2:	2b07      	cmp	r3, #7
  4080b4:	9427      	str	r4, [sp, #156]	; 0x9c
  4080b6:	9326      	str	r3, [sp, #152]	; 0x98
  4080b8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4080bc:	f73f aed1 	bgt.w	407e62 <_svfprintf_r+0xd06>
  4080c0:	f108 0808 	add.w	r8, r8, #8
  4080c4:	e6d7      	b.n	407e76 <_svfprintf_r+0xd1a>
  4080c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4080c8:	6813      	ldr	r3, [r2, #0]
  4080ca:	3204      	adds	r2, #4
  4080cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4080ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4080d0:	601a      	str	r2, [r3, #0]
  4080d2:	f7ff b86a 	b.w	4071aa <_svfprintf_r+0x4e>
  4080d6:	aa25      	add	r2, sp, #148	; 0x94
  4080d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4080da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4080dc:	f003 ff36 	bl	40bf4c <__ssprint_r>
  4080e0:	2800      	cmp	r0, #0
  4080e2:	f47f a90d 	bne.w	407300 <_svfprintf_r+0x1a4>
  4080e6:	46c8      	mov	r8, r9
  4080e8:	e48d      	b.n	407a06 <_svfprintf_r+0x8aa>
  4080ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4080ec:	4a27      	ldr	r2, [pc, #156]	; (40818c <_svfprintf_r+0x1030>)
  4080ee:	f8c8 2000 	str.w	r2, [r8]
  4080f2:	3301      	adds	r3, #1
  4080f4:	3401      	adds	r4, #1
  4080f6:	2201      	movs	r2, #1
  4080f8:	2b07      	cmp	r3, #7
  4080fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4080fc:	9326      	str	r3, [sp, #152]	; 0x98
  4080fe:	f8c8 2004 	str.w	r2, [r8, #4]
  408102:	dc72      	bgt.n	4081ea <_svfprintf_r+0x108e>
  408104:	f108 0808 	add.w	r8, r8, #8
  408108:	b929      	cbnz	r1, 408116 <_svfprintf_r+0xfba>
  40810a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40810c:	b91b      	cbnz	r3, 408116 <_svfprintf_r+0xfba>
  40810e:	9b07      	ldr	r3, [sp, #28]
  408110:	07d8      	lsls	r0, r3, #31
  408112:	f57f aa03 	bpl.w	40751c <_svfprintf_r+0x3c0>
  408116:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408118:	9819      	ldr	r0, [sp, #100]	; 0x64
  40811a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40811c:	f8c8 2000 	str.w	r2, [r8]
  408120:	3301      	adds	r3, #1
  408122:	4602      	mov	r2, r0
  408124:	4422      	add	r2, r4
  408126:	2b07      	cmp	r3, #7
  408128:	9227      	str	r2, [sp, #156]	; 0x9c
  40812a:	f8c8 0004 	str.w	r0, [r8, #4]
  40812e:	9326      	str	r3, [sp, #152]	; 0x98
  408130:	f300 818d 	bgt.w	40844e <_svfprintf_r+0x12f2>
  408134:	f108 0808 	add.w	r8, r8, #8
  408138:	2900      	cmp	r1, #0
  40813a:	f2c0 8165 	blt.w	408408 <_svfprintf_r+0x12ac>
  40813e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  408140:	f8c8 6000 	str.w	r6, [r8]
  408144:	3301      	adds	r3, #1
  408146:	188c      	adds	r4, r1, r2
  408148:	2b07      	cmp	r3, #7
  40814a:	9427      	str	r4, [sp, #156]	; 0x9c
  40814c:	9326      	str	r3, [sp, #152]	; 0x98
  40814e:	f8c8 1004 	str.w	r1, [r8, #4]
  408152:	f77f a9e1 	ble.w	407518 <_svfprintf_r+0x3bc>
  408156:	e52c      	b.n	407bb2 <_svfprintf_r+0xa56>
  408158:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40815a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40815c:	6813      	ldr	r3, [r2, #0]
  40815e:	17cd      	asrs	r5, r1, #31
  408160:	4608      	mov	r0, r1
  408162:	3204      	adds	r2, #4
  408164:	4629      	mov	r1, r5
  408166:	920f      	str	r2, [sp, #60]	; 0x3c
  408168:	e9c3 0100 	strd	r0, r1, [r3]
  40816c:	f7ff b81d 	b.w	4071aa <_svfprintf_r+0x4e>
  408170:	aa25      	add	r2, sp, #148	; 0x94
  408172:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408174:	980c      	ldr	r0, [sp, #48]	; 0x30
  408176:	f003 fee9 	bl	40bf4c <__ssprint_r>
  40817a:	2800      	cmp	r0, #0
  40817c:	f47f a8c0 	bne.w	407300 <_svfprintf_r+0x1a4>
  408180:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408182:	46c8      	mov	r8, r9
  408184:	e458      	b.n	407a38 <_svfprintf_r+0x8dc>
  408186:	bf00      	nop
  408188:	0040d9e4 	.word	0x0040d9e4
  40818c:	0040d9d0 	.word	0x0040d9d0
  408190:	2140      	movs	r1, #64	; 0x40
  408192:	980c      	ldr	r0, [sp, #48]	; 0x30
  408194:	f002 fe58 	bl	40ae48 <_malloc_r>
  408198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40819a:	6010      	str	r0, [r2, #0]
  40819c:	6110      	str	r0, [r2, #16]
  40819e:	2800      	cmp	r0, #0
  4081a0:	f000 81f2 	beq.w	408588 <_svfprintf_r+0x142c>
  4081a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4081a6:	2340      	movs	r3, #64	; 0x40
  4081a8:	6153      	str	r3, [r2, #20]
  4081aa:	f7fe bfee 	b.w	40718a <_svfprintf_r+0x2e>
  4081ae:	a823      	add	r0, sp, #140	; 0x8c
  4081b0:	a920      	add	r1, sp, #128	; 0x80
  4081b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4081b4:	9004      	str	r0, [sp, #16]
  4081b6:	9103      	str	r1, [sp, #12]
  4081b8:	a81f      	add	r0, sp, #124	; 0x7c
  4081ba:	2103      	movs	r1, #3
  4081bc:	9002      	str	r0, [sp, #8]
  4081be:	9a08      	ldr	r2, [sp, #32]
  4081c0:	9401      	str	r4, [sp, #4]
  4081c2:	463b      	mov	r3, r7
  4081c4:	9100      	str	r1, [sp, #0]
  4081c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4081c8:	f001 f9ca 	bl	409560 <_dtoa_r>
  4081cc:	4625      	mov	r5, r4
  4081ce:	4606      	mov	r6, r0
  4081d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4081d2:	2b46      	cmp	r3, #70	; 0x46
  4081d4:	eb06 0405 	add.w	r4, r6, r5
  4081d8:	f47f af29 	bne.w	40802e <_svfprintf_r+0xed2>
  4081dc:	7833      	ldrb	r3, [r6, #0]
  4081de:	2b30      	cmp	r3, #48	; 0x30
  4081e0:	f000 8178 	beq.w	4084d4 <_svfprintf_r+0x1378>
  4081e4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4081e6:	442c      	add	r4, r5
  4081e8:	e721      	b.n	40802e <_svfprintf_r+0xed2>
  4081ea:	aa25      	add	r2, sp, #148	; 0x94
  4081ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4081ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4081f0:	f003 feac 	bl	40bf4c <__ssprint_r>
  4081f4:	2800      	cmp	r0, #0
  4081f6:	f47f a883 	bne.w	407300 <_svfprintf_r+0x1a4>
  4081fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4081fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4081fe:	46c8      	mov	r8, r9
  408200:	e782      	b.n	408108 <_svfprintf_r+0xfac>
  408202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408204:	2b00      	cmp	r3, #0
  408206:	bf08      	it	eq
  408208:	2301      	moveq	r3, #1
  40820a:	930a      	str	r3, [sp, #40]	; 0x28
  40820c:	e6db      	b.n	407fc6 <_svfprintf_r+0xe6a>
  40820e:	4630      	mov	r0, r6
  408210:	940a      	str	r4, [sp, #40]	; 0x28
  408212:	f7fe ff35 	bl	407080 <strlen>
  408216:	950f      	str	r5, [sp, #60]	; 0x3c
  408218:	900e      	str	r0, [sp, #56]	; 0x38
  40821a:	f8cd b01c 	str.w	fp, [sp, #28]
  40821e:	4603      	mov	r3, r0
  408220:	f7ff b9f9 	b.w	407616 <_svfprintf_r+0x4ba>
  408224:	272d      	movs	r7, #45	; 0x2d
  408226:	2300      	movs	r3, #0
  408228:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40822c:	930a      	str	r3, [sp, #40]	; 0x28
  40822e:	f7ff b8ae 	b.w	40738e <_svfprintf_r+0x232>
  408232:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  408234:	9312      	str	r3, [sp, #72]	; 0x48
  408236:	461a      	mov	r2, r3
  408238:	3303      	adds	r3, #3
  40823a:	db04      	blt.n	408246 <_svfprintf_r+0x10ea>
  40823c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40823e:	4619      	mov	r1, r3
  408240:	4291      	cmp	r1, r2
  408242:	f6bf af17 	bge.w	408074 <_svfprintf_r+0xf18>
  408246:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408248:	3b02      	subs	r3, #2
  40824a:	9311      	str	r3, [sp, #68]	; 0x44
  40824c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  408250:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  408254:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408256:	3b01      	subs	r3, #1
  408258:	2b00      	cmp	r3, #0
  40825a:	931f      	str	r3, [sp, #124]	; 0x7c
  40825c:	bfbd      	ittte	lt
  40825e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  408260:	f1c3 0301 	rsblt	r3, r3, #1
  408264:	222d      	movlt	r2, #45	; 0x2d
  408266:	222b      	movge	r2, #43	; 0x2b
  408268:	2b09      	cmp	r3, #9
  40826a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40826e:	f340 8116 	ble.w	40849e <_svfprintf_r+0x1342>
  408272:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  408276:	4620      	mov	r0, r4
  408278:	4dab      	ldr	r5, [pc, #684]	; (408528 <_svfprintf_r+0x13cc>)
  40827a:	e000      	b.n	40827e <_svfprintf_r+0x1122>
  40827c:	4610      	mov	r0, r2
  40827e:	fb85 1203 	smull	r1, r2, r5, r3
  408282:	17d9      	asrs	r1, r3, #31
  408284:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  408288:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40828c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  408290:	3230      	adds	r2, #48	; 0x30
  408292:	2909      	cmp	r1, #9
  408294:	f800 2c01 	strb.w	r2, [r0, #-1]
  408298:	460b      	mov	r3, r1
  40829a:	f100 32ff 	add.w	r2, r0, #4294967295
  40829e:	dced      	bgt.n	40827c <_svfprintf_r+0x1120>
  4082a0:	3330      	adds	r3, #48	; 0x30
  4082a2:	3802      	subs	r0, #2
  4082a4:	b2d9      	uxtb	r1, r3
  4082a6:	4284      	cmp	r4, r0
  4082a8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4082ac:	f240 8165 	bls.w	40857a <_svfprintf_r+0x141e>
  4082b0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4082b4:	4613      	mov	r3, r2
  4082b6:	e001      	b.n	4082bc <_svfprintf_r+0x1160>
  4082b8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4082bc:	f800 1b01 	strb.w	r1, [r0], #1
  4082c0:	42a3      	cmp	r3, r4
  4082c2:	d1f9      	bne.n	4082b8 <_svfprintf_r+0x115c>
  4082c4:	3301      	adds	r3, #1
  4082c6:	1a9b      	subs	r3, r3, r2
  4082c8:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4082cc:	4413      	add	r3, r2
  4082ce:	aa21      	add	r2, sp, #132	; 0x84
  4082d0:	1a9b      	subs	r3, r3, r2
  4082d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4082d4:	931b      	str	r3, [sp, #108]	; 0x6c
  4082d6:	2a01      	cmp	r2, #1
  4082d8:	4413      	add	r3, r2
  4082da:	930e      	str	r3, [sp, #56]	; 0x38
  4082dc:	f340 8119 	ble.w	408512 <_svfprintf_r+0x13b6>
  4082e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4082e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4082e4:	4413      	add	r3, r2
  4082e6:	930e      	str	r3, [sp, #56]	; 0x38
  4082e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4082ec:	9308      	str	r3, [sp, #32]
  4082ee:	2300      	movs	r3, #0
  4082f0:	9312      	str	r3, [sp, #72]	; 0x48
  4082f2:	e6cf      	b.n	408094 <_svfprintf_r+0xf38>
  4082f4:	aa25      	add	r2, sp, #148	; 0x94
  4082f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4082f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4082fa:	f003 fe27 	bl	40bf4c <__ssprint_r>
  4082fe:	2800      	cmp	r0, #0
  408300:	f47e affe 	bne.w	407300 <_svfprintf_r+0x1a4>
  408304:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408306:	46c8      	mov	r8, r9
  408308:	e4d7      	b.n	407cba <_svfprintf_r+0xb5e>
  40830a:	4623      	mov	r3, r4
  40830c:	e6a2      	b.n	408054 <_svfprintf_r+0xef8>
  40830e:	aa25      	add	r2, sp, #148	; 0x94
  408310:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408312:	980c      	ldr	r0, [sp, #48]	; 0x30
  408314:	f003 fe1a 	bl	40bf4c <__ssprint_r>
  408318:	2800      	cmp	r0, #0
  40831a:	f47e aff1 	bne.w	407300 <_svfprintf_r+0x1a4>
  40831e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408320:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408322:	46c8      	mov	r8, r9
  408324:	e5ae      	b.n	407e84 <_svfprintf_r+0xd28>
  408326:	aa25      	add	r2, sp, #148	; 0x94
  408328:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40832a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40832c:	f003 fe0e 	bl	40bf4c <__ssprint_r>
  408330:	2800      	cmp	r0, #0
  408332:	f47e afe5 	bne.w	407300 <_svfprintf_r+0x1a4>
  408336:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408338:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40833a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40833c:	1a9a      	subs	r2, r3, r2
  40833e:	46c8      	mov	r8, r9
  408340:	e5b8      	b.n	407eb4 <_svfprintf_r+0xd58>
  408342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408344:	9612      	str	r6, [sp, #72]	; 0x48
  408346:	2b06      	cmp	r3, #6
  408348:	bf28      	it	cs
  40834a:	2306      	movcs	r3, #6
  40834c:	960a      	str	r6, [sp, #40]	; 0x28
  40834e:	4637      	mov	r7, r6
  408350:	9308      	str	r3, [sp, #32]
  408352:	950f      	str	r5, [sp, #60]	; 0x3c
  408354:	f8cd b01c 	str.w	fp, [sp, #28]
  408358:	930e      	str	r3, [sp, #56]	; 0x38
  40835a:	4e74      	ldr	r6, [pc, #464]	; (40852c <_svfprintf_r+0x13d0>)
  40835c:	f7ff b816 	b.w	40738c <_svfprintf_r+0x230>
  408360:	a823      	add	r0, sp, #140	; 0x8c
  408362:	a920      	add	r1, sp, #128	; 0x80
  408364:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  408366:	9004      	str	r0, [sp, #16]
  408368:	9103      	str	r1, [sp, #12]
  40836a:	a81f      	add	r0, sp, #124	; 0x7c
  40836c:	2103      	movs	r1, #3
  40836e:	9002      	str	r0, [sp, #8]
  408370:	9a08      	ldr	r2, [sp, #32]
  408372:	9501      	str	r5, [sp, #4]
  408374:	463b      	mov	r3, r7
  408376:	9100      	str	r1, [sp, #0]
  408378:	980c      	ldr	r0, [sp, #48]	; 0x30
  40837a:	f001 f8f1 	bl	409560 <_dtoa_r>
  40837e:	4606      	mov	r6, r0
  408380:	1944      	adds	r4, r0, r5
  408382:	e72b      	b.n	4081dc <_svfprintf_r+0x1080>
  408384:	2306      	movs	r3, #6
  408386:	930a      	str	r3, [sp, #40]	; 0x28
  408388:	e61d      	b.n	407fc6 <_svfprintf_r+0xe6a>
  40838a:	272d      	movs	r7, #45	; 0x2d
  40838c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  408390:	f7ff bacd 	b.w	40792e <_svfprintf_r+0x7d2>
  408394:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408396:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408398:	4413      	add	r3, r2
  40839a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40839c:	930e      	str	r3, [sp, #56]	; 0x38
  40839e:	2a00      	cmp	r2, #0
  4083a0:	f340 80b0 	ble.w	408504 <_svfprintf_r+0x13a8>
  4083a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4083a8:	9308      	str	r3, [sp, #32]
  4083aa:	2367      	movs	r3, #103	; 0x67
  4083ac:	9311      	str	r3, [sp, #68]	; 0x44
  4083ae:	e671      	b.n	408094 <_svfprintf_r+0xf38>
  4083b0:	2b00      	cmp	r3, #0
  4083b2:	f340 80c3 	ble.w	40853c <_svfprintf_r+0x13e0>
  4083b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4083b8:	2a00      	cmp	r2, #0
  4083ba:	f040 8099 	bne.w	4084f0 <_svfprintf_r+0x1394>
  4083be:	f01b 0f01 	tst.w	fp, #1
  4083c2:	f040 8095 	bne.w	4084f0 <_svfprintf_r+0x1394>
  4083c6:	9308      	str	r3, [sp, #32]
  4083c8:	930e      	str	r3, [sp, #56]	; 0x38
  4083ca:	e663      	b.n	408094 <_svfprintf_r+0xf38>
  4083cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4083ce:	9308      	str	r3, [sp, #32]
  4083d0:	930e      	str	r3, [sp, #56]	; 0x38
  4083d2:	900a      	str	r0, [sp, #40]	; 0x28
  4083d4:	950f      	str	r5, [sp, #60]	; 0x3c
  4083d6:	f8cd b01c 	str.w	fp, [sp, #28]
  4083da:	9012      	str	r0, [sp, #72]	; 0x48
  4083dc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4083e0:	f7fe bfd4 	b.w	40738c <_svfprintf_r+0x230>
  4083e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4083e6:	2b47      	cmp	r3, #71	; 0x47
  4083e8:	f47f ae20 	bne.w	40802c <_svfprintf_r+0xed0>
  4083ec:	f01b 0f01 	tst.w	fp, #1
  4083f0:	f47f aeee 	bne.w	4081d0 <_svfprintf_r+0x1074>
  4083f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4083f6:	1b9b      	subs	r3, r3, r6
  4083f8:	9313      	str	r3, [sp, #76]	; 0x4c
  4083fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4083fc:	2b47      	cmp	r3, #71	; 0x47
  4083fe:	f43f af18 	beq.w	408232 <_svfprintf_r+0x10d6>
  408402:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  408404:	9312      	str	r3, [sp, #72]	; 0x48
  408406:	e721      	b.n	40824c <_svfprintf_r+0x10f0>
  408408:	424f      	negs	r7, r1
  40840a:	3110      	adds	r1, #16
  40840c:	4d48      	ldr	r5, [pc, #288]	; (408530 <_svfprintf_r+0x13d4>)
  40840e:	da2f      	bge.n	408470 <_svfprintf_r+0x1314>
  408410:	2410      	movs	r4, #16
  408412:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  408416:	e004      	b.n	408422 <_svfprintf_r+0x12c6>
  408418:	f108 0808 	add.w	r8, r8, #8
  40841c:	3f10      	subs	r7, #16
  40841e:	2f10      	cmp	r7, #16
  408420:	dd26      	ble.n	408470 <_svfprintf_r+0x1314>
  408422:	3301      	adds	r3, #1
  408424:	3210      	adds	r2, #16
  408426:	2b07      	cmp	r3, #7
  408428:	9227      	str	r2, [sp, #156]	; 0x9c
  40842a:	9326      	str	r3, [sp, #152]	; 0x98
  40842c:	f8c8 5000 	str.w	r5, [r8]
  408430:	f8c8 4004 	str.w	r4, [r8, #4]
  408434:	ddf0      	ble.n	408418 <_svfprintf_r+0x12bc>
  408436:	aa25      	add	r2, sp, #148	; 0x94
  408438:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40843a:	4658      	mov	r0, fp
  40843c:	f003 fd86 	bl	40bf4c <__ssprint_r>
  408440:	2800      	cmp	r0, #0
  408442:	f47e af5d 	bne.w	407300 <_svfprintf_r+0x1a4>
  408446:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408448:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40844a:	46c8      	mov	r8, r9
  40844c:	e7e6      	b.n	40841c <_svfprintf_r+0x12c0>
  40844e:	aa25      	add	r2, sp, #148	; 0x94
  408450:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408452:	980c      	ldr	r0, [sp, #48]	; 0x30
  408454:	f003 fd7a 	bl	40bf4c <__ssprint_r>
  408458:	2800      	cmp	r0, #0
  40845a:	f47e af51 	bne.w	407300 <_svfprintf_r+0x1a4>
  40845e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  408460:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408462:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408464:	46c8      	mov	r8, r9
  408466:	e667      	b.n	408138 <_svfprintf_r+0xfdc>
  408468:	2000      	movs	r0, #0
  40846a:	900a      	str	r0, [sp, #40]	; 0x28
  40846c:	f7fe bed0 	b.w	407210 <_svfprintf_r+0xb4>
  408470:	3301      	adds	r3, #1
  408472:	443a      	add	r2, r7
  408474:	2b07      	cmp	r3, #7
  408476:	e888 00a0 	stmia.w	r8, {r5, r7}
  40847a:	9227      	str	r2, [sp, #156]	; 0x9c
  40847c:	9326      	str	r3, [sp, #152]	; 0x98
  40847e:	f108 0808 	add.w	r8, r8, #8
  408482:	f77f ae5c 	ble.w	40813e <_svfprintf_r+0xfe2>
  408486:	aa25      	add	r2, sp, #148	; 0x94
  408488:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40848a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40848c:	f003 fd5e 	bl	40bf4c <__ssprint_r>
  408490:	2800      	cmp	r0, #0
  408492:	f47e af35 	bne.w	407300 <_svfprintf_r+0x1a4>
  408496:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408498:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40849a:	46c8      	mov	r8, r9
  40849c:	e64f      	b.n	40813e <_svfprintf_r+0xfe2>
  40849e:	3330      	adds	r3, #48	; 0x30
  4084a0:	2230      	movs	r2, #48	; 0x30
  4084a2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4084a6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4084aa:	ab22      	add	r3, sp, #136	; 0x88
  4084ac:	e70f      	b.n	4082ce <_svfprintf_r+0x1172>
  4084ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4084b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4084b2:	4413      	add	r3, r2
  4084b4:	930e      	str	r3, [sp, #56]	; 0x38
  4084b6:	e775      	b.n	4083a4 <_svfprintf_r+0x1248>
  4084b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4084ba:	e5cb      	b.n	408054 <_svfprintf_r+0xef8>
  4084bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4084be:	4e1d      	ldr	r6, [pc, #116]	; (408534 <_svfprintf_r+0x13d8>)
  4084c0:	2b00      	cmp	r3, #0
  4084c2:	bfb6      	itet	lt
  4084c4:	272d      	movlt	r7, #45	; 0x2d
  4084c6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4084ca:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4084ce:	4b1a      	ldr	r3, [pc, #104]	; (408538 <_svfprintf_r+0x13dc>)
  4084d0:	f7ff ba2f 	b.w	407932 <_svfprintf_r+0x7d6>
  4084d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4084d6:	9808      	ldr	r0, [sp, #32]
  4084d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4084da:	4639      	mov	r1, r7
  4084dc:	f004 fbd2 	bl	40cc84 <__aeabi_dcmpeq>
  4084e0:	2800      	cmp	r0, #0
  4084e2:	f47f ae7f 	bne.w	4081e4 <_svfprintf_r+0x1088>
  4084e6:	f1c5 0501 	rsb	r5, r5, #1
  4084ea:	951f      	str	r5, [sp, #124]	; 0x7c
  4084ec:	442c      	add	r4, r5
  4084ee:	e59e      	b.n	40802e <_svfprintf_r+0xed2>
  4084f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4084f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4084f4:	4413      	add	r3, r2
  4084f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4084f8:	441a      	add	r2, r3
  4084fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4084fe:	920e      	str	r2, [sp, #56]	; 0x38
  408500:	9308      	str	r3, [sp, #32]
  408502:	e5c7      	b.n	408094 <_svfprintf_r+0xf38>
  408504:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408508:	f1c3 0301 	rsb	r3, r3, #1
  40850c:	441a      	add	r2, r3
  40850e:	4613      	mov	r3, r2
  408510:	e7d0      	b.n	4084b4 <_svfprintf_r+0x1358>
  408512:	f01b 0301 	ands.w	r3, fp, #1
  408516:	9312      	str	r3, [sp, #72]	; 0x48
  408518:	f47f aee2 	bne.w	4082e0 <_svfprintf_r+0x1184>
  40851c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40851e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408522:	9308      	str	r3, [sp, #32]
  408524:	e5b6      	b.n	408094 <_svfprintf_r+0xf38>
  408526:	bf00      	nop
  408528:	66666667 	.word	0x66666667
  40852c:	0040d9c8 	.word	0x0040d9c8
  408530:	0040d9e4 	.word	0x0040d9e4
  408534:	0040d99c 	.word	0x0040d99c
  408538:	0040d998 	.word	0x0040d998
  40853c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40853e:	b913      	cbnz	r3, 408546 <_svfprintf_r+0x13ea>
  408540:	f01b 0f01 	tst.w	fp, #1
  408544:	d002      	beq.n	40854c <_svfprintf_r+0x13f0>
  408546:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408548:	3301      	adds	r3, #1
  40854a:	e7d4      	b.n	4084f6 <_svfprintf_r+0x139a>
  40854c:	2301      	movs	r3, #1
  40854e:	e73a      	b.n	4083c6 <_svfprintf_r+0x126a>
  408550:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408552:	f89a 3001 	ldrb.w	r3, [sl, #1]
  408556:	6828      	ldr	r0, [r5, #0]
  408558:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40855c:	900a      	str	r0, [sp, #40]	; 0x28
  40855e:	4628      	mov	r0, r5
  408560:	3004      	adds	r0, #4
  408562:	46a2      	mov	sl, r4
  408564:	900f      	str	r0, [sp, #60]	; 0x3c
  408566:	f7fe be51 	b.w	40720c <_svfprintf_r+0xb0>
  40856a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40856e:	f7ff b867 	b.w	407640 <_svfprintf_r+0x4e4>
  408572:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408576:	f7ff ba15 	b.w	4079a4 <_svfprintf_r+0x848>
  40857a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40857e:	e6a6      	b.n	4082ce <_svfprintf_r+0x1172>
  408580:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408584:	f7ff b8eb 	b.w	40775e <_svfprintf_r+0x602>
  408588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40858a:	230c      	movs	r3, #12
  40858c:	6013      	str	r3, [r2, #0]
  40858e:	f04f 33ff 	mov.w	r3, #4294967295
  408592:	9309      	str	r3, [sp, #36]	; 0x24
  408594:	f7fe bebd 	b.w	407312 <_svfprintf_r+0x1b6>
  408598:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40859c:	f7ff b99a 	b.w	4078d4 <_svfprintf_r+0x778>
  4085a0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4085a4:	f7ff b976 	b.w	407894 <_svfprintf_r+0x738>
  4085a8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4085ac:	f7ff b959 	b.w	407862 <_svfprintf_r+0x706>
  4085b0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4085b4:	f7ff b912 	b.w	4077dc <_svfprintf_r+0x680>

004085b8 <__sprint_r.part.0>:
  4085b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4085bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4085be:	049c      	lsls	r4, r3, #18
  4085c0:	4693      	mov	fp, r2
  4085c2:	d52f      	bpl.n	408624 <__sprint_r.part.0+0x6c>
  4085c4:	6893      	ldr	r3, [r2, #8]
  4085c6:	6812      	ldr	r2, [r2, #0]
  4085c8:	b353      	cbz	r3, 408620 <__sprint_r.part.0+0x68>
  4085ca:	460e      	mov	r6, r1
  4085cc:	4607      	mov	r7, r0
  4085ce:	f102 0908 	add.w	r9, r2, #8
  4085d2:	e919 0420 	ldmdb	r9, {r5, sl}
  4085d6:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4085da:	d017      	beq.n	40860c <__sprint_r.part.0+0x54>
  4085dc:	3d04      	subs	r5, #4
  4085de:	2400      	movs	r4, #0
  4085e0:	e001      	b.n	4085e6 <__sprint_r.part.0+0x2e>
  4085e2:	45a0      	cmp	r8, r4
  4085e4:	d010      	beq.n	408608 <__sprint_r.part.0+0x50>
  4085e6:	4632      	mov	r2, r6
  4085e8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4085ec:	4638      	mov	r0, r7
  4085ee:	f002 f87b 	bl	40a6e8 <_fputwc_r>
  4085f2:	1c43      	adds	r3, r0, #1
  4085f4:	f104 0401 	add.w	r4, r4, #1
  4085f8:	d1f3      	bne.n	4085e2 <__sprint_r.part.0+0x2a>
  4085fa:	2300      	movs	r3, #0
  4085fc:	f8cb 3008 	str.w	r3, [fp, #8]
  408600:	f8cb 3004 	str.w	r3, [fp, #4]
  408604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408608:	f8db 3008 	ldr.w	r3, [fp, #8]
  40860c:	f02a 0a03 	bic.w	sl, sl, #3
  408610:	eba3 030a 	sub.w	r3, r3, sl
  408614:	f8cb 3008 	str.w	r3, [fp, #8]
  408618:	f109 0908 	add.w	r9, r9, #8
  40861c:	2b00      	cmp	r3, #0
  40861e:	d1d8      	bne.n	4085d2 <__sprint_r.part.0+0x1a>
  408620:	2000      	movs	r0, #0
  408622:	e7ea      	b.n	4085fa <__sprint_r.part.0+0x42>
  408624:	f002 f9ca 	bl	40a9bc <__sfvwrite_r>
  408628:	2300      	movs	r3, #0
  40862a:	f8cb 3008 	str.w	r3, [fp, #8]
  40862e:	f8cb 3004 	str.w	r3, [fp, #4]
  408632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408636:	bf00      	nop

00408638 <_vfiprintf_r>:
  408638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40863c:	b0ad      	sub	sp, #180	; 0xb4
  40863e:	461d      	mov	r5, r3
  408640:	468b      	mov	fp, r1
  408642:	4690      	mov	r8, r2
  408644:	9307      	str	r3, [sp, #28]
  408646:	9006      	str	r0, [sp, #24]
  408648:	b118      	cbz	r0, 408652 <_vfiprintf_r+0x1a>
  40864a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40864c:	2b00      	cmp	r3, #0
  40864e:	f000 80f3 	beq.w	408838 <_vfiprintf_r+0x200>
  408652:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408656:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40865a:	07df      	lsls	r7, r3, #31
  40865c:	b281      	uxth	r1, r0
  40865e:	d402      	bmi.n	408666 <_vfiprintf_r+0x2e>
  408660:	058e      	lsls	r6, r1, #22
  408662:	f140 80fc 	bpl.w	40885e <_vfiprintf_r+0x226>
  408666:	048c      	lsls	r4, r1, #18
  408668:	d40a      	bmi.n	408680 <_vfiprintf_r+0x48>
  40866a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40866e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  408672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  408676:	f8ab 100c 	strh.w	r1, [fp, #12]
  40867a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40867e:	b289      	uxth	r1, r1
  408680:	0708      	lsls	r0, r1, #28
  408682:	f140 80b3 	bpl.w	4087ec <_vfiprintf_r+0x1b4>
  408686:	f8db 3010 	ldr.w	r3, [fp, #16]
  40868a:	2b00      	cmp	r3, #0
  40868c:	f000 80ae 	beq.w	4087ec <_vfiprintf_r+0x1b4>
  408690:	f001 031a 	and.w	r3, r1, #26
  408694:	2b0a      	cmp	r3, #10
  408696:	f000 80b5 	beq.w	408804 <_vfiprintf_r+0x1cc>
  40869a:	2300      	movs	r3, #0
  40869c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4086a0:	930b      	str	r3, [sp, #44]	; 0x2c
  4086a2:	9311      	str	r3, [sp, #68]	; 0x44
  4086a4:	9310      	str	r3, [sp, #64]	; 0x40
  4086a6:	9303      	str	r3, [sp, #12]
  4086a8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4086ac:	46ca      	mov	sl, r9
  4086ae:	f8cd b010 	str.w	fp, [sp, #16]
  4086b2:	f898 3000 	ldrb.w	r3, [r8]
  4086b6:	4644      	mov	r4, r8
  4086b8:	b1fb      	cbz	r3, 4086fa <_vfiprintf_r+0xc2>
  4086ba:	2b25      	cmp	r3, #37	; 0x25
  4086bc:	d102      	bne.n	4086c4 <_vfiprintf_r+0x8c>
  4086be:	e01c      	b.n	4086fa <_vfiprintf_r+0xc2>
  4086c0:	2b25      	cmp	r3, #37	; 0x25
  4086c2:	d003      	beq.n	4086cc <_vfiprintf_r+0x94>
  4086c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4086c8:	2b00      	cmp	r3, #0
  4086ca:	d1f9      	bne.n	4086c0 <_vfiprintf_r+0x88>
  4086cc:	eba4 0508 	sub.w	r5, r4, r8
  4086d0:	b19d      	cbz	r5, 4086fa <_vfiprintf_r+0xc2>
  4086d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4086d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4086d6:	f8ca 8000 	str.w	r8, [sl]
  4086da:	3301      	adds	r3, #1
  4086dc:	442a      	add	r2, r5
  4086de:	2b07      	cmp	r3, #7
  4086e0:	f8ca 5004 	str.w	r5, [sl, #4]
  4086e4:	9211      	str	r2, [sp, #68]	; 0x44
  4086e6:	9310      	str	r3, [sp, #64]	; 0x40
  4086e8:	dd7a      	ble.n	4087e0 <_vfiprintf_r+0x1a8>
  4086ea:	2a00      	cmp	r2, #0
  4086ec:	f040 84b0 	bne.w	409050 <_vfiprintf_r+0xa18>
  4086f0:	9b03      	ldr	r3, [sp, #12]
  4086f2:	9210      	str	r2, [sp, #64]	; 0x40
  4086f4:	442b      	add	r3, r5
  4086f6:	46ca      	mov	sl, r9
  4086f8:	9303      	str	r3, [sp, #12]
  4086fa:	7823      	ldrb	r3, [r4, #0]
  4086fc:	2b00      	cmp	r3, #0
  4086fe:	f000 83e0 	beq.w	408ec2 <_vfiprintf_r+0x88a>
  408702:	2000      	movs	r0, #0
  408704:	f04f 0300 	mov.w	r3, #0
  408708:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40870c:	f104 0801 	add.w	r8, r4, #1
  408710:	7862      	ldrb	r2, [r4, #1]
  408712:	4605      	mov	r5, r0
  408714:	4606      	mov	r6, r0
  408716:	4603      	mov	r3, r0
  408718:	f04f 34ff 	mov.w	r4, #4294967295
  40871c:	f108 0801 	add.w	r8, r8, #1
  408720:	f1a2 0120 	sub.w	r1, r2, #32
  408724:	2958      	cmp	r1, #88	; 0x58
  408726:	f200 82de 	bhi.w	408ce6 <_vfiprintf_r+0x6ae>
  40872a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40872e:	0221      	.short	0x0221
  408730:	02dc02dc 	.word	0x02dc02dc
  408734:	02dc0229 	.word	0x02dc0229
  408738:	02dc02dc 	.word	0x02dc02dc
  40873c:	02dc02dc 	.word	0x02dc02dc
  408740:	028902dc 	.word	0x028902dc
  408744:	02dc0295 	.word	0x02dc0295
  408748:	02bd00a2 	.word	0x02bd00a2
  40874c:	019f02dc 	.word	0x019f02dc
  408750:	01a401a4 	.word	0x01a401a4
  408754:	01a401a4 	.word	0x01a401a4
  408758:	01a401a4 	.word	0x01a401a4
  40875c:	01a401a4 	.word	0x01a401a4
  408760:	02dc01a4 	.word	0x02dc01a4
  408764:	02dc02dc 	.word	0x02dc02dc
  408768:	02dc02dc 	.word	0x02dc02dc
  40876c:	02dc02dc 	.word	0x02dc02dc
  408770:	02dc02dc 	.word	0x02dc02dc
  408774:	01b202dc 	.word	0x01b202dc
  408778:	02dc02dc 	.word	0x02dc02dc
  40877c:	02dc02dc 	.word	0x02dc02dc
  408780:	02dc02dc 	.word	0x02dc02dc
  408784:	02dc02dc 	.word	0x02dc02dc
  408788:	02dc02dc 	.word	0x02dc02dc
  40878c:	02dc0197 	.word	0x02dc0197
  408790:	02dc02dc 	.word	0x02dc02dc
  408794:	02dc02dc 	.word	0x02dc02dc
  408798:	02dc019b 	.word	0x02dc019b
  40879c:	025302dc 	.word	0x025302dc
  4087a0:	02dc02dc 	.word	0x02dc02dc
  4087a4:	02dc02dc 	.word	0x02dc02dc
  4087a8:	02dc02dc 	.word	0x02dc02dc
  4087ac:	02dc02dc 	.word	0x02dc02dc
  4087b0:	02dc02dc 	.word	0x02dc02dc
  4087b4:	021b025a 	.word	0x021b025a
  4087b8:	02dc02dc 	.word	0x02dc02dc
  4087bc:	026e02dc 	.word	0x026e02dc
  4087c0:	02dc021b 	.word	0x02dc021b
  4087c4:	027302dc 	.word	0x027302dc
  4087c8:	01f502dc 	.word	0x01f502dc
  4087cc:	02090182 	.word	0x02090182
  4087d0:	02dc02d7 	.word	0x02dc02d7
  4087d4:	02dc029a 	.word	0x02dc029a
  4087d8:	02dc00a7 	.word	0x02dc00a7
  4087dc:	022e02dc 	.word	0x022e02dc
  4087e0:	f10a 0a08 	add.w	sl, sl, #8
  4087e4:	9b03      	ldr	r3, [sp, #12]
  4087e6:	442b      	add	r3, r5
  4087e8:	9303      	str	r3, [sp, #12]
  4087ea:	e786      	b.n	4086fa <_vfiprintf_r+0xc2>
  4087ec:	4659      	mov	r1, fp
  4087ee:	9806      	ldr	r0, [sp, #24]
  4087f0:	f000 fdac 	bl	40934c <__swsetup_r>
  4087f4:	bb18      	cbnz	r0, 40883e <_vfiprintf_r+0x206>
  4087f6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4087fa:	f001 031a 	and.w	r3, r1, #26
  4087fe:	2b0a      	cmp	r3, #10
  408800:	f47f af4b 	bne.w	40869a <_vfiprintf_r+0x62>
  408804:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  408808:	2b00      	cmp	r3, #0
  40880a:	f6ff af46 	blt.w	40869a <_vfiprintf_r+0x62>
  40880e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408812:	07db      	lsls	r3, r3, #31
  408814:	d405      	bmi.n	408822 <_vfiprintf_r+0x1ea>
  408816:	058f      	lsls	r7, r1, #22
  408818:	d403      	bmi.n	408822 <_vfiprintf_r+0x1ea>
  40881a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40881e:	f002 fa91 	bl	40ad44 <__retarget_lock_release_recursive>
  408822:	462b      	mov	r3, r5
  408824:	4642      	mov	r2, r8
  408826:	4659      	mov	r1, fp
  408828:	9806      	ldr	r0, [sp, #24]
  40882a:	f000 fd4d 	bl	4092c8 <__sbprintf>
  40882e:	9003      	str	r0, [sp, #12]
  408830:	9803      	ldr	r0, [sp, #12]
  408832:	b02d      	add	sp, #180	; 0xb4
  408834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408838:	f001 feb4 	bl	40a5a4 <__sinit>
  40883c:	e709      	b.n	408652 <_vfiprintf_r+0x1a>
  40883e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408842:	07d9      	lsls	r1, r3, #31
  408844:	d404      	bmi.n	408850 <_vfiprintf_r+0x218>
  408846:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40884a:	059a      	lsls	r2, r3, #22
  40884c:	f140 84aa 	bpl.w	4091a4 <_vfiprintf_r+0xb6c>
  408850:	f04f 33ff 	mov.w	r3, #4294967295
  408854:	9303      	str	r3, [sp, #12]
  408856:	9803      	ldr	r0, [sp, #12]
  408858:	b02d      	add	sp, #180	; 0xb4
  40885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40885e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408862:	f002 fa6d 	bl	40ad40 <__retarget_lock_acquire_recursive>
  408866:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40886a:	b281      	uxth	r1, r0
  40886c:	e6fb      	b.n	408666 <_vfiprintf_r+0x2e>
  40886e:	4276      	negs	r6, r6
  408870:	9207      	str	r2, [sp, #28]
  408872:	f043 0304 	orr.w	r3, r3, #4
  408876:	f898 2000 	ldrb.w	r2, [r8]
  40887a:	e74f      	b.n	40871c <_vfiprintf_r+0xe4>
  40887c:	9608      	str	r6, [sp, #32]
  40887e:	069e      	lsls	r6, r3, #26
  408880:	f100 8450 	bmi.w	409124 <_vfiprintf_r+0xaec>
  408884:	9907      	ldr	r1, [sp, #28]
  408886:	06dd      	lsls	r5, r3, #27
  408888:	460a      	mov	r2, r1
  40888a:	f100 83ef 	bmi.w	40906c <_vfiprintf_r+0xa34>
  40888e:	0658      	lsls	r0, r3, #25
  408890:	f140 83ec 	bpl.w	40906c <_vfiprintf_r+0xa34>
  408894:	880e      	ldrh	r6, [r1, #0]
  408896:	3104      	adds	r1, #4
  408898:	2700      	movs	r7, #0
  40889a:	2201      	movs	r2, #1
  40889c:	9107      	str	r1, [sp, #28]
  40889e:	f04f 0100 	mov.w	r1, #0
  4088a2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4088a6:	2500      	movs	r5, #0
  4088a8:	1c61      	adds	r1, r4, #1
  4088aa:	f000 8116 	beq.w	408ada <_vfiprintf_r+0x4a2>
  4088ae:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4088b2:	9102      	str	r1, [sp, #8]
  4088b4:	ea56 0107 	orrs.w	r1, r6, r7
  4088b8:	f040 8114 	bne.w	408ae4 <_vfiprintf_r+0x4ac>
  4088bc:	2c00      	cmp	r4, #0
  4088be:	f040 835c 	bne.w	408f7a <_vfiprintf_r+0x942>
  4088c2:	2a00      	cmp	r2, #0
  4088c4:	f040 83b7 	bne.w	409036 <_vfiprintf_r+0x9fe>
  4088c8:	f013 0301 	ands.w	r3, r3, #1
  4088cc:	9305      	str	r3, [sp, #20]
  4088ce:	f000 8457 	beq.w	409180 <_vfiprintf_r+0xb48>
  4088d2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4088d6:	2330      	movs	r3, #48	; 0x30
  4088d8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4088dc:	9b05      	ldr	r3, [sp, #20]
  4088de:	42a3      	cmp	r3, r4
  4088e0:	bfb8      	it	lt
  4088e2:	4623      	movlt	r3, r4
  4088e4:	9301      	str	r3, [sp, #4]
  4088e6:	b10d      	cbz	r5, 4088ec <_vfiprintf_r+0x2b4>
  4088e8:	3301      	adds	r3, #1
  4088ea:	9301      	str	r3, [sp, #4]
  4088ec:	9b02      	ldr	r3, [sp, #8]
  4088ee:	f013 0302 	ands.w	r3, r3, #2
  4088f2:	9309      	str	r3, [sp, #36]	; 0x24
  4088f4:	d002      	beq.n	4088fc <_vfiprintf_r+0x2c4>
  4088f6:	9b01      	ldr	r3, [sp, #4]
  4088f8:	3302      	adds	r3, #2
  4088fa:	9301      	str	r3, [sp, #4]
  4088fc:	9b02      	ldr	r3, [sp, #8]
  4088fe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  408902:	930a      	str	r3, [sp, #40]	; 0x28
  408904:	f040 8217 	bne.w	408d36 <_vfiprintf_r+0x6fe>
  408908:	9b08      	ldr	r3, [sp, #32]
  40890a:	9a01      	ldr	r2, [sp, #4]
  40890c:	1a9d      	subs	r5, r3, r2
  40890e:	2d00      	cmp	r5, #0
  408910:	f340 8211 	ble.w	408d36 <_vfiprintf_r+0x6fe>
  408914:	2d10      	cmp	r5, #16
  408916:	f340 8490 	ble.w	40923a <_vfiprintf_r+0xc02>
  40891a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40891c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40891e:	4ec4      	ldr	r6, [pc, #784]	; (408c30 <_vfiprintf_r+0x5f8>)
  408920:	46d6      	mov	lr, sl
  408922:	2710      	movs	r7, #16
  408924:	46a2      	mov	sl, r4
  408926:	4619      	mov	r1, r3
  408928:	9c06      	ldr	r4, [sp, #24]
  40892a:	e007      	b.n	40893c <_vfiprintf_r+0x304>
  40892c:	f101 0c02 	add.w	ip, r1, #2
  408930:	f10e 0e08 	add.w	lr, lr, #8
  408934:	4601      	mov	r1, r0
  408936:	3d10      	subs	r5, #16
  408938:	2d10      	cmp	r5, #16
  40893a:	dd11      	ble.n	408960 <_vfiprintf_r+0x328>
  40893c:	1c48      	adds	r0, r1, #1
  40893e:	3210      	adds	r2, #16
  408940:	2807      	cmp	r0, #7
  408942:	9211      	str	r2, [sp, #68]	; 0x44
  408944:	e88e 00c0 	stmia.w	lr, {r6, r7}
  408948:	9010      	str	r0, [sp, #64]	; 0x40
  40894a:	ddef      	ble.n	40892c <_vfiprintf_r+0x2f4>
  40894c:	2a00      	cmp	r2, #0
  40894e:	f040 81e4 	bne.w	408d1a <_vfiprintf_r+0x6e2>
  408952:	3d10      	subs	r5, #16
  408954:	2d10      	cmp	r5, #16
  408956:	4611      	mov	r1, r2
  408958:	f04f 0c01 	mov.w	ip, #1
  40895c:	46ce      	mov	lr, r9
  40895e:	dced      	bgt.n	40893c <_vfiprintf_r+0x304>
  408960:	4654      	mov	r4, sl
  408962:	4661      	mov	r1, ip
  408964:	46f2      	mov	sl, lr
  408966:	442a      	add	r2, r5
  408968:	2907      	cmp	r1, #7
  40896a:	9211      	str	r2, [sp, #68]	; 0x44
  40896c:	f8ca 6000 	str.w	r6, [sl]
  408970:	f8ca 5004 	str.w	r5, [sl, #4]
  408974:	9110      	str	r1, [sp, #64]	; 0x40
  408976:	f300 82ec 	bgt.w	408f52 <_vfiprintf_r+0x91a>
  40897a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40897e:	f10a 0a08 	add.w	sl, sl, #8
  408982:	1c48      	adds	r0, r1, #1
  408984:	2d00      	cmp	r5, #0
  408986:	f040 81de 	bne.w	408d46 <_vfiprintf_r+0x70e>
  40898a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40898c:	2b00      	cmp	r3, #0
  40898e:	f000 81f8 	beq.w	408d82 <_vfiprintf_r+0x74a>
  408992:	3202      	adds	r2, #2
  408994:	a90e      	add	r1, sp, #56	; 0x38
  408996:	2302      	movs	r3, #2
  408998:	2807      	cmp	r0, #7
  40899a:	9211      	str	r2, [sp, #68]	; 0x44
  40899c:	9010      	str	r0, [sp, #64]	; 0x40
  40899e:	e88a 000a 	stmia.w	sl, {r1, r3}
  4089a2:	f340 81ea 	ble.w	408d7a <_vfiprintf_r+0x742>
  4089a6:	2a00      	cmp	r2, #0
  4089a8:	f040 838c 	bne.w	4090c4 <_vfiprintf_r+0xa8c>
  4089ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4089ae:	2b80      	cmp	r3, #128	; 0x80
  4089b0:	f04f 0001 	mov.w	r0, #1
  4089b4:	4611      	mov	r1, r2
  4089b6:	46ca      	mov	sl, r9
  4089b8:	f040 81e7 	bne.w	408d8a <_vfiprintf_r+0x752>
  4089bc:	9b08      	ldr	r3, [sp, #32]
  4089be:	9d01      	ldr	r5, [sp, #4]
  4089c0:	1b5e      	subs	r6, r3, r5
  4089c2:	2e00      	cmp	r6, #0
  4089c4:	f340 81e1 	ble.w	408d8a <_vfiprintf_r+0x752>
  4089c8:	2e10      	cmp	r6, #16
  4089ca:	4d9a      	ldr	r5, [pc, #616]	; (408c34 <_vfiprintf_r+0x5fc>)
  4089cc:	f340 8450 	ble.w	409270 <_vfiprintf_r+0xc38>
  4089d0:	46d4      	mov	ip, sl
  4089d2:	2710      	movs	r7, #16
  4089d4:	46a2      	mov	sl, r4
  4089d6:	9c06      	ldr	r4, [sp, #24]
  4089d8:	e007      	b.n	4089ea <_vfiprintf_r+0x3b2>
  4089da:	f101 0e02 	add.w	lr, r1, #2
  4089de:	f10c 0c08 	add.w	ip, ip, #8
  4089e2:	4601      	mov	r1, r0
  4089e4:	3e10      	subs	r6, #16
  4089e6:	2e10      	cmp	r6, #16
  4089e8:	dd11      	ble.n	408a0e <_vfiprintf_r+0x3d6>
  4089ea:	1c48      	adds	r0, r1, #1
  4089ec:	3210      	adds	r2, #16
  4089ee:	2807      	cmp	r0, #7
  4089f0:	9211      	str	r2, [sp, #68]	; 0x44
  4089f2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4089f6:	9010      	str	r0, [sp, #64]	; 0x40
  4089f8:	ddef      	ble.n	4089da <_vfiprintf_r+0x3a2>
  4089fa:	2a00      	cmp	r2, #0
  4089fc:	f040 829d 	bne.w	408f3a <_vfiprintf_r+0x902>
  408a00:	3e10      	subs	r6, #16
  408a02:	2e10      	cmp	r6, #16
  408a04:	f04f 0e01 	mov.w	lr, #1
  408a08:	4611      	mov	r1, r2
  408a0a:	46cc      	mov	ip, r9
  408a0c:	dced      	bgt.n	4089ea <_vfiprintf_r+0x3b2>
  408a0e:	4654      	mov	r4, sl
  408a10:	46e2      	mov	sl, ip
  408a12:	4432      	add	r2, r6
  408a14:	f1be 0f07 	cmp.w	lr, #7
  408a18:	9211      	str	r2, [sp, #68]	; 0x44
  408a1a:	e88a 0060 	stmia.w	sl, {r5, r6}
  408a1e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  408a22:	f300 8369 	bgt.w	4090f8 <_vfiprintf_r+0xac0>
  408a26:	f10a 0a08 	add.w	sl, sl, #8
  408a2a:	f10e 0001 	add.w	r0, lr, #1
  408a2e:	4671      	mov	r1, lr
  408a30:	e1ab      	b.n	408d8a <_vfiprintf_r+0x752>
  408a32:	9608      	str	r6, [sp, #32]
  408a34:	f013 0220 	ands.w	r2, r3, #32
  408a38:	f040 838c 	bne.w	409154 <_vfiprintf_r+0xb1c>
  408a3c:	f013 0110 	ands.w	r1, r3, #16
  408a40:	f040 831a 	bne.w	409078 <_vfiprintf_r+0xa40>
  408a44:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  408a48:	f000 8316 	beq.w	409078 <_vfiprintf_r+0xa40>
  408a4c:	9807      	ldr	r0, [sp, #28]
  408a4e:	460a      	mov	r2, r1
  408a50:	4601      	mov	r1, r0
  408a52:	3104      	adds	r1, #4
  408a54:	8806      	ldrh	r6, [r0, #0]
  408a56:	9107      	str	r1, [sp, #28]
  408a58:	2700      	movs	r7, #0
  408a5a:	e720      	b.n	40889e <_vfiprintf_r+0x266>
  408a5c:	9608      	str	r6, [sp, #32]
  408a5e:	f043 0310 	orr.w	r3, r3, #16
  408a62:	e7e7      	b.n	408a34 <_vfiprintf_r+0x3fc>
  408a64:	9608      	str	r6, [sp, #32]
  408a66:	f043 0310 	orr.w	r3, r3, #16
  408a6a:	e708      	b.n	40887e <_vfiprintf_r+0x246>
  408a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408a70:	f898 2000 	ldrb.w	r2, [r8]
  408a74:	e652      	b.n	40871c <_vfiprintf_r+0xe4>
  408a76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408a7a:	2600      	movs	r6, #0
  408a7c:	f818 2b01 	ldrb.w	r2, [r8], #1
  408a80:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  408a84:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  408a88:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408a8c:	2909      	cmp	r1, #9
  408a8e:	d9f5      	bls.n	408a7c <_vfiprintf_r+0x444>
  408a90:	e646      	b.n	408720 <_vfiprintf_r+0xe8>
  408a92:	9608      	str	r6, [sp, #32]
  408a94:	2800      	cmp	r0, #0
  408a96:	f040 8408 	bne.w	4092aa <_vfiprintf_r+0xc72>
  408a9a:	f043 0310 	orr.w	r3, r3, #16
  408a9e:	069e      	lsls	r6, r3, #26
  408aa0:	f100 834c 	bmi.w	40913c <_vfiprintf_r+0xb04>
  408aa4:	06dd      	lsls	r5, r3, #27
  408aa6:	f100 82f3 	bmi.w	409090 <_vfiprintf_r+0xa58>
  408aaa:	0658      	lsls	r0, r3, #25
  408aac:	f140 82f0 	bpl.w	409090 <_vfiprintf_r+0xa58>
  408ab0:	9d07      	ldr	r5, [sp, #28]
  408ab2:	f9b5 6000 	ldrsh.w	r6, [r5]
  408ab6:	462a      	mov	r2, r5
  408ab8:	17f7      	asrs	r7, r6, #31
  408aba:	3204      	adds	r2, #4
  408abc:	4630      	mov	r0, r6
  408abe:	4639      	mov	r1, r7
  408ac0:	9207      	str	r2, [sp, #28]
  408ac2:	2800      	cmp	r0, #0
  408ac4:	f171 0200 	sbcs.w	r2, r1, #0
  408ac8:	f2c0 835d 	blt.w	409186 <_vfiprintf_r+0xb4e>
  408acc:	1c61      	adds	r1, r4, #1
  408ace:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408ad2:	f04f 0201 	mov.w	r2, #1
  408ad6:	f47f aeea 	bne.w	4088ae <_vfiprintf_r+0x276>
  408ada:	ea56 0107 	orrs.w	r1, r6, r7
  408ade:	f000 824d 	beq.w	408f7c <_vfiprintf_r+0x944>
  408ae2:	9302      	str	r3, [sp, #8]
  408ae4:	2a01      	cmp	r2, #1
  408ae6:	f000 828c 	beq.w	409002 <_vfiprintf_r+0x9ca>
  408aea:	2a02      	cmp	r2, #2
  408aec:	f040 825c 	bne.w	408fa8 <_vfiprintf_r+0x970>
  408af0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  408af2:	46cb      	mov	fp, r9
  408af4:	0933      	lsrs	r3, r6, #4
  408af6:	f006 010f 	and.w	r1, r6, #15
  408afa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  408afe:	093a      	lsrs	r2, r7, #4
  408b00:	461e      	mov	r6, r3
  408b02:	4617      	mov	r7, r2
  408b04:	5c43      	ldrb	r3, [r0, r1]
  408b06:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  408b0a:	ea56 0307 	orrs.w	r3, r6, r7
  408b0e:	d1f1      	bne.n	408af4 <_vfiprintf_r+0x4bc>
  408b10:	eba9 030b 	sub.w	r3, r9, fp
  408b14:	9305      	str	r3, [sp, #20]
  408b16:	e6e1      	b.n	4088dc <_vfiprintf_r+0x2a4>
  408b18:	2800      	cmp	r0, #0
  408b1a:	f040 83c0 	bne.w	40929e <_vfiprintf_r+0xc66>
  408b1e:	0699      	lsls	r1, r3, #26
  408b20:	f100 8367 	bmi.w	4091f2 <_vfiprintf_r+0xbba>
  408b24:	06da      	lsls	r2, r3, #27
  408b26:	f100 80f1 	bmi.w	408d0c <_vfiprintf_r+0x6d4>
  408b2a:	065b      	lsls	r3, r3, #25
  408b2c:	f140 80ee 	bpl.w	408d0c <_vfiprintf_r+0x6d4>
  408b30:	9a07      	ldr	r2, [sp, #28]
  408b32:	6813      	ldr	r3, [r2, #0]
  408b34:	3204      	adds	r2, #4
  408b36:	9207      	str	r2, [sp, #28]
  408b38:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  408b3c:	801a      	strh	r2, [r3, #0]
  408b3e:	e5b8      	b.n	4086b2 <_vfiprintf_r+0x7a>
  408b40:	9807      	ldr	r0, [sp, #28]
  408b42:	4a3d      	ldr	r2, [pc, #244]	; (408c38 <_vfiprintf_r+0x600>)
  408b44:	9608      	str	r6, [sp, #32]
  408b46:	920b      	str	r2, [sp, #44]	; 0x2c
  408b48:	6806      	ldr	r6, [r0, #0]
  408b4a:	2278      	movs	r2, #120	; 0x78
  408b4c:	2130      	movs	r1, #48	; 0x30
  408b4e:	3004      	adds	r0, #4
  408b50:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  408b54:	f043 0302 	orr.w	r3, r3, #2
  408b58:	9007      	str	r0, [sp, #28]
  408b5a:	2700      	movs	r7, #0
  408b5c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  408b60:	2202      	movs	r2, #2
  408b62:	e69c      	b.n	40889e <_vfiprintf_r+0x266>
  408b64:	9608      	str	r6, [sp, #32]
  408b66:	2800      	cmp	r0, #0
  408b68:	d099      	beq.n	408a9e <_vfiprintf_r+0x466>
  408b6a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408b6e:	e796      	b.n	408a9e <_vfiprintf_r+0x466>
  408b70:	f898 2000 	ldrb.w	r2, [r8]
  408b74:	2d00      	cmp	r5, #0
  408b76:	f47f add1 	bne.w	40871c <_vfiprintf_r+0xe4>
  408b7a:	2001      	movs	r0, #1
  408b7c:	2520      	movs	r5, #32
  408b7e:	e5cd      	b.n	40871c <_vfiprintf_r+0xe4>
  408b80:	f043 0301 	orr.w	r3, r3, #1
  408b84:	f898 2000 	ldrb.w	r2, [r8]
  408b88:	e5c8      	b.n	40871c <_vfiprintf_r+0xe4>
  408b8a:	9608      	str	r6, [sp, #32]
  408b8c:	2800      	cmp	r0, #0
  408b8e:	f040 8393 	bne.w	4092b8 <_vfiprintf_r+0xc80>
  408b92:	4929      	ldr	r1, [pc, #164]	; (408c38 <_vfiprintf_r+0x600>)
  408b94:	910b      	str	r1, [sp, #44]	; 0x2c
  408b96:	069f      	lsls	r7, r3, #26
  408b98:	f100 82e8 	bmi.w	40916c <_vfiprintf_r+0xb34>
  408b9c:	9807      	ldr	r0, [sp, #28]
  408b9e:	06de      	lsls	r6, r3, #27
  408ba0:	4601      	mov	r1, r0
  408ba2:	f100 8270 	bmi.w	409086 <_vfiprintf_r+0xa4e>
  408ba6:	065d      	lsls	r5, r3, #25
  408ba8:	f140 826d 	bpl.w	409086 <_vfiprintf_r+0xa4e>
  408bac:	3104      	adds	r1, #4
  408bae:	8806      	ldrh	r6, [r0, #0]
  408bb0:	9107      	str	r1, [sp, #28]
  408bb2:	2700      	movs	r7, #0
  408bb4:	07d8      	lsls	r0, r3, #31
  408bb6:	f140 8222 	bpl.w	408ffe <_vfiprintf_r+0x9c6>
  408bba:	ea56 0107 	orrs.w	r1, r6, r7
  408bbe:	f000 821e 	beq.w	408ffe <_vfiprintf_r+0x9c6>
  408bc2:	2130      	movs	r1, #48	; 0x30
  408bc4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  408bc8:	f043 0302 	orr.w	r3, r3, #2
  408bcc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  408bd0:	2202      	movs	r2, #2
  408bd2:	e664      	b.n	40889e <_vfiprintf_r+0x266>
  408bd4:	9608      	str	r6, [sp, #32]
  408bd6:	2800      	cmp	r0, #0
  408bd8:	f040 836b 	bne.w	4092b2 <_vfiprintf_r+0xc7a>
  408bdc:	4917      	ldr	r1, [pc, #92]	; (408c3c <_vfiprintf_r+0x604>)
  408bde:	910b      	str	r1, [sp, #44]	; 0x2c
  408be0:	e7d9      	b.n	408b96 <_vfiprintf_r+0x55e>
  408be2:	9907      	ldr	r1, [sp, #28]
  408be4:	9608      	str	r6, [sp, #32]
  408be6:	680a      	ldr	r2, [r1, #0]
  408be8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  408bec:	f04f 0000 	mov.w	r0, #0
  408bf0:	460a      	mov	r2, r1
  408bf2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  408bf6:	3204      	adds	r2, #4
  408bf8:	2001      	movs	r0, #1
  408bfa:	9001      	str	r0, [sp, #4]
  408bfc:	9207      	str	r2, [sp, #28]
  408bfe:	9005      	str	r0, [sp, #20]
  408c00:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  408c04:	9302      	str	r3, [sp, #8]
  408c06:	2400      	movs	r4, #0
  408c08:	e670      	b.n	4088ec <_vfiprintf_r+0x2b4>
  408c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408c0e:	f898 2000 	ldrb.w	r2, [r8]
  408c12:	e583      	b.n	40871c <_vfiprintf_r+0xe4>
  408c14:	f898 2000 	ldrb.w	r2, [r8]
  408c18:	2a6c      	cmp	r2, #108	; 0x6c
  408c1a:	bf03      	ittte	eq
  408c1c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  408c20:	f043 0320 	orreq.w	r3, r3, #32
  408c24:	f108 0801 	addeq.w	r8, r8, #1
  408c28:	f043 0310 	orrne.w	r3, r3, #16
  408c2c:	e576      	b.n	40871c <_vfiprintf_r+0xe4>
  408c2e:	bf00      	nop
  408c30:	0040d9f4 	.word	0x0040d9f4
  408c34:	0040da04 	.word	0x0040da04
  408c38:	0040d9b4 	.word	0x0040d9b4
  408c3c:	0040d9a0 	.word	0x0040d9a0
  408c40:	9907      	ldr	r1, [sp, #28]
  408c42:	680e      	ldr	r6, [r1, #0]
  408c44:	460a      	mov	r2, r1
  408c46:	2e00      	cmp	r6, #0
  408c48:	f102 0204 	add.w	r2, r2, #4
  408c4c:	f6ff ae0f 	blt.w	40886e <_vfiprintf_r+0x236>
  408c50:	9207      	str	r2, [sp, #28]
  408c52:	f898 2000 	ldrb.w	r2, [r8]
  408c56:	e561      	b.n	40871c <_vfiprintf_r+0xe4>
  408c58:	f898 2000 	ldrb.w	r2, [r8]
  408c5c:	2001      	movs	r0, #1
  408c5e:	252b      	movs	r5, #43	; 0x2b
  408c60:	e55c      	b.n	40871c <_vfiprintf_r+0xe4>
  408c62:	9907      	ldr	r1, [sp, #28]
  408c64:	9608      	str	r6, [sp, #32]
  408c66:	f8d1 b000 	ldr.w	fp, [r1]
  408c6a:	f04f 0200 	mov.w	r2, #0
  408c6e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  408c72:	1d0e      	adds	r6, r1, #4
  408c74:	f1bb 0f00 	cmp.w	fp, #0
  408c78:	f000 82e5 	beq.w	409246 <_vfiprintf_r+0xc0e>
  408c7c:	1c67      	adds	r7, r4, #1
  408c7e:	f000 82c4 	beq.w	40920a <_vfiprintf_r+0xbd2>
  408c82:	4622      	mov	r2, r4
  408c84:	2100      	movs	r1, #0
  408c86:	4658      	mov	r0, fp
  408c88:	9301      	str	r3, [sp, #4]
  408c8a:	f002 fba9 	bl	40b3e0 <memchr>
  408c8e:	9b01      	ldr	r3, [sp, #4]
  408c90:	2800      	cmp	r0, #0
  408c92:	f000 82e5 	beq.w	409260 <_vfiprintf_r+0xc28>
  408c96:	eba0 020b 	sub.w	r2, r0, fp
  408c9a:	9205      	str	r2, [sp, #20]
  408c9c:	9607      	str	r6, [sp, #28]
  408c9e:	9302      	str	r3, [sp, #8]
  408ca0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408ca4:	2400      	movs	r4, #0
  408ca6:	e619      	b.n	4088dc <_vfiprintf_r+0x2a4>
  408ca8:	f898 2000 	ldrb.w	r2, [r8]
  408cac:	2a2a      	cmp	r2, #42	; 0x2a
  408cae:	f108 0701 	add.w	r7, r8, #1
  408cb2:	f000 82e9 	beq.w	409288 <_vfiprintf_r+0xc50>
  408cb6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408cba:	2909      	cmp	r1, #9
  408cbc:	46b8      	mov	r8, r7
  408cbe:	f04f 0400 	mov.w	r4, #0
  408cc2:	f63f ad2d 	bhi.w	408720 <_vfiprintf_r+0xe8>
  408cc6:	f818 2b01 	ldrb.w	r2, [r8], #1
  408cca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  408cce:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  408cd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408cd6:	2909      	cmp	r1, #9
  408cd8:	d9f5      	bls.n	408cc6 <_vfiprintf_r+0x68e>
  408cda:	e521      	b.n	408720 <_vfiprintf_r+0xe8>
  408cdc:	f043 0320 	orr.w	r3, r3, #32
  408ce0:	f898 2000 	ldrb.w	r2, [r8]
  408ce4:	e51a      	b.n	40871c <_vfiprintf_r+0xe4>
  408ce6:	9608      	str	r6, [sp, #32]
  408ce8:	2800      	cmp	r0, #0
  408cea:	f040 82db 	bne.w	4092a4 <_vfiprintf_r+0xc6c>
  408cee:	2a00      	cmp	r2, #0
  408cf0:	f000 80e7 	beq.w	408ec2 <_vfiprintf_r+0x88a>
  408cf4:	2101      	movs	r1, #1
  408cf6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  408cfa:	f04f 0200 	mov.w	r2, #0
  408cfe:	9101      	str	r1, [sp, #4]
  408d00:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  408d04:	9105      	str	r1, [sp, #20]
  408d06:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  408d0a:	e77b      	b.n	408c04 <_vfiprintf_r+0x5cc>
  408d0c:	9a07      	ldr	r2, [sp, #28]
  408d0e:	6813      	ldr	r3, [r2, #0]
  408d10:	3204      	adds	r2, #4
  408d12:	9207      	str	r2, [sp, #28]
  408d14:	9a03      	ldr	r2, [sp, #12]
  408d16:	601a      	str	r2, [r3, #0]
  408d18:	e4cb      	b.n	4086b2 <_vfiprintf_r+0x7a>
  408d1a:	aa0f      	add	r2, sp, #60	; 0x3c
  408d1c:	9904      	ldr	r1, [sp, #16]
  408d1e:	4620      	mov	r0, r4
  408d20:	f7ff fc4a 	bl	4085b8 <__sprint_r.part.0>
  408d24:	2800      	cmp	r0, #0
  408d26:	f040 8139 	bne.w	408f9c <_vfiprintf_r+0x964>
  408d2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  408d2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408d2e:	f101 0c01 	add.w	ip, r1, #1
  408d32:	46ce      	mov	lr, r9
  408d34:	e5ff      	b.n	408936 <_vfiprintf_r+0x2fe>
  408d36:	9910      	ldr	r1, [sp, #64]	; 0x40
  408d38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408d3a:	1c48      	adds	r0, r1, #1
  408d3c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408d40:	2d00      	cmp	r5, #0
  408d42:	f43f ae22 	beq.w	40898a <_vfiprintf_r+0x352>
  408d46:	3201      	adds	r2, #1
  408d48:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  408d4c:	2101      	movs	r1, #1
  408d4e:	2807      	cmp	r0, #7
  408d50:	9211      	str	r2, [sp, #68]	; 0x44
  408d52:	9010      	str	r0, [sp, #64]	; 0x40
  408d54:	f8ca 5000 	str.w	r5, [sl]
  408d58:	f8ca 1004 	str.w	r1, [sl, #4]
  408d5c:	f340 8108 	ble.w	408f70 <_vfiprintf_r+0x938>
  408d60:	2a00      	cmp	r2, #0
  408d62:	f040 81bc 	bne.w	4090de <_vfiprintf_r+0xaa6>
  408d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408d68:	2b00      	cmp	r3, #0
  408d6a:	f43f ae1f 	beq.w	4089ac <_vfiprintf_r+0x374>
  408d6e:	ab0e      	add	r3, sp, #56	; 0x38
  408d70:	2202      	movs	r2, #2
  408d72:	4608      	mov	r0, r1
  408d74:	931c      	str	r3, [sp, #112]	; 0x70
  408d76:	921d      	str	r2, [sp, #116]	; 0x74
  408d78:	46ca      	mov	sl, r9
  408d7a:	4601      	mov	r1, r0
  408d7c:	f10a 0a08 	add.w	sl, sl, #8
  408d80:	3001      	adds	r0, #1
  408d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408d84:	2b80      	cmp	r3, #128	; 0x80
  408d86:	f43f ae19 	beq.w	4089bc <_vfiprintf_r+0x384>
  408d8a:	9b05      	ldr	r3, [sp, #20]
  408d8c:	1ae4      	subs	r4, r4, r3
  408d8e:	2c00      	cmp	r4, #0
  408d90:	dd2e      	ble.n	408df0 <_vfiprintf_r+0x7b8>
  408d92:	2c10      	cmp	r4, #16
  408d94:	4db3      	ldr	r5, [pc, #716]	; (409064 <_vfiprintf_r+0xa2c>)
  408d96:	dd1e      	ble.n	408dd6 <_vfiprintf_r+0x79e>
  408d98:	46d6      	mov	lr, sl
  408d9a:	2610      	movs	r6, #16
  408d9c:	9f06      	ldr	r7, [sp, #24]
  408d9e:	f8dd a010 	ldr.w	sl, [sp, #16]
  408da2:	e006      	b.n	408db2 <_vfiprintf_r+0x77a>
  408da4:	1c88      	adds	r0, r1, #2
  408da6:	f10e 0e08 	add.w	lr, lr, #8
  408daa:	4619      	mov	r1, r3
  408dac:	3c10      	subs	r4, #16
  408dae:	2c10      	cmp	r4, #16
  408db0:	dd10      	ble.n	408dd4 <_vfiprintf_r+0x79c>
  408db2:	1c4b      	adds	r3, r1, #1
  408db4:	3210      	adds	r2, #16
  408db6:	2b07      	cmp	r3, #7
  408db8:	9211      	str	r2, [sp, #68]	; 0x44
  408dba:	e88e 0060 	stmia.w	lr, {r5, r6}
  408dbe:	9310      	str	r3, [sp, #64]	; 0x40
  408dc0:	ddf0      	ble.n	408da4 <_vfiprintf_r+0x76c>
  408dc2:	2a00      	cmp	r2, #0
  408dc4:	d165      	bne.n	408e92 <_vfiprintf_r+0x85a>
  408dc6:	3c10      	subs	r4, #16
  408dc8:	2c10      	cmp	r4, #16
  408dca:	f04f 0001 	mov.w	r0, #1
  408dce:	4611      	mov	r1, r2
  408dd0:	46ce      	mov	lr, r9
  408dd2:	dcee      	bgt.n	408db2 <_vfiprintf_r+0x77a>
  408dd4:	46f2      	mov	sl, lr
  408dd6:	4422      	add	r2, r4
  408dd8:	2807      	cmp	r0, #7
  408dda:	9211      	str	r2, [sp, #68]	; 0x44
  408ddc:	f8ca 5000 	str.w	r5, [sl]
  408de0:	f8ca 4004 	str.w	r4, [sl, #4]
  408de4:	9010      	str	r0, [sp, #64]	; 0x40
  408de6:	f300 8085 	bgt.w	408ef4 <_vfiprintf_r+0x8bc>
  408dea:	f10a 0a08 	add.w	sl, sl, #8
  408dee:	3001      	adds	r0, #1
  408df0:	9905      	ldr	r1, [sp, #20]
  408df2:	f8ca b000 	str.w	fp, [sl]
  408df6:	440a      	add	r2, r1
  408df8:	2807      	cmp	r0, #7
  408dfa:	9211      	str	r2, [sp, #68]	; 0x44
  408dfc:	f8ca 1004 	str.w	r1, [sl, #4]
  408e00:	9010      	str	r0, [sp, #64]	; 0x40
  408e02:	f340 8082 	ble.w	408f0a <_vfiprintf_r+0x8d2>
  408e06:	2a00      	cmp	r2, #0
  408e08:	f040 8118 	bne.w	40903c <_vfiprintf_r+0xa04>
  408e0c:	9b02      	ldr	r3, [sp, #8]
  408e0e:	9210      	str	r2, [sp, #64]	; 0x40
  408e10:	0758      	lsls	r0, r3, #29
  408e12:	d535      	bpl.n	408e80 <_vfiprintf_r+0x848>
  408e14:	9b08      	ldr	r3, [sp, #32]
  408e16:	9901      	ldr	r1, [sp, #4]
  408e18:	1a5c      	subs	r4, r3, r1
  408e1a:	2c00      	cmp	r4, #0
  408e1c:	f340 80e7 	ble.w	408fee <_vfiprintf_r+0x9b6>
  408e20:	46ca      	mov	sl, r9
  408e22:	2c10      	cmp	r4, #16
  408e24:	f340 8218 	ble.w	409258 <_vfiprintf_r+0xc20>
  408e28:	9910      	ldr	r1, [sp, #64]	; 0x40
  408e2a:	4e8f      	ldr	r6, [pc, #572]	; (409068 <_vfiprintf_r+0xa30>)
  408e2c:	9f06      	ldr	r7, [sp, #24]
  408e2e:	f8dd b010 	ldr.w	fp, [sp, #16]
  408e32:	2510      	movs	r5, #16
  408e34:	e006      	b.n	408e44 <_vfiprintf_r+0x80c>
  408e36:	1c88      	adds	r0, r1, #2
  408e38:	f10a 0a08 	add.w	sl, sl, #8
  408e3c:	4619      	mov	r1, r3
  408e3e:	3c10      	subs	r4, #16
  408e40:	2c10      	cmp	r4, #16
  408e42:	dd11      	ble.n	408e68 <_vfiprintf_r+0x830>
  408e44:	1c4b      	adds	r3, r1, #1
  408e46:	3210      	adds	r2, #16
  408e48:	2b07      	cmp	r3, #7
  408e4a:	9211      	str	r2, [sp, #68]	; 0x44
  408e4c:	f8ca 6000 	str.w	r6, [sl]
  408e50:	f8ca 5004 	str.w	r5, [sl, #4]
  408e54:	9310      	str	r3, [sp, #64]	; 0x40
  408e56:	ddee      	ble.n	408e36 <_vfiprintf_r+0x7fe>
  408e58:	bb42      	cbnz	r2, 408eac <_vfiprintf_r+0x874>
  408e5a:	3c10      	subs	r4, #16
  408e5c:	2c10      	cmp	r4, #16
  408e5e:	f04f 0001 	mov.w	r0, #1
  408e62:	4611      	mov	r1, r2
  408e64:	46ca      	mov	sl, r9
  408e66:	dced      	bgt.n	408e44 <_vfiprintf_r+0x80c>
  408e68:	4422      	add	r2, r4
  408e6a:	2807      	cmp	r0, #7
  408e6c:	9211      	str	r2, [sp, #68]	; 0x44
  408e6e:	f8ca 6000 	str.w	r6, [sl]
  408e72:	f8ca 4004 	str.w	r4, [sl, #4]
  408e76:	9010      	str	r0, [sp, #64]	; 0x40
  408e78:	dd51      	ble.n	408f1e <_vfiprintf_r+0x8e6>
  408e7a:	2a00      	cmp	r2, #0
  408e7c:	f040 819b 	bne.w	4091b6 <_vfiprintf_r+0xb7e>
  408e80:	9b03      	ldr	r3, [sp, #12]
  408e82:	9a08      	ldr	r2, [sp, #32]
  408e84:	9901      	ldr	r1, [sp, #4]
  408e86:	428a      	cmp	r2, r1
  408e88:	bfac      	ite	ge
  408e8a:	189b      	addge	r3, r3, r2
  408e8c:	185b      	addlt	r3, r3, r1
  408e8e:	9303      	str	r3, [sp, #12]
  408e90:	e04e      	b.n	408f30 <_vfiprintf_r+0x8f8>
  408e92:	aa0f      	add	r2, sp, #60	; 0x3c
  408e94:	4651      	mov	r1, sl
  408e96:	4638      	mov	r0, r7
  408e98:	f7ff fb8e 	bl	4085b8 <__sprint_r.part.0>
  408e9c:	2800      	cmp	r0, #0
  408e9e:	f040 813f 	bne.w	409120 <_vfiprintf_r+0xae8>
  408ea2:	9910      	ldr	r1, [sp, #64]	; 0x40
  408ea4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408ea6:	1c48      	adds	r0, r1, #1
  408ea8:	46ce      	mov	lr, r9
  408eaa:	e77f      	b.n	408dac <_vfiprintf_r+0x774>
  408eac:	aa0f      	add	r2, sp, #60	; 0x3c
  408eae:	4659      	mov	r1, fp
  408eb0:	4638      	mov	r0, r7
  408eb2:	f7ff fb81 	bl	4085b8 <__sprint_r.part.0>
  408eb6:	b960      	cbnz	r0, 408ed2 <_vfiprintf_r+0x89a>
  408eb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  408eba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408ebc:	1c48      	adds	r0, r1, #1
  408ebe:	46ca      	mov	sl, r9
  408ec0:	e7bd      	b.n	408e3e <_vfiprintf_r+0x806>
  408ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408ec4:	f8dd b010 	ldr.w	fp, [sp, #16]
  408ec8:	2b00      	cmp	r3, #0
  408eca:	f040 81d4 	bne.w	409276 <_vfiprintf_r+0xc3e>
  408ece:	2300      	movs	r3, #0
  408ed0:	9310      	str	r3, [sp, #64]	; 0x40
  408ed2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408ed6:	f013 0f01 	tst.w	r3, #1
  408eda:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  408ede:	d102      	bne.n	408ee6 <_vfiprintf_r+0x8ae>
  408ee0:	059a      	lsls	r2, r3, #22
  408ee2:	f140 80de 	bpl.w	4090a2 <_vfiprintf_r+0xa6a>
  408ee6:	065b      	lsls	r3, r3, #25
  408ee8:	f53f acb2 	bmi.w	408850 <_vfiprintf_r+0x218>
  408eec:	9803      	ldr	r0, [sp, #12]
  408eee:	b02d      	add	sp, #180	; 0xb4
  408ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ef4:	2a00      	cmp	r2, #0
  408ef6:	f040 8106 	bne.w	409106 <_vfiprintf_r+0xace>
  408efa:	9a05      	ldr	r2, [sp, #20]
  408efc:	921d      	str	r2, [sp, #116]	; 0x74
  408efe:	2301      	movs	r3, #1
  408f00:	9211      	str	r2, [sp, #68]	; 0x44
  408f02:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  408f06:	9310      	str	r3, [sp, #64]	; 0x40
  408f08:	46ca      	mov	sl, r9
  408f0a:	f10a 0a08 	add.w	sl, sl, #8
  408f0e:	9b02      	ldr	r3, [sp, #8]
  408f10:	0759      	lsls	r1, r3, #29
  408f12:	d504      	bpl.n	408f1e <_vfiprintf_r+0x8e6>
  408f14:	9b08      	ldr	r3, [sp, #32]
  408f16:	9901      	ldr	r1, [sp, #4]
  408f18:	1a5c      	subs	r4, r3, r1
  408f1a:	2c00      	cmp	r4, #0
  408f1c:	dc81      	bgt.n	408e22 <_vfiprintf_r+0x7ea>
  408f1e:	9b03      	ldr	r3, [sp, #12]
  408f20:	9908      	ldr	r1, [sp, #32]
  408f22:	9801      	ldr	r0, [sp, #4]
  408f24:	4281      	cmp	r1, r0
  408f26:	bfac      	ite	ge
  408f28:	185b      	addge	r3, r3, r1
  408f2a:	181b      	addlt	r3, r3, r0
  408f2c:	9303      	str	r3, [sp, #12]
  408f2e:	bb72      	cbnz	r2, 408f8e <_vfiprintf_r+0x956>
  408f30:	2300      	movs	r3, #0
  408f32:	9310      	str	r3, [sp, #64]	; 0x40
  408f34:	46ca      	mov	sl, r9
  408f36:	f7ff bbbc 	b.w	4086b2 <_vfiprintf_r+0x7a>
  408f3a:	aa0f      	add	r2, sp, #60	; 0x3c
  408f3c:	9904      	ldr	r1, [sp, #16]
  408f3e:	4620      	mov	r0, r4
  408f40:	f7ff fb3a 	bl	4085b8 <__sprint_r.part.0>
  408f44:	bb50      	cbnz	r0, 408f9c <_vfiprintf_r+0x964>
  408f46:	9910      	ldr	r1, [sp, #64]	; 0x40
  408f48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408f4a:	f101 0e01 	add.w	lr, r1, #1
  408f4e:	46cc      	mov	ip, r9
  408f50:	e548      	b.n	4089e4 <_vfiprintf_r+0x3ac>
  408f52:	2a00      	cmp	r2, #0
  408f54:	f040 8140 	bne.w	4091d8 <_vfiprintf_r+0xba0>
  408f58:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  408f5c:	2900      	cmp	r1, #0
  408f5e:	f000 811b 	beq.w	409198 <_vfiprintf_r+0xb60>
  408f62:	2201      	movs	r2, #1
  408f64:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  408f68:	4610      	mov	r0, r2
  408f6a:	921d      	str	r2, [sp, #116]	; 0x74
  408f6c:	911c      	str	r1, [sp, #112]	; 0x70
  408f6e:	46ca      	mov	sl, r9
  408f70:	4601      	mov	r1, r0
  408f72:	f10a 0a08 	add.w	sl, sl, #8
  408f76:	3001      	adds	r0, #1
  408f78:	e507      	b.n	40898a <_vfiprintf_r+0x352>
  408f7a:	9b02      	ldr	r3, [sp, #8]
  408f7c:	2a01      	cmp	r2, #1
  408f7e:	f000 8098 	beq.w	4090b2 <_vfiprintf_r+0xa7a>
  408f82:	2a02      	cmp	r2, #2
  408f84:	d10d      	bne.n	408fa2 <_vfiprintf_r+0x96a>
  408f86:	9302      	str	r3, [sp, #8]
  408f88:	2600      	movs	r6, #0
  408f8a:	2700      	movs	r7, #0
  408f8c:	e5b0      	b.n	408af0 <_vfiprintf_r+0x4b8>
  408f8e:	aa0f      	add	r2, sp, #60	; 0x3c
  408f90:	9904      	ldr	r1, [sp, #16]
  408f92:	9806      	ldr	r0, [sp, #24]
  408f94:	f7ff fb10 	bl	4085b8 <__sprint_r.part.0>
  408f98:	2800      	cmp	r0, #0
  408f9a:	d0c9      	beq.n	408f30 <_vfiprintf_r+0x8f8>
  408f9c:	f8dd b010 	ldr.w	fp, [sp, #16]
  408fa0:	e797      	b.n	408ed2 <_vfiprintf_r+0x89a>
  408fa2:	9302      	str	r3, [sp, #8]
  408fa4:	2600      	movs	r6, #0
  408fa6:	2700      	movs	r7, #0
  408fa8:	4649      	mov	r1, r9
  408faa:	e000      	b.n	408fae <_vfiprintf_r+0x976>
  408fac:	4659      	mov	r1, fp
  408fae:	08f2      	lsrs	r2, r6, #3
  408fb0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  408fb4:	08f8      	lsrs	r0, r7, #3
  408fb6:	f006 0307 	and.w	r3, r6, #7
  408fba:	4607      	mov	r7, r0
  408fbc:	4616      	mov	r6, r2
  408fbe:	3330      	adds	r3, #48	; 0x30
  408fc0:	ea56 0207 	orrs.w	r2, r6, r7
  408fc4:	f801 3c01 	strb.w	r3, [r1, #-1]
  408fc8:	f101 3bff 	add.w	fp, r1, #4294967295
  408fcc:	d1ee      	bne.n	408fac <_vfiprintf_r+0x974>
  408fce:	9a02      	ldr	r2, [sp, #8]
  408fd0:	07d6      	lsls	r6, r2, #31
  408fd2:	f57f ad9d 	bpl.w	408b10 <_vfiprintf_r+0x4d8>
  408fd6:	2b30      	cmp	r3, #48	; 0x30
  408fd8:	f43f ad9a 	beq.w	408b10 <_vfiprintf_r+0x4d8>
  408fdc:	3902      	subs	r1, #2
  408fde:	2330      	movs	r3, #48	; 0x30
  408fe0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  408fe4:	eba9 0301 	sub.w	r3, r9, r1
  408fe8:	9305      	str	r3, [sp, #20]
  408fea:	468b      	mov	fp, r1
  408fec:	e476      	b.n	4088dc <_vfiprintf_r+0x2a4>
  408fee:	9b03      	ldr	r3, [sp, #12]
  408ff0:	9a08      	ldr	r2, [sp, #32]
  408ff2:	428a      	cmp	r2, r1
  408ff4:	bfac      	ite	ge
  408ff6:	189b      	addge	r3, r3, r2
  408ff8:	185b      	addlt	r3, r3, r1
  408ffa:	9303      	str	r3, [sp, #12]
  408ffc:	e798      	b.n	408f30 <_vfiprintf_r+0x8f8>
  408ffe:	2202      	movs	r2, #2
  409000:	e44d      	b.n	40889e <_vfiprintf_r+0x266>
  409002:	2f00      	cmp	r7, #0
  409004:	bf08      	it	eq
  409006:	2e0a      	cmpeq	r6, #10
  409008:	d352      	bcc.n	4090b0 <_vfiprintf_r+0xa78>
  40900a:	46cb      	mov	fp, r9
  40900c:	4630      	mov	r0, r6
  40900e:	4639      	mov	r1, r7
  409010:	220a      	movs	r2, #10
  409012:	2300      	movs	r3, #0
  409014:	f003 fea6 	bl	40cd64 <__aeabi_uldivmod>
  409018:	3230      	adds	r2, #48	; 0x30
  40901a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40901e:	4630      	mov	r0, r6
  409020:	4639      	mov	r1, r7
  409022:	2300      	movs	r3, #0
  409024:	220a      	movs	r2, #10
  409026:	f003 fe9d 	bl	40cd64 <__aeabi_uldivmod>
  40902a:	4606      	mov	r6, r0
  40902c:	460f      	mov	r7, r1
  40902e:	ea56 0307 	orrs.w	r3, r6, r7
  409032:	d1eb      	bne.n	40900c <_vfiprintf_r+0x9d4>
  409034:	e56c      	b.n	408b10 <_vfiprintf_r+0x4d8>
  409036:	9405      	str	r4, [sp, #20]
  409038:	46cb      	mov	fp, r9
  40903a:	e44f      	b.n	4088dc <_vfiprintf_r+0x2a4>
  40903c:	aa0f      	add	r2, sp, #60	; 0x3c
  40903e:	9904      	ldr	r1, [sp, #16]
  409040:	9806      	ldr	r0, [sp, #24]
  409042:	f7ff fab9 	bl	4085b8 <__sprint_r.part.0>
  409046:	2800      	cmp	r0, #0
  409048:	d1a8      	bne.n	408f9c <_vfiprintf_r+0x964>
  40904a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40904c:	46ca      	mov	sl, r9
  40904e:	e75e      	b.n	408f0e <_vfiprintf_r+0x8d6>
  409050:	aa0f      	add	r2, sp, #60	; 0x3c
  409052:	9904      	ldr	r1, [sp, #16]
  409054:	9806      	ldr	r0, [sp, #24]
  409056:	f7ff faaf 	bl	4085b8 <__sprint_r.part.0>
  40905a:	2800      	cmp	r0, #0
  40905c:	d19e      	bne.n	408f9c <_vfiprintf_r+0x964>
  40905e:	46ca      	mov	sl, r9
  409060:	f7ff bbc0 	b.w	4087e4 <_vfiprintf_r+0x1ac>
  409064:	0040da04 	.word	0x0040da04
  409068:	0040d9f4 	.word	0x0040d9f4
  40906c:	3104      	adds	r1, #4
  40906e:	6816      	ldr	r6, [r2, #0]
  409070:	9107      	str	r1, [sp, #28]
  409072:	2201      	movs	r2, #1
  409074:	2700      	movs	r7, #0
  409076:	e412      	b.n	40889e <_vfiprintf_r+0x266>
  409078:	9807      	ldr	r0, [sp, #28]
  40907a:	4601      	mov	r1, r0
  40907c:	3104      	adds	r1, #4
  40907e:	6806      	ldr	r6, [r0, #0]
  409080:	9107      	str	r1, [sp, #28]
  409082:	2700      	movs	r7, #0
  409084:	e40b      	b.n	40889e <_vfiprintf_r+0x266>
  409086:	680e      	ldr	r6, [r1, #0]
  409088:	3104      	adds	r1, #4
  40908a:	9107      	str	r1, [sp, #28]
  40908c:	2700      	movs	r7, #0
  40908e:	e591      	b.n	408bb4 <_vfiprintf_r+0x57c>
  409090:	9907      	ldr	r1, [sp, #28]
  409092:	680e      	ldr	r6, [r1, #0]
  409094:	460a      	mov	r2, r1
  409096:	17f7      	asrs	r7, r6, #31
  409098:	3204      	adds	r2, #4
  40909a:	9207      	str	r2, [sp, #28]
  40909c:	4630      	mov	r0, r6
  40909e:	4639      	mov	r1, r7
  4090a0:	e50f      	b.n	408ac2 <_vfiprintf_r+0x48a>
  4090a2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4090a6:	f001 fe4d 	bl	40ad44 <__retarget_lock_release_recursive>
  4090aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4090ae:	e71a      	b.n	408ee6 <_vfiprintf_r+0x8ae>
  4090b0:	9b02      	ldr	r3, [sp, #8]
  4090b2:	9302      	str	r3, [sp, #8]
  4090b4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4090b8:	3630      	adds	r6, #48	; 0x30
  4090ba:	2301      	movs	r3, #1
  4090bc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4090c0:	9305      	str	r3, [sp, #20]
  4090c2:	e40b      	b.n	4088dc <_vfiprintf_r+0x2a4>
  4090c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4090c6:	9904      	ldr	r1, [sp, #16]
  4090c8:	9806      	ldr	r0, [sp, #24]
  4090ca:	f7ff fa75 	bl	4085b8 <__sprint_r.part.0>
  4090ce:	2800      	cmp	r0, #0
  4090d0:	f47f af64 	bne.w	408f9c <_vfiprintf_r+0x964>
  4090d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4090d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4090d8:	1c48      	adds	r0, r1, #1
  4090da:	46ca      	mov	sl, r9
  4090dc:	e651      	b.n	408d82 <_vfiprintf_r+0x74a>
  4090de:	aa0f      	add	r2, sp, #60	; 0x3c
  4090e0:	9904      	ldr	r1, [sp, #16]
  4090e2:	9806      	ldr	r0, [sp, #24]
  4090e4:	f7ff fa68 	bl	4085b8 <__sprint_r.part.0>
  4090e8:	2800      	cmp	r0, #0
  4090ea:	f47f af57 	bne.w	408f9c <_vfiprintf_r+0x964>
  4090ee:	9910      	ldr	r1, [sp, #64]	; 0x40
  4090f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4090f2:	1c48      	adds	r0, r1, #1
  4090f4:	46ca      	mov	sl, r9
  4090f6:	e448      	b.n	40898a <_vfiprintf_r+0x352>
  4090f8:	2a00      	cmp	r2, #0
  4090fa:	f040 8091 	bne.w	409220 <_vfiprintf_r+0xbe8>
  4090fe:	2001      	movs	r0, #1
  409100:	4611      	mov	r1, r2
  409102:	46ca      	mov	sl, r9
  409104:	e641      	b.n	408d8a <_vfiprintf_r+0x752>
  409106:	aa0f      	add	r2, sp, #60	; 0x3c
  409108:	9904      	ldr	r1, [sp, #16]
  40910a:	9806      	ldr	r0, [sp, #24]
  40910c:	f7ff fa54 	bl	4085b8 <__sprint_r.part.0>
  409110:	2800      	cmp	r0, #0
  409112:	f47f af43 	bne.w	408f9c <_vfiprintf_r+0x964>
  409116:	9810      	ldr	r0, [sp, #64]	; 0x40
  409118:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40911a:	3001      	adds	r0, #1
  40911c:	46ca      	mov	sl, r9
  40911e:	e667      	b.n	408df0 <_vfiprintf_r+0x7b8>
  409120:	46d3      	mov	fp, sl
  409122:	e6d6      	b.n	408ed2 <_vfiprintf_r+0x89a>
  409124:	9e07      	ldr	r6, [sp, #28]
  409126:	3607      	adds	r6, #7
  409128:	f026 0207 	bic.w	r2, r6, #7
  40912c:	f102 0108 	add.w	r1, r2, #8
  409130:	e9d2 6700 	ldrd	r6, r7, [r2]
  409134:	9107      	str	r1, [sp, #28]
  409136:	2201      	movs	r2, #1
  409138:	f7ff bbb1 	b.w	40889e <_vfiprintf_r+0x266>
  40913c:	9e07      	ldr	r6, [sp, #28]
  40913e:	3607      	adds	r6, #7
  409140:	f026 0607 	bic.w	r6, r6, #7
  409144:	e9d6 0100 	ldrd	r0, r1, [r6]
  409148:	f106 0208 	add.w	r2, r6, #8
  40914c:	9207      	str	r2, [sp, #28]
  40914e:	4606      	mov	r6, r0
  409150:	460f      	mov	r7, r1
  409152:	e4b6      	b.n	408ac2 <_vfiprintf_r+0x48a>
  409154:	9e07      	ldr	r6, [sp, #28]
  409156:	3607      	adds	r6, #7
  409158:	f026 0207 	bic.w	r2, r6, #7
  40915c:	f102 0108 	add.w	r1, r2, #8
  409160:	e9d2 6700 	ldrd	r6, r7, [r2]
  409164:	9107      	str	r1, [sp, #28]
  409166:	2200      	movs	r2, #0
  409168:	f7ff bb99 	b.w	40889e <_vfiprintf_r+0x266>
  40916c:	9e07      	ldr	r6, [sp, #28]
  40916e:	3607      	adds	r6, #7
  409170:	f026 0107 	bic.w	r1, r6, #7
  409174:	f101 0008 	add.w	r0, r1, #8
  409178:	9007      	str	r0, [sp, #28]
  40917a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40917e:	e519      	b.n	408bb4 <_vfiprintf_r+0x57c>
  409180:	46cb      	mov	fp, r9
  409182:	f7ff bbab 	b.w	4088dc <_vfiprintf_r+0x2a4>
  409186:	252d      	movs	r5, #45	; 0x2d
  409188:	4276      	negs	r6, r6
  40918a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40918e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409192:	2201      	movs	r2, #1
  409194:	f7ff bb88 	b.w	4088a8 <_vfiprintf_r+0x270>
  409198:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40919a:	b9b3      	cbnz	r3, 4091ca <_vfiprintf_r+0xb92>
  40919c:	4611      	mov	r1, r2
  40919e:	2001      	movs	r0, #1
  4091a0:	46ca      	mov	sl, r9
  4091a2:	e5f2      	b.n	408d8a <_vfiprintf_r+0x752>
  4091a4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4091a8:	f001 fdcc 	bl	40ad44 <__retarget_lock_release_recursive>
  4091ac:	f04f 33ff 	mov.w	r3, #4294967295
  4091b0:	9303      	str	r3, [sp, #12]
  4091b2:	f7ff bb50 	b.w	408856 <_vfiprintf_r+0x21e>
  4091b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4091b8:	9904      	ldr	r1, [sp, #16]
  4091ba:	9806      	ldr	r0, [sp, #24]
  4091bc:	f7ff f9fc 	bl	4085b8 <__sprint_r.part.0>
  4091c0:	2800      	cmp	r0, #0
  4091c2:	f47f aeeb 	bne.w	408f9c <_vfiprintf_r+0x964>
  4091c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4091c8:	e6a9      	b.n	408f1e <_vfiprintf_r+0x8e6>
  4091ca:	ab0e      	add	r3, sp, #56	; 0x38
  4091cc:	2202      	movs	r2, #2
  4091ce:	931c      	str	r3, [sp, #112]	; 0x70
  4091d0:	921d      	str	r2, [sp, #116]	; 0x74
  4091d2:	2001      	movs	r0, #1
  4091d4:	46ca      	mov	sl, r9
  4091d6:	e5d0      	b.n	408d7a <_vfiprintf_r+0x742>
  4091d8:	aa0f      	add	r2, sp, #60	; 0x3c
  4091da:	9904      	ldr	r1, [sp, #16]
  4091dc:	9806      	ldr	r0, [sp, #24]
  4091de:	f7ff f9eb 	bl	4085b8 <__sprint_r.part.0>
  4091e2:	2800      	cmp	r0, #0
  4091e4:	f47f aeda 	bne.w	408f9c <_vfiprintf_r+0x964>
  4091e8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4091ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4091ec:	1c48      	adds	r0, r1, #1
  4091ee:	46ca      	mov	sl, r9
  4091f0:	e5a4      	b.n	408d3c <_vfiprintf_r+0x704>
  4091f2:	9a07      	ldr	r2, [sp, #28]
  4091f4:	9903      	ldr	r1, [sp, #12]
  4091f6:	6813      	ldr	r3, [r2, #0]
  4091f8:	17cd      	asrs	r5, r1, #31
  4091fa:	4608      	mov	r0, r1
  4091fc:	3204      	adds	r2, #4
  4091fe:	4629      	mov	r1, r5
  409200:	9207      	str	r2, [sp, #28]
  409202:	e9c3 0100 	strd	r0, r1, [r3]
  409206:	f7ff ba54 	b.w	4086b2 <_vfiprintf_r+0x7a>
  40920a:	4658      	mov	r0, fp
  40920c:	9607      	str	r6, [sp, #28]
  40920e:	9302      	str	r3, [sp, #8]
  409210:	f7fd ff36 	bl	407080 <strlen>
  409214:	2400      	movs	r4, #0
  409216:	9005      	str	r0, [sp, #20]
  409218:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40921c:	f7ff bb5e 	b.w	4088dc <_vfiprintf_r+0x2a4>
  409220:	aa0f      	add	r2, sp, #60	; 0x3c
  409222:	9904      	ldr	r1, [sp, #16]
  409224:	9806      	ldr	r0, [sp, #24]
  409226:	f7ff f9c7 	bl	4085b8 <__sprint_r.part.0>
  40922a:	2800      	cmp	r0, #0
  40922c:	f47f aeb6 	bne.w	408f9c <_vfiprintf_r+0x964>
  409230:	9910      	ldr	r1, [sp, #64]	; 0x40
  409232:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409234:	1c48      	adds	r0, r1, #1
  409236:	46ca      	mov	sl, r9
  409238:	e5a7      	b.n	408d8a <_vfiprintf_r+0x752>
  40923a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40923c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40923e:	4e20      	ldr	r6, [pc, #128]	; (4092c0 <_vfiprintf_r+0xc88>)
  409240:	3101      	adds	r1, #1
  409242:	f7ff bb90 	b.w	408966 <_vfiprintf_r+0x32e>
  409246:	2c06      	cmp	r4, #6
  409248:	bf28      	it	cs
  40924a:	2406      	movcs	r4, #6
  40924c:	9405      	str	r4, [sp, #20]
  40924e:	9607      	str	r6, [sp, #28]
  409250:	9401      	str	r4, [sp, #4]
  409252:	f8df b070 	ldr.w	fp, [pc, #112]	; 4092c4 <_vfiprintf_r+0xc8c>
  409256:	e4d5      	b.n	408c04 <_vfiprintf_r+0x5cc>
  409258:	9810      	ldr	r0, [sp, #64]	; 0x40
  40925a:	4e19      	ldr	r6, [pc, #100]	; (4092c0 <_vfiprintf_r+0xc88>)
  40925c:	3001      	adds	r0, #1
  40925e:	e603      	b.n	408e68 <_vfiprintf_r+0x830>
  409260:	9405      	str	r4, [sp, #20]
  409262:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409266:	9607      	str	r6, [sp, #28]
  409268:	9302      	str	r3, [sp, #8]
  40926a:	4604      	mov	r4, r0
  40926c:	f7ff bb36 	b.w	4088dc <_vfiprintf_r+0x2a4>
  409270:	4686      	mov	lr, r0
  409272:	f7ff bbce 	b.w	408a12 <_vfiprintf_r+0x3da>
  409276:	9806      	ldr	r0, [sp, #24]
  409278:	aa0f      	add	r2, sp, #60	; 0x3c
  40927a:	4659      	mov	r1, fp
  40927c:	f7ff f99c 	bl	4085b8 <__sprint_r.part.0>
  409280:	2800      	cmp	r0, #0
  409282:	f43f ae24 	beq.w	408ece <_vfiprintf_r+0x896>
  409286:	e624      	b.n	408ed2 <_vfiprintf_r+0x89a>
  409288:	9907      	ldr	r1, [sp, #28]
  40928a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40928e:	680c      	ldr	r4, [r1, #0]
  409290:	3104      	adds	r1, #4
  409292:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  409296:	46b8      	mov	r8, r7
  409298:	9107      	str	r1, [sp, #28]
  40929a:	f7ff ba3f 	b.w	40871c <_vfiprintf_r+0xe4>
  40929e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4092a2:	e43c      	b.n	408b1e <_vfiprintf_r+0x4e6>
  4092a4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4092a8:	e521      	b.n	408cee <_vfiprintf_r+0x6b6>
  4092aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4092ae:	f7ff bbf4 	b.w	408a9a <_vfiprintf_r+0x462>
  4092b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4092b6:	e491      	b.n	408bdc <_vfiprintf_r+0x5a4>
  4092b8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4092bc:	e469      	b.n	408b92 <_vfiprintf_r+0x55a>
  4092be:	bf00      	nop
  4092c0:	0040d9f4 	.word	0x0040d9f4
  4092c4:	0040d9c8 	.word	0x0040d9c8

004092c8 <__sbprintf>:
  4092c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4092cc:	460c      	mov	r4, r1
  4092ce:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4092d2:	8989      	ldrh	r1, [r1, #12]
  4092d4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4092d6:	89e5      	ldrh	r5, [r4, #14]
  4092d8:	9619      	str	r6, [sp, #100]	; 0x64
  4092da:	f021 0102 	bic.w	r1, r1, #2
  4092de:	4606      	mov	r6, r0
  4092e0:	69e0      	ldr	r0, [r4, #28]
  4092e2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4092e6:	4617      	mov	r7, r2
  4092e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4092ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4092ee:	f8ad 500e 	strh.w	r5, [sp, #14]
  4092f2:	4698      	mov	r8, r3
  4092f4:	ad1a      	add	r5, sp, #104	; 0x68
  4092f6:	2300      	movs	r3, #0
  4092f8:	9007      	str	r0, [sp, #28]
  4092fa:	a816      	add	r0, sp, #88	; 0x58
  4092fc:	9209      	str	r2, [sp, #36]	; 0x24
  4092fe:	9306      	str	r3, [sp, #24]
  409300:	9500      	str	r5, [sp, #0]
  409302:	9504      	str	r5, [sp, #16]
  409304:	9102      	str	r1, [sp, #8]
  409306:	9105      	str	r1, [sp, #20]
  409308:	f001 fd16 	bl	40ad38 <__retarget_lock_init_recursive>
  40930c:	4643      	mov	r3, r8
  40930e:	463a      	mov	r2, r7
  409310:	4669      	mov	r1, sp
  409312:	4630      	mov	r0, r6
  409314:	f7ff f990 	bl	408638 <_vfiprintf_r>
  409318:	1e05      	subs	r5, r0, #0
  40931a:	db07      	blt.n	40932c <__sbprintf+0x64>
  40931c:	4630      	mov	r0, r6
  40931e:	4669      	mov	r1, sp
  409320:	f001 f8e8 	bl	40a4f4 <_fflush_r>
  409324:	2800      	cmp	r0, #0
  409326:	bf18      	it	ne
  409328:	f04f 35ff 	movne.w	r5, #4294967295
  40932c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  409330:	065b      	lsls	r3, r3, #25
  409332:	d503      	bpl.n	40933c <__sbprintf+0x74>
  409334:	89a3      	ldrh	r3, [r4, #12]
  409336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40933a:	81a3      	strh	r3, [r4, #12]
  40933c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40933e:	f001 fcfd 	bl	40ad3c <__retarget_lock_close_recursive>
  409342:	4628      	mov	r0, r5
  409344:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  409348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040934c <__swsetup_r>:
  40934c:	b538      	push	{r3, r4, r5, lr}
  40934e:	4b30      	ldr	r3, [pc, #192]	; (409410 <__swsetup_r+0xc4>)
  409350:	681b      	ldr	r3, [r3, #0]
  409352:	4605      	mov	r5, r0
  409354:	460c      	mov	r4, r1
  409356:	b113      	cbz	r3, 40935e <__swsetup_r+0x12>
  409358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40935a:	2a00      	cmp	r2, #0
  40935c:	d038      	beq.n	4093d0 <__swsetup_r+0x84>
  40935e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409362:	b293      	uxth	r3, r2
  409364:	0718      	lsls	r0, r3, #28
  409366:	d50c      	bpl.n	409382 <__swsetup_r+0x36>
  409368:	6920      	ldr	r0, [r4, #16]
  40936a:	b1a8      	cbz	r0, 409398 <__swsetup_r+0x4c>
  40936c:	f013 0201 	ands.w	r2, r3, #1
  409370:	d01e      	beq.n	4093b0 <__swsetup_r+0x64>
  409372:	6963      	ldr	r3, [r4, #20]
  409374:	2200      	movs	r2, #0
  409376:	425b      	negs	r3, r3
  409378:	61a3      	str	r3, [r4, #24]
  40937a:	60a2      	str	r2, [r4, #8]
  40937c:	b1f0      	cbz	r0, 4093bc <__swsetup_r+0x70>
  40937e:	2000      	movs	r0, #0
  409380:	bd38      	pop	{r3, r4, r5, pc}
  409382:	06d9      	lsls	r1, r3, #27
  409384:	d53c      	bpl.n	409400 <__swsetup_r+0xb4>
  409386:	0758      	lsls	r0, r3, #29
  409388:	d426      	bmi.n	4093d8 <__swsetup_r+0x8c>
  40938a:	6920      	ldr	r0, [r4, #16]
  40938c:	f042 0308 	orr.w	r3, r2, #8
  409390:	81a3      	strh	r3, [r4, #12]
  409392:	b29b      	uxth	r3, r3
  409394:	2800      	cmp	r0, #0
  409396:	d1e9      	bne.n	40936c <__swsetup_r+0x20>
  409398:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40939c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4093a0:	d0e4      	beq.n	40936c <__swsetup_r+0x20>
  4093a2:	4628      	mov	r0, r5
  4093a4:	4621      	mov	r1, r4
  4093a6:	f001 fcfd 	bl	40ada4 <__smakebuf_r>
  4093aa:	89a3      	ldrh	r3, [r4, #12]
  4093ac:	6920      	ldr	r0, [r4, #16]
  4093ae:	e7dd      	b.n	40936c <__swsetup_r+0x20>
  4093b0:	0799      	lsls	r1, r3, #30
  4093b2:	bf58      	it	pl
  4093b4:	6962      	ldrpl	r2, [r4, #20]
  4093b6:	60a2      	str	r2, [r4, #8]
  4093b8:	2800      	cmp	r0, #0
  4093ba:	d1e0      	bne.n	40937e <__swsetup_r+0x32>
  4093bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4093c0:	061a      	lsls	r2, r3, #24
  4093c2:	d5dd      	bpl.n	409380 <__swsetup_r+0x34>
  4093c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4093c8:	81a3      	strh	r3, [r4, #12]
  4093ca:	f04f 30ff 	mov.w	r0, #4294967295
  4093ce:	bd38      	pop	{r3, r4, r5, pc}
  4093d0:	4618      	mov	r0, r3
  4093d2:	f001 f8e7 	bl	40a5a4 <__sinit>
  4093d6:	e7c2      	b.n	40935e <__swsetup_r+0x12>
  4093d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4093da:	b151      	cbz	r1, 4093f2 <__swsetup_r+0xa6>
  4093dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4093e0:	4299      	cmp	r1, r3
  4093e2:	d004      	beq.n	4093ee <__swsetup_r+0xa2>
  4093e4:	4628      	mov	r0, r5
  4093e6:	f001 fa03 	bl	40a7f0 <_free_r>
  4093ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4093ee:	2300      	movs	r3, #0
  4093f0:	6323      	str	r3, [r4, #48]	; 0x30
  4093f2:	2300      	movs	r3, #0
  4093f4:	6920      	ldr	r0, [r4, #16]
  4093f6:	6063      	str	r3, [r4, #4]
  4093f8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4093fc:	6020      	str	r0, [r4, #0]
  4093fe:	e7c5      	b.n	40938c <__swsetup_r+0x40>
  409400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  409404:	2309      	movs	r3, #9
  409406:	602b      	str	r3, [r5, #0]
  409408:	f04f 30ff 	mov.w	r0, #4294967295
  40940c:	81a2      	strh	r2, [r4, #12]
  40940e:	bd38      	pop	{r3, r4, r5, pc}
  409410:	20400040 	.word	0x20400040

00409414 <register_fini>:
  409414:	4b02      	ldr	r3, [pc, #8]	; (409420 <register_fini+0xc>)
  409416:	b113      	cbz	r3, 40941e <register_fini+0xa>
  409418:	4802      	ldr	r0, [pc, #8]	; (409424 <register_fini+0x10>)
  40941a:	f000 b805 	b.w	409428 <atexit>
  40941e:	4770      	bx	lr
  409420:	00000000 	.word	0x00000000
  409424:	0040a615 	.word	0x0040a615

00409428 <atexit>:
  409428:	2300      	movs	r3, #0
  40942a:	4601      	mov	r1, r0
  40942c:	461a      	mov	r2, r3
  40942e:	4618      	mov	r0, r3
  409430:	f002 beb0 	b.w	40c194 <__register_exitproc>

00409434 <quorem>:
  409434:	6902      	ldr	r2, [r0, #16]
  409436:	690b      	ldr	r3, [r1, #16]
  409438:	4293      	cmp	r3, r2
  40943a:	f300 808d 	bgt.w	409558 <quorem+0x124>
  40943e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409442:	f103 38ff 	add.w	r8, r3, #4294967295
  409446:	f101 0714 	add.w	r7, r1, #20
  40944a:	f100 0b14 	add.w	fp, r0, #20
  40944e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  409452:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  409456:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40945a:	b083      	sub	sp, #12
  40945c:	3201      	adds	r2, #1
  40945e:	fbb3 f9f2 	udiv	r9, r3, r2
  409462:	eb0b 0304 	add.w	r3, fp, r4
  409466:	9400      	str	r4, [sp, #0]
  409468:	eb07 0a04 	add.w	sl, r7, r4
  40946c:	9301      	str	r3, [sp, #4]
  40946e:	f1b9 0f00 	cmp.w	r9, #0
  409472:	d039      	beq.n	4094e8 <quorem+0xb4>
  409474:	2500      	movs	r5, #0
  409476:	462e      	mov	r6, r5
  409478:	46bc      	mov	ip, r7
  40947a:	46de      	mov	lr, fp
  40947c:	f85c 4b04 	ldr.w	r4, [ip], #4
  409480:	f8de 3000 	ldr.w	r3, [lr]
  409484:	b2a2      	uxth	r2, r4
  409486:	fb09 5502 	mla	r5, r9, r2, r5
  40948a:	0c22      	lsrs	r2, r4, #16
  40948c:	0c2c      	lsrs	r4, r5, #16
  40948e:	fb09 4202 	mla	r2, r9, r2, r4
  409492:	b2ad      	uxth	r5, r5
  409494:	1b75      	subs	r5, r6, r5
  409496:	b296      	uxth	r6, r2
  409498:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40949c:	fa15 f383 	uxtah	r3, r5, r3
  4094a0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4094a4:	b29b      	uxth	r3, r3
  4094a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4094aa:	45e2      	cmp	sl, ip
  4094ac:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4094b0:	f84e 3b04 	str.w	r3, [lr], #4
  4094b4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4094b8:	d2e0      	bcs.n	40947c <quorem+0x48>
  4094ba:	9b00      	ldr	r3, [sp, #0]
  4094bc:	f85b 3003 	ldr.w	r3, [fp, r3]
  4094c0:	b993      	cbnz	r3, 4094e8 <quorem+0xb4>
  4094c2:	9c01      	ldr	r4, [sp, #4]
  4094c4:	1f23      	subs	r3, r4, #4
  4094c6:	459b      	cmp	fp, r3
  4094c8:	d20c      	bcs.n	4094e4 <quorem+0xb0>
  4094ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4094ce:	b94b      	cbnz	r3, 4094e4 <quorem+0xb0>
  4094d0:	f1a4 0308 	sub.w	r3, r4, #8
  4094d4:	e002      	b.n	4094dc <quorem+0xa8>
  4094d6:	681a      	ldr	r2, [r3, #0]
  4094d8:	3b04      	subs	r3, #4
  4094da:	b91a      	cbnz	r2, 4094e4 <quorem+0xb0>
  4094dc:	459b      	cmp	fp, r3
  4094de:	f108 38ff 	add.w	r8, r8, #4294967295
  4094e2:	d3f8      	bcc.n	4094d6 <quorem+0xa2>
  4094e4:	f8c0 8010 	str.w	r8, [r0, #16]
  4094e8:	4604      	mov	r4, r0
  4094ea:	f002 fa37 	bl	40b95c <__mcmp>
  4094ee:	2800      	cmp	r0, #0
  4094f0:	db2e      	blt.n	409550 <quorem+0x11c>
  4094f2:	f109 0901 	add.w	r9, r9, #1
  4094f6:	465d      	mov	r5, fp
  4094f8:	2300      	movs	r3, #0
  4094fa:	f857 1b04 	ldr.w	r1, [r7], #4
  4094fe:	6828      	ldr	r0, [r5, #0]
  409500:	b28a      	uxth	r2, r1
  409502:	1a9a      	subs	r2, r3, r2
  409504:	0c0b      	lsrs	r3, r1, #16
  409506:	fa12 f280 	uxtah	r2, r2, r0
  40950a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40950e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409512:	b292      	uxth	r2, r2
  409514:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409518:	45ba      	cmp	sl, r7
  40951a:	f845 2b04 	str.w	r2, [r5], #4
  40951e:	ea4f 4323 	mov.w	r3, r3, asr #16
  409522:	d2ea      	bcs.n	4094fa <quorem+0xc6>
  409524:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  409528:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40952c:	b982      	cbnz	r2, 409550 <quorem+0x11c>
  40952e:	1f1a      	subs	r2, r3, #4
  409530:	4593      	cmp	fp, r2
  409532:	d20b      	bcs.n	40954c <quorem+0x118>
  409534:	f853 2c04 	ldr.w	r2, [r3, #-4]
  409538:	b942      	cbnz	r2, 40954c <quorem+0x118>
  40953a:	3b08      	subs	r3, #8
  40953c:	e002      	b.n	409544 <quorem+0x110>
  40953e:	681a      	ldr	r2, [r3, #0]
  409540:	3b04      	subs	r3, #4
  409542:	b91a      	cbnz	r2, 40954c <quorem+0x118>
  409544:	459b      	cmp	fp, r3
  409546:	f108 38ff 	add.w	r8, r8, #4294967295
  40954a:	d3f8      	bcc.n	40953e <quorem+0x10a>
  40954c:	f8c4 8010 	str.w	r8, [r4, #16]
  409550:	4648      	mov	r0, r9
  409552:	b003      	add	sp, #12
  409554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409558:	2000      	movs	r0, #0
  40955a:	4770      	bx	lr
  40955c:	0000      	movs	r0, r0
	...

00409560 <_dtoa_r>:
  409560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409564:	6c01      	ldr	r1, [r0, #64]	; 0x40
  409566:	b09b      	sub	sp, #108	; 0x6c
  409568:	4604      	mov	r4, r0
  40956a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40956c:	4692      	mov	sl, r2
  40956e:	469b      	mov	fp, r3
  409570:	b141      	cbz	r1, 409584 <_dtoa_r+0x24>
  409572:	6c42      	ldr	r2, [r0, #68]	; 0x44
  409574:	604a      	str	r2, [r1, #4]
  409576:	2301      	movs	r3, #1
  409578:	4093      	lsls	r3, r2
  40957a:	608b      	str	r3, [r1, #8]
  40957c:	f002 f816 	bl	40b5ac <_Bfree>
  409580:	2300      	movs	r3, #0
  409582:	6423      	str	r3, [r4, #64]	; 0x40
  409584:	f1bb 0f00 	cmp.w	fp, #0
  409588:	465d      	mov	r5, fp
  40958a:	db35      	blt.n	4095f8 <_dtoa_r+0x98>
  40958c:	2300      	movs	r3, #0
  40958e:	6033      	str	r3, [r6, #0]
  409590:	4b9d      	ldr	r3, [pc, #628]	; (409808 <_dtoa_r+0x2a8>)
  409592:	43ab      	bics	r3, r5
  409594:	d015      	beq.n	4095c2 <_dtoa_r+0x62>
  409596:	4650      	mov	r0, sl
  409598:	4659      	mov	r1, fp
  40959a:	2200      	movs	r2, #0
  40959c:	2300      	movs	r3, #0
  40959e:	f003 fb71 	bl	40cc84 <__aeabi_dcmpeq>
  4095a2:	4680      	mov	r8, r0
  4095a4:	2800      	cmp	r0, #0
  4095a6:	d02d      	beq.n	409604 <_dtoa_r+0xa4>
  4095a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4095aa:	2301      	movs	r3, #1
  4095ac:	6013      	str	r3, [r2, #0]
  4095ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4095b0:	2b00      	cmp	r3, #0
  4095b2:	f000 80bd 	beq.w	409730 <_dtoa_r+0x1d0>
  4095b6:	4895      	ldr	r0, [pc, #596]	; (40980c <_dtoa_r+0x2ac>)
  4095b8:	6018      	str	r0, [r3, #0]
  4095ba:	3801      	subs	r0, #1
  4095bc:	b01b      	add	sp, #108	; 0x6c
  4095be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4095c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4095c4:	f242 730f 	movw	r3, #9999	; 0x270f
  4095c8:	6013      	str	r3, [r2, #0]
  4095ca:	f1ba 0f00 	cmp.w	sl, #0
  4095ce:	d10d      	bne.n	4095ec <_dtoa_r+0x8c>
  4095d0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4095d4:	b955      	cbnz	r5, 4095ec <_dtoa_r+0x8c>
  4095d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4095d8:	488d      	ldr	r0, [pc, #564]	; (409810 <_dtoa_r+0x2b0>)
  4095da:	2b00      	cmp	r3, #0
  4095dc:	d0ee      	beq.n	4095bc <_dtoa_r+0x5c>
  4095de:	f100 0308 	add.w	r3, r0, #8
  4095e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4095e4:	6013      	str	r3, [r2, #0]
  4095e6:	b01b      	add	sp, #108	; 0x6c
  4095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4095ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4095ee:	4889      	ldr	r0, [pc, #548]	; (409814 <_dtoa_r+0x2b4>)
  4095f0:	2b00      	cmp	r3, #0
  4095f2:	d0e3      	beq.n	4095bc <_dtoa_r+0x5c>
  4095f4:	1cc3      	adds	r3, r0, #3
  4095f6:	e7f4      	b.n	4095e2 <_dtoa_r+0x82>
  4095f8:	2301      	movs	r3, #1
  4095fa:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4095fe:	6033      	str	r3, [r6, #0]
  409600:	46ab      	mov	fp, r5
  409602:	e7c5      	b.n	409590 <_dtoa_r+0x30>
  409604:	aa18      	add	r2, sp, #96	; 0x60
  409606:	ab19      	add	r3, sp, #100	; 0x64
  409608:	9201      	str	r2, [sp, #4]
  40960a:	9300      	str	r3, [sp, #0]
  40960c:	4652      	mov	r2, sl
  40960e:	465b      	mov	r3, fp
  409610:	4620      	mov	r0, r4
  409612:	f002 fa43 	bl	40ba9c <__d2b>
  409616:	0d2b      	lsrs	r3, r5, #20
  409618:	4681      	mov	r9, r0
  40961a:	d071      	beq.n	409700 <_dtoa_r+0x1a0>
  40961c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  409620:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  409624:	9f18      	ldr	r7, [sp, #96]	; 0x60
  409626:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40962a:	4650      	mov	r0, sl
  40962c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  409630:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  409634:	2200      	movs	r2, #0
  409636:	4b78      	ldr	r3, [pc, #480]	; (409818 <_dtoa_r+0x2b8>)
  409638:	f002 ff08 	bl	40c44c <__aeabi_dsub>
  40963c:	a36c      	add	r3, pc, #432	; (adr r3, 4097f0 <_dtoa_r+0x290>)
  40963e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409642:	f003 f8b7 	bl	40c7b4 <__aeabi_dmul>
  409646:	a36c      	add	r3, pc, #432	; (adr r3, 4097f8 <_dtoa_r+0x298>)
  409648:	e9d3 2300 	ldrd	r2, r3, [r3]
  40964c:	f002 ff00 	bl	40c450 <__adddf3>
  409650:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409654:	4630      	mov	r0, r6
  409656:	f003 f847 	bl	40c6e8 <__aeabi_i2d>
  40965a:	a369      	add	r3, pc, #420	; (adr r3, 409800 <_dtoa_r+0x2a0>)
  40965c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409660:	f003 f8a8 	bl	40c7b4 <__aeabi_dmul>
  409664:	4602      	mov	r2, r0
  409666:	460b      	mov	r3, r1
  409668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40966c:	f002 fef0 	bl	40c450 <__adddf3>
  409670:	e9cd 0104 	strd	r0, r1, [sp, #16]
  409674:	f003 fb4e 	bl	40cd14 <__aeabi_d2iz>
  409678:	2200      	movs	r2, #0
  40967a:	9002      	str	r0, [sp, #8]
  40967c:	2300      	movs	r3, #0
  40967e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409682:	f003 fb09 	bl	40cc98 <__aeabi_dcmplt>
  409686:	2800      	cmp	r0, #0
  409688:	f040 8173 	bne.w	409972 <_dtoa_r+0x412>
  40968c:	9d02      	ldr	r5, [sp, #8]
  40968e:	2d16      	cmp	r5, #22
  409690:	f200 815d 	bhi.w	40994e <_dtoa_r+0x3ee>
  409694:	4b61      	ldr	r3, [pc, #388]	; (40981c <_dtoa_r+0x2bc>)
  409696:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40969a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40969e:	4652      	mov	r2, sl
  4096a0:	465b      	mov	r3, fp
  4096a2:	f003 fb17 	bl	40ccd4 <__aeabi_dcmpgt>
  4096a6:	2800      	cmp	r0, #0
  4096a8:	f000 81c5 	beq.w	409a36 <_dtoa_r+0x4d6>
  4096ac:	1e6b      	subs	r3, r5, #1
  4096ae:	9302      	str	r3, [sp, #8]
  4096b0:	2300      	movs	r3, #0
  4096b2:	930e      	str	r3, [sp, #56]	; 0x38
  4096b4:	1bbf      	subs	r7, r7, r6
  4096b6:	1e7b      	subs	r3, r7, #1
  4096b8:	9306      	str	r3, [sp, #24]
  4096ba:	f100 8154 	bmi.w	409966 <_dtoa_r+0x406>
  4096be:	2300      	movs	r3, #0
  4096c0:	9308      	str	r3, [sp, #32]
  4096c2:	9b02      	ldr	r3, [sp, #8]
  4096c4:	2b00      	cmp	r3, #0
  4096c6:	f2c0 8145 	blt.w	409954 <_dtoa_r+0x3f4>
  4096ca:	9a06      	ldr	r2, [sp, #24]
  4096cc:	930d      	str	r3, [sp, #52]	; 0x34
  4096ce:	4611      	mov	r1, r2
  4096d0:	4419      	add	r1, r3
  4096d2:	2300      	movs	r3, #0
  4096d4:	9106      	str	r1, [sp, #24]
  4096d6:	930c      	str	r3, [sp, #48]	; 0x30
  4096d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4096da:	2b09      	cmp	r3, #9
  4096dc:	d82a      	bhi.n	409734 <_dtoa_r+0x1d4>
  4096de:	2b05      	cmp	r3, #5
  4096e0:	f340 865b 	ble.w	40a39a <_dtoa_r+0xe3a>
  4096e4:	3b04      	subs	r3, #4
  4096e6:	9324      	str	r3, [sp, #144]	; 0x90
  4096e8:	2500      	movs	r5, #0
  4096ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4096ec:	3b02      	subs	r3, #2
  4096ee:	2b03      	cmp	r3, #3
  4096f0:	f200 8642 	bhi.w	40a378 <_dtoa_r+0xe18>
  4096f4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4096f8:	02c903d4 	.word	0x02c903d4
  4096fc:	046103df 	.word	0x046103df
  409700:	9f18      	ldr	r7, [sp, #96]	; 0x60
  409702:	9e19      	ldr	r6, [sp, #100]	; 0x64
  409704:	443e      	add	r6, r7
  409706:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40970a:	2b20      	cmp	r3, #32
  40970c:	f340 818e 	ble.w	409a2c <_dtoa_r+0x4cc>
  409710:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  409714:	f206 4012 	addw	r0, r6, #1042	; 0x412
  409718:	409d      	lsls	r5, r3
  40971a:	fa2a f000 	lsr.w	r0, sl, r0
  40971e:	4328      	orrs	r0, r5
  409720:	f002 ffd2 	bl	40c6c8 <__aeabi_ui2d>
  409724:	2301      	movs	r3, #1
  409726:	3e01      	subs	r6, #1
  409728:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40972c:	9314      	str	r3, [sp, #80]	; 0x50
  40972e:	e781      	b.n	409634 <_dtoa_r+0xd4>
  409730:	483b      	ldr	r0, [pc, #236]	; (409820 <_dtoa_r+0x2c0>)
  409732:	e743      	b.n	4095bc <_dtoa_r+0x5c>
  409734:	2100      	movs	r1, #0
  409736:	6461      	str	r1, [r4, #68]	; 0x44
  409738:	4620      	mov	r0, r4
  40973a:	9125      	str	r1, [sp, #148]	; 0x94
  40973c:	f001 ff10 	bl	40b560 <_Balloc>
  409740:	f04f 33ff 	mov.w	r3, #4294967295
  409744:	930a      	str	r3, [sp, #40]	; 0x28
  409746:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409748:	930f      	str	r3, [sp, #60]	; 0x3c
  40974a:	2301      	movs	r3, #1
  40974c:	9004      	str	r0, [sp, #16]
  40974e:	6420      	str	r0, [r4, #64]	; 0x40
  409750:	9224      	str	r2, [sp, #144]	; 0x90
  409752:	930b      	str	r3, [sp, #44]	; 0x2c
  409754:	9b19      	ldr	r3, [sp, #100]	; 0x64
  409756:	2b00      	cmp	r3, #0
  409758:	f2c0 80d9 	blt.w	40990e <_dtoa_r+0x3ae>
  40975c:	9a02      	ldr	r2, [sp, #8]
  40975e:	2a0e      	cmp	r2, #14
  409760:	f300 80d5 	bgt.w	40990e <_dtoa_r+0x3ae>
  409764:	4b2d      	ldr	r3, [pc, #180]	; (40981c <_dtoa_r+0x2bc>)
  409766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40976a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40976e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  409772:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409774:	2b00      	cmp	r3, #0
  409776:	f2c0 83ba 	blt.w	409eee <_dtoa_r+0x98e>
  40977a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40977e:	4650      	mov	r0, sl
  409780:	462a      	mov	r2, r5
  409782:	4633      	mov	r3, r6
  409784:	4659      	mov	r1, fp
  409786:	f003 f93f 	bl	40ca08 <__aeabi_ddiv>
  40978a:	f003 fac3 	bl	40cd14 <__aeabi_d2iz>
  40978e:	4680      	mov	r8, r0
  409790:	f002 ffaa 	bl	40c6e8 <__aeabi_i2d>
  409794:	462a      	mov	r2, r5
  409796:	4633      	mov	r3, r6
  409798:	f003 f80c 	bl	40c7b4 <__aeabi_dmul>
  40979c:	460b      	mov	r3, r1
  40979e:	4602      	mov	r2, r0
  4097a0:	4659      	mov	r1, fp
  4097a2:	4650      	mov	r0, sl
  4097a4:	f002 fe52 	bl	40c44c <__aeabi_dsub>
  4097a8:	9d04      	ldr	r5, [sp, #16]
  4097aa:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4097ae:	702b      	strb	r3, [r5, #0]
  4097b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4097b2:	2b01      	cmp	r3, #1
  4097b4:	4606      	mov	r6, r0
  4097b6:	460f      	mov	r7, r1
  4097b8:	f105 0501 	add.w	r5, r5, #1
  4097bc:	d068      	beq.n	409890 <_dtoa_r+0x330>
  4097be:	2200      	movs	r2, #0
  4097c0:	4b18      	ldr	r3, [pc, #96]	; (409824 <_dtoa_r+0x2c4>)
  4097c2:	f002 fff7 	bl	40c7b4 <__aeabi_dmul>
  4097c6:	2200      	movs	r2, #0
  4097c8:	2300      	movs	r3, #0
  4097ca:	4606      	mov	r6, r0
  4097cc:	460f      	mov	r7, r1
  4097ce:	f003 fa59 	bl	40cc84 <__aeabi_dcmpeq>
  4097d2:	2800      	cmp	r0, #0
  4097d4:	f040 8088 	bne.w	4098e8 <_dtoa_r+0x388>
  4097d8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4097dc:	f04f 0a00 	mov.w	sl, #0
  4097e0:	f8df b040 	ldr.w	fp, [pc, #64]	; 409824 <_dtoa_r+0x2c4>
  4097e4:	940c      	str	r4, [sp, #48]	; 0x30
  4097e6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4097ea:	e028      	b.n	40983e <_dtoa_r+0x2de>
  4097ec:	f3af 8000 	nop.w
  4097f0:	636f4361 	.word	0x636f4361
  4097f4:	3fd287a7 	.word	0x3fd287a7
  4097f8:	8b60c8b3 	.word	0x8b60c8b3
  4097fc:	3fc68a28 	.word	0x3fc68a28
  409800:	509f79fb 	.word	0x509f79fb
  409804:	3fd34413 	.word	0x3fd34413
  409808:	7ff00000 	.word	0x7ff00000
  40980c:	0040d9d1 	.word	0x0040d9d1
  409810:	0040da14 	.word	0x0040da14
  409814:	0040da20 	.word	0x0040da20
  409818:	3ff80000 	.word	0x3ff80000
  40981c:	0040da60 	.word	0x0040da60
  409820:	0040d9d0 	.word	0x0040d9d0
  409824:	40240000 	.word	0x40240000
  409828:	f002 ffc4 	bl	40c7b4 <__aeabi_dmul>
  40982c:	2200      	movs	r2, #0
  40982e:	2300      	movs	r3, #0
  409830:	4606      	mov	r6, r0
  409832:	460f      	mov	r7, r1
  409834:	f003 fa26 	bl	40cc84 <__aeabi_dcmpeq>
  409838:	2800      	cmp	r0, #0
  40983a:	f040 83c1 	bne.w	409fc0 <_dtoa_r+0xa60>
  40983e:	4642      	mov	r2, r8
  409840:	464b      	mov	r3, r9
  409842:	4630      	mov	r0, r6
  409844:	4639      	mov	r1, r7
  409846:	f003 f8df 	bl	40ca08 <__aeabi_ddiv>
  40984a:	f003 fa63 	bl	40cd14 <__aeabi_d2iz>
  40984e:	4604      	mov	r4, r0
  409850:	f002 ff4a 	bl	40c6e8 <__aeabi_i2d>
  409854:	4642      	mov	r2, r8
  409856:	464b      	mov	r3, r9
  409858:	f002 ffac 	bl	40c7b4 <__aeabi_dmul>
  40985c:	4602      	mov	r2, r0
  40985e:	460b      	mov	r3, r1
  409860:	4630      	mov	r0, r6
  409862:	4639      	mov	r1, r7
  409864:	f002 fdf2 	bl	40c44c <__aeabi_dsub>
  409868:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40986c:	9e04      	ldr	r6, [sp, #16]
  40986e:	f805 eb01 	strb.w	lr, [r5], #1
  409872:	eba5 0e06 	sub.w	lr, r5, r6
  409876:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  409878:	45b6      	cmp	lr, r6
  40987a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40987e:	4652      	mov	r2, sl
  409880:	465b      	mov	r3, fp
  409882:	d1d1      	bne.n	409828 <_dtoa_r+0x2c8>
  409884:	46a0      	mov	r8, r4
  409886:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40988a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40988c:	4606      	mov	r6, r0
  40988e:	460f      	mov	r7, r1
  409890:	4632      	mov	r2, r6
  409892:	463b      	mov	r3, r7
  409894:	4630      	mov	r0, r6
  409896:	4639      	mov	r1, r7
  409898:	f002 fdda 	bl	40c450 <__adddf3>
  40989c:	4606      	mov	r6, r0
  40989e:	460f      	mov	r7, r1
  4098a0:	4602      	mov	r2, r0
  4098a2:	460b      	mov	r3, r1
  4098a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4098a8:	f003 f9f6 	bl	40cc98 <__aeabi_dcmplt>
  4098ac:	b948      	cbnz	r0, 4098c2 <_dtoa_r+0x362>
  4098ae:	4632      	mov	r2, r6
  4098b0:	463b      	mov	r3, r7
  4098b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4098b6:	f003 f9e5 	bl	40cc84 <__aeabi_dcmpeq>
  4098ba:	b1a8      	cbz	r0, 4098e8 <_dtoa_r+0x388>
  4098bc:	f018 0f01 	tst.w	r8, #1
  4098c0:	d012      	beq.n	4098e8 <_dtoa_r+0x388>
  4098c2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4098c6:	9a04      	ldr	r2, [sp, #16]
  4098c8:	1e6b      	subs	r3, r5, #1
  4098ca:	e004      	b.n	4098d6 <_dtoa_r+0x376>
  4098cc:	429a      	cmp	r2, r3
  4098ce:	f000 8401 	beq.w	40a0d4 <_dtoa_r+0xb74>
  4098d2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4098d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4098da:	f103 0501 	add.w	r5, r3, #1
  4098de:	d0f5      	beq.n	4098cc <_dtoa_r+0x36c>
  4098e0:	f108 0801 	add.w	r8, r8, #1
  4098e4:	f883 8000 	strb.w	r8, [r3]
  4098e8:	4649      	mov	r1, r9
  4098ea:	4620      	mov	r0, r4
  4098ec:	f001 fe5e 	bl	40b5ac <_Bfree>
  4098f0:	2200      	movs	r2, #0
  4098f2:	9b02      	ldr	r3, [sp, #8]
  4098f4:	702a      	strb	r2, [r5, #0]
  4098f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4098f8:	3301      	adds	r3, #1
  4098fa:	6013      	str	r3, [r2, #0]
  4098fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4098fe:	2b00      	cmp	r3, #0
  409900:	f000 839e 	beq.w	40a040 <_dtoa_r+0xae0>
  409904:	9804      	ldr	r0, [sp, #16]
  409906:	601d      	str	r5, [r3, #0]
  409908:	b01b      	add	sp, #108	; 0x6c
  40990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40990e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409910:	2a00      	cmp	r2, #0
  409912:	d03e      	beq.n	409992 <_dtoa_r+0x432>
  409914:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409916:	2a01      	cmp	r2, #1
  409918:	f340 8311 	ble.w	409f3e <_dtoa_r+0x9de>
  40991c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40991e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409920:	1e5f      	subs	r7, r3, #1
  409922:	42ba      	cmp	r2, r7
  409924:	f2c0 838f 	blt.w	40a046 <_dtoa_r+0xae6>
  409928:	1bd7      	subs	r7, r2, r7
  40992a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40992c:	2b00      	cmp	r3, #0
  40992e:	f2c0 848b 	blt.w	40a248 <_dtoa_r+0xce8>
  409932:	9d08      	ldr	r5, [sp, #32]
  409934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409936:	9a08      	ldr	r2, [sp, #32]
  409938:	441a      	add	r2, r3
  40993a:	9208      	str	r2, [sp, #32]
  40993c:	9a06      	ldr	r2, [sp, #24]
  40993e:	2101      	movs	r1, #1
  409940:	441a      	add	r2, r3
  409942:	4620      	mov	r0, r4
  409944:	9206      	str	r2, [sp, #24]
  409946:	f001 fecb 	bl	40b6e0 <__i2b>
  40994a:	4606      	mov	r6, r0
  40994c:	e024      	b.n	409998 <_dtoa_r+0x438>
  40994e:	2301      	movs	r3, #1
  409950:	930e      	str	r3, [sp, #56]	; 0x38
  409952:	e6af      	b.n	4096b4 <_dtoa_r+0x154>
  409954:	9a08      	ldr	r2, [sp, #32]
  409956:	9b02      	ldr	r3, [sp, #8]
  409958:	1ad2      	subs	r2, r2, r3
  40995a:	425b      	negs	r3, r3
  40995c:	930c      	str	r3, [sp, #48]	; 0x30
  40995e:	2300      	movs	r3, #0
  409960:	9208      	str	r2, [sp, #32]
  409962:	930d      	str	r3, [sp, #52]	; 0x34
  409964:	e6b8      	b.n	4096d8 <_dtoa_r+0x178>
  409966:	f1c7 0301 	rsb	r3, r7, #1
  40996a:	9308      	str	r3, [sp, #32]
  40996c:	2300      	movs	r3, #0
  40996e:	9306      	str	r3, [sp, #24]
  409970:	e6a7      	b.n	4096c2 <_dtoa_r+0x162>
  409972:	9d02      	ldr	r5, [sp, #8]
  409974:	4628      	mov	r0, r5
  409976:	f002 feb7 	bl	40c6e8 <__aeabi_i2d>
  40997a:	4602      	mov	r2, r0
  40997c:	460b      	mov	r3, r1
  40997e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409982:	f003 f97f 	bl	40cc84 <__aeabi_dcmpeq>
  409986:	2800      	cmp	r0, #0
  409988:	f47f ae80 	bne.w	40968c <_dtoa_r+0x12c>
  40998c:	1e6b      	subs	r3, r5, #1
  40998e:	9302      	str	r3, [sp, #8]
  409990:	e67c      	b.n	40968c <_dtoa_r+0x12c>
  409992:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409994:	9d08      	ldr	r5, [sp, #32]
  409996:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  409998:	2d00      	cmp	r5, #0
  40999a:	dd0c      	ble.n	4099b6 <_dtoa_r+0x456>
  40999c:	9906      	ldr	r1, [sp, #24]
  40999e:	2900      	cmp	r1, #0
  4099a0:	460b      	mov	r3, r1
  4099a2:	dd08      	ble.n	4099b6 <_dtoa_r+0x456>
  4099a4:	42a9      	cmp	r1, r5
  4099a6:	9a08      	ldr	r2, [sp, #32]
  4099a8:	bfa8      	it	ge
  4099aa:	462b      	movge	r3, r5
  4099ac:	1ad2      	subs	r2, r2, r3
  4099ae:	1aed      	subs	r5, r5, r3
  4099b0:	1acb      	subs	r3, r1, r3
  4099b2:	9208      	str	r2, [sp, #32]
  4099b4:	9306      	str	r3, [sp, #24]
  4099b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4099b8:	b1d3      	cbz	r3, 4099f0 <_dtoa_r+0x490>
  4099ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4099bc:	2b00      	cmp	r3, #0
  4099be:	f000 82b7 	beq.w	409f30 <_dtoa_r+0x9d0>
  4099c2:	2f00      	cmp	r7, #0
  4099c4:	dd10      	ble.n	4099e8 <_dtoa_r+0x488>
  4099c6:	4631      	mov	r1, r6
  4099c8:	463a      	mov	r2, r7
  4099ca:	4620      	mov	r0, r4
  4099cc:	f001 ff24 	bl	40b818 <__pow5mult>
  4099d0:	464a      	mov	r2, r9
  4099d2:	4601      	mov	r1, r0
  4099d4:	4606      	mov	r6, r0
  4099d6:	4620      	mov	r0, r4
  4099d8:	f001 fe8c 	bl	40b6f4 <__multiply>
  4099dc:	4649      	mov	r1, r9
  4099de:	4680      	mov	r8, r0
  4099e0:	4620      	mov	r0, r4
  4099e2:	f001 fde3 	bl	40b5ac <_Bfree>
  4099e6:	46c1      	mov	r9, r8
  4099e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4099ea:	1bda      	subs	r2, r3, r7
  4099ec:	f040 82a1 	bne.w	409f32 <_dtoa_r+0x9d2>
  4099f0:	2101      	movs	r1, #1
  4099f2:	4620      	mov	r0, r4
  4099f4:	f001 fe74 	bl	40b6e0 <__i2b>
  4099f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4099fa:	2b00      	cmp	r3, #0
  4099fc:	4680      	mov	r8, r0
  4099fe:	dd1c      	ble.n	409a3a <_dtoa_r+0x4da>
  409a00:	4601      	mov	r1, r0
  409a02:	461a      	mov	r2, r3
  409a04:	4620      	mov	r0, r4
  409a06:	f001 ff07 	bl	40b818 <__pow5mult>
  409a0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409a0c:	2b01      	cmp	r3, #1
  409a0e:	4680      	mov	r8, r0
  409a10:	f340 8254 	ble.w	409ebc <_dtoa_r+0x95c>
  409a14:	2300      	movs	r3, #0
  409a16:	930c      	str	r3, [sp, #48]	; 0x30
  409a18:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409a1c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  409a20:	6918      	ldr	r0, [r3, #16]
  409a22:	f001 fe0d 	bl	40b640 <__hi0bits>
  409a26:	f1c0 0020 	rsb	r0, r0, #32
  409a2a:	e010      	b.n	409a4e <_dtoa_r+0x4ee>
  409a2c:	f1c3 0520 	rsb	r5, r3, #32
  409a30:	fa0a f005 	lsl.w	r0, sl, r5
  409a34:	e674      	b.n	409720 <_dtoa_r+0x1c0>
  409a36:	900e      	str	r0, [sp, #56]	; 0x38
  409a38:	e63c      	b.n	4096b4 <_dtoa_r+0x154>
  409a3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409a3c:	2b01      	cmp	r3, #1
  409a3e:	f340 8287 	ble.w	409f50 <_dtoa_r+0x9f0>
  409a42:	2300      	movs	r3, #0
  409a44:	930c      	str	r3, [sp, #48]	; 0x30
  409a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409a48:	2001      	movs	r0, #1
  409a4a:	2b00      	cmp	r3, #0
  409a4c:	d1e4      	bne.n	409a18 <_dtoa_r+0x4b8>
  409a4e:	9a06      	ldr	r2, [sp, #24]
  409a50:	4410      	add	r0, r2
  409a52:	f010 001f 	ands.w	r0, r0, #31
  409a56:	f000 80a1 	beq.w	409b9c <_dtoa_r+0x63c>
  409a5a:	f1c0 0320 	rsb	r3, r0, #32
  409a5e:	2b04      	cmp	r3, #4
  409a60:	f340 849e 	ble.w	40a3a0 <_dtoa_r+0xe40>
  409a64:	9b08      	ldr	r3, [sp, #32]
  409a66:	f1c0 001c 	rsb	r0, r0, #28
  409a6a:	4403      	add	r3, r0
  409a6c:	9308      	str	r3, [sp, #32]
  409a6e:	4613      	mov	r3, r2
  409a70:	4403      	add	r3, r0
  409a72:	4405      	add	r5, r0
  409a74:	9306      	str	r3, [sp, #24]
  409a76:	9b08      	ldr	r3, [sp, #32]
  409a78:	2b00      	cmp	r3, #0
  409a7a:	dd05      	ble.n	409a88 <_dtoa_r+0x528>
  409a7c:	4649      	mov	r1, r9
  409a7e:	461a      	mov	r2, r3
  409a80:	4620      	mov	r0, r4
  409a82:	f001 ff19 	bl	40b8b8 <__lshift>
  409a86:	4681      	mov	r9, r0
  409a88:	9b06      	ldr	r3, [sp, #24]
  409a8a:	2b00      	cmp	r3, #0
  409a8c:	dd05      	ble.n	409a9a <_dtoa_r+0x53a>
  409a8e:	4641      	mov	r1, r8
  409a90:	461a      	mov	r2, r3
  409a92:	4620      	mov	r0, r4
  409a94:	f001 ff10 	bl	40b8b8 <__lshift>
  409a98:	4680      	mov	r8, r0
  409a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409a9c:	2b00      	cmp	r3, #0
  409a9e:	f040 8086 	bne.w	409bae <_dtoa_r+0x64e>
  409aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409aa4:	2b00      	cmp	r3, #0
  409aa6:	f340 8266 	ble.w	409f76 <_dtoa_r+0xa16>
  409aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409aac:	2b00      	cmp	r3, #0
  409aae:	f000 8098 	beq.w	409be2 <_dtoa_r+0x682>
  409ab2:	2d00      	cmp	r5, #0
  409ab4:	dd05      	ble.n	409ac2 <_dtoa_r+0x562>
  409ab6:	4631      	mov	r1, r6
  409ab8:	462a      	mov	r2, r5
  409aba:	4620      	mov	r0, r4
  409abc:	f001 fefc 	bl	40b8b8 <__lshift>
  409ac0:	4606      	mov	r6, r0
  409ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409ac4:	2b00      	cmp	r3, #0
  409ac6:	f040 8337 	bne.w	40a138 <_dtoa_r+0xbd8>
  409aca:	9606      	str	r6, [sp, #24]
  409acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409ace:	9a04      	ldr	r2, [sp, #16]
  409ad0:	f8dd b018 	ldr.w	fp, [sp, #24]
  409ad4:	3b01      	subs	r3, #1
  409ad6:	18d3      	adds	r3, r2, r3
  409ad8:	930b      	str	r3, [sp, #44]	; 0x2c
  409ada:	f00a 0301 	and.w	r3, sl, #1
  409ade:	930c      	str	r3, [sp, #48]	; 0x30
  409ae0:	4617      	mov	r7, r2
  409ae2:	46c2      	mov	sl, r8
  409ae4:	4651      	mov	r1, sl
  409ae6:	4648      	mov	r0, r9
  409ae8:	f7ff fca4 	bl	409434 <quorem>
  409aec:	4631      	mov	r1, r6
  409aee:	4605      	mov	r5, r0
  409af0:	4648      	mov	r0, r9
  409af2:	f001 ff33 	bl	40b95c <__mcmp>
  409af6:	465a      	mov	r2, fp
  409af8:	900a      	str	r0, [sp, #40]	; 0x28
  409afa:	4651      	mov	r1, sl
  409afc:	4620      	mov	r0, r4
  409afe:	f001 ff49 	bl	40b994 <__mdiff>
  409b02:	68c2      	ldr	r2, [r0, #12]
  409b04:	4680      	mov	r8, r0
  409b06:	f105 0330 	add.w	r3, r5, #48	; 0x30
  409b0a:	2a00      	cmp	r2, #0
  409b0c:	f040 822b 	bne.w	409f66 <_dtoa_r+0xa06>
  409b10:	4601      	mov	r1, r0
  409b12:	4648      	mov	r0, r9
  409b14:	9308      	str	r3, [sp, #32]
  409b16:	f001 ff21 	bl	40b95c <__mcmp>
  409b1a:	4641      	mov	r1, r8
  409b1c:	9006      	str	r0, [sp, #24]
  409b1e:	4620      	mov	r0, r4
  409b20:	f001 fd44 	bl	40b5ac <_Bfree>
  409b24:	9a06      	ldr	r2, [sp, #24]
  409b26:	9b08      	ldr	r3, [sp, #32]
  409b28:	b932      	cbnz	r2, 409b38 <_dtoa_r+0x5d8>
  409b2a:	9924      	ldr	r1, [sp, #144]	; 0x90
  409b2c:	b921      	cbnz	r1, 409b38 <_dtoa_r+0x5d8>
  409b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409b30:	2a00      	cmp	r2, #0
  409b32:	f000 83ef 	beq.w	40a314 <_dtoa_r+0xdb4>
  409b36:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409b38:	990a      	ldr	r1, [sp, #40]	; 0x28
  409b3a:	2900      	cmp	r1, #0
  409b3c:	f2c0 829f 	blt.w	40a07e <_dtoa_r+0xb1e>
  409b40:	d105      	bne.n	409b4e <_dtoa_r+0x5ee>
  409b42:	9924      	ldr	r1, [sp, #144]	; 0x90
  409b44:	b919      	cbnz	r1, 409b4e <_dtoa_r+0x5ee>
  409b46:	990c      	ldr	r1, [sp, #48]	; 0x30
  409b48:	2900      	cmp	r1, #0
  409b4a:	f000 8298 	beq.w	40a07e <_dtoa_r+0xb1e>
  409b4e:	2a00      	cmp	r2, #0
  409b50:	f300 8306 	bgt.w	40a160 <_dtoa_r+0xc00>
  409b54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409b56:	703b      	strb	r3, [r7, #0]
  409b58:	f107 0801 	add.w	r8, r7, #1
  409b5c:	4297      	cmp	r7, r2
  409b5e:	4645      	mov	r5, r8
  409b60:	f000 830c 	beq.w	40a17c <_dtoa_r+0xc1c>
  409b64:	4649      	mov	r1, r9
  409b66:	2300      	movs	r3, #0
  409b68:	220a      	movs	r2, #10
  409b6a:	4620      	mov	r0, r4
  409b6c:	f001 fd28 	bl	40b5c0 <__multadd>
  409b70:	455e      	cmp	r6, fp
  409b72:	4681      	mov	r9, r0
  409b74:	4631      	mov	r1, r6
  409b76:	f04f 0300 	mov.w	r3, #0
  409b7a:	f04f 020a 	mov.w	r2, #10
  409b7e:	4620      	mov	r0, r4
  409b80:	f000 81eb 	beq.w	409f5a <_dtoa_r+0x9fa>
  409b84:	f001 fd1c 	bl	40b5c0 <__multadd>
  409b88:	4659      	mov	r1, fp
  409b8a:	4606      	mov	r6, r0
  409b8c:	2300      	movs	r3, #0
  409b8e:	220a      	movs	r2, #10
  409b90:	4620      	mov	r0, r4
  409b92:	f001 fd15 	bl	40b5c0 <__multadd>
  409b96:	4647      	mov	r7, r8
  409b98:	4683      	mov	fp, r0
  409b9a:	e7a3      	b.n	409ae4 <_dtoa_r+0x584>
  409b9c:	201c      	movs	r0, #28
  409b9e:	9b08      	ldr	r3, [sp, #32]
  409ba0:	4403      	add	r3, r0
  409ba2:	9308      	str	r3, [sp, #32]
  409ba4:	9b06      	ldr	r3, [sp, #24]
  409ba6:	4403      	add	r3, r0
  409ba8:	4405      	add	r5, r0
  409baa:	9306      	str	r3, [sp, #24]
  409bac:	e763      	b.n	409a76 <_dtoa_r+0x516>
  409bae:	4641      	mov	r1, r8
  409bb0:	4648      	mov	r0, r9
  409bb2:	f001 fed3 	bl	40b95c <__mcmp>
  409bb6:	2800      	cmp	r0, #0
  409bb8:	f6bf af73 	bge.w	409aa2 <_dtoa_r+0x542>
  409bbc:	9f02      	ldr	r7, [sp, #8]
  409bbe:	4649      	mov	r1, r9
  409bc0:	2300      	movs	r3, #0
  409bc2:	220a      	movs	r2, #10
  409bc4:	4620      	mov	r0, r4
  409bc6:	3f01      	subs	r7, #1
  409bc8:	9702      	str	r7, [sp, #8]
  409bca:	f001 fcf9 	bl	40b5c0 <__multadd>
  409bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409bd0:	4681      	mov	r9, r0
  409bd2:	2b00      	cmp	r3, #0
  409bd4:	f040 83b6 	bne.w	40a344 <_dtoa_r+0xde4>
  409bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409bda:	2b00      	cmp	r3, #0
  409bdc:	f340 83bf 	ble.w	40a35e <_dtoa_r+0xdfe>
  409be0:	930a      	str	r3, [sp, #40]	; 0x28
  409be2:	f8dd b010 	ldr.w	fp, [sp, #16]
  409be6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409be8:	465d      	mov	r5, fp
  409bea:	e002      	b.n	409bf2 <_dtoa_r+0x692>
  409bec:	f001 fce8 	bl	40b5c0 <__multadd>
  409bf0:	4681      	mov	r9, r0
  409bf2:	4641      	mov	r1, r8
  409bf4:	4648      	mov	r0, r9
  409bf6:	f7ff fc1d 	bl	409434 <quorem>
  409bfa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  409bfe:	f805 ab01 	strb.w	sl, [r5], #1
  409c02:	eba5 030b 	sub.w	r3, r5, fp
  409c06:	42bb      	cmp	r3, r7
  409c08:	f04f 020a 	mov.w	r2, #10
  409c0c:	f04f 0300 	mov.w	r3, #0
  409c10:	4649      	mov	r1, r9
  409c12:	4620      	mov	r0, r4
  409c14:	dbea      	blt.n	409bec <_dtoa_r+0x68c>
  409c16:	9b04      	ldr	r3, [sp, #16]
  409c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409c1a:	2a01      	cmp	r2, #1
  409c1c:	bfac      	ite	ge
  409c1e:	189b      	addge	r3, r3, r2
  409c20:	3301      	addlt	r3, #1
  409c22:	461d      	mov	r5, r3
  409c24:	f04f 0b00 	mov.w	fp, #0
  409c28:	4649      	mov	r1, r9
  409c2a:	2201      	movs	r2, #1
  409c2c:	4620      	mov	r0, r4
  409c2e:	f001 fe43 	bl	40b8b8 <__lshift>
  409c32:	4641      	mov	r1, r8
  409c34:	4681      	mov	r9, r0
  409c36:	f001 fe91 	bl	40b95c <__mcmp>
  409c3a:	2800      	cmp	r0, #0
  409c3c:	f340 823d 	ble.w	40a0ba <_dtoa_r+0xb5a>
  409c40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  409c44:	9904      	ldr	r1, [sp, #16]
  409c46:	1e6b      	subs	r3, r5, #1
  409c48:	e004      	b.n	409c54 <_dtoa_r+0x6f4>
  409c4a:	428b      	cmp	r3, r1
  409c4c:	f000 81ae 	beq.w	409fac <_dtoa_r+0xa4c>
  409c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  409c54:	2a39      	cmp	r2, #57	; 0x39
  409c56:	f103 0501 	add.w	r5, r3, #1
  409c5a:	d0f6      	beq.n	409c4a <_dtoa_r+0x6ea>
  409c5c:	3201      	adds	r2, #1
  409c5e:	701a      	strb	r2, [r3, #0]
  409c60:	4641      	mov	r1, r8
  409c62:	4620      	mov	r0, r4
  409c64:	f001 fca2 	bl	40b5ac <_Bfree>
  409c68:	2e00      	cmp	r6, #0
  409c6a:	f43f ae3d 	beq.w	4098e8 <_dtoa_r+0x388>
  409c6e:	f1bb 0f00 	cmp.w	fp, #0
  409c72:	d005      	beq.n	409c80 <_dtoa_r+0x720>
  409c74:	45b3      	cmp	fp, r6
  409c76:	d003      	beq.n	409c80 <_dtoa_r+0x720>
  409c78:	4659      	mov	r1, fp
  409c7a:	4620      	mov	r0, r4
  409c7c:	f001 fc96 	bl	40b5ac <_Bfree>
  409c80:	4631      	mov	r1, r6
  409c82:	4620      	mov	r0, r4
  409c84:	f001 fc92 	bl	40b5ac <_Bfree>
  409c88:	e62e      	b.n	4098e8 <_dtoa_r+0x388>
  409c8a:	2300      	movs	r3, #0
  409c8c:	930b      	str	r3, [sp, #44]	; 0x2c
  409c8e:	9b02      	ldr	r3, [sp, #8]
  409c90:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409c92:	4413      	add	r3, r2
  409c94:	930f      	str	r3, [sp, #60]	; 0x3c
  409c96:	3301      	adds	r3, #1
  409c98:	2b01      	cmp	r3, #1
  409c9a:	461f      	mov	r7, r3
  409c9c:	461e      	mov	r6, r3
  409c9e:	930a      	str	r3, [sp, #40]	; 0x28
  409ca0:	bfb8      	it	lt
  409ca2:	2701      	movlt	r7, #1
  409ca4:	2100      	movs	r1, #0
  409ca6:	2f17      	cmp	r7, #23
  409ca8:	6461      	str	r1, [r4, #68]	; 0x44
  409caa:	d90a      	bls.n	409cc2 <_dtoa_r+0x762>
  409cac:	2201      	movs	r2, #1
  409cae:	2304      	movs	r3, #4
  409cb0:	005b      	lsls	r3, r3, #1
  409cb2:	f103 0014 	add.w	r0, r3, #20
  409cb6:	4287      	cmp	r7, r0
  409cb8:	4611      	mov	r1, r2
  409cba:	f102 0201 	add.w	r2, r2, #1
  409cbe:	d2f7      	bcs.n	409cb0 <_dtoa_r+0x750>
  409cc0:	6461      	str	r1, [r4, #68]	; 0x44
  409cc2:	4620      	mov	r0, r4
  409cc4:	f001 fc4c 	bl	40b560 <_Balloc>
  409cc8:	2e0e      	cmp	r6, #14
  409cca:	9004      	str	r0, [sp, #16]
  409ccc:	6420      	str	r0, [r4, #64]	; 0x40
  409cce:	f63f ad41 	bhi.w	409754 <_dtoa_r+0x1f4>
  409cd2:	2d00      	cmp	r5, #0
  409cd4:	f43f ad3e 	beq.w	409754 <_dtoa_r+0x1f4>
  409cd8:	9902      	ldr	r1, [sp, #8]
  409cda:	2900      	cmp	r1, #0
  409cdc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  409ce0:	f340 8202 	ble.w	40a0e8 <_dtoa_r+0xb88>
  409ce4:	4bb8      	ldr	r3, [pc, #736]	; (409fc8 <_dtoa_r+0xa68>)
  409ce6:	f001 020f 	and.w	r2, r1, #15
  409cea:	110d      	asrs	r5, r1, #4
  409cec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409cf0:	06e9      	lsls	r1, r5, #27
  409cf2:	e9d3 6700 	ldrd	r6, r7, [r3]
  409cf6:	f140 81ae 	bpl.w	40a056 <_dtoa_r+0xaf6>
  409cfa:	4bb4      	ldr	r3, [pc, #720]	; (409fcc <_dtoa_r+0xa6c>)
  409cfc:	4650      	mov	r0, sl
  409cfe:	4659      	mov	r1, fp
  409d00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  409d04:	f002 fe80 	bl	40ca08 <__aeabi_ddiv>
  409d08:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  409d0c:	f005 050f 	and.w	r5, r5, #15
  409d10:	f04f 0a03 	mov.w	sl, #3
  409d14:	b18d      	cbz	r5, 409d3a <_dtoa_r+0x7da>
  409d16:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 409fcc <_dtoa_r+0xa6c>
  409d1a:	07ea      	lsls	r2, r5, #31
  409d1c:	d509      	bpl.n	409d32 <_dtoa_r+0x7d2>
  409d1e:	4630      	mov	r0, r6
  409d20:	4639      	mov	r1, r7
  409d22:	e9d8 2300 	ldrd	r2, r3, [r8]
  409d26:	f002 fd45 	bl	40c7b4 <__aeabi_dmul>
  409d2a:	f10a 0a01 	add.w	sl, sl, #1
  409d2e:	4606      	mov	r6, r0
  409d30:	460f      	mov	r7, r1
  409d32:	106d      	asrs	r5, r5, #1
  409d34:	f108 0808 	add.w	r8, r8, #8
  409d38:	d1ef      	bne.n	409d1a <_dtoa_r+0x7ba>
  409d3a:	463b      	mov	r3, r7
  409d3c:	4632      	mov	r2, r6
  409d3e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  409d42:	f002 fe61 	bl	40ca08 <__aeabi_ddiv>
  409d46:	4607      	mov	r7, r0
  409d48:	4688      	mov	r8, r1
  409d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409d4c:	b143      	cbz	r3, 409d60 <_dtoa_r+0x800>
  409d4e:	2200      	movs	r2, #0
  409d50:	4b9f      	ldr	r3, [pc, #636]	; (409fd0 <_dtoa_r+0xa70>)
  409d52:	4638      	mov	r0, r7
  409d54:	4641      	mov	r1, r8
  409d56:	f002 ff9f 	bl	40cc98 <__aeabi_dcmplt>
  409d5a:	2800      	cmp	r0, #0
  409d5c:	f040 8286 	bne.w	40a26c <_dtoa_r+0xd0c>
  409d60:	4650      	mov	r0, sl
  409d62:	f002 fcc1 	bl	40c6e8 <__aeabi_i2d>
  409d66:	463a      	mov	r2, r7
  409d68:	4643      	mov	r3, r8
  409d6a:	f002 fd23 	bl	40c7b4 <__aeabi_dmul>
  409d6e:	4b99      	ldr	r3, [pc, #612]	; (409fd4 <_dtoa_r+0xa74>)
  409d70:	2200      	movs	r2, #0
  409d72:	f002 fb6d 	bl	40c450 <__adddf3>
  409d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409d78:	4605      	mov	r5, r0
  409d7a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409d7e:	2b00      	cmp	r3, #0
  409d80:	f000 813e 	beq.w	40a000 <_dtoa_r+0xaa0>
  409d84:	9b02      	ldr	r3, [sp, #8]
  409d86:	9315      	str	r3, [sp, #84]	; 0x54
  409d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409d8a:	9312      	str	r3, [sp, #72]	; 0x48
  409d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409d8e:	2b00      	cmp	r3, #0
  409d90:	f000 81fa 	beq.w	40a188 <_dtoa_r+0xc28>
  409d94:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409d96:	4b8c      	ldr	r3, [pc, #560]	; (409fc8 <_dtoa_r+0xa68>)
  409d98:	498f      	ldr	r1, [pc, #572]	; (409fd8 <_dtoa_r+0xa78>)
  409d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409d9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  409da2:	2000      	movs	r0, #0
  409da4:	f002 fe30 	bl	40ca08 <__aeabi_ddiv>
  409da8:	462a      	mov	r2, r5
  409daa:	4633      	mov	r3, r6
  409dac:	f002 fb4e 	bl	40c44c <__aeabi_dsub>
  409db0:	4682      	mov	sl, r0
  409db2:	468b      	mov	fp, r1
  409db4:	4638      	mov	r0, r7
  409db6:	4641      	mov	r1, r8
  409db8:	f002 ffac 	bl	40cd14 <__aeabi_d2iz>
  409dbc:	4605      	mov	r5, r0
  409dbe:	f002 fc93 	bl	40c6e8 <__aeabi_i2d>
  409dc2:	4602      	mov	r2, r0
  409dc4:	460b      	mov	r3, r1
  409dc6:	4638      	mov	r0, r7
  409dc8:	4641      	mov	r1, r8
  409dca:	f002 fb3f 	bl	40c44c <__aeabi_dsub>
  409dce:	3530      	adds	r5, #48	; 0x30
  409dd0:	fa5f f885 	uxtb.w	r8, r5
  409dd4:	9d04      	ldr	r5, [sp, #16]
  409dd6:	4606      	mov	r6, r0
  409dd8:	460f      	mov	r7, r1
  409dda:	f885 8000 	strb.w	r8, [r5]
  409dde:	4602      	mov	r2, r0
  409de0:	460b      	mov	r3, r1
  409de2:	4650      	mov	r0, sl
  409de4:	4659      	mov	r1, fp
  409de6:	3501      	adds	r5, #1
  409de8:	f002 ff74 	bl	40ccd4 <__aeabi_dcmpgt>
  409dec:	2800      	cmp	r0, #0
  409dee:	d154      	bne.n	409e9a <_dtoa_r+0x93a>
  409df0:	4632      	mov	r2, r6
  409df2:	463b      	mov	r3, r7
  409df4:	2000      	movs	r0, #0
  409df6:	4976      	ldr	r1, [pc, #472]	; (409fd0 <_dtoa_r+0xa70>)
  409df8:	f002 fb28 	bl	40c44c <__aeabi_dsub>
  409dfc:	4602      	mov	r2, r0
  409dfe:	460b      	mov	r3, r1
  409e00:	4650      	mov	r0, sl
  409e02:	4659      	mov	r1, fp
  409e04:	f002 ff66 	bl	40ccd4 <__aeabi_dcmpgt>
  409e08:	2800      	cmp	r0, #0
  409e0a:	f040 8270 	bne.w	40a2ee <_dtoa_r+0xd8e>
  409e0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409e10:	2a01      	cmp	r2, #1
  409e12:	f000 8111 	beq.w	40a038 <_dtoa_r+0xad8>
  409e16:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409e18:	9a04      	ldr	r2, [sp, #16]
  409e1a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409e1e:	4413      	add	r3, r2
  409e20:	4699      	mov	r9, r3
  409e22:	e00d      	b.n	409e40 <_dtoa_r+0x8e0>
  409e24:	2000      	movs	r0, #0
  409e26:	496a      	ldr	r1, [pc, #424]	; (409fd0 <_dtoa_r+0xa70>)
  409e28:	f002 fb10 	bl	40c44c <__aeabi_dsub>
  409e2c:	4652      	mov	r2, sl
  409e2e:	465b      	mov	r3, fp
  409e30:	f002 ff32 	bl	40cc98 <__aeabi_dcmplt>
  409e34:	2800      	cmp	r0, #0
  409e36:	f040 8258 	bne.w	40a2ea <_dtoa_r+0xd8a>
  409e3a:	454d      	cmp	r5, r9
  409e3c:	f000 80fa 	beq.w	40a034 <_dtoa_r+0xad4>
  409e40:	4650      	mov	r0, sl
  409e42:	4659      	mov	r1, fp
  409e44:	2200      	movs	r2, #0
  409e46:	4b65      	ldr	r3, [pc, #404]	; (409fdc <_dtoa_r+0xa7c>)
  409e48:	f002 fcb4 	bl	40c7b4 <__aeabi_dmul>
  409e4c:	2200      	movs	r2, #0
  409e4e:	4b63      	ldr	r3, [pc, #396]	; (409fdc <_dtoa_r+0xa7c>)
  409e50:	4682      	mov	sl, r0
  409e52:	468b      	mov	fp, r1
  409e54:	4630      	mov	r0, r6
  409e56:	4639      	mov	r1, r7
  409e58:	f002 fcac 	bl	40c7b4 <__aeabi_dmul>
  409e5c:	460f      	mov	r7, r1
  409e5e:	4606      	mov	r6, r0
  409e60:	f002 ff58 	bl	40cd14 <__aeabi_d2iz>
  409e64:	4680      	mov	r8, r0
  409e66:	f002 fc3f 	bl	40c6e8 <__aeabi_i2d>
  409e6a:	4602      	mov	r2, r0
  409e6c:	460b      	mov	r3, r1
  409e6e:	4630      	mov	r0, r6
  409e70:	4639      	mov	r1, r7
  409e72:	f002 faeb 	bl	40c44c <__aeabi_dsub>
  409e76:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409e7a:	fa5f f888 	uxtb.w	r8, r8
  409e7e:	4652      	mov	r2, sl
  409e80:	465b      	mov	r3, fp
  409e82:	f805 8b01 	strb.w	r8, [r5], #1
  409e86:	4606      	mov	r6, r0
  409e88:	460f      	mov	r7, r1
  409e8a:	f002 ff05 	bl	40cc98 <__aeabi_dcmplt>
  409e8e:	4632      	mov	r2, r6
  409e90:	463b      	mov	r3, r7
  409e92:	2800      	cmp	r0, #0
  409e94:	d0c6      	beq.n	409e24 <_dtoa_r+0x8c4>
  409e96:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409e9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409e9c:	9302      	str	r3, [sp, #8]
  409e9e:	e523      	b.n	4098e8 <_dtoa_r+0x388>
  409ea0:	2300      	movs	r3, #0
  409ea2:	930b      	str	r3, [sp, #44]	; 0x2c
  409ea4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409ea6:	2b00      	cmp	r3, #0
  409ea8:	f340 80dc 	ble.w	40a064 <_dtoa_r+0xb04>
  409eac:	461f      	mov	r7, r3
  409eae:	461e      	mov	r6, r3
  409eb0:	930f      	str	r3, [sp, #60]	; 0x3c
  409eb2:	930a      	str	r3, [sp, #40]	; 0x28
  409eb4:	e6f6      	b.n	409ca4 <_dtoa_r+0x744>
  409eb6:	2301      	movs	r3, #1
  409eb8:	930b      	str	r3, [sp, #44]	; 0x2c
  409eba:	e7f3      	b.n	409ea4 <_dtoa_r+0x944>
  409ebc:	f1ba 0f00 	cmp.w	sl, #0
  409ec0:	f47f ada8 	bne.w	409a14 <_dtoa_r+0x4b4>
  409ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  409ec8:	2b00      	cmp	r3, #0
  409eca:	f47f adba 	bne.w	409a42 <_dtoa_r+0x4e2>
  409ece:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  409ed2:	0d3f      	lsrs	r7, r7, #20
  409ed4:	053f      	lsls	r7, r7, #20
  409ed6:	2f00      	cmp	r7, #0
  409ed8:	f000 820d 	beq.w	40a2f6 <_dtoa_r+0xd96>
  409edc:	9b08      	ldr	r3, [sp, #32]
  409ede:	3301      	adds	r3, #1
  409ee0:	9308      	str	r3, [sp, #32]
  409ee2:	9b06      	ldr	r3, [sp, #24]
  409ee4:	3301      	adds	r3, #1
  409ee6:	9306      	str	r3, [sp, #24]
  409ee8:	2301      	movs	r3, #1
  409eea:	930c      	str	r3, [sp, #48]	; 0x30
  409eec:	e5ab      	b.n	409a46 <_dtoa_r+0x4e6>
  409eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409ef0:	2b00      	cmp	r3, #0
  409ef2:	f73f ac42 	bgt.w	40977a <_dtoa_r+0x21a>
  409ef6:	f040 8221 	bne.w	40a33c <_dtoa_r+0xddc>
  409efa:	2200      	movs	r2, #0
  409efc:	4b38      	ldr	r3, [pc, #224]	; (409fe0 <_dtoa_r+0xa80>)
  409efe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409f02:	f002 fc57 	bl	40c7b4 <__aeabi_dmul>
  409f06:	4652      	mov	r2, sl
  409f08:	465b      	mov	r3, fp
  409f0a:	f002 fed9 	bl	40ccc0 <__aeabi_dcmpge>
  409f0e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  409f12:	4646      	mov	r6, r8
  409f14:	2800      	cmp	r0, #0
  409f16:	d041      	beq.n	409f9c <_dtoa_r+0xa3c>
  409f18:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409f1a:	9d04      	ldr	r5, [sp, #16]
  409f1c:	43db      	mvns	r3, r3
  409f1e:	9302      	str	r3, [sp, #8]
  409f20:	4641      	mov	r1, r8
  409f22:	4620      	mov	r0, r4
  409f24:	f001 fb42 	bl	40b5ac <_Bfree>
  409f28:	2e00      	cmp	r6, #0
  409f2a:	f43f acdd 	beq.w	4098e8 <_dtoa_r+0x388>
  409f2e:	e6a7      	b.n	409c80 <_dtoa_r+0x720>
  409f30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409f32:	4649      	mov	r1, r9
  409f34:	4620      	mov	r0, r4
  409f36:	f001 fc6f 	bl	40b818 <__pow5mult>
  409f3a:	4681      	mov	r9, r0
  409f3c:	e558      	b.n	4099f0 <_dtoa_r+0x490>
  409f3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409f40:	2a00      	cmp	r2, #0
  409f42:	f000 8187 	beq.w	40a254 <_dtoa_r+0xcf4>
  409f46:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409f4a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409f4c:	9d08      	ldr	r5, [sp, #32]
  409f4e:	e4f2      	b.n	409936 <_dtoa_r+0x3d6>
  409f50:	f1ba 0f00 	cmp.w	sl, #0
  409f54:	f47f ad75 	bne.w	409a42 <_dtoa_r+0x4e2>
  409f58:	e7b4      	b.n	409ec4 <_dtoa_r+0x964>
  409f5a:	f001 fb31 	bl	40b5c0 <__multadd>
  409f5e:	4647      	mov	r7, r8
  409f60:	4606      	mov	r6, r0
  409f62:	4683      	mov	fp, r0
  409f64:	e5be      	b.n	409ae4 <_dtoa_r+0x584>
  409f66:	4601      	mov	r1, r0
  409f68:	4620      	mov	r0, r4
  409f6a:	9306      	str	r3, [sp, #24]
  409f6c:	f001 fb1e 	bl	40b5ac <_Bfree>
  409f70:	2201      	movs	r2, #1
  409f72:	9b06      	ldr	r3, [sp, #24]
  409f74:	e5e0      	b.n	409b38 <_dtoa_r+0x5d8>
  409f76:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409f78:	2b02      	cmp	r3, #2
  409f7a:	f77f ad96 	ble.w	409aaa <_dtoa_r+0x54a>
  409f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409f80:	2b00      	cmp	r3, #0
  409f82:	d1c9      	bne.n	409f18 <_dtoa_r+0x9b8>
  409f84:	4641      	mov	r1, r8
  409f86:	2205      	movs	r2, #5
  409f88:	4620      	mov	r0, r4
  409f8a:	f001 fb19 	bl	40b5c0 <__multadd>
  409f8e:	4601      	mov	r1, r0
  409f90:	4680      	mov	r8, r0
  409f92:	4648      	mov	r0, r9
  409f94:	f001 fce2 	bl	40b95c <__mcmp>
  409f98:	2800      	cmp	r0, #0
  409f9a:	ddbd      	ble.n	409f18 <_dtoa_r+0x9b8>
  409f9c:	9a02      	ldr	r2, [sp, #8]
  409f9e:	9904      	ldr	r1, [sp, #16]
  409fa0:	2331      	movs	r3, #49	; 0x31
  409fa2:	3201      	adds	r2, #1
  409fa4:	9202      	str	r2, [sp, #8]
  409fa6:	700b      	strb	r3, [r1, #0]
  409fa8:	1c4d      	adds	r5, r1, #1
  409faa:	e7b9      	b.n	409f20 <_dtoa_r+0x9c0>
  409fac:	9a02      	ldr	r2, [sp, #8]
  409fae:	3201      	adds	r2, #1
  409fb0:	9202      	str	r2, [sp, #8]
  409fb2:	9a04      	ldr	r2, [sp, #16]
  409fb4:	2331      	movs	r3, #49	; 0x31
  409fb6:	7013      	strb	r3, [r2, #0]
  409fb8:	e652      	b.n	409c60 <_dtoa_r+0x700>
  409fba:	2301      	movs	r3, #1
  409fbc:	930b      	str	r3, [sp, #44]	; 0x2c
  409fbe:	e666      	b.n	409c8e <_dtoa_r+0x72e>
  409fc0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  409fc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409fc6:	e48f      	b.n	4098e8 <_dtoa_r+0x388>
  409fc8:	0040da60 	.word	0x0040da60
  409fcc:	0040da38 	.word	0x0040da38
  409fd0:	3ff00000 	.word	0x3ff00000
  409fd4:	401c0000 	.word	0x401c0000
  409fd8:	3fe00000 	.word	0x3fe00000
  409fdc:	40240000 	.word	0x40240000
  409fe0:	40140000 	.word	0x40140000
  409fe4:	4650      	mov	r0, sl
  409fe6:	f002 fb7f 	bl	40c6e8 <__aeabi_i2d>
  409fea:	463a      	mov	r2, r7
  409fec:	4643      	mov	r3, r8
  409fee:	f002 fbe1 	bl	40c7b4 <__aeabi_dmul>
  409ff2:	2200      	movs	r2, #0
  409ff4:	4bc1      	ldr	r3, [pc, #772]	; (40a2fc <_dtoa_r+0xd9c>)
  409ff6:	f002 fa2b 	bl	40c450 <__adddf3>
  409ffa:	4605      	mov	r5, r0
  409ffc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40a000:	4641      	mov	r1, r8
  40a002:	2200      	movs	r2, #0
  40a004:	4bbe      	ldr	r3, [pc, #760]	; (40a300 <_dtoa_r+0xda0>)
  40a006:	4638      	mov	r0, r7
  40a008:	f002 fa20 	bl	40c44c <__aeabi_dsub>
  40a00c:	462a      	mov	r2, r5
  40a00e:	4633      	mov	r3, r6
  40a010:	4682      	mov	sl, r0
  40a012:	468b      	mov	fp, r1
  40a014:	f002 fe5e 	bl	40ccd4 <__aeabi_dcmpgt>
  40a018:	4680      	mov	r8, r0
  40a01a:	2800      	cmp	r0, #0
  40a01c:	f040 8110 	bne.w	40a240 <_dtoa_r+0xce0>
  40a020:	462a      	mov	r2, r5
  40a022:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40a026:	4650      	mov	r0, sl
  40a028:	4659      	mov	r1, fp
  40a02a:	f002 fe35 	bl	40cc98 <__aeabi_dcmplt>
  40a02e:	b118      	cbz	r0, 40a038 <_dtoa_r+0xad8>
  40a030:	4646      	mov	r6, r8
  40a032:	e771      	b.n	409f18 <_dtoa_r+0x9b8>
  40a034:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a038:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40a03c:	f7ff bb8a 	b.w	409754 <_dtoa_r+0x1f4>
  40a040:	9804      	ldr	r0, [sp, #16]
  40a042:	f7ff babb 	b.w	4095bc <_dtoa_r+0x5c>
  40a046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a04a:	970c      	str	r7, [sp, #48]	; 0x30
  40a04c:	1afb      	subs	r3, r7, r3
  40a04e:	441a      	add	r2, r3
  40a050:	920d      	str	r2, [sp, #52]	; 0x34
  40a052:	2700      	movs	r7, #0
  40a054:	e469      	b.n	40992a <_dtoa_r+0x3ca>
  40a056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40a05a:	f04f 0a02 	mov.w	sl, #2
  40a05e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40a062:	e657      	b.n	409d14 <_dtoa_r+0x7b4>
  40a064:	2100      	movs	r1, #0
  40a066:	2301      	movs	r3, #1
  40a068:	6461      	str	r1, [r4, #68]	; 0x44
  40a06a:	4620      	mov	r0, r4
  40a06c:	9325      	str	r3, [sp, #148]	; 0x94
  40a06e:	f001 fa77 	bl	40b560 <_Balloc>
  40a072:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a074:	9004      	str	r0, [sp, #16]
  40a076:	6420      	str	r0, [r4, #64]	; 0x40
  40a078:	930a      	str	r3, [sp, #40]	; 0x28
  40a07a:	930f      	str	r3, [sp, #60]	; 0x3c
  40a07c:	e629      	b.n	409cd2 <_dtoa_r+0x772>
  40a07e:	2a00      	cmp	r2, #0
  40a080:	46d0      	mov	r8, sl
  40a082:	f8cd b018 	str.w	fp, [sp, #24]
  40a086:	469a      	mov	sl, r3
  40a088:	dd11      	ble.n	40a0ae <_dtoa_r+0xb4e>
  40a08a:	4649      	mov	r1, r9
  40a08c:	2201      	movs	r2, #1
  40a08e:	4620      	mov	r0, r4
  40a090:	f001 fc12 	bl	40b8b8 <__lshift>
  40a094:	4641      	mov	r1, r8
  40a096:	4681      	mov	r9, r0
  40a098:	f001 fc60 	bl	40b95c <__mcmp>
  40a09c:	2800      	cmp	r0, #0
  40a09e:	f340 8146 	ble.w	40a32e <_dtoa_r+0xdce>
  40a0a2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40a0a6:	f000 8106 	beq.w	40a2b6 <_dtoa_r+0xd56>
  40a0aa:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40a0ae:	46b3      	mov	fp, r6
  40a0b0:	f887 a000 	strb.w	sl, [r7]
  40a0b4:	1c7d      	adds	r5, r7, #1
  40a0b6:	9e06      	ldr	r6, [sp, #24]
  40a0b8:	e5d2      	b.n	409c60 <_dtoa_r+0x700>
  40a0ba:	d104      	bne.n	40a0c6 <_dtoa_r+0xb66>
  40a0bc:	f01a 0f01 	tst.w	sl, #1
  40a0c0:	d001      	beq.n	40a0c6 <_dtoa_r+0xb66>
  40a0c2:	e5bd      	b.n	409c40 <_dtoa_r+0x6e0>
  40a0c4:	4615      	mov	r5, r2
  40a0c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a0ca:	2b30      	cmp	r3, #48	; 0x30
  40a0cc:	f105 32ff 	add.w	r2, r5, #4294967295
  40a0d0:	d0f8      	beq.n	40a0c4 <_dtoa_r+0xb64>
  40a0d2:	e5c5      	b.n	409c60 <_dtoa_r+0x700>
  40a0d4:	9904      	ldr	r1, [sp, #16]
  40a0d6:	2230      	movs	r2, #48	; 0x30
  40a0d8:	700a      	strb	r2, [r1, #0]
  40a0da:	9a02      	ldr	r2, [sp, #8]
  40a0dc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40a0e0:	3201      	adds	r2, #1
  40a0e2:	9202      	str	r2, [sp, #8]
  40a0e4:	f7ff bbfc 	b.w	4098e0 <_dtoa_r+0x380>
  40a0e8:	f000 80bb 	beq.w	40a262 <_dtoa_r+0xd02>
  40a0ec:	9b02      	ldr	r3, [sp, #8]
  40a0ee:	425d      	negs	r5, r3
  40a0f0:	4b84      	ldr	r3, [pc, #528]	; (40a304 <_dtoa_r+0xda4>)
  40a0f2:	f005 020f 	and.w	r2, r5, #15
  40a0f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40a102:	f002 fb57 	bl	40c7b4 <__aeabi_dmul>
  40a106:	112d      	asrs	r5, r5, #4
  40a108:	4607      	mov	r7, r0
  40a10a:	4688      	mov	r8, r1
  40a10c:	f000 812c 	beq.w	40a368 <_dtoa_r+0xe08>
  40a110:	4e7d      	ldr	r6, [pc, #500]	; (40a308 <_dtoa_r+0xda8>)
  40a112:	f04f 0a02 	mov.w	sl, #2
  40a116:	07eb      	lsls	r3, r5, #31
  40a118:	d509      	bpl.n	40a12e <_dtoa_r+0xbce>
  40a11a:	4638      	mov	r0, r7
  40a11c:	4641      	mov	r1, r8
  40a11e:	e9d6 2300 	ldrd	r2, r3, [r6]
  40a122:	f002 fb47 	bl	40c7b4 <__aeabi_dmul>
  40a126:	f10a 0a01 	add.w	sl, sl, #1
  40a12a:	4607      	mov	r7, r0
  40a12c:	4688      	mov	r8, r1
  40a12e:	106d      	asrs	r5, r5, #1
  40a130:	f106 0608 	add.w	r6, r6, #8
  40a134:	d1ef      	bne.n	40a116 <_dtoa_r+0xbb6>
  40a136:	e608      	b.n	409d4a <_dtoa_r+0x7ea>
  40a138:	6871      	ldr	r1, [r6, #4]
  40a13a:	4620      	mov	r0, r4
  40a13c:	f001 fa10 	bl	40b560 <_Balloc>
  40a140:	6933      	ldr	r3, [r6, #16]
  40a142:	3302      	adds	r3, #2
  40a144:	009a      	lsls	r2, r3, #2
  40a146:	4605      	mov	r5, r0
  40a148:	f106 010c 	add.w	r1, r6, #12
  40a14c:	300c      	adds	r0, #12
  40a14e:	f7fc fda9 	bl	406ca4 <memcpy>
  40a152:	4629      	mov	r1, r5
  40a154:	2201      	movs	r2, #1
  40a156:	4620      	mov	r0, r4
  40a158:	f001 fbae 	bl	40b8b8 <__lshift>
  40a15c:	9006      	str	r0, [sp, #24]
  40a15e:	e4b5      	b.n	409acc <_dtoa_r+0x56c>
  40a160:	2b39      	cmp	r3, #57	; 0x39
  40a162:	f8cd b018 	str.w	fp, [sp, #24]
  40a166:	46d0      	mov	r8, sl
  40a168:	f000 80a5 	beq.w	40a2b6 <_dtoa_r+0xd56>
  40a16c:	f103 0a01 	add.w	sl, r3, #1
  40a170:	46b3      	mov	fp, r6
  40a172:	f887 a000 	strb.w	sl, [r7]
  40a176:	1c7d      	adds	r5, r7, #1
  40a178:	9e06      	ldr	r6, [sp, #24]
  40a17a:	e571      	b.n	409c60 <_dtoa_r+0x700>
  40a17c:	465a      	mov	r2, fp
  40a17e:	46d0      	mov	r8, sl
  40a180:	46b3      	mov	fp, r6
  40a182:	469a      	mov	sl, r3
  40a184:	4616      	mov	r6, r2
  40a186:	e54f      	b.n	409c28 <_dtoa_r+0x6c8>
  40a188:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a18a:	495e      	ldr	r1, [pc, #376]	; (40a304 <_dtoa_r+0xda4>)
  40a18c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40a190:	462a      	mov	r2, r5
  40a192:	4633      	mov	r3, r6
  40a194:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40a198:	f002 fb0c 	bl	40c7b4 <__aeabi_dmul>
  40a19c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40a1a0:	4638      	mov	r0, r7
  40a1a2:	4641      	mov	r1, r8
  40a1a4:	f002 fdb6 	bl	40cd14 <__aeabi_d2iz>
  40a1a8:	4605      	mov	r5, r0
  40a1aa:	f002 fa9d 	bl	40c6e8 <__aeabi_i2d>
  40a1ae:	460b      	mov	r3, r1
  40a1b0:	4602      	mov	r2, r0
  40a1b2:	4641      	mov	r1, r8
  40a1b4:	4638      	mov	r0, r7
  40a1b6:	f002 f949 	bl	40c44c <__aeabi_dsub>
  40a1ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a1bc:	460f      	mov	r7, r1
  40a1be:	9904      	ldr	r1, [sp, #16]
  40a1c0:	3530      	adds	r5, #48	; 0x30
  40a1c2:	2b01      	cmp	r3, #1
  40a1c4:	700d      	strb	r5, [r1, #0]
  40a1c6:	4606      	mov	r6, r0
  40a1c8:	f101 0501 	add.w	r5, r1, #1
  40a1cc:	d026      	beq.n	40a21c <_dtoa_r+0xcbc>
  40a1ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a1d0:	9a04      	ldr	r2, [sp, #16]
  40a1d2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40a310 <_dtoa_r+0xdb0>
  40a1d6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40a1da:	4413      	add	r3, r2
  40a1dc:	f04f 0a00 	mov.w	sl, #0
  40a1e0:	4699      	mov	r9, r3
  40a1e2:	4652      	mov	r2, sl
  40a1e4:	465b      	mov	r3, fp
  40a1e6:	4630      	mov	r0, r6
  40a1e8:	4639      	mov	r1, r7
  40a1ea:	f002 fae3 	bl	40c7b4 <__aeabi_dmul>
  40a1ee:	460f      	mov	r7, r1
  40a1f0:	4606      	mov	r6, r0
  40a1f2:	f002 fd8f 	bl	40cd14 <__aeabi_d2iz>
  40a1f6:	4680      	mov	r8, r0
  40a1f8:	f002 fa76 	bl	40c6e8 <__aeabi_i2d>
  40a1fc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40a200:	4602      	mov	r2, r0
  40a202:	460b      	mov	r3, r1
  40a204:	4630      	mov	r0, r6
  40a206:	4639      	mov	r1, r7
  40a208:	f002 f920 	bl	40c44c <__aeabi_dsub>
  40a20c:	f805 8b01 	strb.w	r8, [r5], #1
  40a210:	454d      	cmp	r5, r9
  40a212:	4606      	mov	r6, r0
  40a214:	460f      	mov	r7, r1
  40a216:	d1e4      	bne.n	40a1e2 <_dtoa_r+0xc82>
  40a218:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a21c:	4b3b      	ldr	r3, [pc, #236]	; (40a30c <_dtoa_r+0xdac>)
  40a21e:	2200      	movs	r2, #0
  40a220:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40a224:	f002 f914 	bl	40c450 <__adddf3>
  40a228:	4632      	mov	r2, r6
  40a22a:	463b      	mov	r3, r7
  40a22c:	f002 fd34 	bl	40cc98 <__aeabi_dcmplt>
  40a230:	2800      	cmp	r0, #0
  40a232:	d046      	beq.n	40a2c2 <_dtoa_r+0xd62>
  40a234:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a236:	9302      	str	r3, [sp, #8]
  40a238:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40a23c:	f7ff bb43 	b.w	4098c6 <_dtoa_r+0x366>
  40a240:	f04f 0800 	mov.w	r8, #0
  40a244:	4646      	mov	r6, r8
  40a246:	e6a9      	b.n	409f9c <_dtoa_r+0xa3c>
  40a248:	9b08      	ldr	r3, [sp, #32]
  40a24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a24c:	1a9d      	subs	r5, r3, r2
  40a24e:	2300      	movs	r3, #0
  40a250:	f7ff bb71 	b.w	409936 <_dtoa_r+0x3d6>
  40a254:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40a256:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a258:	9d08      	ldr	r5, [sp, #32]
  40a25a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40a25e:	f7ff bb6a 	b.w	409936 <_dtoa_r+0x3d6>
  40a262:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40a266:	f04f 0a02 	mov.w	sl, #2
  40a26a:	e56e      	b.n	409d4a <_dtoa_r+0x7ea>
  40a26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a26e:	2b00      	cmp	r3, #0
  40a270:	f43f aeb8 	beq.w	409fe4 <_dtoa_r+0xa84>
  40a274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a276:	2b00      	cmp	r3, #0
  40a278:	f77f aede 	ble.w	40a038 <_dtoa_r+0xad8>
  40a27c:	2200      	movs	r2, #0
  40a27e:	4b24      	ldr	r3, [pc, #144]	; (40a310 <_dtoa_r+0xdb0>)
  40a280:	4638      	mov	r0, r7
  40a282:	4641      	mov	r1, r8
  40a284:	f002 fa96 	bl	40c7b4 <__aeabi_dmul>
  40a288:	4607      	mov	r7, r0
  40a28a:	4688      	mov	r8, r1
  40a28c:	f10a 0001 	add.w	r0, sl, #1
  40a290:	f002 fa2a 	bl	40c6e8 <__aeabi_i2d>
  40a294:	463a      	mov	r2, r7
  40a296:	4643      	mov	r3, r8
  40a298:	f002 fa8c 	bl	40c7b4 <__aeabi_dmul>
  40a29c:	2200      	movs	r2, #0
  40a29e:	4b17      	ldr	r3, [pc, #92]	; (40a2fc <_dtoa_r+0xd9c>)
  40a2a0:	f002 f8d6 	bl	40c450 <__adddf3>
  40a2a4:	9a02      	ldr	r2, [sp, #8]
  40a2a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a2a8:	9312      	str	r3, [sp, #72]	; 0x48
  40a2aa:	3a01      	subs	r2, #1
  40a2ac:	4605      	mov	r5, r0
  40a2ae:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40a2b2:	9215      	str	r2, [sp, #84]	; 0x54
  40a2b4:	e56a      	b.n	409d8c <_dtoa_r+0x82c>
  40a2b6:	2239      	movs	r2, #57	; 0x39
  40a2b8:	46b3      	mov	fp, r6
  40a2ba:	703a      	strb	r2, [r7, #0]
  40a2bc:	9e06      	ldr	r6, [sp, #24]
  40a2be:	1c7d      	adds	r5, r7, #1
  40a2c0:	e4c0      	b.n	409c44 <_dtoa_r+0x6e4>
  40a2c2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40a2c6:	2000      	movs	r0, #0
  40a2c8:	4910      	ldr	r1, [pc, #64]	; (40a30c <_dtoa_r+0xdac>)
  40a2ca:	f002 f8bf 	bl	40c44c <__aeabi_dsub>
  40a2ce:	4632      	mov	r2, r6
  40a2d0:	463b      	mov	r3, r7
  40a2d2:	f002 fcff 	bl	40ccd4 <__aeabi_dcmpgt>
  40a2d6:	b908      	cbnz	r0, 40a2dc <_dtoa_r+0xd7c>
  40a2d8:	e6ae      	b.n	40a038 <_dtoa_r+0xad8>
  40a2da:	4615      	mov	r5, r2
  40a2dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a2e0:	2b30      	cmp	r3, #48	; 0x30
  40a2e2:	f105 32ff 	add.w	r2, r5, #4294967295
  40a2e6:	d0f8      	beq.n	40a2da <_dtoa_r+0xd7a>
  40a2e8:	e5d7      	b.n	409e9a <_dtoa_r+0x93a>
  40a2ea:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a2ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a2f0:	9302      	str	r3, [sp, #8]
  40a2f2:	f7ff bae8 	b.w	4098c6 <_dtoa_r+0x366>
  40a2f6:	970c      	str	r7, [sp, #48]	; 0x30
  40a2f8:	f7ff bba5 	b.w	409a46 <_dtoa_r+0x4e6>
  40a2fc:	401c0000 	.word	0x401c0000
  40a300:	40140000 	.word	0x40140000
  40a304:	0040da60 	.word	0x0040da60
  40a308:	0040da38 	.word	0x0040da38
  40a30c:	3fe00000 	.word	0x3fe00000
  40a310:	40240000 	.word	0x40240000
  40a314:	2b39      	cmp	r3, #57	; 0x39
  40a316:	f8cd b018 	str.w	fp, [sp, #24]
  40a31a:	46d0      	mov	r8, sl
  40a31c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40a320:	469a      	mov	sl, r3
  40a322:	d0c8      	beq.n	40a2b6 <_dtoa_r+0xd56>
  40a324:	f1bb 0f00 	cmp.w	fp, #0
  40a328:	f73f aebf 	bgt.w	40a0aa <_dtoa_r+0xb4a>
  40a32c:	e6bf      	b.n	40a0ae <_dtoa_r+0xb4e>
  40a32e:	f47f aebe 	bne.w	40a0ae <_dtoa_r+0xb4e>
  40a332:	f01a 0f01 	tst.w	sl, #1
  40a336:	f43f aeba 	beq.w	40a0ae <_dtoa_r+0xb4e>
  40a33a:	e6b2      	b.n	40a0a2 <_dtoa_r+0xb42>
  40a33c:	f04f 0800 	mov.w	r8, #0
  40a340:	4646      	mov	r6, r8
  40a342:	e5e9      	b.n	409f18 <_dtoa_r+0x9b8>
  40a344:	4631      	mov	r1, r6
  40a346:	2300      	movs	r3, #0
  40a348:	220a      	movs	r2, #10
  40a34a:	4620      	mov	r0, r4
  40a34c:	f001 f938 	bl	40b5c0 <__multadd>
  40a350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a352:	2b00      	cmp	r3, #0
  40a354:	4606      	mov	r6, r0
  40a356:	dd0a      	ble.n	40a36e <_dtoa_r+0xe0e>
  40a358:	930a      	str	r3, [sp, #40]	; 0x28
  40a35a:	f7ff bbaa 	b.w	409ab2 <_dtoa_r+0x552>
  40a35e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a360:	2b02      	cmp	r3, #2
  40a362:	dc23      	bgt.n	40a3ac <_dtoa_r+0xe4c>
  40a364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a366:	e43b      	b.n	409be0 <_dtoa_r+0x680>
  40a368:	f04f 0a02 	mov.w	sl, #2
  40a36c:	e4ed      	b.n	409d4a <_dtoa_r+0x7ea>
  40a36e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a370:	2b02      	cmp	r3, #2
  40a372:	dc1b      	bgt.n	40a3ac <_dtoa_r+0xe4c>
  40a374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a376:	e7ef      	b.n	40a358 <_dtoa_r+0xdf8>
  40a378:	2500      	movs	r5, #0
  40a37a:	6465      	str	r5, [r4, #68]	; 0x44
  40a37c:	4629      	mov	r1, r5
  40a37e:	4620      	mov	r0, r4
  40a380:	f001 f8ee 	bl	40b560 <_Balloc>
  40a384:	f04f 33ff 	mov.w	r3, #4294967295
  40a388:	930a      	str	r3, [sp, #40]	; 0x28
  40a38a:	930f      	str	r3, [sp, #60]	; 0x3c
  40a38c:	2301      	movs	r3, #1
  40a38e:	9004      	str	r0, [sp, #16]
  40a390:	9525      	str	r5, [sp, #148]	; 0x94
  40a392:	6420      	str	r0, [r4, #64]	; 0x40
  40a394:	930b      	str	r3, [sp, #44]	; 0x2c
  40a396:	f7ff b9dd 	b.w	409754 <_dtoa_r+0x1f4>
  40a39a:	2501      	movs	r5, #1
  40a39c:	f7ff b9a5 	b.w	4096ea <_dtoa_r+0x18a>
  40a3a0:	f43f ab69 	beq.w	409a76 <_dtoa_r+0x516>
  40a3a4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40a3a8:	f7ff bbf9 	b.w	409b9e <_dtoa_r+0x63e>
  40a3ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a3ae:	930a      	str	r3, [sp, #40]	; 0x28
  40a3b0:	e5e5      	b.n	409f7e <_dtoa_r+0xa1e>
  40a3b2:	bf00      	nop

0040a3b4 <__sflush_r>:
  40a3b4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40a3b8:	b29a      	uxth	r2, r3
  40a3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a3be:	460d      	mov	r5, r1
  40a3c0:	0711      	lsls	r1, r2, #28
  40a3c2:	4680      	mov	r8, r0
  40a3c4:	d43a      	bmi.n	40a43c <__sflush_r+0x88>
  40a3c6:	686a      	ldr	r2, [r5, #4]
  40a3c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40a3cc:	2a00      	cmp	r2, #0
  40a3ce:	81ab      	strh	r3, [r5, #12]
  40a3d0:	dd6f      	ble.n	40a4b2 <__sflush_r+0xfe>
  40a3d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40a3d4:	2c00      	cmp	r4, #0
  40a3d6:	d049      	beq.n	40a46c <__sflush_r+0xb8>
  40a3d8:	2200      	movs	r2, #0
  40a3da:	b29b      	uxth	r3, r3
  40a3dc:	f8d8 6000 	ldr.w	r6, [r8]
  40a3e0:	f8c8 2000 	str.w	r2, [r8]
  40a3e4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40a3e8:	d067      	beq.n	40a4ba <__sflush_r+0x106>
  40a3ea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40a3ec:	075f      	lsls	r7, r3, #29
  40a3ee:	d505      	bpl.n	40a3fc <__sflush_r+0x48>
  40a3f0:	6869      	ldr	r1, [r5, #4]
  40a3f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40a3f4:	1a52      	subs	r2, r2, r1
  40a3f6:	b10b      	cbz	r3, 40a3fc <__sflush_r+0x48>
  40a3f8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40a3fa:	1ad2      	subs	r2, r2, r3
  40a3fc:	2300      	movs	r3, #0
  40a3fe:	69e9      	ldr	r1, [r5, #28]
  40a400:	4640      	mov	r0, r8
  40a402:	47a0      	blx	r4
  40a404:	1c44      	adds	r4, r0, #1
  40a406:	d03c      	beq.n	40a482 <__sflush_r+0xce>
  40a408:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40a40c:	692a      	ldr	r2, [r5, #16]
  40a40e:	602a      	str	r2, [r5, #0]
  40a410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40a414:	2200      	movs	r2, #0
  40a416:	81ab      	strh	r3, [r5, #12]
  40a418:	04db      	lsls	r3, r3, #19
  40a41a:	606a      	str	r2, [r5, #4]
  40a41c:	d447      	bmi.n	40a4ae <__sflush_r+0xfa>
  40a41e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40a420:	f8c8 6000 	str.w	r6, [r8]
  40a424:	b311      	cbz	r1, 40a46c <__sflush_r+0xb8>
  40a426:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40a42a:	4299      	cmp	r1, r3
  40a42c:	d002      	beq.n	40a434 <__sflush_r+0x80>
  40a42e:	4640      	mov	r0, r8
  40a430:	f000 f9de 	bl	40a7f0 <_free_r>
  40a434:	2000      	movs	r0, #0
  40a436:	6328      	str	r0, [r5, #48]	; 0x30
  40a438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a43c:	692e      	ldr	r6, [r5, #16]
  40a43e:	b1ae      	cbz	r6, 40a46c <__sflush_r+0xb8>
  40a440:	682c      	ldr	r4, [r5, #0]
  40a442:	602e      	str	r6, [r5, #0]
  40a444:	0791      	lsls	r1, r2, #30
  40a446:	bf0c      	ite	eq
  40a448:	696b      	ldreq	r3, [r5, #20]
  40a44a:	2300      	movne	r3, #0
  40a44c:	1ba4      	subs	r4, r4, r6
  40a44e:	60ab      	str	r3, [r5, #8]
  40a450:	e00a      	b.n	40a468 <__sflush_r+0xb4>
  40a452:	4623      	mov	r3, r4
  40a454:	4632      	mov	r2, r6
  40a456:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40a458:	69e9      	ldr	r1, [r5, #28]
  40a45a:	4640      	mov	r0, r8
  40a45c:	47b8      	blx	r7
  40a45e:	2800      	cmp	r0, #0
  40a460:	eba4 0400 	sub.w	r4, r4, r0
  40a464:	4406      	add	r6, r0
  40a466:	dd04      	ble.n	40a472 <__sflush_r+0xbe>
  40a468:	2c00      	cmp	r4, #0
  40a46a:	dcf2      	bgt.n	40a452 <__sflush_r+0x9e>
  40a46c:	2000      	movs	r0, #0
  40a46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a472:	89ab      	ldrh	r3, [r5, #12]
  40a474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a478:	81ab      	strh	r3, [r5, #12]
  40a47a:	f04f 30ff 	mov.w	r0, #4294967295
  40a47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a482:	f8d8 4000 	ldr.w	r4, [r8]
  40a486:	2c1d      	cmp	r4, #29
  40a488:	d8f3      	bhi.n	40a472 <__sflush_r+0xbe>
  40a48a:	4b19      	ldr	r3, [pc, #100]	; (40a4f0 <__sflush_r+0x13c>)
  40a48c:	40e3      	lsrs	r3, r4
  40a48e:	43db      	mvns	r3, r3
  40a490:	f013 0301 	ands.w	r3, r3, #1
  40a494:	d1ed      	bne.n	40a472 <__sflush_r+0xbe>
  40a496:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40a49a:	606b      	str	r3, [r5, #4]
  40a49c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40a4a0:	6929      	ldr	r1, [r5, #16]
  40a4a2:	81ab      	strh	r3, [r5, #12]
  40a4a4:	04da      	lsls	r2, r3, #19
  40a4a6:	6029      	str	r1, [r5, #0]
  40a4a8:	d5b9      	bpl.n	40a41e <__sflush_r+0x6a>
  40a4aa:	2c00      	cmp	r4, #0
  40a4ac:	d1b7      	bne.n	40a41e <__sflush_r+0x6a>
  40a4ae:	6528      	str	r0, [r5, #80]	; 0x50
  40a4b0:	e7b5      	b.n	40a41e <__sflush_r+0x6a>
  40a4b2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40a4b4:	2a00      	cmp	r2, #0
  40a4b6:	dc8c      	bgt.n	40a3d2 <__sflush_r+0x1e>
  40a4b8:	e7d8      	b.n	40a46c <__sflush_r+0xb8>
  40a4ba:	2301      	movs	r3, #1
  40a4bc:	69e9      	ldr	r1, [r5, #28]
  40a4be:	4640      	mov	r0, r8
  40a4c0:	47a0      	blx	r4
  40a4c2:	1c43      	adds	r3, r0, #1
  40a4c4:	4602      	mov	r2, r0
  40a4c6:	d002      	beq.n	40a4ce <__sflush_r+0x11a>
  40a4c8:	89ab      	ldrh	r3, [r5, #12]
  40a4ca:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40a4cc:	e78e      	b.n	40a3ec <__sflush_r+0x38>
  40a4ce:	f8d8 3000 	ldr.w	r3, [r8]
  40a4d2:	2b00      	cmp	r3, #0
  40a4d4:	d0f8      	beq.n	40a4c8 <__sflush_r+0x114>
  40a4d6:	2b1d      	cmp	r3, #29
  40a4d8:	d001      	beq.n	40a4de <__sflush_r+0x12a>
  40a4da:	2b16      	cmp	r3, #22
  40a4dc:	d102      	bne.n	40a4e4 <__sflush_r+0x130>
  40a4de:	f8c8 6000 	str.w	r6, [r8]
  40a4e2:	e7c3      	b.n	40a46c <__sflush_r+0xb8>
  40a4e4:	89ab      	ldrh	r3, [r5, #12]
  40a4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a4ea:	81ab      	strh	r3, [r5, #12]
  40a4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a4f0:	20400001 	.word	0x20400001

0040a4f4 <_fflush_r>:
  40a4f4:	b538      	push	{r3, r4, r5, lr}
  40a4f6:	460d      	mov	r5, r1
  40a4f8:	4604      	mov	r4, r0
  40a4fa:	b108      	cbz	r0, 40a500 <_fflush_r+0xc>
  40a4fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a4fe:	b1bb      	cbz	r3, 40a530 <_fflush_r+0x3c>
  40a500:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40a504:	b188      	cbz	r0, 40a52a <_fflush_r+0x36>
  40a506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40a508:	07db      	lsls	r3, r3, #31
  40a50a:	d401      	bmi.n	40a510 <_fflush_r+0x1c>
  40a50c:	0581      	lsls	r1, r0, #22
  40a50e:	d517      	bpl.n	40a540 <_fflush_r+0x4c>
  40a510:	4620      	mov	r0, r4
  40a512:	4629      	mov	r1, r5
  40a514:	f7ff ff4e 	bl	40a3b4 <__sflush_r>
  40a518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40a51a:	07da      	lsls	r2, r3, #31
  40a51c:	4604      	mov	r4, r0
  40a51e:	d402      	bmi.n	40a526 <_fflush_r+0x32>
  40a520:	89ab      	ldrh	r3, [r5, #12]
  40a522:	059b      	lsls	r3, r3, #22
  40a524:	d507      	bpl.n	40a536 <_fflush_r+0x42>
  40a526:	4620      	mov	r0, r4
  40a528:	bd38      	pop	{r3, r4, r5, pc}
  40a52a:	4604      	mov	r4, r0
  40a52c:	4620      	mov	r0, r4
  40a52e:	bd38      	pop	{r3, r4, r5, pc}
  40a530:	f000 f838 	bl	40a5a4 <__sinit>
  40a534:	e7e4      	b.n	40a500 <_fflush_r+0xc>
  40a536:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40a538:	f000 fc04 	bl	40ad44 <__retarget_lock_release_recursive>
  40a53c:	4620      	mov	r0, r4
  40a53e:	bd38      	pop	{r3, r4, r5, pc}
  40a540:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40a542:	f000 fbfd 	bl	40ad40 <__retarget_lock_acquire_recursive>
  40a546:	e7e3      	b.n	40a510 <_fflush_r+0x1c>

0040a548 <_cleanup_r>:
  40a548:	4901      	ldr	r1, [pc, #4]	; (40a550 <_cleanup_r+0x8>)
  40a54a:	f000 bbaf 	b.w	40acac <_fwalk_reent>
  40a54e:	bf00      	nop
  40a550:	0040c2dd 	.word	0x0040c2dd

0040a554 <std.isra.0>:
  40a554:	b510      	push	{r4, lr}
  40a556:	2300      	movs	r3, #0
  40a558:	4604      	mov	r4, r0
  40a55a:	8181      	strh	r1, [r0, #12]
  40a55c:	81c2      	strh	r2, [r0, #14]
  40a55e:	6003      	str	r3, [r0, #0]
  40a560:	6043      	str	r3, [r0, #4]
  40a562:	6083      	str	r3, [r0, #8]
  40a564:	6643      	str	r3, [r0, #100]	; 0x64
  40a566:	6103      	str	r3, [r0, #16]
  40a568:	6143      	str	r3, [r0, #20]
  40a56a:	6183      	str	r3, [r0, #24]
  40a56c:	4619      	mov	r1, r3
  40a56e:	2208      	movs	r2, #8
  40a570:	305c      	adds	r0, #92	; 0x5c
  40a572:	f7fc fc31 	bl	406dd8 <memset>
  40a576:	4807      	ldr	r0, [pc, #28]	; (40a594 <std.isra.0+0x40>)
  40a578:	4907      	ldr	r1, [pc, #28]	; (40a598 <std.isra.0+0x44>)
  40a57a:	4a08      	ldr	r2, [pc, #32]	; (40a59c <std.isra.0+0x48>)
  40a57c:	4b08      	ldr	r3, [pc, #32]	; (40a5a0 <std.isra.0+0x4c>)
  40a57e:	6220      	str	r0, [r4, #32]
  40a580:	61e4      	str	r4, [r4, #28]
  40a582:	6261      	str	r1, [r4, #36]	; 0x24
  40a584:	62a2      	str	r2, [r4, #40]	; 0x28
  40a586:	62e3      	str	r3, [r4, #44]	; 0x2c
  40a588:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40a58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a590:	f000 bbd2 	b.w	40ad38 <__retarget_lock_init_recursive>
  40a594:	0040bec5 	.word	0x0040bec5
  40a598:	0040bee9 	.word	0x0040bee9
  40a59c:	0040bf25 	.word	0x0040bf25
  40a5a0:	0040bf45 	.word	0x0040bf45

0040a5a4 <__sinit>:
  40a5a4:	b510      	push	{r4, lr}
  40a5a6:	4604      	mov	r4, r0
  40a5a8:	4812      	ldr	r0, [pc, #72]	; (40a5f4 <__sinit+0x50>)
  40a5aa:	f000 fbc9 	bl	40ad40 <__retarget_lock_acquire_recursive>
  40a5ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40a5b0:	b9d2      	cbnz	r2, 40a5e8 <__sinit+0x44>
  40a5b2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40a5b6:	4810      	ldr	r0, [pc, #64]	; (40a5f8 <__sinit+0x54>)
  40a5b8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40a5bc:	2103      	movs	r1, #3
  40a5be:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40a5c2:	63e0      	str	r0, [r4, #60]	; 0x3c
  40a5c4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40a5c8:	6860      	ldr	r0, [r4, #4]
  40a5ca:	2104      	movs	r1, #4
  40a5cc:	f7ff ffc2 	bl	40a554 <std.isra.0>
  40a5d0:	2201      	movs	r2, #1
  40a5d2:	2109      	movs	r1, #9
  40a5d4:	68a0      	ldr	r0, [r4, #8]
  40a5d6:	f7ff ffbd 	bl	40a554 <std.isra.0>
  40a5da:	2202      	movs	r2, #2
  40a5dc:	2112      	movs	r1, #18
  40a5de:	68e0      	ldr	r0, [r4, #12]
  40a5e0:	f7ff ffb8 	bl	40a554 <std.isra.0>
  40a5e4:	2301      	movs	r3, #1
  40a5e6:	63a3      	str	r3, [r4, #56]	; 0x38
  40a5e8:	4802      	ldr	r0, [pc, #8]	; (40a5f4 <__sinit+0x50>)
  40a5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a5ee:	f000 bba9 	b.w	40ad44 <__retarget_lock_release_recursive>
  40a5f2:	bf00      	nop
  40a5f4:	2040c4bc 	.word	0x2040c4bc
  40a5f8:	0040a549 	.word	0x0040a549

0040a5fc <__sfp_lock_acquire>:
  40a5fc:	4801      	ldr	r0, [pc, #4]	; (40a604 <__sfp_lock_acquire+0x8>)
  40a5fe:	f000 bb9f 	b.w	40ad40 <__retarget_lock_acquire_recursive>
  40a602:	bf00      	nop
  40a604:	2040c4d0 	.word	0x2040c4d0

0040a608 <__sfp_lock_release>:
  40a608:	4801      	ldr	r0, [pc, #4]	; (40a610 <__sfp_lock_release+0x8>)
  40a60a:	f000 bb9b 	b.w	40ad44 <__retarget_lock_release_recursive>
  40a60e:	bf00      	nop
  40a610:	2040c4d0 	.word	0x2040c4d0

0040a614 <__libc_fini_array>:
  40a614:	b538      	push	{r3, r4, r5, lr}
  40a616:	4c0a      	ldr	r4, [pc, #40]	; (40a640 <__libc_fini_array+0x2c>)
  40a618:	4d0a      	ldr	r5, [pc, #40]	; (40a644 <__libc_fini_array+0x30>)
  40a61a:	1b64      	subs	r4, r4, r5
  40a61c:	10a4      	asrs	r4, r4, #2
  40a61e:	d00a      	beq.n	40a636 <__libc_fini_array+0x22>
  40a620:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40a624:	3b01      	subs	r3, #1
  40a626:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40a62a:	3c01      	subs	r4, #1
  40a62c:	f855 3904 	ldr.w	r3, [r5], #-4
  40a630:	4798      	blx	r3
  40a632:	2c00      	cmp	r4, #0
  40a634:	d1f9      	bne.n	40a62a <__libc_fini_array+0x16>
  40a636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a63a:	f003 bb07 	b.w	40dc4c <_fini>
  40a63e:	bf00      	nop
  40a640:	0040dc5c 	.word	0x0040dc5c
  40a644:	0040dc58 	.word	0x0040dc58

0040a648 <__fputwc>:
  40a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a64c:	b082      	sub	sp, #8
  40a64e:	4680      	mov	r8, r0
  40a650:	4689      	mov	r9, r1
  40a652:	4614      	mov	r4, r2
  40a654:	f000 fb54 	bl	40ad00 <__locale_mb_cur_max>
  40a658:	2801      	cmp	r0, #1
  40a65a:	d036      	beq.n	40a6ca <__fputwc+0x82>
  40a65c:	464a      	mov	r2, r9
  40a65e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40a662:	a901      	add	r1, sp, #4
  40a664:	4640      	mov	r0, r8
  40a666:	f001 fd47 	bl	40c0f8 <_wcrtomb_r>
  40a66a:	1c42      	adds	r2, r0, #1
  40a66c:	4606      	mov	r6, r0
  40a66e:	d025      	beq.n	40a6bc <__fputwc+0x74>
  40a670:	b3a8      	cbz	r0, 40a6de <__fputwc+0x96>
  40a672:	f89d e004 	ldrb.w	lr, [sp, #4]
  40a676:	2500      	movs	r5, #0
  40a678:	f10d 0a04 	add.w	sl, sp, #4
  40a67c:	e009      	b.n	40a692 <__fputwc+0x4a>
  40a67e:	6823      	ldr	r3, [r4, #0]
  40a680:	1c5a      	adds	r2, r3, #1
  40a682:	6022      	str	r2, [r4, #0]
  40a684:	f883 e000 	strb.w	lr, [r3]
  40a688:	3501      	adds	r5, #1
  40a68a:	42b5      	cmp	r5, r6
  40a68c:	d227      	bcs.n	40a6de <__fputwc+0x96>
  40a68e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40a692:	68a3      	ldr	r3, [r4, #8]
  40a694:	3b01      	subs	r3, #1
  40a696:	2b00      	cmp	r3, #0
  40a698:	60a3      	str	r3, [r4, #8]
  40a69a:	daf0      	bge.n	40a67e <__fputwc+0x36>
  40a69c:	69a7      	ldr	r7, [r4, #24]
  40a69e:	42bb      	cmp	r3, r7
  40a6a0:	4671      	mov	r1, lr
  40a6a2:	4622      	mov	r2, r4
  40a6a4:	4640      	mov	r0, r8
  40a6a6:	db02      	blt.n	40a6ae <__fputwc+0x66>
  40a6a8:	f1be 0f0a 	cmp.w	lr, #10
  40a6ac:	d1e7      	bne.n	40a67e <__fputwc+0x36>
  40a6ae:	f001 fccb 	bl	40c048 <__swbuf_r>
  40a6b2:	1c43      	adds	r3, r0, #1
  40a6b4:	d1e8      	bne.n	40a688 <__fputwc+0x40>
  40a6b6:	b002      	add	sp, #8
  40a6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a6bc:	89a3      	ldrh	r3, [r4, #12]
  40a6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a6c2:	81a3      	strh	r3, [r4, #12]
  40a6c4:	b002      	add	sp, #8
  40a6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a6ca:	f109 33ff 	add.w	r3, r9, #4294967295
  40a6ce:	2bfe      	cmp	r3, #254	; 0xfe
  40a6d0:	d8c4      	bhi.n	40a65c <__fputwc+0x14>
  40a6d2:	fa5f fe89 	uxtb.w	lr, r9
  40a6d6:	4606      	mov	r6, r0
  40a6d8:	f88d e004 	strb.w	lr, [sp, #4]
  40a6dc:	e7cb      	b.n	40a676 <__fputwc+0x2e>
  40a6de:	4648      	mov	r0, r9
  40a6e0:	b002      	add	sp, #8
  40a6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a6e6:	bf00      	nop

0040a6e8 <_fputwc_r>:
  40a6e8:	b530      	push	{r4, r5, lr}
  40a6ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40a6ec:	f013 0f01 	tst.w	r3, #1
  40a6f0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40a6f4:	4614      	mov	r4, r2
  40a6f6:	b083      	sub	sp, #12
  40a6f8:	4605      	mov	r5, r0
  40a6fa:	b29a      	uxth	r2, r3
  40a6fc:	d101      	bne.n	40a702 <_fputwc_r+0x1a>
  40a6fe:	0590      	lsls	r0, r2, #22
  40a700:	d51c      	bpl.n	40a73c <_fputwc_r+0x54>
  40a702:	0490      	lsls	r0, r2, #18
  40a704:	d406      	bmi.n	40a714 <_fputwc_r+0x2c>
  40a706:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40a708:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40a70c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a710:	81a3      	strh	r3, [r4, #12]
  40a712:	6662      	str	r2, [r4, #100]	; 0x64
  40a714:	4628      	mov	r0, r5
  40a716:	4622      	mov	r2, r4
  40a718:	f7ff ff96 	bl	40a648 <__fputwc>
  40a71c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a71e:	07da      	lsls	r2, r3, #31
  40a720:	4605      	mov	r5, r0
  40a722:	d402      	bmi.n	40a72a <_fputwc_r+0x42>
  40a724:	89a3      	ldrh	r3, [r4, #12]
  40a726:	059b      	lsls	r3, r3, #22
  40a728:	d502      	bpl.n	40a730 <_fputwc_r+0x48>
  40a72a:	4628      	mov	r0, r5
  40a72c:	b003      	add	sp, #12
  40a72e:	bd30      	pop	{r4, r5, pc}
  40a730:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a732:	f000 fb07 	bl	40ad44 <__retarget_lock_release_recursive>
  40a736:	4628      	mov	r0, r5
  40a738:	b003      	add	sp, #12
  40a73a:	bd30      	pop	{r4, r5, pc}
  40a73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a73e:	9101      	str	r1, [sp, #4]
  40a740:	f000 fafe 	bl	40ad40 <__retarget_lock_acquire_recursive>
  40a744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a748:	9901      	ldr	r1, [sp, #4]
  40a74a:	b29a      	uxth	r2, r3
  40a74c:	e7d9      	b.n	40a702 <_fputwc_r+0x1a>
  40a74e:	bf00      	nop

0040a750 <_malloc_trim_r>:
  40a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a752:	4f24      	ldr	r7, [pc, #144]	; (40a7e4 <_malloc_trim_r+0x94>)
  40a754:	460c      	mov	r4, r1
  40a756:	4606      	mov	r6, r0
  40a758:	f000 fef6 	bl	40b548 <__malloc_lock>
  40a75c:	68bb      	ldr	r3, [r7, #8]
  40a75e:	685d      	ldr	r5, [r3, #4]
  40a760:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40a764:	310f      	adds	r1, #15
  40a766:	f025 0503 	bic.w	r5, r5, #3
  40a76a:	4429      	add	r1, r5
  40a76c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40a770:	f021 010f 	bic.w	r1, r1, #15
  40a774:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40a778:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40a77c:	db07      	blt.n	40a78e <_malloc_trim_r+0x3e>
  40a77e:	2100      	movs	r1, #0
  40a780:	4630      	mov	r0, r6
  40a782:	f001 fb8d 	bl	40bea0 <_sbrk_r>
  40a786:	68bb      	ldr	r3, [r7, #8]
  40a788:	442b      	add	r3, r5
  40a78a:	4298      	cmp	r0, r3
  40a78c:	d004      	beq.n	40a798 <_malloc_trim_r+0x48>
  40a78e:	4630      	mov	r0, r6
  40a790:	f000 fee0 	bl	40b554 <__malloc_unlock>
  40a794:	2000      	movs	r0, #0
  40a796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a798:	4261      	negs	r1, r4
  40a79a:	4630      	mov	r0, r6
  40a79c:	f001 fb80 	bl	40bea0 <_sbrk_r>
  40a7a0:	3001      	adds	r0, #1
  40a7a2:	d00d      	beq.n	40a7c0 <_malloc_trim_r+0x70>
  40a7a4:	4b10      	ldr	r3, [pc, #64]	; (40a7e8 <_malloc_trim_r+0x98>)
  40a7a6:	68ba      	ldr	r2, [r7, #8]
  40a7a8:	6819      	ldr	r1, [r3, #0]
  40a7aa:	1b2d      	subs	r5, r5, r4
  40a7ac:	f045 0501 	orr.w	r5, r5, #1
  40a7b0:	4630      	mov	r0, r6
  40a7b2:	1b09      	subs	r1, r1, r4
  40a7b4:	6055      	str	r5, [r2, #4]
  40a7b6:	6019      	str	r1, [r3, #0]
  40a7b8:	f000 fecc 	bl	40b554 <__malloc_unlock>
  40a7bc:	2001      	movs	r0, #1
  40a7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a7c0:	2100      	movs	r1, #0
  40a7c2:	4630      	mov	r0, r6
  40a7c4:	f001 fb6c 	bl	40bea0 <_sbrk_r>
  40a7c8:	68ba      	ldr	r2, [r7, #8]
  40a7ca:	1a83      	subs	r3, r0, r2
  40a7cc:	2b0f      	cmp	r3, #15
  40a7ce:	ddde      	ble.n	40a78e <_malloc_trim_r+0x3e>
  40a7d0:	4c06      	ldr	r4, [pc, #24]	; (40a7ec <_malloc_trim_r+0x9c>)
  40a7d2:	4905      	ldr	r1, [pc, #20]	; (40a7e8 <_malloc_trim_r+0x98>)
  40a7d4:	6824      	ldr	r4, [r4, #0]
  40a7d6:	f043 0301 	orr.w	r3, r3, #1
  40a7da:	1b00      	subs	r0, r0, r4
  40a7dc:	6053      	str	r3, [r2, #4]
  40a7de:	6008      	str	r0, [r1, #0]
  40a7e0:	e7d5      	b.n	40a78e <_malloc_trim_r+0x3e>
  40a7e2:	bf00      	nop
  40a7e4:	204005e0 	.word	0x204005e0
  40a7e8:	2040c408 	.word	0x2040c408
  40a7ec:	204009e8 	.word	0x204009e8

0040a7f0 <_free_r>:
  40a7f0:	2900      	cmp	r1, #0
  40a7f2:	d044      	beq.n	40a87e <_free_r+0x8e>
  40a7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a7f8:	460d      	mov	r5, r1
  40a7fa:	4680      	mov	r8, r0
  40a7fc:	f000 fea4 	bl	40b548 <__malloc_lock>
  40a800:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40a804:	4969      	ldr	r1, [pc, #420]	; (40a9ac <_free_r+0x1bc>)
  40a806:	f027 0301 	bic.w	r3, r7, #1
  40a80a:	f1a5 0408 	sub.w	r4, r5, #8
  40a80e:	18e2      	adds	r2, r4, r3
  40a810:	688e      	ldr	r6, [r1, #8]
  40a812:	6850      	ldr	r0, [r2, #4]
  40a814:	42b2      	cmp	r2, r6
  40a816:	f020 0003 	bic.w	r0, r0, #3
  40a81a:	d05e      	beq.n	40a8da <_free_r+0xea>
  40a81c:	07fe      	lsls	r6, r7, #31
  40a81e:	6050      	str	r0, [r2, #4]
  40a820:	d40b      	bmi.n	40a83a <_free_r+0x4a>
  40a822:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40a826:	1be4      	subs	r4, r4, r7
  40a828:	f101 0e08 	add.w	lr, r1, #8
  40a82c:	68a5      	ldr	r5, [r4, #8]
  40a82e:	4575      	cmp	r5, lr
  40a830:	443b      	add	r3, r7
  40a832:	d06d      	beq.n	40a910 <_free_r+0x120>
  40a834:	68e7      	ldr	r7, [r4, #12]
  40a836:	60ef      	str	r7, [r5, #12]
  40a838:	60bd      	str	r5, [r7, #8]
  40a83a:	1815      	adds	r5, r2, r0
  40a83c:	686d      	ldr	r5, [r5, #4]
  40a83e:	07ed      	lsls	r5, r5, #31
  40a840:	d53e      	bpl.n	40a8c0 <_free_r+0xd0>
  40a842:	f043 0201 	orr.w	r2, r3, #1
  40a846:	6062      	str	r2, [r4, #4]
  40a848:	50e3      	str	r3, [r4, r3]
  40a84a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a84e:	d217      	bcs.n	40a880 <_free_r+0x90>
  40a850:	08db      	lsrs	r3, r3, #3
  40a852:	1c58      	adds	r0, r3, #1
  40a854:	109a      	asrs	r2, r3, #2
  40a856:	684d      	ldr	r5, [r1, #4]
  40a858:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40a85c:	60a7      	str	r7, [r4, #8]
  40a85e:	2301      	movs	r3, #1
  40a860:	4093      	lsls	r3, r2
  40a862:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40a866:	432b      	orrs	r3, r5
  40a868:	3a08      	subs	r2, #8
  40a86a:	60e2      	str	r2, [r4, #12]
  40a86c:	604b      	str	r3, [r1, #4]
  40a86e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40a872:	60fc      	str	r4, [r7, #12]
  40a874:	4640      	mov	r0, r8
  40a876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a87a:	f000 be6b 	b.w	40b554 <__malloc_unlock>
  40a87e:	4770      	bx	lr
  40a880:	0a5a      	lsrs	r2, r3, #9
  40a882:	2a04      	cmp	r2, #4
  40a884:	d852      	bhi.n	40a92c <_free_r+0x13c>
  40a886:	099a      	lsrs	r2, r3, #6
  40a888:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40a88c:	00ff      	lsls	r7, r7, #3
  40a88e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40a892:	19c8      	adds	r0, r1, r7
  40a894:	59ca      	ldr	r2, [r1, r7]
  40a896:	3808      	subs	r0, #8
  40a898:	4290      	cmp	r0, r2
  40a89a:	d04f      	beq.n	40a93c <_free_r+0x14c>
  40a89c:	6851      	ldr	r1, [r2, #4]
  40a89e:	f021 0103 	bic.w	r1, r1, #3
  40a8a2:	428b      	cmp	r3, r1
  40a8a4:	d232      	bcs.n	40a90c <_free_r+0x11c>
  40a8a6:	6892      	ldr	r2, [r2, #8]
  40a8a8:	4290      	cmp	r0, r2
  40a8aa:	d1f7      	bne.n	40a89c <_free_r+0xac>
  40a8ac:	68c3      	ldr	r3, [r0, #12]
  40a8ae:	60a0      	str	r0, [r4, #8]
  40a8b0:	60e3      	str	r3, [r4, #12]
  40a8b2:	609c      	str	r4, [r3, #8]
  40a8b4:	60c4      	str	r4, [r0, #12]
  40a8b6:	4640      	mov	r0, r8
  40a8b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a8bc:	f000 be4a 	b.w	40b554 <__malloc_unlock>
  40a8c0:	6895      	ldr	r5, [r2, #8]
  40a8c2:	4f3b      	ldr	r7, [pc, #236]	; (40a9b0 <_free_r+0x1c0>)
  40a8c4:	42bd      	cmp	r5, r7
  40a8c6:	4403      	add	r3, r0
  40a8c8:	d040      	beq.n	40a94c <_free_r+0x15c>
  40a8ca:	68d0      	ldr	r0, [r2, #12]
  40a8cc:	60e8      	str	r0, [r5, #12]
  40a8ce:	f043 0201 	orr.w	r2, r3, #1
  40a8d2:	6085      	str	r5, [r0, #8]
  40a8d4:	6062      	str	r2, [r4, #4]
  40a8d6:	50e3      	str	r3, [r4, r3]
  40a8d8:	e7b7      	b.n	40a84a <_free_r+0x5a>
  40a8da:	07ff      	lsls	r7, r7, #31
  40a8dc:	4403      	add	r3, r0
  40a8de:	d407      	bmi.n	40a8f0 <_free_r+0x100>
  40a8e0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40a8e4:	1aa4      	subs	r4, r4, r2
  40a8e6:	4413      	add	r3, r2
  40a8e8:	68a0      	ldr	r0, [r4, #8]
  40a8ea:	68e2      	ldr	r2, [r4, #12]
  40a8ec:	60c2      	str	r2, [r0, #12]
  40a8ee:	6090      	str	r0, [r2, #8]
  40a8f0:	4a30      	ldr	r2, [pc, #192]	; (40a9b4 <_free_r+0x1c4>)
  40a8f2:	6812      	ldr	r2, [r2, #0]
  40a8f4:	f043 0001 	orr.w	r0, r3, #1
  40a8f8:	4293      	cmp	r3, r2
  40a8fa:	6060      	str	r0, [r4, #4]
  40a8fc:	608c      	str	r4, [r1, #8]
  40a8fe:	d3b9      	bcc.n	40a874 <_free_r+0x84>
  40a900:	4b2d      	ldr	r3, [pc, #180]	; (40a9b8 <_free_r+0x1c8>)
  40a902:	4640      	mov	r0, r8
  40a904:	6819      	ldr	r1, [r3, #0]
  40a906:	f7ff ff23 	bl	40a750 <_malloc_trim_r>
  40a90a:	e7b3      	b.n	40a874 <_free_r+0x84>
  40a90c:	4610      	mov	r0, r2
  40a90e:	e7cd      	b.n	40a8ac <_free_r+0xbc>
  40a910:	1811      	adds	r1, r2, r0
  40a912:	6849      	ldr	r1, [r1, #4]
  40a914:	07c9      	lsls	r1, r1, #31
  40a916:	d444      	bmi.n	40a9a2 <_free_r+0x1b2>
  40a918:	6891      	ldr	r1, [r2, #8]
  40a91a:	68d2      	ldr	r2, [r2, #12]
  40a91c:	60ca      	str	r2, [r1, #12]
  40a91e:	4403      	add	r3, r0
  40a920:	f043 0001 	orr.w	r0, r3, #1
  40a924:	6091      	str	r1, [r2, #8]
  40a926:	6060      	str	r0, [r4, #4]
  40a928:	50e3      	str	r3, [r4, r3]
  40a92a:	e7a3      	b.n	40a874 <_free_r+0x84>
  40a92c:	2a14      	cmp	r2, #20
  40a92e:	d816      	bhi.n	40a95e <_free_r+0x16e>
  40a930:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40a934:	00ff      	lsls	r7, r7, #3
  40a936:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40a93a:	e7aa      	b.n	40a892 <_free_r+0xa2>
  40a93c:	10aa      	asrs	r2, r5, #2
  40a93e:	2301      	movs	r3, #1
  40a940:	684d      	ldr	r5, [r1, #4]
  40a942:	4093      	lsls	r3, r2
  40a944:	432b      	orrs	r3, r5
  40a946:	604b      	str	r3, [r1, #4]
  40a948:	4603      	mov	r3, r0
  40a94a:	e7b0      	b.n	40a8ae <_free_r+0xbe>
  40a94c:	f043 0201 	orr.w	r2, r3, #1
  40a950:	614c      	str	r4, [r1, #20]
  40a952:	610c      	str	r4, [r1, #16]
  40a954:	60e5      	str	r5, [r4, #12]
  40a956:	60a5      	str	r5, [r4, #8]
  40a958:	6062      	str	r2, [r4, #4]
  40a95a:	50e3      	str	r3, [r4, r3]
  40a95c:	e78a      	b.n	40a874 <_free_r+0x84>
  40a95e:	2a54      	cmp	r2, #84	; 0x54
  40a960:	d806      	bhi.n	40a970 <_free_r+0x180>
  40a962:	0b1a      	lsrs	r2, r3, #12
  40a964:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40a968:	00ff      	lsls	r7, r7, #3
  40a96a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40a96e:	e790      	b.n	40a892 <_free_r+0xa2>
  40a970:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a974:	d806      	bhi.n	40a984 <_free_r+0x194>
  40a976:	0bda      	lsrs	r2, r3, #15
  40a978:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40a97c:	00ff      	lsls	r7, r7, #3
  40a97e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40a982:	e786      	b.n	40a892 <_free_r+0xa2>
  40a984:	f240 5054 	movw	r0, #1364	; 0x554
  40a988:	4282      	cmp	r2, r0
  40a98a:	d806      	bhi.n	40a99a <_free_r+0x1aa>
  40a98c:	0c9a      	lsrs	r2, r3, #18
  40a98e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40a992:	00ff      	lsls	r7, r7, #3
  40a994:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40a998:	e77b      	b.n	40a892 <_free_r+0xa2>
  40a99a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40a99e:	257e      	movs	r5, #126	; 0x7e
  40a9a0:	e777      	b.n	40a892 <_free_r+0xa2>
  40a9a2:	f043 0101 	orr.w	r1, r3, #1
  40a9a6:	6061      	str	r1, [r4, #4]
  40a9a8:	6013      	str	r3, [r2, #0]
  40a9aa:	e763      	b.n	40a874 <_free_r+0x84>
  40a9ac:	204005e0 	.word	0x204005e0
  40a9b0:	204005e8 	.word	0x204005e8
  40a9b4:	204009ec 	.word	0x204009ec
  40a9b8:	2040c438 	.word	0x2040c438

0040a9bc <__sfvwrite_r>:
  40a9bc:	6893      	ldr	r3, [r2, #8]
  40a9be:	2b00      	cmp	r3, #0
  40a9c0:	d073      	beq.n	40aaaa <__sfvwrite_r+0xee>
  40a9c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a9c6:	898b      	ldrh	r3, [r1, #12]
  40a9c8:	b083      	sub	sp, #12
  40a9ca:	460c      	mov	r4, r1
  40a9cc:	0719      	lsls	r1, r3, #28
  40a9ce:	9000      	str	r0, [sp, #0]
  40a9d0:	4616      	mov	r6, r2
  40a9d2:	d526      	bpl.n	40aa22 <__sfvwrite_r+0x66>
  40a9d4:	6922      	ldr	r2, [r4, #16]
  40a9d6:	b322      	cbz	r2, 40aa22 <__sfvwrite_r+0x66>
  40a9d8:	f013 0002 	ands.w	r0, r3, #2
  40a9dc:	6835      	ldr	r5, [r6, #0]
  40a9de:	d02c      	beq.n	40aa3a <__sfvwrite_r+0x7e>
  40a9e0:	f04f 0900 	mov.w	r9, #0
  40a9e4:	4fb0      	ldr	r7, [pc, #704]	; (40aca8 <__sfvwrite_r+0x2ec>)
  40a9e6:	46c8      	mov	r8, r9
  40a9e8:	46b2      	mov	sl, r6
  40a9ea:	45b8      	cmp	r8, r7
  40a9ec:	4643      	mov	r3, r8
  40a9ee:	464a      	mov	r2, r9
  40a9f0:	bf28      	it	cs
  40a9f2:	463b      	movcs	r3, r7
  40a9f4:	9800      	ldr	r0, [sp, #0]
  40a9f6:	f1b8 0f00 	cmp.w	r8, #0
  40a9fa:	d050      	beq.n	40aa9e <__sfvwrite_r+0xe2>
  40a9fc:	69e1      	ldr	r1, [r4, #28]
  40a9fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40aa00:	47b0      	blx	r6
  40aa02:	2800      	cmp	r0, #0
  40aa04:	dd58      	ble.n	40aab8 <__sfvwrite_r+0xfc>
  40aa06:	f8da 3008 	ldr.w	r3, [sl, #8]
  40aa0a:	1a1b      	subs	r3, r3, r0
  40aa0c:	4481      	add	r9, r0
  40aa0e:	eba8 0800 	sub.w	r8, r8, r0
  40aa12:	f8ca 3008 	str.w	r3, [sl, #8]
  40aa16:	2b00      	cmp	r3, #0
  40aa18:	d1e7      	bne.n	40a9ea <__sfvwrite_r+0x2e>
  40aa1a:	2000      	movs	r0, #0
  40aa1c:	b003      	add	sp, #12
  40aa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa22:	4621      	mov	r1, r4
  40aa24:	9800      	ldr	r0, [sp, #0]
  40aa26:	f7fe fc91 	bl	40934c <__swsetup_r>
  40aa2a:	2800      	cmp	r0, #0
  40aa2c:	f040 8133 	bne.w	40ac96 <__sfvwrite_r+0x2da>
  40aa30:	89a3      	ldrh	r3, [r4, #12]
  40aa32:	6835      	ldr	r5, [r6, #0]
  40aa34:	f013 0002 	ands.w	r0, r3, #2
  40aa38:	d1d2      	bne.n	40a9e0 <__sfvwrite_r+0x24>
  40aa3a:	f013 0901 	ands.w	r9, r3, #1
  40aa3e:	d145      	bne.n	40aacc <__sfvwrite_r+0x110>
  40aa40:	464f      	mov	r7, r9
  40aa42:	9601      	str	r6, [sp, #4]
  40aa44:	b337      	cbz	r7, 40aa94 <__sfvwrite_r+0xd8>
  40aa46:	059a      	lsls	r2, r3, #22
  40aa48:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40aa4c:	f140 8083 	bpl.w	40ab56 <__sfvwrite_r+0x19a>
  40aa50:	4547      	cmp	r7, r8
  40aa52:	46c3      	mov	fp, r8
  40aa54:	f0c0 80ab 	bcc.w	40abae <__sfvwrite_r+0x1f2>
  40aa58:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40aa5c:	f040 80ac 	bne.w	40abb8 <__sfvwrite_r+0x1fc>
  40aa60:	6820      	ldr	r0, [r4, #0]
  40aa62:	46ba      	mov	sl, r7
  40aa64:	465a      	mov	r2, fp
  40aa66:	4649      	mov	r1, r9
  40aa68:	f000 fd0a 	bl	40b480 <memmove>
  40aa6c:	68a2      	ldr	r2, [r4, #8]
  40aa6e:	6823      	ldr	r3, [r4, #0]
  40aa70:	eba2 0208 	sub.w	r2, r2, r8
  40aa74:	445b      	add	r3, fp
  40aa76:	60a2      	str	r2, [r4, #8]
  40aa78:	6023      	str	r3, [r4, #0]
  40aa7a:	9a01      	ldr	r2, [sp, #4]
  40aa7c:	6893      	ldr	r3, [r2, #8]
  40aa7e:	eba3 030a 	sub.w	r3, r3, sl
  40aa82:	44d1      	add	r9, sl
  40aa84:	eba7 070a 	sub.w	r7, r7, sl
  40aa88:	6093      	str	r3, [r2, #8]
  40aa8a:	2b00      	cmp	r3, #0
  40aa8c:	d0c5      	beq.n	40aa1a <__sfvwrite_r+0x5e>
  40aa8e:	89a3      	ldrh	r3, [r4, #12]
  40aa90:	2f00      	cmp	r7, #0
  40aa92:	d1d8      	bne.n	40aa46 <__sfvwrite_r+0x8a>
  40aa94:	f8d5 9000 	ldr.w	r9, [r5]
  40aa98:	686f      	ldr	r7, [r5, #4]
  40aa9a:	3508      	adds	r5, #8
  40aa9c:	e7d2      	b.n	40aa44 <__sfvwrite_r+0x88>
  40aa9e:	f8d5 9000 	ldr.w	r9, [r5]
  40aaa2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40aaa6:	3508      	adds	r5, #8
  40aaa8:	e79f      	b.n	40a9ea <__sfvwrite_r+0x2e>
  40aaaa:	2000      	movs	r0, #0
  40aaac:	4770      	bx	lr
  40aaae:	4621      	mov	r1, r4
  40aab0:	9800      	ldr	r0, [sp, #0]
  40aab2:	f7ff fd1f 	bl	40a4f4 <_fflush_r>
  40aab6:	b370      	cbz	r0, 40ab16 <__sfvwrite_r+0x15a>
  40aab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40aabc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40aac0:	f04f 30ff 	mov.w	r0, #4294967295
  40aac4:	81a3      	strh	r3, [r4, #12]
  40aac6:	b003      	add	sp, #12
  40aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aacc:	4681      	mov	r9, r0
  40aace:	4633      	mov	r3, r6
  40aad0:	464e      	mov	r6, r9
  40aad2:	46a8      	mov	r8, r5
  40aad4:	469a      	mov	sl, r3
  40aad6:	464d      	mov	r5, r9
  40aad8:	b34e      	cbz	r6, 40ab2e <__sfvwrite_r+0x172>
  40aada:	b380      	cbz	r0, 40ab3e <__sfvwrite_r+0x182>
  40aadc:	6820      	ldr	r0, [r4, #0]
  40aade:	6923      	ldr	r3, [r4, #16]
  40aae0:	6962      	ldr	r2, [r4, #20]
  40aae2:	45b1      	cmp	r9, r6
  40aae4:	46cb      	mov	fp, r9
  40aae6:	bf28      	it	cs
  40aae8:	46b3      	movcs	fp, r6
  40aaea:	4298      	cmp	r0, r3
  40aaec:	465f      	mov	r7, fp
  40aaee:	d904      	bls.n	40aafa <__sfvwrite_r+0x13e>
  40aaf0:	68a3      	ldr	r3, [r4, #8]
  40aaf2:	4413      	add	r3, r2
  40aaf4:	459b      	cmp	fp, r3
  40aaf6:	f300 80a6 	bgt.w	40ac46 <__sfvwrite_r+0x28a>
  40aafa:	4593      	cmp	fp, r2
  40aafc:	db4b      	blt.n	40ab96 <__sfvwrite_r+0x1da>
  40aafe:	4613      	mov	r3, r2
  40ab00:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40ab02:	69e1      	ldr	r1, [r4, #28]
  40ab04:	9800      	ldr	r0, [sp, #0]
  40ab06:	462a      	mov	r2, r5
  40ab08:	47b8      	blx	r7
  40ab0a:	1e07      	subs	r7, r0, #0
  40ab0c:	ddd4      	ble.n	40aab8 <__sfvwrite_r+0xfc>
  40ab0e:	ebb9 0907 	subs.w	r9, r9, r7
  40ab12:	d0cc      	beq.n	40aaae <__sfvwrite_r+0xf2>
  40ab14:	2001      	movs	r0, #1
  40ab16:	f8da 3008 	ldr.w	r3, [sl, #8]
  40ab1a:	1bdb      	subs	r3, r3, r7
  40ab1c:	443d      	add	r5, r7
  40ab1e:	1bf6      	subs	r6, r6, r7
  40ab20:	f8ca 3008 	str.w	r3, [sl, #8]
  40ab24:	2b00      	cmp	r3, #0
  40ab26:	f43f af78 	beq.w	40aa1a <__sfvwrite_r+0x5e>
  40ab2a:	2e00      	cmp	r6, #0
  40ab2c:	d1d5      	bne.n	40aada <__sfvwrite_r+0x11e>
  40ab2e:	f108 0308 	add.w	r3, r8, #8
  40ab32:	e913 0060 	ldmdb	r3, {r5, r6}
  40ab36:	4698      	mov	r8, r3
  40ab38:	3308      	adds	r3, #8
  40ab3a:	2e00      	cmp	r6, #0
  40ab3c:	d0f9      	beq.n	40ab32 <__sfvwrite_r+0x176>
  40ab3e:	4632      	mov	r2, r6
  40ab40:	210a      	movs	r1, #10
  40ab42:	4628      	mov	r0, r5
  40ab44:	f000 fc4c 	bl	40b3e0 <memchr>
  40ab48:	2800      	cmp	r0, #0
  40ab4a:	f000 80a1 	beq.w	40ac90 <__sfvwrite_r+0x2d4>
  40ab4e:	3001      	adds	r0, #1
  40ab50:	eba0 0905 	sub.w	r9, r0, r5
  40ab54:	e7c2      	b.n	40aadc <__sfvwrite_r+0x120>
  40ab56:	6820      	ldr	r0, [r4, #0]
  40ab58:	6923      	ldr	r3, [r4, #16]
  40ab5a:	4298      	cmp	r0, r3
  40ab5c:	d802      	bhi.n	40ab64 <__sfvwrite_r+0x1a8>
  40ab5e:	6963      	ldr	r3, [r4, #20]
  40ab60:	429f      	cmp	r7, r3
  40ab62:	d25d      	bcs.n	40ac20 <__sfvwrite_r+0x264>
  40ab64:	45b8      	cmp	r8, r7
  40ab66:	bf28      	it	cs
  40ab68:	46b8      	movcs	r8, r7
  40ab6a:	4642      	mov	r2, r8
  40ab6c:	4649      	mov	r1, r9
  40ab6e:	f000 fc87 	bl	40b480 <memmove>
  40ab72:	68a3      	ldr	r3, [r4, #8]
  40ab74:	6822      	ldr	r2, [r4, #0]
  40ab76:	eba3 0308 	sub.w	r3, r3, r8
  40ab7a:	4442      	add	r2, r8
  40ab7c:	60a3      	str	r3, [r4, #8]
  40ab7e:	6022      	str	r2, [r4, #0]
  40ab80:	b10b      	cbz	r3, 40ab86 <__sfvwrite_r+0x1ca>
  40ab82:	46c2      	mov	sl, r8
  40ab84:	e779      	b.n	40aa7a <__sfvwrite_r+0xbe>
  40ab86:	4621      	mov	r1, r4
  40ab88:	9800      	ldr	r0, [sp, #0]
  40ab8a:	f7ff fcb3 	bl	40a4f4 <_fflush_r>
  40ab8e:	2800      	cmp	r0, #0
  40ab90:	d192      	bne.n	40aab8 <__sfvwrite_r+0xfc>
  40ab92:	46c2      	mov	sl, r8
  40ab94:	e771      	b.n	40aa7a <__sfvwrite_r+0xbe>
  40ab96:	465a      	mov	r2, fp
  40ab98:	4629      	mov	r1, r5
  40ab9a:	f000 fc71 	bl	40b480 <memmove>
  40ab9e:	68a2      	ldr	r2, [r4, #8]
  40aba0:	6823      	ldr	r3, [r4, #0]
  40aba2:	eba2 020b 	sub.w	r2, r2, fp
  40aba6:	445b      	add	r3, fp
  40aba8:	60a2      	str	r2, [r4, #8]
  40abaa:	6023      	str	r3, [r4, #0]
  40abac:	e7af      	b.n	40ab0e <__sfvwrite_r+0x152>
  40abae:	6820      	ldr	r0, [r4, #0]
  40abb0:	46b8      	mov	r8, r7
  40abb2:	46ba      	mov	sl, r7
  40abb4:	46bb      	mov	fp, r7
  40abb6:	e755      	b.n	40aa64 <__sfvwrite_r+0xa8>
  40abb8:	6962      	ldr	r2, [r4, #20]
  40abba:	6820      	ldr	r0, [r4, #0]
  40abbc:	6921      	ldr	r1, [r4, #16]
  40abbe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40abc2:	eba0 0a01 	sub.w	sl, r0, r1
  40abc6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40abca:	f10a 0001 	add.w	r0, sl, #1
  40abce:	ea4f 0868 	mov.w	r8, r8, asr #1
  40abd2:	4438      	add	r0, r7
  40abd4:	4540      	cmp	r0, r8
  40abd6:	4642      	mov	r2, r8
  40abd8:	bf84      	itt	hi
  40abda:	4680      	movhi	r8, r0
  40abdc:	4642      	movhi	r2, r8
  40abde:	055b      	lsls	r3, r3, #21
  40abe0:	d544      	bpl.n	40ac6c <__sfvwrite_r+0x2b0>
  40abe2:	4611      	mov	r1, r2
  40abe4:	9800      	ldr	r0, [sp, #0]
  40abe6:	f000 f92f 	bl	40ae48 <_malloc_r>
  40abea:	4683      	mov	fp, r0
  40abec:	2800      	cmp	r0, #0
  40abee:	d055      	beq.n	40ac9c <__sfvwrite_r+0x2e0>
  40abf0:	4652      	mov	r2, sl
  40abf2:	6921      	ldr	r1, [r4, #16]
  40abf4:	f7fc f856 	bl	406ca4 <memcpy>
  40abf8:	89a3      	ldrh	r3, [r4, #12]
  40abfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40abfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40ac02:	81a3      	strh	r3, [r4, #12]
  40ac04:	eb0b 000a 	add.w	r0, fp, sl
  40ac08:	eba8 030a 	sub.w	r3, r8, sl
  40ac0c:	f8c4 b010 	str.w	fp, [r4, #16]
  40ac10:	f8c4 8014 	str.w	r8, [r4, #20]
  40ac14:	6020      	str	r0, [r4, #0]
  40ac16:	60a3      	str	r3, [r4, #8]
  40ac18:	46b8      	mov	r8, r7
  40ac1a:	46ba      	mov	sl, r7
  40ac1c:	46bb      	mov	fp, r7
  40ac1e:	e721      	b.n	40aa64 <__sfvwrite_r+0xa8>
  40ac20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40ac24:	42b9      	cmp	r1, r7
  40ac26:	bf28      	it	cs
  40ac28:	4639      	movcs	r1, r7
  40ac2a:	464a      	mov	r2, r9
  40ac2c:	fb91 f1f3 	sdiv	r1, r1, r3
  40ac30:	9800      	ldr	r0, [sp, #0]
  40ac32:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40ac34:	fb03 f301 	mul.w	r3, r3, r1
  40ac38:	69e1      	ldr	r1, [r4, #28]
  40ac3a:	47b0      	blx	r6
  40ac3c:	f1b0 0a00 	subs.w	sl, r0, #0
  40ac40:	f73f af1b 	bgt.w	40aa7a <__sfvwrite_r+0xbe>
  40ac44:	e738      	b.n	40aab8 <__sfvwrite_r+0xfc>
  40ac46:	461a      	mov	r2, r3
  40ac48:	4629      	mov	r1, r5
  40ac4a:	9301      	str	r3, [sp, #4]
  40ac4c:	f000 fc18 	bl	40b480 <memmove>
  40ac50:	6822      	ldr	r2, [r4, #0]
  40ac52:	9b01      	ldr	r3, [sp, #4]
  40ac54:	9800      	ldr	r0, [sp, #0]
  40ac56:	441a      	add	r2, r3
  40ac58:	6022      	str	r2, [r4, #0]
  40ac5a:	4621      	mov	r1, r4
  40ac5c:	f7ff fc4a 	bl	40a4f4 <_fflush_r>
  40ac60:	9b01      	ldr	r3, [sp, #4]
  40ac62:	2800      	cmp	r0, #0
  40ac64:	f47f af28 	bne.w	40aab8 <__sfvwrite_r+0xfc>
  40ac68:	461f      	mov	r7, r3
  40ac6a:	e750      	b.n	40ab0e <__sfvwrite_r+0x152>
  40ac6c:	9800      	ldr	r0, [sp, #0]
  40ac6e:	f000 ff71 	bl	40bb54 <_realloc_r>
  40ac72:	4683      	mov	fp, r0
  40ac74:	2800      	cmp	r0, #0
  40ac76:	d1c5      	bne.n	40ac04 <__sfvwrite_r+0x248>
  40ac78:	9d00      	ldr	r5, [sp, #0]
  40ac7a:	6921      	ldr	r1, [r4, #16]
  40ac7c:	4628      	mov	r0, r5
  40ac7e:	f7ff fdb7 	bl	40a7f0 <_free_r>
  40ac82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ac86:	220c      	movs	r2, #12
  40ac88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40ac8c:	602a      	str	r2, [r5, #0]
  40ac8e:	e715      	b.n	40aabc <__sfvwrite_r+0x100>
  40ac90:	f106 0901 	add.w	r9, r6, #1
  40ac94:	e722      	b.n	40aadc <__sfvwrite_r+0x120>
  40ac96:	f04f 30ff 	mov.w	r0, #4294967295
  40ac9a:	e6bf      	b.n	40aa1c <__sfvwrite_r+0x60>
  40ac9c:	9a00      	ldr	r2, [sp, #0]
  40ac9e:	230c      	movs	r3, #12
  40aca0:	6013      	str	r3, [r2, #0]
  40aca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40aca6:	e709      	b.n	40aabc <__sfvwrite_r+0x100>
  40aca8:	7ffffc00 	.word	0x7ffffc00

0040acac <_fwalk_reent>:
  40acac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40acb0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40acb4:	d01f      	beq.n	40acf6 <_fwalk_reent+0x4a>
  40acb6:	4688      	mov	r8, r1
  40acb8:	4606      	mov	r6, r0
  40acba:	f04f 0900 	mov.w	r9, #0
  40acbe:	687d      	ldr	r5, [r7, #4]
  40acc0:	68bc      	ldr	r4, [r7, #8]
  40acc2:	3d01      	subs	r5, #1
  40acc4:	d411      	bmi.n	40acea <_fwalk_reent+0x3e>
  40acc6:	89a3      	ldrh	r3, [r4, #12]
  40acc8:	2b01      	cmp	r3, #1
  40acca:	f105 35ff 	add.w	r5, r5, #4294967295
  40acce:	d908      	bls.n	40ace2 <_fwalk_reent+0x36>
  40acd0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40acd4:	3301      	adds	r3, #1
  40acd6:	4621      	mov	r1, r4
  40acd8:	4630      	mov	r0, r6
  40acda:	d002      	beq.n	40ace2 <_fwalk_reent+0x36>
  40acdc:	47c0      	blx	r8
  40acde:	ea49 0900 	orr.w	r9, r9, r0
  40ace2:	1c6b      	adds	r3, r5, #1
  40ace4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40ace8:	d1ed      	bne.n	40acc6 <_fwalk_reent+0x1a>
  40acea:	683f      	ldr	r7, [r7, #0]
  40acec:	2f00      	cmp	r7, #0
  40acee:	d1e6      	bne.n	40acbe <_fwalk_reent+0x12>
  40acf0:	4648      	mov	r0, r9
  40acf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40acf6:	46b9      	mov	r9, r7
  40acf8:	4648      	mov	r0, r9
  40acfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40acfe:	bf00      	nop

0040ad00 <__locale_mb_cur_max>:
  40ad00:	4b04      	ldr	r3, [pc, #16]	; (40ad14 <__locale_mb_cur_max+0x14>)
  40ad02:	4a05      	ldr	r2, [pc, #20]	; (40ad18 <__locale_mb_cur_max+0x18>)
  40ad04:	681b      	ldr	r3, [r3, #0]
  40ad06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40ad08:	2b00      	cmp	r3, #0
  40ad0a:	bf08      	it	eq
  40ad0c:	4613      	moveq	r3, r2
  40ad0e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40ad12:	4770      	bx	lr
  40ad14:	20400040 	.word	0x20400040
  40ad18:	20400474 	.word	0x20400474

0040ad1c <_localeconv_r>:
  40ad1c:	4a04      	ldr	r2, [pc, #16]	; (40ad30 <_localeconv_r+0x14>)
  40ad1e:	4b05      	ldr	r3, [pc, #20]	; (40ad34 <_localeconv_r+0x18>)
  40ad20:	6812      	ldr	r2, [r2, #0]
  40ad22:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40ad24:	2800      	cmp	r0, #0
  40ad26:	bf08      	it	eq
  40ad28:	4618      	moveq	r0, r3
  40ad2a:	30f0      	adds	r0, #240	; 0xf0
  40ad2c:	4770      	bx	lr
  40ad2e:	bf00      	nop
  40ad30:	20400040 	.word	0x20400040
  40ad34:	20400474 	.word	0x20400474

0040ad38 <__retarget_lock_init_recursive>:
  40ad38:	4770      	bx	lr
  40ad3a:	bf00      	nop

0040ad3c <__retarget_lock_close_recursive>:
  40ad3c:	4770      	bx	lr
  40ad3e:	bf00      	nop

0040ad40 <__retarget_lock_acquire_recursive>:
  40ad40:	4770      	bx	lr
  40ad42:	bf00      	nop

0040ad44 <__retarget_lock_release_recursive>:
  40ad44:	4770      	bx	lr
  40ad46:	bf00      	nop

0040ad48 <__swhatbuf_r>:
  40ad48:	b570      	push	{r4, r5, r6, lr}
  40ad4a:	460c      	mov	r4, r1
  40ad4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ad50:	2900      	cmp	r1, #0
  40ad52:	b090      	sub	sp, #64	; 0x40
  40ad54:	4615      	mov	r5, r2
  40ad56:	461e      	mov	r6, r3
  40ad58:	db14      	blt.n	40ad84 <__swhatbuf_r+0x3c>
  40ad5a:	aa01      	add	r2, sp, #4
  40ad5c:	f001 fb20 	bl	40c3a0 <_fstat_r>
  40ad60:	2800      	cmp	r0, #0
  40ad62:	db0f      	blt.n	40ad84 <__swhatbuf_r+0x3c>
  40ad64:	9a02      	ldr	r2, [sp, #8]
  40ad66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40ad6a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40ad6e:	fab2 f282 	clz	r2, r2
  40ad72:	0952      	lsrs	r2, r2, #5
  40ad74:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40ad78:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40ad7c:	6032      	str	r2, [r6, #0]
  40ad7e:	602b      	str	r3, [r5, #0]
  40ad80:	b010      	add	sp, #64	; 0x40
  40ad82:	bd70      	pop	{r4, r5, r6, pc}
  40ad84:	89a2      	ldrh	r2, [r4, #12]
  40ad86:	2300      	movs	r3, #0
  40ad88:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40ad8c:	6033      	str	r3, [r6, #0]
  40ad8e:	d004      	beq.n	40ad9a <__swhatbuf_r+0x52>
  40ad90:	2240      	movs	r2, #64	; 0x40
  40ad92:	4618      	mov	r0, r3
  40ad94:	602a      	str	r2, [r5, #0]
  40ad96:	b010      	add	sp, #64	; 0x40
  40ad98:	bd70      	pop	{r4, r5, r6, pc}
  40ad9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40ad9e:	602b      	str	r3, [r5, #0]
  40ada0:	b010      	add	sp, #64	; 0x40
  40ada2:	bd70      	pop	{r4, r5, r6, pc}

0040ada4 <__smakebuf_r>:
  40ada4:	898a      	ldrh	r2, [r1, #12]
  40ada6:	0792      	lsls	r2, r2, #30
  40ada8:	460b      	mov	r3, r1
  40adaa:	d506      	bpl.n	40adba <__smakebuf_r+0x16>
  40adac:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40adb0:	2101      	movs	r1, #1
  40adb2:	601a      	str	r2, [r3, #0]
  40adb4:	611a      	str	r2, [r3, #16]
  40adb6:	6159      	str	r1, [r3, #20]
  40adb8:	4770      	bx	lr
  40adba:	b5f0      	push	{r4, r5, r6, r7, lr}
  40adbc:	b083      	sub	sp, #12
  40adbe:	ab01      	add	r3, sp, #4
  40adc0:	466a      	mov	r2, sp
  40adc2:	460c      	mov	r4, r1
  40adc4:	4606      	mov	r6, r0
  40adc6:	f7ff ffbf 	bl	40ad48 <__swhatbuf_r>
  40adca:	9900      	ldr	r1, [sp, #0]
  40adcc:	4605      	mov	r5, r0
  40adce:	4630      	mov	r0, r6
  40add0:	f000 f83a 	bl	40ae48 <_malloc_r>
  40add4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40add8:	b1d8      	cbz	r0, 40ae12 <__smakebuf_r+0x6e>
  40adda:	9a01      	ldr	r2, [sp, #4]
  40addc:	4f15      	ldr	r7, [pc, #84]	; (40ae34 <__smakebuf_r+0x90>)
  40adde:	9900      	ldr	r1, [sp, #0]
  40ade0:	63f7      	str	r7, [r6, #60]	; 0x3c
  40ade2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40ade6:	81a3      	strh	r3, [r4, #12]
  40ade8:	6020      	str	r0, [r4, #0]
  40adea:	6120      	str	r0, [r4, #16]
  40adec:	6161      	str	r1, [r4, #20]
  40adee:	b91a      	cbnz	r2, 40adf8 <__smakebuf_r+0x54>
  40adf0:	432b      	orrs	r3, r5
  40adf2:	81a3      	strh	r3, [r4, #12]
  40adf4:	b003      	add	sp, #12
  40adf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40adf8:	4630      	mov	r0, r6
  40adfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40adfe:	f001 fae3 	bl	40c3c8 <_isatty_r>
  40ae02:	b1a0      	cbz	r0, 40ae2e <__smakebuf_r+0x8a>
  40ae04:	89a3      	ldrh	r3, [r4, #12]
  40ae06:	f023 0303 	bic.w	r3, r3, #3
  40ae0a:	f043 0301 	orr.w	r3, r3, #1
  40ae0e:	b21b      	sxth	r3, r3
  40ae10:	e7ee      	b.n	40adf0 <__smakebuf_r+0x4c>
  40ae12:	059a      	lsls	r2, r3, #22
  40ae14:	d4ee      	bmi.n	40adf4 <__smakebuf_r+0x50>
  40ae16:	f023 0303 	bic.w	r3, r3, #3
  40ae1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40ae1e:	f043 0302 	orr.w	r3, r3, #2
  40ae22:	2101      	movs	r1, #1
  40ae24:	81a3      	strh	r3, [r4, #12]
  40ae26:	6022      	str	r2, [r4, #0]
  40ae28:	6122      	str	r2, [r4, #16]
  40ae2a:	6161      	str	r1, [r4, #20]
  40ae2c:	e7e2      	b.n	40adf4 <__smakebuf_r+0x50>
  40ae2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ae32:	e7dd      	b.n	40adf0 <__smakebuf_r+0x4c>
  40ae34:	0040a549 	.word	0x0040a549

0040ae38 <malloc>:
  40ae38:	4b02      	ldr	r3, [pc, #8]	; (40ae44 <malloc+0xc>)
  40ae3a:	4601      	mov	r1, r0
  40ae3c:	6818      	ldr	r0, [r3, #0]
  40ae3e:	f000 b803 	b.w	40ae48 <_malloc_r>
  40ae42:	bf00      	nop
  40ae44:	20400040 	.word	0x20400040

0040ae48 <_malloc_r>:
  40ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ae4c:	f101 060b 	add.w	r6, r1, #11
  40ae50:	2e16      	cmp	r6, #22
  40ae52:	b083      	sub	sp, #12
  40ae54:	4605      	mov	r5, r0
  40ae56:	f240 809e 	bls.w	40af96 <_malloc_r+0x14e>
  40ae5a:	f036 0607 	bics.w	r6, r6, #7
  40ae5e:	f100 80bd 	bmi.w	40afdc <_malloc_r+0x194>
  40ae62:	42b1      	cmp	r1, r6
  40ae64:	f200 80ba 	bhi.w	40afdc <_malloc_r+0x194>
  40ae68:	f000 fb6e 	bl	40b548 <__malloc_lock>
  40ae6c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40ae70:	f0c0 8293 	bcc.w	40b39a <_malloc_r+0x552>
  40ae74:	0a73      	lsrs	r3, r6, #9
  40ae76:	f000 80b8 	beq.w	40afea <_malloc_r+0x1a2>
  40ae7a:	2b04      	cmp	r3, #4
  40ae7c:	f200 8179 	bhi.w	40b172 <_malloc_r+0x32a>
  40ae80:	09b3      	lsrs	r3, r6, #6
  40ae82:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40ae86:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40ae8a:	00c3      	lsls	r3, r0, #3
  40ae8c:	4fbf      	ldr	r7, [pc, #764]	; (40b18c <_malloc_r+0x344>)
  40ae8e:	443b      	add	r3, r7
  40ae90:	f1a3 0108 	sub.w	r1, r3, #8
  40ae94:	685c      	ldr	r4, [r3, #4]
  40ae96:	42a1      	cmp	r1, r4
  40ae98:	d106      	bne.n	40aea8 <_malloc_r+0x60>
  40ae9a:	e00c      	b.n	40aeb6 <_malloc_r+0x6e>
  40ae9c:	2a00      	cmp	r2, #0
  40ae9e:	f280 80aa 	bge.w	40aff6 <_malloc_r+0x1ae>
  40aea2:	68e4      	ldr	r4, [r4, #12]
  40aea4:	42a1      	cmp	r1, r4
  40aea6:	d006      	beq.n	40aeb6 <_malloc_r+0x6e>
  40aea8:	6863      	ldr	r3, [r4, #4]
  40aeaa:	f023 0303 	bic.w	r3, r3, #3
  40aeae:	1b9a      	subs	r2, r3, r6
  40aeb0:	2a0f      	cmp	r2, #15
  40aeb2:	ddf3      	ble.n	40ae9c <_malloc_r+0x54>
  40aeb4:	4670      	mov	r0, lr
  40aeb6:	693c      	ldr	r4, [r7, #16]
  40aeb8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40b1a0 <_malloc_r+0x358>
  40aebc:	4574      	cmp	r4, lr
  40aebe:	f000 81ab 	beq.w	40b218 <_malloc_r+0x3d0>
  40aec2:	6863      	ldr	r3, [r4, #4]
  40aec4:	f023 0303 	bic.w	r3, r3, #3
  40aec8:	1b9a      	subs	r2, r3, r6
  40aeca:	2a0f      	cmp	r2, #15
  40aecc:	f300 8190 	bgt.w	40b1f0 <_malloc_r+0x3a8>
  40aed0:	2a00      	cmp	r2, #0
  40aed2:	f8c7 e014 	str.w	lr, [r7, #20]
  40aed6:	f8c7 e010 	str.w	lr, [r7, #16]
  40aeda:	f280 809d 	bge.w	40b018 <_malloc_r+0x1d0>
  40aede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40aee2:	f080 8161 	bcs.w	40b1a8 <_malloc_r+0x360>
  40aee6:	08db      	lsrs	r3, r3, #3
  40aee8:	f103 0c01 	add.w	ip, r3, #1
  40aeec:	1099      	asrs	r1, r3, #2
  40aeee:	687a      	ldr	r2, [r7, #4]
  40aef0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40aef4:	f8c4 8008 	str.w	r8, [r4, #8]
  40aef8:	2301      	movs	r3, #1
  40aefa:	408b      	lsls	r3, r1
  40aefc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40af00:	4313      	orrs	r3, r2
  40af02:	3908      	subs	r1, #8
  40af04:	60e1      	str	r1, [r4, #12]
  40af06:	607b      	str	r3, [r7, #4]
  40af08:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40af0c:	f8c8 400c 	str.w	r4, [r8, #12]
  40af10:	1082      	asrs	r2, r0, #2
  40af12:	2401      	movs	r4, #1
  40af14:	4094      	lsls	r4, r2
  40af16:	429c      	cmp	r4, r3
  40af18:	f200 808b 	bhi.w	40b032 <_malloc_r+0x1ea>
  40af1c:	421c      	tst	r4, r3
  40af1e:	d106      	bne.n	40af2e <_malloc_r+0xe6>
  40af20:	f020 0003 	bic.w	r0, r0, #3
  40af24:	0064      	lsls	r4, r4, #1
  40af26:	421c      	tst	r4, r3
  40af28:	f100 0004 	add.w	r0, r0, #4
  40af2c:	d0fa      	beq.n	40af24 <_malloc_r+0xdc>
  40af2e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40af32:	46cc      	mov	ip, r9
  40af34:	4680      	mov	r8, r0
  40af36:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40af3a:	459c      	cmp	ip, r3
  40af3c:	d107      	bne.n	40af4e <_malloc_r+0x106>
  40af3e:	e16d      	b.n	40b21c <_malloc_r+0x3d4>
  40af40:	2a00      	cmp	r2, #0
  40af42:	f280 817b 	bge.w	40b23c <_malloc_r+0x3f4>
  40af46:	68db      	ldr	r3, [r3, #12]
  40af48:	459c      	cmp	ip, r3
  40af4a:	f000 8167 	beq.w	40b21c <_malloc_r+0x3d4>
  40af4e:	6859      	ldr	r1, [r3, #4]
  40af50:	f021 0103 	bic.w	r1, r1, #3
  40af54:	1b8a      	subs	r2, r1, r6
  40af56:	2a0f      	cmp	r2, #15
  40af58:	ddf2      	ble.n	40af40 <_malloc_r+0xf8>
  40af5a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40af5e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40af62:	9300      	str	r3, [sp, #0]
  40af64:	199c      	adds	r4, r3, r6
  40af66:	4628      	mov	r0, r5
  40af68:	f046 0601 	orr.w	r6, r6, #1
  40af6c:	f042 0501 	orr.w	r5, r2, #1
  40af70:	605e      	str	r6, [r3, #4]
  40af72:	f8c8 c00c 	str.w	ip, [r8, #12]
  40af76:	f8cc 8008 	str.w	r8, [ip, #8]
  40af7a:	617c      	str	r4, [r7, #20]
  40af7c:	613c      	str	r4, [r7, #16]
  40af7e:	f8c4 e00c 	str.w	lr, [r4, #12]
  40af82:	f8c4 e008 	str.w	lr, [r4, #8]
  40af86:	6065      	str	r5, [r4, #4]
  40af88:	505a      	str	r2, [r3, r1]
  40af8a:	f000 fae3 	bl	40b554 <__malloc_unlock>
  40af8e:	9b00      	ldr	r3, [sp, #0]
  40af90:	f103 0408 	add.w	r4, r3, #8
  40af94:	e01e      	b.n	40afd4 <_malloc_r+0x18c>
  40af96:	2910      	cmp	r1, #16
  40af98:	d820      	bhi.n	40afdc <_malloc_r+0x194>
  40af9a:	f000 fad5 	bl	40b548 <__malloc_lock>
  40af9e:	2610      	movs	r6, #16
  40afa0:	2318      	movs	r3, #24
  40afa2:	2002      	movs	r0, #2
  40afa4:	4f79      	ldr	r7, [pc, #484]	; (40b18c <_malloc_r+0x344>)
  40afa6:	443b      	add	r3, r7
  40afa8:	f1a3 0208 	sub.w	r2, r3, #8
  40afac:	685c      	ldr	r4, [r3, #4]
  40afae:	4294      	cmp	r4, r2
  40afb0:	f000 813d 	beq.w	40b22e <_malloc_r+0x3e6>
  40afb4:	6863      	ldr	r3, [r4, #4]
  40afb6:	68e1      	ldr	r1, [r4, #12]
  40afb8:	68a6      	ldr	r6, [r4, #8]
  40afba:	f023 0303 	bic.w	r3, r3, #3
  40afbe:	4423      	add	r3, r4
  40afc0:	4628      	mov	r0, r5
  40afc2:	685a      	ldr	r2, [r3, #4]
  40afc4:	60f1      	str	r1, [r6, #12]
  40afc6:	f042 0201 	orr.w	r2, r2, #1
  40afca:	608e      	str	r6, [r1, #8]
  40afcc:	605a      	str	r2, [r3, #4]
  40afce:	f000 fac1 	bl	40b554 <__malloc_unlock>
  40afd2:	3408      	adds	r4, #8
  40afd4:	4620      	mov	r0, r4
  40afd6:	b003      	add	sp, #12
  40afd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40afdc:	2400      	movs	r4, #0
  40afde:	230c      	movs	r3, #12
  40afe0:	4620      	mov	r0, r4
  40afe2:	602b      	str	r3, [r5, #0]
  40afe4:	b003      	add	sp, #12
  40afe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40afea:	2040      	movs	r0, #64	; 0x40
  40afec:	f44f 7300 	mov.w	r3, #512	; 0x200
  40aff0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40aff4:	e74a      	b.n	40ae8c <_malloc_r+0x44>
  40aff6:	4423      	add	r3, r4
  40aff8:	68e1      	ldr	r1, [r4, #12]
  40affa:	685a      	ldr	r2, [r3, #4]
  40affc:	68a6      	ldr	r6, [r4, #8]
  40affe:	f042 0201 	orr.w	r2, r2, #1
  40b002:	60f1      	str	r1, [r6, #12]
  40b004:	4628      	mov	r0, r5
  40b006:	608e      	str	r6, [r1, #8]
  40b008:	605a      	str	r2, [r3, #4]
  40b00a:	f000 faa3 	bl	40b554 <__malloc_unlock>
  40b00e:	3408      	adds	r4, #8
  40b010:	4620      	mov	r0, r4
  40b012:	b003      	add	sp, #12
  40b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b018:	4423      	add	r3, r4
  40b01a:	4628      	mov	r0, r5
  40b01c:	685a      	ldr	r2, [r3, #4]
  40b01e:	f042 0201 	orr.w	r2, r2, #1
  40b022:	605a      	str	r2, [r3, #4]
  40b024:	f000 fa96 	bl	40b554 <__malloc_unlock>
  40b028:	3408      	adds	r4, #8
  40b02a:	4620      	mov	r0, r4
  40b02c:	b003      	add	sp, #12
  40b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b032:	68bc      	ldr	r4, [r7, #8]
  40b034:	6863      	ldr	r3, [r4, #4]
  40b036:	f023 0803 	bic.w	r8, r3, #3
  40b03a:	45b0      	cmp	r8, r6
  40b03c:	d304      	bcc.n	40b048 <_malloc_r+0x200>
  40b03e:	eba8 0306 	sub.w	r3, r8, r6
  40b042:	2b0f      	cmp	r3, #15
  40b044:	f300 8085 	bgt.w	40b152 <_malloc_r+0x30a>
  40b048:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40b1a4 <_malloc_r+0x35c>
  40b04c:	4b50      	ldr	r3, [pc, #320]	; (40b190 <_malloc_r+0x348>)
  40b04e:	f8d9 2000 	ldr.w	r2, [r9]
  40b052:	681b      	ldr	r3, [r3, #0]
  40b054:	3201      	adds	r2, #1
  40b056:	4433      	add	r3, r6
  40b058:	eb04 0a08 	add.w	sl, r4, r8
  40b05c:	f000 8155 	beq.w	40b30a <_malloc_r+0x4c2>
  40b060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40b064:	330f      	adds	r3, #15
  40b066:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40b06a:	f02b 0b0f 	bic.w	fp, fp, #15
  40b06e:	4659      	mov	r1, fp
  40b070:	4628      	mov	r0, r5
  40b072:	f000 ff15 	bl	40bea0 <_sbrk_r>
  40b076:	1c41      	adds	r1, r0, #1
  40b078:	4602      	mov	r2, r0
  40b07a:	f000 80fc 	beq.w	40b276 <_malloc_r+0x42e>
  40b07e:	4582      	cmp	sl, r0
  40b080:	f200 80f7 	bhi.w	40b272 <_malloc_r+0x42a>
  40b084:	4b43      	ldr	r3, [pc, #268]	; (40b194 <_malloc_r+0x34c>)
  40b086:	6819      	ldr	r1, [r3, #0]
  40b088:	4459      	add	r1, fp
  40b08a:	6019      	str	r1, [r3, #0]
  40b08c:	f000 814d 	beq.w	40b32a <_malloc_r+0x4e2>
  40b090:	f8d9 0000 	ldr.w	r0, [r9]
  40b094:	3001      	adds	r0, #1
  40b096:	bf1b      	ittet	ne
  40b098:	eba2 0a0a 	subne.w	sl, r2, sl
  40b09c:	4451      	addne	r1, sl
  40b09e:	f8c9 2000 	streq.w	r2, [r9]
  40b0a2:	6019      	strne	r1, [r3, #0]
  40b0a4:	f012 0107 	ands.w	r1, r2, #7
  40b0a8:	f000 8115 	beq.w	40b2d6 <_malloc_r+0x48e>
  40b0ac:	f1c1 0008 	rsb	r0, r1, #8
  40b0b0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40b0b4:	4402      	add	r2, r0
  40b0b6:	3108      	adds	r1, #8
  40b0b8:	eb02 090b 	add.w	r9, r2, fp
  40b0bc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40b0c0:	eba1 0909 	sub.w	r9, r1, r9
  40b0c4:	4649      	mov	r1, r9
  40b0c6:	4628      	mov	r0, r5
  40b0c8:	9301      	str	r3, [sp, #4]
  40b0ca:	9200      	str	r2, [sp, #0]
  40b0cc:	f000 fee8 	bl	40bea0 <_sbrk_r>
  40b0d0:	1c43      	adds	r3, r0, #1
  40b0d2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40b0d6:	f000 8143 	beq.w	40b360 <_malloc_r+0x518>
  40b0da:	1a80      	subs	r0, r0, r2
  40b0dc:	4448      	add	r0, r9
  40b0de:	f040 0001 	orr.w	r0, r0, #1
  40b0e2:	6819      	ldr	r1, [r3, #0]
  40b0e4:	60ba      	str	r2, [r7, #8]
  40b0e6:	4449      	add	r1, r9
  40b0e8:	42bc      	cmp	r4, r7
  40b0ea:	6050      	str	r0, [r2, #4]
  40b0ec:	6019      	str	r1, [r3, #0]
  40b0ee:	d017      	beq.n	40b120 <_malloc_r+0x2d8>
  40b0f0:	f1b8 0f0f 	cmp.w	r8, #15
  40b0f4:	f240 80fb 	bls.w	40b2ee <_malloc_r+0x4a6>
  40b0f8:	6860      	ldr	r0, [r4, #4]
  40b0fa:	f1a8 020c 	sub.w	r2, r8, #12
  40b0fe:	f022 0207 	bic.w	r2, r2, #7
  40b102:	eb04 0e02 	add.w	lr, r4, r2
  40b106:	f000 0001 	and.w	r0, r0, #1
  40b10a:	f04f 0c05 	mov.w	ip, #5
  40b10e:	4310      	orrs	r0, r2
  40b110:	2a0f      	cmp	r2, #15
  40b112:	6060      	str	r0, [r4, #4]
  40b114:	f8ce c004 	str.w	ip, [lr, #4]
  40b118:	f8ce c008 	str.w	ip, [lr, #8]
  40b11c:	f200 8117 	bhi.w	40b34e <_malloc_r+0x506>
  40b120:	4b1d      	ldr	r3, [pc, #116]	; (40b198 <_malloc_r+0x350>)
  40b122:	68bc      	ldr	r4, [r7, #8]
  40b124:	681a      	ldr	r2, [r3, #0]
  40b126:	4291      	cmp	r1, r2
  40b128:	bf88      	it	hi
  40b12a:	6019      	strhi	r1, [r3, #0]
  40b12c:	4b1b      	ldr	r3, [pc, #108]	; (40b19c <_malloc_r+0x354>)
  40b12e:	681a      	ldr	r2, [r3, #0]
  40b130:	4291      	cmp	r1, r2
  40b132:	6862      	ldr	r2, [r4, #4]
  40b134:	bf88      	it	hi
  40b136:	6019      	strhi	r1, [r3, #0]
  40b138:	f022 0203 	bic.w	r2, r2, #3
  40b13c:	4296      	cmp	r6, r2
  40b13e:	eba2 0306 	sub.w	r3, r2, r6
  40b142:	d801      	bhi.n	40b148 <_malloc_r+0x300>
  40b144:	2b0f      	cmp	r3, #15
  40b146:	dc04      	bgt.n	40b152 <_malloc_r+0x30a>
  40b148:	4628      	mov	r0, r5
  40b14a:	f000 fa03 	bl	40b554 <__malloc_unlock>
  40b14e:	2400      	movs	r4, #0
  40b150:	e740      	b.n	40afd4 <_malloc_r+0x18c>
  40b152:	19a2      	adds	r2, r4, r6
  40b154:	f043 0301 	orr.w	r3, r3, #1
  40b158:	f046 0601 	orr.w	r6, r6, #1
  40b15c:	6066      	str	r6, [r4, #4]
  40b15e:	4628      	mov	r0, r5
  40b160:	60ba      	str	r2, [r7, #8]
  40b162:	6053      	str	r3, [r2, #4]
  40b164:	f000 f9f6 	bl	40b554 <__malloc_unlock>
  40b168:	3408      	adds	r4, #8
  40b16a:	4620      	mov	r0, r4
  40b16c:	b003      	add	sp, #12
  40b16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b172:	2b14      	cmp	r3, #20
  40b174:	d971      	bls.n	40b25a <_malloc_r+0x412>
  40b176:	2b54      	cmp	r3, #84	; 0x54
  40b178:	f200 80a3 	bhi.w	40b2c2 <_malloc_r+0x47a>
  40b17c:	0b33      	lsrs	r3, r6, #12
  40b17e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40b182:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40b186:	00c3      	lsls	r3, r0, #3
  40b188:	e680      	b.n	40ae8c <_malloc_r+0x44>
  40b18a:	bf00      	nop
  40b18c:	204005e0 	.word	0x204005e0
  40b190:	2040c438 	.word	0x2040c438
  40b194:	2040c408 	.word	0x2040c408
  40b198:	2040c430 	.word	0x2040c430
  40b19c:	2040c434 	.word	0x2040c434
  40b1a0:	204005e8 	.word	0x204005e8
  40b1a4:	204009e8 	.word	0x204009e8
  40b1a8:	0a5a      	lsrs	r2, r3, #9
  40b1aa:	2a04      	cmp	r2, #4
  40b1ac:	d95b      	bls.n	40b266 <_malloc_r+0x41e>
  40b1ae:	2a14      	cmp	r2, #20
  40b1b0:	f200 80ae 	bhi.w	40b310 <_malloc_r+0x4c8>
  40b1b4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40b1b8:	00c9      	lsls	r1, r1, #3
  40b1ba:	325b      	adds	r2, #91	; 0x5b
  40b1bc:	eb07 0c01 	add.w	ip, r7, r1
  40b1c0:	5879      	ldr	r1, [r7, r1]
  40b1c2:	f1ac 0c08 	sub.w	ip, ip, #8
  40b1c6:	458c      	cmp	ip, r1
  40b1c8:	f000 8088 	beq.w	40b2dc <_malloc_r+0x494>
  40b1cc:	684a      	ldr	r2, [r1, #4]
  40b1ce:	f022 0203 	bic.w	r2, r2, #3
  40b1d2:	4293      	cmp	r3, r2
  40b1d4:	d273      	bcs.n	40b2be <_malloc_r+0x476>
  40b1d6:	6889      	ldr	r1, [r1, #8]
  40b1d8:	458c      	cmp	ip, r1
  40b1da:	d1f7      	bne.n	40b1cc <_malloc_r+0x384>
  40b1dc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40b1e0:	687b      	ldr	r3, [r7, #4]
  40b1e2:	60e2      	str	r2, [r4, #12]
  40b1e4:	f8c4 c008 	str.w	ip, [r4, #8]
  40b1e8:	6094      	str	r4, [r2, #8]
  40b1ea:	f8cc 400c 	str.w	r4, [ip, #12]
  40b1ee:	e68f      	b.n	40af10 <_malloc_r+0xc8>
  40b1f0:	19a1      	adds	r1, r4, r6
  40b1f2:	f046 0c01 	orr.w	ip, r6, #1
  40b1f6:	f042 0601 	orr.w	r6, r2, #1
  40b1fa:	f8c4 c004 	str.w	ip, [r4, #4]
  40b1fe:	4628      	mov	r0, r5
  40b200:	6179      	str	r1, [r7, #20]
  40b202:	6139      	str	r1, [r7, #16]
  40b204:	f8c1 e00c 	str.w	lr, [r1, #12]
  40b208:	f8c1 e008 	str.w	lr, [r1, #8]
  40b20c:	604e      	str	r6, [r1, #4]
  40b20e:	50e2      	str	r2, [r4, r3]
  40b210:	f000 f9a0 	bl	40b554 <__malloc_unlock>
  40b214:	3408      	adds	r4, #8
  40b216:	e6dd      	b.n	40afd4 <_malloc_r+0x18c>
  40b218:	687b      	ldr	r3, [r7, #4]
  40b21a:	e679      	b.n	40af10 <_malloc_r+0xc8>
  40b21c:	f108 0801 	add.w	r8, r8, #1
  40b220:	f018 0f03 	tst.w	r8, #3
  40b224:	f10c 0c08 	add.w	ip, ip, #8
  40b228:	f47f ae85 	bne.w	40af36 <_malloc_r+0xee>
  40b22c:	e02d      	b.n	40b28a <_malloc_r+0x442>
  40b22e:	68dc      	ldr	r4, [r3, #12]
  40b230:	42a3      	cmp	r3, r4
  40b232:	bf08      	it	eq
  40b234:	3002      	addeq	r0, #2
  40b236:	f43f ae3e 	beq.w	40aeb6 <_malloc_r+0x6e>
  40b23a:	e6bb      	b.n	40afb4 <_malloc_r+0x16c>
  40b23c:	4419      	add	r1, r3
  40b23e:	461c      	mov	r4, r3
  40b240:	684a      	ldr	r2, [r1, #4]
  40b242:	68db      	ldr	r3, [r3, #12]
  40b244:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40b248:	f042 0201 	orr.w	r2, r2, #1
  40b24c:	604a      	str	r2, [r1, #4]
  40b24e:	4628      	mov	r0, r5
  40b250:	60f3      	str	r3, [r6, #12]
  40b252:	609e      	str	r6, [r3, #8]
  40b254:	f000 f97e 	bl	40b554 <__malloc_unlock>
  40b258:	e6bc      	b.n	40afd4 <_malloc_r+0x18c>
  40b25a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40b25e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40b262:	00c3      	lsls	r3, r0, #3
  40b264:	e612      	b.n	40ae8c <_malloc_r+0x44>
  40b266:	099a      	lsrs	r2, r3, #6
  40b268:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40b26c:	00c9      	lsls	r1, r1, #3
  40b26e:	3238      	adds	r2, #56	; 0x38
  40b270:	e7a4      	b.n	40b1bc <_malloc_r+0x374>
  40b272:	42bc      	cmp	r4, r7
  40b274:	d054      	beq.n	40b320 <_malloc_r+0x4d8>
  40b276:	68bc      	ldr	r4, [r7, #8]
  40b278:	6862      	ldr	r2, [r4, #4]
  40b27a:	f022 0203 	bic.w	r2, r2, #3
  40b27e:	e75d      	b.n	40b13c <_malloc_r+0x2f4>
  40b280:	f859 3908 	ldr.w	r3, [r9], #-8
  40b284:	4599      	cmp	r9, r3
  40b286:	f040 8086 	bne.w	40b396 <_malloc_r+0x54e>
  40b28a:	f010 0f03 	tst.w	r0, #3
  40b28e:	f100 30ff 	add.w	r0, r0, #4294967295
  40b292:	d1f5      	bne.n	40b280 <_malloc_r+0x438>
  40b294:	687b      	ldr	r3, [r7, #4]
  40b296:	ea23 0304 	bic.w	r3, r3, r4
  40b29a:	607b      	str	r3, [r7, #4]
  40b29c:	0064      	lsls	r4, r4, #1
  40b29e:	429c      	cmp	r4, r3
  40b2a0:	f63f aec7 	bhi.w	40b032 <_malloc_r+0x1ea>
  40b2a4:	2c00      	cmp	r4, #0
  40b2a6:	f43f aec4 	beq.w	40b032 <_malloc_r+0x1ea>
  40b2aa:	421c      	tst	r4, r3
  40b2ac:	4640      	mov	r0, r8
  40b2ae:	f47f ae3e 	bne.w	40af2e <_malloc_r+0xe6>
  40b2b2:	0064      	lsls	r4, r4, #1
  40b2b4:	421c      	tst	r4, r3
  40b2b6:	f100 0004 	add.w	r0, r0, #4
  40b2ba:	d0fa      	beq.n	40b2b2 <_malloc_r+0x46a>
  40b2bc:	e637      	b.n	40af2e <_malloc_r+0xe6>
  40b2be:	468c      	mov	ip, r1
  40b2c0:	e78c      	b.n	40b1dc <_malloc_r+0x394>
  40b2c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40b2c6:	d815      	bhi.n	40b2f4 <_malloc_r+0x4ac>
  40b2c8:	0bf3      	lsrs	r3, r6, #15
  40b2ca:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40b2ce:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40b2d2:	00c3      	lsls	r3, r0, #3
  40b2d4:	e5da      	b.n	40ae8c <_malloc_r+0x44>
  40b2d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40b2da:	e6ed      	b.n	40b0b8 <_malloc_r+0x270>
  40b2dc:	687b      	ldr	r3, [r7, #4]
  40b2de:	1092      	asrs	r2, r2, #2
  40b2e0:	2101      	movs	r1, #1
  40b2e2:	fa01 f202 	lsl.w	r2, r1, r2
  40b2e6:	4313      	orrs	r3, r2
  40b2e8:	607b      	str	r3, [r7, #4]
  40b2ea:	4662      	mov	r2, ip
  40b2ec:	e779      	b.n	40b1e2 <_malloc_r+0x39a>
  40b2ee:	2301      	movs	r3, #1
  40b2f0:	6053      	str	r3, [r2, #4]
  40b2f2:	e729      	b.n	40b148 <_malloc_r+0x300>
  40b2f4:	f240 5254 	movw	r2, #1364	; 0x554
  40b2f8:	4293      	cmp	r3, r2
  40b2fa:	d822      	bhi.n	40b342 <_malloc_r+0x4fa>
  40b2fc:	0cb3      	lsrs	r3, r6, #18
  40b2fe:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40b302:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40b306:	00c3      	lsls	r3, r0, #3
  40b308:	e5c0      	b.n	40ae8c <_malloc_r+0x44>
  40b30a:	f103 0b10 	add.w	fp, r3, #16
  40b30e:	e6ae      	b.n	40b06e <_malloc_r+0x226>
  40b310:	2a54      	cmp	r2, #84	; 0x54
  40b312:	d829      	bhi.n	40b368 <_malloc_r+0x520>
  40b314:	0b1a      	lsrs	r2, r3, #12
  40b316:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40b31a:	00c9      	lsls	r1, r1, #3
  40b31c:	326e      	adds	r2, #110	; 0x6e
  40b31e:	e74d      	b.n	40b1bc <_malloc_r+0x374>
  40b320:	4b20      	ldr	r3, [pc, #128]	; (40b3a4 <_malloc_r+0x55c>)
  40b322:	6819      	ldr	r1, [r3, #0]
  40b324:	4459      	add	r1, fp
  40b326:	6019      	str	r1, [r3, #0]
  40b328:	e6b2      	b.n	40b090 <_malloc_r+0x248>
  40b32a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40b32e:	2800      	cmp	r0, #0
  40b330:	f47f aeae 	bne.w	40b090 <_malloc_r+0x248>
  40b334:	eb08 030b 	add.w	r3, r8, fp
  40b338:	68ba      	ldr	r2, [r7, #8]
  40b33a:	f043 0301 	orr.w	r3, r3, #1
  40b33e:	6053      	str	r3, [r2, #4]
  40b340:	e6ee      	b.n	40b120 <_malloc_r+0x2d8>
  40b342:	207f      	movs	r0, #127	; 0x7f
  40b344:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40b348:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40b34c:	e59e      	b.n	40ae8c <_malloc_r+0x44>
  40b34e:	f104 0108 	add.w	r1, r4, #8
  40b352:	4628      	mov	r0, r5
  40b354:	9300      	str	r3, [sp, #0]
  40b356:	f7ff fa4b 	bl	40a7f0 <_free_r>
  40b35a:	9b00      	ldr	r3, [sp, #0]
  40b35c:	6819      	ldr	r1, [r3, #0]
  40b35e:	e6df      	b.n	40b120 <_malloc_r+0x2d8>
  40b360:	2001      	movs	r0, #1
  40b362:	f04f 0900 	mov.w	r9, #0
  40b366:	e6bc      	b.n	40b0e2 <_malloc_r+0x29a>
  40b368:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40b36c:	d805      	bhi.n	40b37a <_malloc_r+0x532>
  40b36e:	0bda      	lsrs	r2, r3, #15
  40b370:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40b374:	00c9      	lsls	r1, r1, #3
  40b376:	3277      	adds	r2, #119	; 0x77
  40b378:	e720      	b.n	40b1bc <_malloc_r+0x374>
  40b37a:	f240 5154 	movw	r1, #1364	; 0x554
  40b37e:	428a      	cmp	r2, r1
  40b380:	d805      	bhi.n	40b38e <_malloc_r+0x546>
  40b382:	0c9a      	lsrs	r2, r3, #18
  40b384:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40b388:	00c9      	lsls	r1, r1, #3
  40b38a:	327c      	adds	r2, #124	; 0x7c
  40b38c:	e716      	b.n	40b1bc <_malloc_r+0x374>
  40b38e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40b392:	227e      	movs	r2, #126	; 0x7e
  40b394:	e712      	b.n	40b1bc <_malloc_r+0x374>
  40b396:	687b      	ldr	r3, [r7, #4]
  40b398:	e780      	b.n	40b29c <_malloc_r+0x454>
  40b39a:	08f0      	lsrs	r0, r6, #3
  40b39c:	f106 0308 	add.w	r3, r6, #8
  40b3a0:	e600      	b.n	40afa4 <_malloc_r+0x15c>
  40b3a2:	bf00      	nop
  40b3a4:	2040c408 	.word	0x2040c408

0040b3a8 <__ascii_mbtowc>:
  40b3a8:	b082      	sub	sp, #8
  40b3aa:	b149      	cbz	r1, 40b3c0 <__ascii_mbtowc+0x18>
  40b3ac:	b15a      	cbz	r2, 40b3c6 <__ascii_mbtowc+0x1e>
  40b3ae:	b16b      	cbz	r3, 40b3cc <__ascii_mbtowc+0x24>
  40b3b0:	7813      	ldrb	r3, [r2, #0]
  40b3b2:	600b      	str	r3, [r1, #0]
  40b3b4:	7812      	ldrb	r2, [r2, #0]
  40b3b6:	1c10      	adds	r0, r2, #0
  40b3b8:	bf18      	it	ne
  40b3ba:	2001      	movne	r0, #1
  40b3bc:	b002      	add	sp, #8
  40b3be:	4770      	bx	lr
  40b3c0:	a901      	add	r1, sp, #4
  40b3c2:	2a00      	cmp	r2, #0
  40b3c4:	d1f3      	bne.n	40b3ae <__ascii_mbtowc+0x6>
  40b3c6:	4610      	mov	r0, r2
  40b3c8:	b002      	add	sp, #8
  40b3ca:	4770      	bx	lr
  40b3cc:	f06f 0001 	mvn.w	r0, #1
  40b3d0:	e7f4      	b.n	40b3bc <__ascii_mbtowc+0x14>
  40b3d2:	bf00      	nop
	...

0040b3e0 <memchr>:
  40b3e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b3e4:	2a10      	cmp	r2, #16
  40b3e6:	db2b      	blt.n	40b440 <memchr+0x60>
  40b3e8:	f010 0f07 	tst.w	r0, #7
  40b3ec:	d008      	beq.n	40b400 <memchr+0x20>
  40b3ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b3f2:	3a01      	subs	r2, #1
  40b3f4:	428b      	cmp	r3, r1
  40b3f6:	d02d      	beq.n	40b454 <memchr+0x74>
  40b3f8:	f010 0f07 	tst.w	r0, #7
  40b3fc:	b342      	cbz	r2, 40b450 <memchr+0x70>
  40b3fe:	d1f6      	bne.n	40b3ee <memchr+0xe>
  40b400:	b4f0      	push	{r4, r5, r6, r7}
  40b402:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40b406:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40b40a:	f022 0407 	bic.w	r4, r2, #7
  40b40e:	f07f 0700 	mvns.w	r7, #0
  40b412:	2300      	movs	r3, #0
  40b414:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40b418:	3c08      	subs	r4, #8
  40b41a:	ea85 0501 	eor.w	r5, r5, r1
  40b41e:	ea86 0601 	eor.w	r6, r6, r1
  40b422:	fa85 f547 	uadd8	r5, r5, r7
  40b426:	faa3 f587 	sel	r5, r3, r7
  40b42a:	fa86 f647 	uadd8	r6, r6, r7
  40b42e:	faa5 f687 	sel	r6, r5, r7
  40b432:	b98e      	cbnz	r6, 40b458 <memchr+0x78>
  40b434:	d1ee      	bne.n	40b414 <memchr+0x34>
  40b436:	bcf0      	pop	{r4, r5, r6, r7}
  40b438:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b43c:	f002 0207 	and.w	r2, r2, #7
  40b440:	b132      	cbz	r2, 40b450 <memchr+0x70>
  40b442:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b446:	3a01      	subs	r2, #1
  40b448:	ea83 0301 	eor.w	r3, r3, r1
  40b44c:	b113      	cbz	r3, 40b454 <memchr+0x74>
  40b44e:	d1f8      	bne.n	40b442 <memchr+0x62>
  40b450:	2000      	movs	r0, #0
  40b452:	4770      	bx	lr
  40b454:	3801      	subs	r0, #1
  40b456:	4770      	bx	lr
  40b458:	2d00      	cmp	r5, #0
  40b45a:	bf06      	itte	eq
  40b45c:	4635      	moveq	r5, r6
  40b45e:	3803      	subeq	r0, #3
  40b460:	3807      	subne	r0, #7
  40b462:	f015 0f01 	tst.w	r5, #1
  40b466:	d107      	bne.n	40b478 <memchr+0x98>
  40b468:	3001      	adds	r0, #1
  40b46a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40b46e:	bf02      	ittt	eq
  40b470:	3001      	addeq	r0, #1
  40b472:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40b476:	3001      	addeq	r0, #1
  40b478:	bcf0      	pop	{r4, r5, r6, r7}
  40b47a:	3801      	subs	r0, #1
  40b47c:	4770      	bx	lr
  40b47e:	bf00      	nop

0040b480 <memmove>:
  40b480:	4288      	cmp	r0, r1
  40b482:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b484:	d90d      	bls.n	40b4a2 <memmove+0x22>
  40b486:	188b      	adds	r3, r1, r2
  40b488:	4298      	cmp	r0, r3
  40b48a:	d20a      	bcs.n	40b4a2 <memmove+0x22>
  40b48c:	1884      	adds	r4, r0, r2
  40b48e:	2a00      	cmp	r2, #0
  40b490:	d051      	beq.n	40b536 <memmove+0xb6>
  40b492:	4622      	mov	r2, r4
  40b494:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40b498:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40b49c:	4299      	cmp	r1, r3
  40b49e:	d1f9      	bne.n	40b494 <memmove+0x14>
  40b4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b4a2:	2a0f      	cmp	r2, #15
  40b4a4:	d948      	bls.n	40b538 <memmove+0xb8>
  40b4a6:	ea41 0300 	orr.w	r3, r1, r0
  40b4aa:	079b      	lsls	r3, r3, #30
  40b4ac:	d146      	bne.n	40b53c <memmove+0xbc>
  40b4ae:	f100 0410 	add.w	r4, r0, #16
  40b4b2:	f101 0310 	add.w	r3, r1, #16
  40b4b6:	4615      	mov	r5, r2
  40b4b8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40b4bc:	f844 6c10 	str.w	r6, [r4, #-16]
  40b4c0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40b4c4:	f844 6c0c 	str.w	r6, [r4, #-12]
  40b4c8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40b4cc:	f844 6c08 	str.w	r6, [r4, #-8]
  40b4d0:	3d10      	subs	r5, #16
  40b4d2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40b4d6:	f844 6c04 	str.w	r6, [r4, #-4]
  40b4da:	2d0f      	cmp	r5, #15
  40b4dc:	f103 0310 	add.w	r3, r3, #16
  40b4e0:	f104 0410 	add.w	r4, r4, #16
  40b4e4:	d8e8      	bhi.n	40b4b8 <memmove+0x38>
  40b4e6:	f1a2 0310 	sub.w	r3, r2, #16
  40b4ea:	f023 030f 	bic.w	r3, r3, #15
  40b4ee:	f002 0e0f 	and.w	lr, r2, #15
  40b4f2:	3310      	adds	r3, #16
  40b4f4:	f1be 0f03 	cmp.w	lr, #3
  40b4f8:	4419      	add	r1, r3
  40b4fa:	4403      	add	r3, r0
  40b4fc:	d921      	bls.n	40b542 <memmove+0xc2>
  40b4fe:	1f1e      	subs	r6, r3, #4
  40b500:	460d      	mov	r5, r1
  40b502:	4674      	mov	r4, lr
  40b504:	3c04      	subs	r4, #4
  40b506:	f855 7b04 	ldr.w	r7, [r5], #4
  40b50a:	f846 7f04 	str.w	r7, [r6, #4]!
  40b50e:	2c03      	cmp	r4, #3
  40b510:	d8f8      	bhi.n	40b504 <memmove+0x84>
  40b512:	f1ae 0404 	sub.w	r4, lr, #4
  40b516:	f024 0403 	bic.w	r4, r4, #3
  40b51a:	3404      	adds	r4, #4
  40b51c:	4421      	add	r1, r4
  40b51e:	4423      	add	r3, r4
  40b520:	f002 0203 	and.w	r2, r2, #3
  40b524:	b162      	cbz	r2, 40b540 <memmove+0xc0>
  40b526:	3b01      	subs	r3, #1
  40b528:	440a      	add	r2, r1
  40b52a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40b52e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40b532:	428a      	cmp	r2, r1
  40b534:	d1f9      	bne.n	40b52a <memmove+0xaa>
  40b536:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b538:	4603      	mov	r3, r0
  40b53a:	e7f3      	b.n	40b524 <memmove+0xa4>
  40b53c:	4603      	mov	r3, r0
  40b53e:	e7f2      	b.n	40b526 <memmove+0xa6>
  40b540:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b542:	4672      	mov	r2, lr
  40b544:	e7ee      	b.n	40b524 <memmove+0xa4>
  40b546:	bf00      	nop

0040b548 <__malloc_lock>:
  40b548:	4801      	ldr	r0, [pc, #4]	; (40b550 <__malloc_lock+0x8>)
  40b54a:	f7ff bbf9 	b.w	40ad40 <__retarget_lock_acquire_recursive>
  40b54e:	bf00      	nop
  40b550:	2040c4c0 	.word	0x2040c4c0

0040b554 <__malloc_unlock>:
  40b554:	4801      	ldr	r0, [pc, #4]	; (40b55c <__malloc_unlock+0x8>)
  40b556:	f7ff bbf5 	b.w	40ad44 <__retarget_lock_release_recursive>
  40b55a:	bf00      	nop
  40b55c:	2040c4c0 	.word	0x2040c4c0

0040b560 <_Balloc>:
  40b560:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40b562:	b570      	push	{r4, r5, r6, lr}
  40b564:	4605      	mov	r5, r0
  40b566:	460c      	mov	r4, r1
  40b568:	b14b      	cbz	r3, 40b57e <_Balloc+0x1e>
  40b56a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40b56e:	b180      	cbz	r0, 40b592 <_Balloc+0x32>
  40b570:	6802      	ldr	r2, [r0, #0]
  40b572:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40b576:	2300      	movs	r3, #0
  40b578:	6103      	str	r3, [r0, #16]
  40b57a:	60c3      	str	r3, [r0, #12]
  40b57c:	bd70      	pop	{r4, r5, r6, pc}
  40b57e:	2221      	movs	r2, #33	; 0x21
  40b580:	2104      	movs	r1, #4
  40b582:	f000 fe69 	bl	40c258 <_calloc_r>
  40b586:	64e8      	str	r0, [r5, #76]	; 0x4c
  40b588:	4603      	mov	r3, r0
  40b58a:	2800      	cmp	r0, #0
  40b58c:	d1ed      	bne.n	40b56a <_Balloc+0xa>
  40b58e:	2000      	movs	r0, #0
  40b590:	bd70      	pop	{r4, r5, r6, pc}
  40b592:	2101      	movs	r1, #1
  40b594:	fa01 f604 	lsl.w	r6, r1, r4
  40b598:	1d72      	adds	r2, r6, #5
  40b59a:	4628      	mov	r0, r5
  40b59c:	0092      	lsls	r2, r2, #2
  40b59e:	f000 fe5b 	bl	40c258 <_calloc_r>
  40b5a2:	2800      	cmp	r0, #0
  40b5a4:	d0f3      	beq.n	40b58e <_Balloc+0x2e>
  40b5a6:	6044      	str	r4, [r0, #4]
  40b5a8:	6086      	str	r6, [r0, #8]
  40b5aa:	e7e4      	b.n	40b576 <_Balloc+0x16>

0040b5ac <_Bfree>:
  40b5ac:	b131      	cbz	r1, 40b5bc <_Bfree+0x10>
  40b5ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40b5b0:	684a      	ldr	r2, [r1, #4]
  40b5b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40b5b6:	6008      	str	r0, [r1, #0]
  40b5b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40b5bc:	4770      	bx	lr
  40b5be:	bf00      	nop

0040b5c0 <__multadd>:
  40b5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b5c2:	690c      	ldr	r4, [r1, #16]
  40b5c4:	b083      	sub	sp, #12
  40b5c6:	460d      	mov	r5, r1
  40b5c8:	4606      	mov	r6, r0
  40b5ca:	f101 0e14 	add.w	lr, r1, #20
  40b5ce:	2700      	movs	r7, #0
  40b5d0:	f8de 0000 	ldr.w	r0, [lr]
  40b5d4:	b281      	uxth	r1, r0
  40b5d6:	fb02 3301 	mla	r3, r2, r1, r3
  40b5da:	0c01      	lsrs	r1, r0, #16
  40b5dc:	0c18      	lsrs	r0, r3, #16
  40b5de:	fb02 0101 	mla	r1, r2, r1, r0
  40b5e2:	b29b      	uxth	r3, r3
  40b5e4:	3701      	adds	r7, #1
  40b5e6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40b5ea:	42bc      	cmp	r4, r7
  40b5ec:	f84e 3b04 	str.w	r3, [lr], #4
  40b5f0:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40b5f4:	dcec      	bgt.n	40b5d0 <__multadd+0x10>
  40b5f6:	b13b      	cbz	r3, 40b608 <__multadd+0x48>
  40b5f8:	68aa      	ldr	r2, [r5, #8]
  40b5fa:	4294      	cmp	r4, r2
  40b5fc:	da07      	bge.n	40b60e <__multadd+0x4e>
  40b5fe:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40b602:	3401      	adds	r4, #1
  40b604:	6153      	str	r3, [r2, #20]
  40b606:	612c      	str	r4, [r5, #16]
  40b608:	4628      	mov	r0, r5
  40b60a:	b003      	add	sp, #12
  40b60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b60e:	6869      	ldr	r1, [r5, #4]
  40b610:	9301      	str	r3, [sp, #4]
  40b612:	3101      	adds	r1, #1
  40b614:	4630      	mov	r0, r6
  40b616:	f7ff ffa3 	bl	40b560 <_Balloc>
  40b61a:	692a      	ldr	r2, [r5, #16]
  40b61c:	3202      	adds	r2, #2
  40b61e:	f105 010c 	add.w	r1, r5, #12
  40b622:	4607      	mov	r7, r0
  40b624:	0092      	lsls	r2, r2, #2
  40b626:	300c      	adds	r0, #12
  40b628:	f7fb fb3c 	bl	406ca4 <memcpy>
  40b62c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40b62e:	6869      	ldr	r1, [r5, #4]
  40b630:	9b01      	ldr	r3, [sp, #4]
  40b632:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40b636:	6028      	str	r0, [r5, #0]
  40b638:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40b63c:	463d      	mov	r5, r7
  40b63e:	e7de      	b.n	40b5fe <__multadd+0x3e>

0040b640 <__hi0bits>:
  40b640:	0c02      	lsrs	r2, r0, #16
  40b642:	0412      	lsls	r2, r2, #16
  40b644:	4603      	mov	r3, r0
  40b646:	b9b2      	cbnz	r2, 40b676 <__hi0bits+0x36>
  40b648:	0403      	lsls	r3, r0, #16
  40b64a:	2010      	movs	r0, #16
  40b64c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40b650:	bf04      	itt	eq
  40b652:	021b      	lsleq	r3, r3, #8
  40b654:	3008      	addeq	r0, #8
  40b656:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40b65a:	bf04      	itt	eq
  40b65c:	011b      	lsleq	r3, r3, #4
  40b65e:	3004      	addeq	r0, #4
  40b660:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40b664:	bf04      	itt	eq
  40b666:	009b      	lsleq	r3, r3, #2
  40b668:	3002      	addeq	r0, #2
  40b66a:	2b00      	cmp	r3, #0
  40b66c:	db02      	blt.n	40b674 <__hi0bits+0x34>
  40b66e:	005b      	lsls	r3, r3, #1
  40b670:	d403      	bmi.n	40b67a <__hi0bits+0x3a>
  40b672:	2020      	movs	r0, #32
  40b674:	4770      	bx	lr
  40b676:	2000      	movs	r0, #0
  40b678:	e7e8      	b.n	40b64c <__hi0bits+0xc>
  40b67a:	3001      	adds	r0, #1
  40b67c:	4770      	bx	lr
  40b67e:	bf00      	nop

0040b680 <__lo0bits>:
  40b680:	6803      	ldr	r3, [r0, #0]
  40b682:	f013 0207 	ands.w	r2, r3, #7
  40b686:	4601      	mov	r1, r0
  40b688:	d007      	beq.n	40b69a <__lo0bits+0x1a>
  40b68a:	07da      	lsls	r2, r3, #31
  40b68c:	d421      	bmi.n	40b6d2 <__lo0bits+0x52>
  40b68e:	0798      	lsls	r0, r3, #30
  40b690:	d421      	bmi.n	40b6d6 <__lo0bits+0x56>
  40b692:	089b      	lsrs	r3, r3, #2
  40b694:	600b      	str	r3, [r1, #0]
  40b696:	2002      	movs	r0, #2
  40b698:	4770      	bx	lr
  40b69a:	b298      	uxth	r0, r3
  40b69c:	b198      	cbz	r0, 40b6c6 <__lo0bits+0x46>
  40b69e:	4610      	mov	r0, r2
  40b6a0:	f013 0fff 	tst.w	r3, #255	; 0xff
  40b6a4:	bf04      	itt	eq
  40b6a6:	0a1b      	lsreq	r3, r3, #8
  40b6a8:	3008      	addeq	r0, #8
  40b6aa:	071a      	lsls	r2, r3, #28
  40b6ac:	bf04      	itt	eq
  40b6ae:	091b      	lsreq	r3, r3, #4
  40b6b0:	3004      	addeq	r0, #4
  40b6b2:	079a      	lsls	r2, r3, #30
  40b6b4:	bf04      	itt	eq
  40b6b6:	089b      	lsreq	r3, r3, #2
  40b6b8:	3002      	addeq	r0, #2
  40b6ba:	07da      	lsls	r2, r3, #31
  40b6bc:	d407      	bmi.n	40b6ce <__lo0bits+0x4e>
  40b6be:	085b      	lsrs	r3, r3, #1
  40b6c0:	d104      	bne.n	40b6cc <__lo0bits+0x4c>
  40b6c2:	2020      	movs	r0, #32
  40b6c4:	4770      	bx	lr
  40b6c6:	0c1b      	lsrs	r3, r3, #16
  40b6c8:	2010      	movs	r0, #16
  40b6ca:	e7e9      	b.n	40b6a0 <__lo0bits+0x20>
  40b6cc:	3001      	adds	r0, #1
  40b6ce:	600b      	str	r3, [r1, #0]
  40b6d0:	4770      	bx	lr
  40b6d2:	2000      	movs	r0, #0
  40b6d4:	4770      	bx	lr
  40b6d6:	085b      	lsrs	r3, r3, #1
  40b6d8:	600b      	str	r3, [r1, #0]
  40b6da:	2001      	movs	r0, #1
  40b6dc:	4770      	bx	lr
  40b6de:	bf00      	nop

0040b6e0 <__i2b>:
  40b6e0:	b510      	push	{r4, lr}
  40b6e2:	460c      	mov	r4, r1
  40b6e4:	2101      	movs	r1, #1
  40b6e6:	f7ff ff3b 	bl	40b560 <_Balloc>
  40b6ea:	2201      	movs	r2, #1
  40b6ec:	6144      	str	r4, [r0, #20]
  40b6ee:	6102      	str	r2, [r0, #16]
  40b6f0:	bd10      	pop	{r4, pc}
  40b6f2:	bf00      	nop

0040b6f4 <__multiply>:
  40b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b6f8:	690c      	ldr	r4, [r1, #16]
  40b6fa:	6915      	ldr	r5, [r2, #16]
  40b6fc:	42ac      	cmp	r4, r5
  40b6fe:	b083      	sub	sp, #12
  40b700:	468b      	mov	fp, r1
  40b702:	4616      	mov	r6, r2
  40b704:	da04      	bge.n	40b710 <__multiply+0x1c>
  40b706:	4622      	mov	r2, r4
  40b708:	46b3      	mov	fp, r6
  40b70a:	462c      	mov	r4, r5
  40b70c:	460e      	mov	r6, r1
  40b70e:	4615      	mov	r5, r2
  40b710:	f8db 3008 	ldr.w	r3, [fp, #8]
  40b714:	f8db 1004 	ldr.w	r1, [fp, #4]
  40b718:	eb04 0805 	add.w	r8, r4, r5
  40b71c:	4598      	cmp	r8, r3
  40b71e:	bfc8      	it	gt
  40b720:	3101      	addgt	r1, #1
  40b722:	f7ff ff1d 	bl	40b560 <_Balloc>
  40b726:	f100 0914 	add.w	r9, r0, #20
  40b72a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40b72e:	45d1      	cmp	r9, sl
  40b730:	9000      	str	r0, [sp, #0]
  40b732:	d205      	bcs.n	40b740 <__multiply+0x4c>
  40b734:	464b      	mov	r3, r9
  40b736:	2100      	movs	r1, #0
  40b738:	f843 1b04 	str.w	r1, [r3], #4
  40b73c:	459a      	cmp	sl, r3
  40b73e:	d8fb      	bhi.n	40b738 <__multiply+0x44>
  40b740:	f106 0c14 	add.w	ip, r6, #20
  40b744:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40b748:	f10b 0b14 	add.w	fp, fp, #20
  40b74c:	459c      	cmp	ip, r3
  40b74e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40b752:	d24c      	bcs.n	40b7ee <__multiply+0xfa>
  40b754:	f8cd a004 	str.w	sl, [sp, #4]
  40b758:	469a      	mov	sl, r3
  40b75a:	f8dc 5000 	ldr.w	r5, [ip]
  40b75e:	b2af      	uxth	r7, r5
  40b760:	b1ef      	cbz	r7, 40b79e <__multiply+0xaa>
  40b762:	2100      	movs	r1, #0
  40b764:	464d      	mov	r5, r9
  40b766:	465e      	mov	r6, fp
  40b768:	460c      	mov	r4, r1
  40b76a:	f856 2b04 	ldr.w	r2, [r6], #4
  40b76e:	6828      	ldr	r0, [r5, #0]
  40b770:	b293      	uxth	r3, r2
  40b772:	b281      	uxth	r1, r0
  40b774:	fb07 1303 	mla	r3, r7, r3, r1
  40b778:	0c12      	lsrs	r2, r2, #16
  40b77a:	0c01      	lsrs	r1, r0, #16
  40b77c:	4423      	add	r3, r4
  40b77e:	fb07 1102 	mla	r1, r7, r2, r1
  40b782:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40b786:	b29b      	uxth	r3, r3
  40b788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40b78c:	45b6      	cmp	lr, r6
  40b78e:	f845 3b04 	str.w	r3, [r5], #4
  40b792:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40b796:	d8e8      	bhi.n	40b76a <__multiply+0x76>
  40b798:	602c      	str	r4, [r5, #0]
  40b79a:	f8dc 5000 	ldr.w	r5, [ip]
  40b79e:	0c2d      	lsrs	r5, r5, #16
  40b7a0:	d01d      	beq.n	40b7de <__multiply+0xea>
  40b7a2:	f8d9 3000 	ldr.w	r3, [r9]
  40b7a6:	4648      	mov	r0, r9
  40b7a8:	461c      	mov	r4, r3
  40b7aa:	4659      	mov	r1, fp
  40b7ac:	2200      	movs	r2, #0
  40b7ae:	880e      	ldrh	r6, [r1, #0]
  40b7b0:	0c24      	lsrs	r4, r4, #16
  40b7b2:	fb05 4406 	mla	r4, r5, r6, r4
  40b7b6:	4422      	add	r2, r4
  40b7b8:	b29b      	uxth	r3, r3
  40b7ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40b7be:	f840 3b04 	str.w	r3, [r0], #4
  40b7c2:	f851 3b04 	ldr.w	r3, [r1], #4
  40b7c6:	6804      	ldr	r4, [r0, #0]
  40b7c8:	0c1b      	lsrs	r3, r3, #16
  40b7ca:	b2a6      	uxth	r6, r4
  40b7cc:	fb05 6303 	mla	r3, r5, r3, r6
  40b7d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40b7d4:	458e      	cmp	lr, r1
  40b7d6:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40b7da:	d8e8      	bhi.n	40b7ae <__multiply+0xba>
  40b7dc:	6003      	str	r3, [r0, #0]
  40b7de:	f10c 0c04 	add.w	ip, ip, #4
  40b7e2:	45e2      	cmp	sl, ip
  40b7e4:	f109 0904 	add.w	r9, r9, #4
  40b7e8:	d8b7      	bhi.n	40b75a <__multiply+0x66>
  40b7ea:	f8dd a004 	ldr.w	sl, [sp, #4]
  40b7ee:	f1b8 0f00 	cmp.w	r8, #0
  40b7f2:	dd0b      	ble.n	40b80c <__multiply+0x118>
  40b7f4:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40b7f8:	f1aa 0a04 	sub.w	sl, sl, #4
  40b7fc:	b11b      	cbz	r3, 40b806 <__multiply+0x112>
  40b7fe:	e005      	b.n	40b80c <__multiply+0x118>
  40b800:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40b804:	b913      	cbnz	r3, 40b80c <__multiply+0x118>
  40b806:	f1b8 0801 	subs.w	r8, r8, #1
  40b80a:	d1f9      	bne.n	40b800 <__multiply+0x10c>
  40b80c:	9800      	ldr	r0, [sp, #0]
  40b80e:	f8c0 8010 	str.w	r8, [r0, #16]
  40b812:	b003      	add	sp, #12
  40b814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b818 <__pow5mult>:
  40b818:	f012 0303 	ands.w	r3, r2, #3
  40b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b820:	4614      	mov	r4, r2
  40b822:	4607      	mov	r7, r0
  40b824:	d12e      	bne.n	40b884 <__pow5mult+0x6c>
  40b826:	460d      	mov	r5, r1
  40b828:	10a4      	asrs	r4, r4, #2
  40b82a:	d01c      	beq.n	40b866 <__pow5mult+0x4e>
  40b82c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40b82e:	b396      	cbz	r6, 40b896 <__pow5mult+0x7e>
  40b830:	07e3      	lsls	r3, r4, #31
  40b832:	f04f 0800 	mov.w	r8, #0
  40b836:	d406      	bmi.n	40b846 <__pow5mult+0x2e>
  40b838:	1064      	asrs	r4, r4, #1
  40b83a:	d014      	beq.n	40b866 <__pow5mult+0x4e>
  40b83c:	6830      	ldr	r0, [r6, #0]
  40b83e:	b1a8      	cbz	r0, 40b86c <__pow5mult+0x54>
  40b840:	4606      	mov	r6, r0
  40b842:	07e3      	lsls	r3, r4, #31
  40b844:	d5f8      	bpl.n	40b838 <__pow5mult+0x20>
  40b846:	4632      	mov	r2, r6
  40b848:	4629      	mov	r1, r5
  40b84a:	4638      	mov	r0, r7
  40b84c:	f7ff ff52 	bl	40b6f4 <__multiply>
  40b850:	b1b5      	cbz	r5, 40b880 <__pow5mult+0x68>
  40b852:	686a      	ldr	r2, [r5, #4]
  40b854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b856:	1064      	asrs	r4, r4, #1
  40b858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b85c:	6029      	str	r1, [r5, #0]
  40b85e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40b862:	4605      	mov	r5, r0
  40b864:	d1ea      	bne.n	40b83c <__pow5mult+0x24>
  40b866:	4628      	mov	r0, r5
  40b868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b86c:	4632      	mov	r2, r6
  40b86e:	4631      	mov	r1, r6
  40b870:	4638      	mov	r0, r7
  40b872:	f7ff ff3f 	bl	40b6f4 <__multiply>
  40b876:	6030      	str	r0, [r6, #0]
  40b878:	f8c0 8000 	str.w	r8, [r0]
  40b87c:	4606      	mov	r6, r0
  40b87e:	e7e0      	b.n	40b842 <__pow5mult+0x2a>
  40b880:	4605      	mov	r5, r0
  40b882:	e7d9      	b.n	40b838 <__pow5mult+0x20>
  40b884:	1e5a      	subs	r2, r3, #1
  40b886:	4d0b      	ldr	r5, [pc, #44]	; (40b8b4 <__pow5mult+0x9c>)
  40b888:	2300      	movs	r3, #0
  40b88a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40b88e:	f7ff fe97 	bl	40b5c0 <__multadd>
  40b892:	4605      	mov	r5, r0
  40b894:	e7c8      	b.n	40b828 <__pow5mult+0x10>
  40b896:	2101      	movs	r1, #1
  40b898:	4638      	mov	r0, r7
  40b89a:	f7ff fe61 	bl	40b560 <_Balloc>
  40b89e:	f240 2171 	movw	r1, #625	; 0x271
  40b8a2:	2201      	movs	r2, #1
  40b8a4:	2300      	movs	r3, #0
  40b8a6:	6141      	str	r1, [r0, #20]
  40b8a8:	6102      	str	r2, [r0, #16]
  40b8aa:	4606      	mov	r6, r0
  40b8ac:	64b8      	str	r0, [r7, #72]	; 0x48
  40b8ae:	6003      	str	r3, [r0, #0]
  40b8b0:	e7be      	b.n	40b830 <__pow5mult+0x18>
  40b8b2:	bf00      	nop
  40b8b4:	0040db28 	.word	0x0040db28

0040b8b8 <__lshift>:
  40b8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b8bc:	4691      	mov	r9, r2
  40b8be:	690a      	ldr	r2, [r1, #16]
  40b8c0:	688b      	ldr	r3, [r1, #8]
  40b8c2:	ea4f 1469 	mov.w	r4, r9, asr #5
  40b8c6:	eb04 0802 	add.w	r8, r4, r2
  40b8ca:	f108 0501 	add.w	r5, r8, #1
  40b8ce:	429d      	cmp	r5, r3
  40b8d0:	460e      	mov	r6, r1
  40b8d2:	4607      	mov	r7, r0
  40b8d4:	6849      	ldr	r1, [r1, #4]
  40b8d6:	dd04      	ble.n	40b8e2 <__lshift+0x2a>
  40b8d8:	005b      	lsls	r3, r3, #1
  40b8da:	429d      	cmp	r5, r3
  40b8dc:	f101 0101 	add.w	r1, r1, #1
  40b8e0:	dcfa      	bgt.n	40b8d8 <__lshift+0x20>
  40b8e2:	4638      	mov	r0, r7
  40b8e4:	f7ff fe3c 	bl	40b560 <_Balloc>
  40b8e8:	2c00      	cmp	r4, #0
  40b8ea:	f100 0314 	add.w	r3, r0, #20
  40b8ee:	dd06      	ble.n	40b8fe <__lshift+0x46>
  40b8f0:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40b8f4:	2100      	movs	r1, #0
  40b8f6:	f843 1b04 	str.w	r1, [r3], #4
  40b8fa:	429a      	cmp	r2, r3
  40b8fc:	d1fb      	bne.n	40b8f6 <__lshift+0x3e>
  40b8fe:	6934      	ldr	r4, [r6, #16]
  40b900:	f106 0114 	add.w	r1, r6, #20
  40b904:	f019 091f 	ands.w	r9, r9, #31
  40b908:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40b90c:	d01d      	beq.n	40b94a <__lshift+0x92>
  40b90e:	f1c9 0c20 	rsb	ip, r9, #32
  40b912:	2200      	movs	r2, #0
  40b914:	680c      	ldr	r4, [r1, #0]
  40b916:	fa04 f409 	lsl.w	r4, r4, r9
  40b91a:	4314      	orrs	r4, r2
  40b91c:	f843 4b04 	str.w	r4, [r3], #4
  40b920:	f851 2b04 	ldr.w	r2, [r1], #4
  40b924:	458e      	cmp	lr, r1
  40b926:	fa22 f20c 	lsr.w	r2, r2, ip
  40b92a:	d8f3      	bhi.n	40b914 <__lshift+0x5c>
  40b92c:	601a      	str	r2, [r3, #0]
  40b92e:	b10a      	cbz	r2, 40b934 <__lshift+0x7c>
  40b930:	f108 0502 	add.w	r5, r8, #2
  40b934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b936:	6872      	ldr	r2, [r6, #4]
  40b938:	3d01      	subs	r5, #1
  40b93a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b93e:	6105      	str	r5, [r0, #16]
  40b940:	6031      	str	r1, [r6, #0]
  40b942:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40b946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b94a:	3b04      	subs	r3, #4
  40b94c:	f851 2b04 	ldr.w	r2, [r1], #4
  40b950:	f843 2f04 	str.w	r2, [r3, #4]!
  40b954:	458e      	cmp	lr, r1
  40b956:	d8f9      	bhi.n	40b94c <__lshift+0x94>
  40b958:	e7ec      	b.n	40b934 <__lshift+0x7c>
  40b95a:	bf00      	nop

0040b95c <__mcmp>:
  40b95c:	b430      	push	{r4, r5}
  40b95e:	690b      	ldr	r3, [r1, #16]
  40b960:	4605      	mov	r5, r0
  40b962:	6900      	ldr	r0, [r0, #16]
  40b964:	1ac0      	subs	r0, r0, r3
  40b966:	d10f      	bne.n	40b988 <__mcmp+0x2c>
  40b968:	009b      	lsls	r3, r3, #2
  40b96a:	3514      	adds	r5, #20
  40b96c:	3114      	adds	r1, #20
  40b96e:	4419      	add	r1, r3
  40b970:	442b      	add	r3, r5
  40b972:	e001      	b.n	40b978 <__mcmp+0x1c>
  40b974:	429d      	cmp	r5, r3
  40b976:	d207      	bcs.n	40b988 <__mcmp+0x2c>
  40b978:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40b97c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40b980:	4294      	cmp	r4, r2
  40b982:	d0f7      	beq.n	40b974 <__mcmp+0x18>
  40b984:	d302      	bcc.n	40b98c <__mcmp+0x30>
  40b986:	2001      	movs	r0, #1
  40b988:	bc30      	pop	{r4, r5}
  40b98a:	4770      	bx	lr
  40b98c:	f04f 30ff 	mov.w	r0, #4294967295
  40b990:	e7fa      	b.n	40b988 <__mcmp+0x2c>
  40b992:	bf00      	nop

0040b994 <__mdiff>:
  40b994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b998:	690f      	ldr	r7, [r1, #16]
  40b99a:	460e      	mov	r6, r1
  40b99c:	6911      	ldr	r1, [r2, #16]
  40b99e:	1a7f      	subs	r7, r7, r1
  40b9a0:	2f00      	cmp	r7, #0
  40b9a2:	4690      	mov	r8, r2
  40b9a4:	d117      	bne.n	40b9d6 <__mdiff+0x42>
  40b9a6:	0089      	lsls	r1, r1, #2
  40b9a8:	f106 0514 	add.w	r5, r6, #20
  40b9ac:	f102 0e14 	add.w	lr, r2, #20
  40b9b0:	186b      	adds	r3, r5, r1
  40b9b2:	4471      	add	r1, lr
  40b9b4:	e001      	b.n	40b9ba <__mdiff+0x26>
  40b9b6:	429d      	cmp	r5, r3
  40b9b8:	d25c      	bcs.n	40ba74 <__mdiff+0xe0>
  40b9ba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40b9be:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40b9c2:	42a2      	cmp	r2, r4
  40b9c4:	d0f7      	beq.n	40b9b6 <__mdiff+0x22>
  40b9c6:	d25e      	bcs.n	40ba86 <__mdiff+0xf2>
  40b9c8:	4633      	mov	r3, r6
  40b9ca:	462c      	mov	r4, r5
  40b9cc:	4646      	mov	r6, r8
  40b9ce:	4675      	mov	r5, lr
  40b9d0:	4698      	mov	r8, r3
  40b9d2:	2701      	movs	r7, #1
  40b9d4:	e005      	b.n	40b9e2 <__mdiff+0x4e>
  40b9d6:	db58      	blt.n	40ba8a <__mdiff+0xf6>
  40b9d8:	f106 0514 	add.w	r5, r6, #20
  40b9dc:	f108 0414 	add.w	r4, r8, #20
  40b9e0:	2700      	movs	r7, #0
  40b9e2:	6871      	ldr	r1, [r6, #4]
  40b9e4:	f7ff fdbc 	bl	40b560 <_Balloc>
  40b9e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40b9ec:	6936      	ldr	r6, [r6, #16]
  40b9ee:	60c7      	str	r7, [r0, #12]
  40b9f0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40b9f4:	46a6      	mov	lr, r4
  40b9f6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40b9fa:	f100 0414 	add.w	r4, r0, #20
  40b9fe:	2300      	movs	r3, #0
  40ba00:	f85e 1b04 	ldr.w	r1, [lr], #4
  40ba04:	f855 8b04 	ldr.w	r8, [r5], #4
  40ba08:	b28a      	uxth	r2, r1
  40ba0a:	fa13 f388 	uxtah	r3, r3, r8
  40ba0e:	0c09      	lsrs	r1, r1, #16
  40ba10:	1a9a      	subs	r2, r3, r2
  40ba12:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40ba16:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ba1a:	b292      	uxth	r2, r2
  40ba1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ba20:	45f4      	cmp	ip, lr
  40ba22:	f844 2b04 	str.w	r2, [r4], #4
  40ba26:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ba2a:	d8e9      	bhi.n	40ba00 <__mdiff+0x6c>
  40ba2c:	42af      	cmp	r7, r5
  40ba2e:	d917      	bls.n	40ba60 <__mdiff+0xcc>
  40ba30:	46a4      	mov	ip, r4
  40ba32:	46ae      	mov	lr, r5
  40ba34:	f85e 2b04 	ldr.w	r2, [lr], #4
  40ba38:	fa13 f382 	uxtah	r3, r3, r2
  40ba3c:	1419      	asrs	r1, r3, #16
  40ba3e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40ba42:	b29b      	uxth	r3, r3
  40ba44:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40ba48:	4577      	cmp	r7, lr
  40ba4a:	f84c 2b04 	str.w	r2, [ip], #4
  40ba4e:	ea4f 4321 	mov.w	r3, r1, asr #16
  40ba52:	d8ef      	bhi.n	40ba34 <__mdiff+0xa0>
  40ba54:	43ed      	mvns	r5, r5
  40ba56:	442f      	add	r7, r5
  40ba58:	f027 0703 	bic.w	r7, r7, #3
  40ba5c:	3704      	adds	r7, #4
  40ba5e:	443c      	add	r4, r7
  40ba60:	3c04      	subs	r4, #4
  40ba62:	b922      	cbnz	r2, 40ba6e <__mdiff+0xda>
  40ba64:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40ba68:	3e01      	subs	r6, #1
  40ba6a:	2b00      	cmp	r3, #0
  40ba6c:	d0fa      	beq.n	40ba64 <__mdiff+0xd0>
  40ba6e:	6106      	str	r6, [r0, #16]
  40ba70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ba74:	2100      	movs	r1, #0
  40ba76:	f7ff fd73 	bl	40b560 <_Balloc>
  40ba7a:	2201      	movs	r2, #1
  40ba7c:	2300      	movs	r3, #0
  40ba7e:	6102      	str	r2, [r0, #16]
  40ba80:	6143      	str	r3, [r0, #20]
  40ba82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ba86:	4674      	mov	r4, lr
  40ba88:	e7ab      	b.n	40b9e2 <__mdiff+0x4e>
  40ba8a:	4633      	mov	r3, r6
  40ba8c:	f106 0414 	add.w	r4, r6, #20
  40ba90:	f102 0514 	add.w	r5, r2, #20
  40ba94:	4616      	mov	r6, r2
  40ba96:	2701      	movs	r7, #1
  40ba98:	4698      	mov	r8, r3
  40ba9a:	e7a2      	b.n	40b9e2 <__mdiff+0x4e>

0040ba9c <__d2b>:
  40ba9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40baa0:	b082      	sub	sp, #8
  40baa2:	2101      	movs	r1, #1
  40baa4:	461c      	mov	r4, r3
  40baa6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40baaa:	4615      	mov	r5, r2
  40baac:	9e08      	ldr	r6, [sp, #32]
  40baae:	f7ff fd57 	bl	40b560 <_Balloc>
  40bab2:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40bab6:	4680      	mov	r8, r0
  40bab8:	b10f      	cbz	r7, 40babe <__d2b+0x22>
  40baba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40babe:	9401      	str	r4, [sp, #4]
  40bac0:	b31d      	cbz	r5, 40bb0a <__d2b+0x6e>
  40bac2:	a802      	add	r0, sp, #8
  40bac4:	f840 5d08 	str.w	r5, [r0, #-8]!
  40bac8:	f7ff fdda 	bl	40b680 <__lo0bits>
  40bacc:	2800      	cmp	r0, #0
  40bace:	d134      	bne.n	40bb3a <__d2b+0x9e>
  40bad0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40bad4:	f8c8 2014 	str.w	r2, [r8, #20]
  40bad8:	2b00      	cmp	r3, #0
  40bada:	bf0c      	ite	eq
  40badc:	2101      	moveq	r1, #1
  40bade:	2102      	movne	r1, #2
  40bae0:	f8c8 3018 	str.w	r3, [r8, #24]
  40bae4:	f8c8 1010 	str.w	r1, [r8, #16]
  40bae8:	b9df      	cbnz	r7, 40bb22 <__d2b+0x86>
  40baea:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40baee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40baf2:	6030      	str	r0, [r6, #0]
  40baf4:	6918      	ldr	r0, [r3, #16]
  40baf6:	f7ff fda3 	bl	40b640 <__hi0bits>
  40bafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bafc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40bb00:	6018      	str	r0, [r3, #0]
  40bb02:	4640      	mov	r0, r8
  40bb04:	b002      	add	sp, #8
  40bb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bb0a:	a801      	add	r0, sp, #4
  40bb0c:	f7ff fdb8 	bl	40b680 <__lo0bits>
  40bb10:	9b01      	ldr	r3, [sp, #4]
  40bb12:	f8c8 3014 	str.w	r3, [r8, #20]
  40bb16:	2101      	movs	r1, #1
  40bb18:	3020      	adds	r0, #32
  40bb1a:	f8c8 1010 	str.w	r1, [r8, #16]
  40bb1e:	2f00      	cmp	r7, #0
  40bb20:	d0e3      	beq.n	40baea <__d2b+0x4e>
  40bb22:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bb24:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40bb28:	4407      	add	r7, r0
  40bb2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40bb2e:	6037      	str	r7, [r6, #0]
  40bb30:	6018      	str	r0, [r3, #0]
  40bb32:	4640      	mov	r0, r8
  40bb34:	b002      	add	sp, #8
  40bb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bb3a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40bb3e:	f1c0 0220 	rsb	r2, r0, #32
  40bb42:	fa03 f202 	lsl.w	r2, r3, r2
  40bb46:	430a      	orrs	r2, r1
  40bb48:	40c3      	lsrs	r3, r0
  40bb4a:	9301      	str	r3, [sp, #4]
  40bb4c:	f8c8 2014 	str.w	r2, [r8, #20]
  40bb50:	e7c2      	b.n	40bad8 <__d2b+0x3c>
  40bb52:	bf00      	nop

0040bb54 <_realloc_r>:
  40bb54:	2900      	cmp	r1, #0
  40bb56:	f000 8095 	beq.w	40bc84 <_realloc_r+0x130>
  40bb5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bb5e:	460d      	mov	r5, r1
  40bb60:	4616      	mov	r6, r2
  40bb62:	b083      	sub	sp, #12
  40bb64:	4680      	mov	r8, r0
  40bb66:	f106 070b 	add.w	r7, r6, #11
  40bb6a:	f7ff fced 	bl	40b548 <__malloc_lock>
  40bb6e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40bb72:	2f16      	cmp	r7, #22
  40bb74:	f02e 0403 	bic.w	r4, lr, #3
  40bb78:	f1a5 0908 	sub.w	r9, r5, #8
  40bb7c:	d83c      	bhi.n	40bbf8 <_realloc_r+0xa4>
  40bb7e:	2210      	movs	r2, #16
  40bb80:	4617      	mov	r7, r2
  40bb82:	42be      	cmp	r6, r7
  40bb84:	d83d      	bhi.n	40bc02 <_realloc_r+0xae>
  40bb86:	4294      	cmp	r4, r2
  40bb88:	da43      	bge.n	40bc12 <_realloc_r+0xbe>
  40bb8a:	4bc4      	ldr	r3, [pc, #784]	; (40be9c <_realloc_r+0x348>)
  40bb8c:	6899      	ldr	r1, [r3, #8]
  40bb8e:	eb09 0004 	add.w	r0, r9, r4
  40bb92:	4288      	cmp	r0, r1
  40bb94:	f000 80b4 	beq.w	40bd00 <_realloc_r+0x1ac>
  40bb98:	6843      	ldr	r3, [r0, #4]
  40bb9a:	f023 0101 	bic.w	r1, r3, #1
  40bb9e:	4401      	add	r1, r0
  40bba0:	6849      	ldr	r1, [r1, #4]
  40bba2:	07c9      	lsls	r1, r1, #31
  40bba4:	d54c      	bpl.n	40bc40 <_realloc_r+0xec>
  40bba6:	f01e 0f01 	tst.w	lr, #1
  40bbaa:	f000 809b 	beq.w	40bce4 <_realloc_r+0x190>
  40bbae:	4631      	mov	r1, r6
  40bbb0:	4640      	mov	r0, r8
  40bbb2:	f7ff f949 	bl	40ae48 <_malloc_r>
  40bbb6:	4606      	mov	r6, r0
  40bbb8:	2800      	cmp	r0, #0
  40bbba:	d03a      	beq.n	40bc32 <_realloc_r+0xde>
  40bbbc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40bbc0:	f023 0301 	bic.w	r3, r3, #1
  40bbc4:	444b      	add	r3, r9
  40bbc6:	f1a0 0208 	sub.w	r2, r0, #8
  40bbca:	429a      	cmp	r2, r3
  40bbcc:	f000 8121 	beq.w	40be12 <_realloc_r+0x2be>
  40bbd0:	1f22      	subs	r2, r4, #4
  40bbd2:	2a24      	cmp	r2, #36	; 0x24
  40bbd4:	f200 8107 	bhi.w	40bde6 <_realloc_r+0x292>
  40bbd8:	2a13      	cmp	r2, #19
  40bbda:	f200 80db 	bhi.w	40bd94 <_realloc_r+0x240>
  40bbde:	4603      	mov	r3, r0
  40bbe0:	462a      	mov	r2, r5
  40bbe2:	6811      	ldr	r1, [r2, #0]
  40bbe4:	6019      	str	r1, [r3, #0]
  40bbe6:	6851      	ldr	r1, [r2, #4]
  40bbe8:	6059      	str	r1, [r3, #4]
  40bbea:	6892      	ldr	r2, [r2, #8]
  40bbec:	609a      	str	r2, [r3, #8]
  40bbee:	4629      	mov	r1, r5
  40bbf0:	4640      	mov	r0, r8
  40bbf2:	f7fe fdfd 	bl	40a7f0 <_free_r>
  40bbf6:	e01c      	b.n	40bc32 <_realloc_r+0xde>
  40bbf8:	f027 0707 	bic.w	r7, r7, #7
  40bbfc:	2f00      	cmp	r7, #0
  40bbfe:	463a      	mov	r2, r7
  40bc00:	dabf      	bge.n	40bb82 <_realloc_r+0x2e>
  40bc02:	2600      	movs	r6, #0
  40bc04:	230c      	movs	r3, #12
  40bc06:	4630      	mov	r0, r6
  40bc08:	f8c8 3000 	str.w	r3, [r8]
  40bc0c:	b003      	add	sp, #12
  40bc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc12:	462e      	mov	r6, r5
  40bc14:	1be3      	subs	r3, r4, r7
  40bc16:	2b0f      	cmp	r3, #15
  40bc18:	d81e      	bhi.n	40bc58 <_realloc_r+0x104>
  40bc1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40bc1e:	f003 0301 	and.w	r3, r3, #1
  40bc22:	4323      	orrs	r3, r4
  40bc24:	444c      	add	r4, r9
  40bc26:	f8c9 3004 	str.w	r3, [r9, #4]
  40bc2a:	6863      	ldr	r3, [r4, #4]
  40bc2c:	f043 0301 	orr.w	r3, r3, #1
  40bc30:	6063      	str	r3, [r4, #4]
  40bc32:	4640      	mov	r0, r8
  40bc34:	f7ff fc8e 	bl	40b554 <__malloc_unlock>
  40bc38:	4630      	mov	r0, r6
  40bc3a:	b003      	add	sp, #12
  40bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc40:	f023 0303 	bic.w	r3, r3, #3
  40bc44:	18e1      	adds	r1, r4, r3
  40bc46:	4291      	cmp	r1, r2
  40bc48:	db1f      	blt.n	40bc8a <_realloc_r+0x136>
  40bc4a:	68c3      	ldr	r3, [r0, #12]
  40bc4c:	6882      	ldr	r2, [r0, #8]
  40bc4e:	462e      	mov	r6, r5
  40bc50:	60d3      	str	r3, [r2, #12]
  40bc52:	460c      	mov	r4, r1
  40bc54:	609a      	str	r2, [r3, #8]
  40bc56:	e7dd      	b.n	40bc14 <_realloc_r+0xc0>
  40bc58:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40bc5c:	eb09 0107 	add.w	r1, r9, r7
  40bc60:	f002 0201 	and.w	r2, r2, #1
  40bc64:	444c      	add	r4, r9
  40bc66:	f043 0301 	orr.w	r3, r3, #1
  40bc6a:	4317      	orrs	r7, r2
  40bc6c:	f8c9 7004 	str.w	r7, [r9, #4]
  40bc70:	604b      	str	r3, [r1, #4]
  40bc72:	6863      	ldr	r3, [r4, #4]
  40bc74:	f043 0301 	orr.w	r3, r3, #1
  40bc78:	3108      	adds	r1, #8
  40bc7a:	6063      	str	r3, [r4, #4]
  40bc7c:	4640      	mov	r0, r8
  40bc7e:	f7fe fdb7 	bl	40a7f0 <_free_r>
  40bc82:	e7d6      	b.n	40bc32 <_realloc_r+0xde>
  40bc84:	4611      	mov	r1, r2
  40bc86:	f7ff b8df 	b.w	40ae48 <_malloc_r>
  40bc8a:	f01e 0f01 	tst.w	lr, #1
  40bc8e:	d18e      	bne.n	40bbae <_realloc_r+0x5a>
  40bc90:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40bc94:	eba9 0a01 	sub.w	sl, r9, r1
  40bc98:	f8da 1004 	ldr.w	r1, [sl, #4]
  40bc9c:	f021 0103 	bic.w	r1, r1, #3
  40bca0:	440b      	add	r3, r1
  40bca2:	4423      	add	r3, r4
  40bca4:	4293      	cmp	r3, r2
  40bca6:	db25      	blt.n	40bcf4 <_realloc_r+0x1a0>
  40bca8:	68c2      	ldr	r2, [r0, #12]
  40bcaa:	6881      	ldr	r1, [r0, #8]
  40bcac:	4656      	mov	r6, sl
  40bcae:	60ca      	str	r2, [r1, #12]
  40bcb0:	6091      	str	r1, [r2, #8]
  40bcb2:	f8da 100c 	ldr.w	r1, [sl, #12]
  40bcb6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40bcba:	1f22      	subs	r2, r4, #4
  40bcbc:	2a24      	cmp	r2, #36	; 0x24
  40bcbe:	60c1      	str	r1, [r0, #12]
  40bcc0:	6088      	str	r0, [r1, #8]
  40bcc2:	f200 8094 	bhi.w	40bdee <_realloc_r+0x29a>
  40bcc6:	2a13      	cmp	r2, #19
  40bcc8:	d96f      	bls.n	40bdaa <_realloc_r+0x256>
  40bcca:	6829      	ldr	r1, [r5, #0]
  40bccc:	f8ca 1008 	str.w	r1, [sl, #8]
  40bcd0:	6869      	ldr	r1, [r5, #4]
  40bcd2:	f8ca 100c 	str.w	r1, [sl, #12]
  40bcd6:	2a1b      	cmp	r2, #27
  40bcd8:	f200 80a2 	bhi.w	40be20 <_realloc_r+0x2cc>
  40bcdc:	3508      	adds	r5, #8
  40bcde:	f10a 0210 	add.w	r2, sl, #16
  40bce2:	e063      	b.n	40bdac <_realloc_r+0x258>
  40bce4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40bce8:	eba9 0a03 	sub.w	sl, r9, r3
  40bcec:	f8da 1004 	ldr.w	r1, [sl, #4]
  40bcf0:	f021 0103 	bic.w	r1, r1, #3
  40bcf4:	1863      	adds	r3, r4, r1
  40bcf6:	4293      	cmp	r3, r2
  40bcf8:	f6ff af59 	blt.w	40bbae <_realloc_r+0x5a>
  40bcfc:	4656      	mov	r6, sl
  40bcfe:	e7d8      	b.n	40bcb2 <_realloc_r+0x15e>
  40bd00:	6841      	ldr	r1, [r0, #4]
  40bd02:	f021 0b03 	bic.w	fp, r1, #3
  40bd06:	44a3      	add	fp, r4
  40bd08:	f107 0010 	add.w	r0, r7, #16
  40bd0c:	4583      	cmp	fp, r0
  40bd0e:	da56      	bge.n	40bdbe <_realloc_r+0x26a>
  40bd10:	f01e 0f01 	tst.w	lr, #1
  40bd14:	f47f af4b 	bne.w	40bbae <_realloc_r+0x5a>
  40bd18:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40bd1c:	eba9 0a01 	sub.w	sl, r9, r1
  40bd20:	f8da 1004 	ldr.w	r1, [sl, #4]
  40bd24:	f021 0103 	bic.w	r1, r1, #3
  40bd28:	448b      	add	fp, r1
  40bd2a:	4558      	cmp	r0, fp
  40bd2c:	dce2      	bgt.n	40bcf4 <_realloc_r+0x1a0>
  40bd2e:	4656      	mov	r6, sl
  40bd30:	f8da 100c 	ldr.w	r1, [sl, #12]
  40bd34:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40bd38:	1f22      	subs	r2, r4, #4
  40bd3a:	2a24      	cmp	r2, #36	; 0x24
  40bd3c:	60c1      	str	r1, [r0, #12]
  40bd3e:	6088      	str	r0, [r1, #8]
  40bd40:	f200 808f 	bhi.w	40be62 <_realloc_r+0x30e>
  40bd44:	2a13      	cmp	r2, #19
  40bd46:	f240 808a 	bls.w	40be5e <_realloc_r+0x30a>
  40bd4a:	6829      	ldr	r1, [r5, #0]
  40bd4c:	f8ca 1008 	str.w	r1, [sl, #8]
  40bd50:	6869      	ldr	r1, [r5, #4]
  40bd52:	f8ca 100c 	str.w	r1, [sl, #12]
  40bd56:	2a1b      	cmp	r2, #27
  40bd58:	f200 808a 	bhi.w	40be70 <_realloc_r+0x31c>
  40bd5c:	3508      	adds	r5, #8
  40bd5e:	f10a 0210 	add.w	r2, sl, #16
  40bd62:	6829      	ldr	r1, [r5, #0]
  40bd64:	6011      	str	r1, [r2, #0]
  40bd66:	6869      	ldr	r1, [r5, #4]
  40bd68:	6051      	str	r1, [r2, #4]
  40bd6a:	68a9      	ldr	r1, [r5, #8]
  40bd6c:	6091      	str	r1, [r2, #8]
  40bd6e:	eb0a 0107 	add.w	r1, sl, r7
  40bd72:	ebab 0207 	sub.w	r2, fp, r7
  40bd76:	f042 0201 	orr.w	r2, r2, #1
  40bd7a:	6099      	str	r1, [r3, #8]
  40bd7c:	604a      	str	r2, [r1, #4]
  40bd7e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40bd82:	f003 0301 	and.w	r3, r3, #1
  40bd86:	431f      	orrs	r7, r3
  40bd88:	4640      	mov	r0, r8
  40bd8a:	f8ca 7004 	str.w	r7, [sl, #4]
  40bd8e:	f7ff fbe1 	bl	40b554 <__malloc_unlock>
  40bd92:	e751      	b.n	40bc38 <_realloc_r+0xe4>
  40bd94:	682b      	ldr	r3, [r5, #0]
  40bd96:	6003      	str	r3, [r0, #0]
  40bd98:	686b      	ldr	r3, [r5, #4]
  40bd9a:	6043      	str	r3, [r0, #4]
  40bd9c:	2a1b      	cmp	r2, #27
  40bd9e:	d82d      	bhi.n	40bdfc <_realloc_r+0x2a8>
  40bda0:	f100 0308 	add.w	r3, r0, #8
  40bda4:	f105 0208 	add.w	r2, r5, #8
  40bda8:	e71b      	b.n	40bbe2 <_realloc_r+0x8e>
  40bdaa:	4632      	mov	r2, r6
  40bdac:	6829      	ldr	r1, [r5, #0]
  40bdae:	6011      	str	r1, [r2, #0]
  40bdb0:	6869      	ldr	r1, [r5, #4]
  40bdb2:	6051      	str	r1, [r2, #4]
  40bdb4:	68a9      	ldr	r1, [r5, #8]
  40bdb6:	6091      	str	r1, [r2, #8]
  40bdb8:	461c      	mov	r4, r3
  40bdba:	46d1      	mov	r9, sl
  40bdbc:	e72a      	b.n	40bc14 <_realloc_r+0xc0>
  40bdbe:	eb09 0107 	add.w	r1, r9, r7
  40bdc2:	ebab 0b07 	sub.w	fp, fp, r7
  40bdc6:	f04b 0201 	orr.w	r2, fp, #1
  40bdca:	6099      	str	r1, [r3, #8]
  40bdcc:	604a      	str	r2, [r1, #4]
  40bdce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40bdd2:	f003 0301 	and.w	r3, r3, #1
  40bdd6:	431f      	orrs	r7, r3
  40bdd8:	4640      	mov	r0, r8
  40bdda:	f845 7c04 	str.w	r7, [r5, #-4]
  40bdde:	f7ff fbb9 	bl	40b554 <__malloc_unlock>
  40bde2:	462e      	mov	r6, r5
  40bde4:	e728      	b.n	40bc38 <_realloc_r+0xe4>
  40bde6:	4629      	mov	r1, r5
  40bde8:	f7ff fb4a 	bl	40b480 <memmove>
  40bdec:	e6ff      	b.n	40bbee <_realloc_r+0x9a>
  40bdee:	4629      	mov	r1, r5
  40bdf0:	4630      	mov	r0, r6
  40bdf2:	461c      	mov	r4, r3
  40bdf4:	46d1      	mov	r9, sl
  40bdf6:	f7ff fb43 	bl	40b480 <memmove>
  40bdfa:	e70b      	b.n	40bc14 <_realloc_r+0xc0>
  40bdfc:	68ab      	ldr	r3, [r5, #8]
  40bdfe:	6083      	str	r3, [r0, #8]
  40be00:	68eb      	ldr	r3, [r5, #12]
  40be02:	60c3      	str	r3, [r0, #12]
  40be04:	2a24      	cmp	r2, #36	; 0x24
  40be06:	d017      	beq.n	40be38 <_realloc_r+0x2e4>
  40be08:	f100 0310 	add.w	r3, r0, #16
  40be0c:	f105 0210 	add.w	r2, r5, #16
  40be10:	e6e7      	b.n	40bbe2 <_realloc_r+0x8e>
  40be12:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40be16:	f023 0303 	bic.w	r3, r3, #3
  40be1a:	441c      	add	r4, r3
  40be1c:	462e      	mov	r6, r5
  40be1e:	e6f9      	b.n	40bc14 <_realloc_r+0xc0>
  40be20:	68a9      	ldr	r1, [r5, #8]
  40be22:	f8ca 1010 	str.w	r1, [sl, #16]
  40be26:	68e9      	ldr	r1, [r5, #12]
  40be28:	f8ca 1014 	str.w	r1, [sl, #20]
  40be2c:	2a24      	cmp	r2, #36	; 0x24
  40be2e:	d00c      	beq.n	40be4a <_realloc_r+0x2f6>
  40be30:	3510      	adds	r5, #16
  40be32:	f10a 0218 	add.w	r2, sl, #24
  40be36:	e7b9      	b.n	40bdac <_realloc_r+0x258>
  40be38:	692b      	ldr	r3, [r5, #16]
  40be3a:	6103      	str	r3, [r0, #16]
  40be3c:	696b      	ldr	r3, [r5, #20]
  40be3e:	6143      	str	r3, [r0, #20]
  40be40:	f105 0218 	add.w	r2, r5, #24
  40be44:	f100 0318 	add.w	r3, r0, #24
  40be48:	e6cb      	b.n	40bbe2 <_realloc_r+0x8e>
  40be4a:	692a      	ldr	r2, [r5, #16]
  40be4c:	f8ca 2018 	str.w	r2, [sl, #24]
  40be50:	696a      	ldr	r2, [r5, #20]
  40be52:	f8ca 201c 	str.w	r2, [sl, #28]
  40be56:	3518      	adds	r5, #24
  40be58:	f10a 0220 	add.w	r2, sl, #32
  40be5c:	e7a6      	b.n	40bdac <_realloc_r+0x258>
  40be5e:	4632      	mov	r2, r6
  40be60:	e77f      	b.n	40bd62 <_realloc_r+0x20e>
  40be62:	4629      	mov	r1, r5
  40be64:	4630      	mov	r0, r6
  40be66:	9301      	str	r3, [sp, #4]
  40be68:	f7ff fb0a 	bl	40b480 <memmove>
  40be6c:	9b01      	ldr	r3, [sp, #4]
  40be6e:	e77e      	b.n	40bd6e <_realloc_r+0x21a>
  40be70:	68a9      	ldr	r1, [r5, #8]
  40be72:	f8ca 1010 	str.w	r1, [sl, #16]
  40be76:	68e9      	ldr	r1, [r5, #12]
  40be78:	f8ca 1014 	str.w	r1, [sl, #20]
  40be7c:	2a24      	cmp	r2, #36	; 0x24
  40be7e:	d003      	beq.n	40be88 <_realloc_r+0x334>
  40be80:	3510      	adds	r5, #16
  40be82:	f10a 0218 	add.w	r2, sl, #24
  40be86:	e76c      	b.n	40bd62 <_realloc_r+0x20e>
  40be88:	692a      	ldr	r2, [r5, #16]
  40be8a:	f8ca 2018 	str.w	r2, [sl, #24]
  40be8e:	696a      	ldr	r2, [r5, #20]
  40be90:	f8ca 201c 	str.w	r2, [sl, #28]
  40be94:	3518      	adds	r5, #24
  40be96:	f10a 0220 	add.w	r2, sl, #32
  40be9a:	e762      	b.n	40bd62 <_realloc_r+0x20e>
  40be9c:	204005e0 	.word	0x204005e0

0040bea0 <_sbrk_r>:
  40bea0:	b538      	push	{r3, r4, r5, lr}
  40bea2:	4c07      	ldr	r4, [pc, #28]	; (40bec0 <_sbrk_r+0x20>)
  40bea4:	2300      	movs	r3, #0
  40bea6:	4605      	mov	r5, r0
  40bea8:	4608      	mov	r0, r1
  40beaa:	6023      	str	r3, [r4, #0]
  40beac:	f7f6 fc92 	bl	4027d4 <_sbrk>
  40beb0:	1c43      	adds	r3, r0, #1
  40beb2:	d000      	beq.n	40beb6 <_sbrk_r+0x16>
  40beb4:	bd38      	pop	{r3, r4, r5, pc}
  40beb6:	6823      	ldr	r3, [r4, #0]
  40beb8:	2b00      	cmp	r3, #0
  40beba:	d0fb      	beq.n	40beb4 <_sbrk_r+0x14>
  40bebc:	602b      	str	r3, [r5, #0]
  40bebe:	bd38      	pop	{r3, r4, r5, pc}
  40bec0:	2040c4d4 	.word	0x2040c4d4

0040bec4 <__sread>:
  40bec4:	b510      	push	{r4, lr}
  40bec6:	460c      	mov	r4, r1
  40bec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40becc:	f000 faa4 	bl	40c418 <_read_r>
  40bed0:	2800      	cmp	r0, #0
  40bed2:	db03      	blt.n	40bedc <__sread+0x18>
  40bed4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40bed6:	4403      	add	r3, r0
  40bed8:	6523      	str	r3, [r4, #80]	; 0x50
  40beda:	bd10      	pop	{r4, pc}
  40bedc:	89a3      	ldrh	r3, [r4, #12]
  40bede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40bee2:	81a3      	strh	r3, [r4, #12]
  40bee4:	bd10      	pop	{r4, pc}
  40bee6:	bf00      	nop

0040bee8 <__swrite>:
  40bee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40beec:	4616      	mov	r6, r2
  40beee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40bef2:	461f      	mov	r7, r3
  40bef4:	05d3      	lsls	r3, r2, #23
  40bef6:	460c      	mov	r4, r1
  40bef8:	4605      	mov	r5, r0
  40befa:	d507      	bpl.n	40bf0c <__swrite+0x24>
  40befc:	2200      	movs	r2, #0
  40befe:	2302      	movs	r3, #2
  40bf00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bf04:	f000 fa72 	bl	40c3ec <_lseek_r>
  40bf08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40bf0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40bf10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40bf14:	81a2      	strh	r2, [r4, #12]
  40bf16:	463b      	mov	r3, r7
  40bf18:	4632      	mov	r2, r6
  40bf1a:	4628      	mov	r0, r5
  40bf1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bf20:	f000 b922 	b.w	40c168 <_write_r>

0040bf24 <__sseek>:
  40bf24:	b510      	push	{r4, lr}
  40bf26:	460c      	mov	r4, r1
  40bf28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bf2c:	f000 fa5e 	bl	40c3ec <_lseek_r>
  40bf30:	89a3      	ldrh	r3, [r4, #12]
  40bf32:	1c42      	adds	r2, r0, #1
  40bf34:	bf0e      	itee	eq
  40bf36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40bf3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40bf3e:	6520      	strne	r0, [r4, #80]	; 0x50
  40bf40:	81a3      	strh	r3, [r4, #12]
  40bf42:	bd10      	pop	{r4, pc}

0040bf44 <__sclose>:
  40bf44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bf48:	f000 b9b6 	b.w	40c2b8 <_close_r>

0040bf4c <__ssprint_r>:
  40bf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bf50:	6893      	ldr	r3, [r2, #8]
  40bf52:	b083      	sub	sp, #12
  40bf54:	4690      	mov	r8, r2
  40bf56:	2b00      	cmp	r3, #0
  40bf58:	d070      	beq.n	40c03c <__ssprint_r+0xf0>
  40bf5a:	4682      	mov	sl, r0
  40bf5c:	460c      	mov	r4, r1
  40bf5e:	6817      	ldr	r7, [r2, #0]
  40bf60:	688d      	ldr	r5, [r1, #8]
  40bf62:	6808      	ldr	r0, [r1, #0]
  40bf64:	e042      	b.n	40bfec <__ssprint_r+0xa0>
  40bf66:	89a3      	ldrh	r3, [r4, #12]
  40bf68:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40bf6c:	d02e      	beq.n	40bfcc <__ssprint_r+0x80>
  40bf6e:	6965      	ldr	r5, [r4, #20]
  40bf70:	6921      	ldr	r1, [r4, #16]
  40bf72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40bf76:	eba0 0b01 	sub.w	fp, r0, r1
  40bf7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40bf7e:	f10b 0001 	add.w	r0, fp, #1
  40bf82:	106d      	asrs	r5, r5, #1
  40bf84:	4430      	add	r0, r6
  40bf86:	42a8      	cmp	r0, r5
  40bf88:	462a      	mov	r2, r5
  40bf8a:	bf84      	itt	hi
  40bf8c:	4605      	movhi	r5, r0
  40bf8e:	462a      	movhi	r2, r5
  40bf90:	055b      	lsls	r3, r3, #21
  40bf92:	d538      	bpl.n	40c006 <__ssprint_r+0xba>
  40bf94:	4611      	mov	r1, r2
  40bf96:	4650      	mov	r0, sl
  40bf98:	f7fe ff56 	bl	40ae48 <_malloc_r>
  40bf9c:	2800      	cmp	r0, #0
  40bf9e:	d03c      	beq.n	40c01a <__ssprint_r+0xce>
  40bfa0:	465a      	mov	r2, fp
  40bfa2:	6921      	ldr	r1, [r4, #16]
  40bfa4:	9001      	str	r0, [sp, #4]
  40bfa6:	f7fa fe7d 	bl	406ca4 <memcpy>
  40bfaa:	89a2      	ldrh	r2, [r4, #12]
  40bfac:	9b01      	ldr	r3, [sp, #4]
  40bfae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40bfb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40bfb6:	81a2      	strh	r2, [r4, #12]
  40bfb8:	eba5 020b 	sub.w	r2, r5, fp
  40bfbc:	eb03 000b 	add.w	r0, r3, fp
  40bfc0:	6165      	str	r5, [r4, #20]
  40bfc2:	6123      	str	r3, [r4, #16]
  40bfc4:	6020      	str	r0, [r4, #0]
  40bfc6:	60a2      	str	r2, [r4, #8]
  40bfc8:	4635      	mov	r5, r6
  40bfca:	46b3      	mov	fp, r6
  40bfcc:	465a      	mov	r2, fp
  40bfce:	4649      	mov	r1, r9
  40bfd0:	f7ff fa56 	bl	40b480 <memmove>
  40bfd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40bfd8:	68a2      	ldr	r2, [r4, #8]
  40bfda:	6820      	ldr	r0, [r4, #0]
  40bfdc:	1b55      	subs	r5, r2, r5
  40bfde:	4458      	add	r0, fp
  40bfe0:	1b9e      	subs	r6, r3, r6
  40bfe2:	60a5      	str	r5, [r4, #8]
  40bfe4:	6020      	str	r0, [r4, #0]
  40bfe6:	f8c8 6008 	str.w	r6, [r8, #8]
  40bfea:	b33e      	cbz	r6, 40c03c <__ssprint_r+0xf0>
  40bfec:	687e      	ldr	r6, [r7, #4]
  40bfee:	463b      	mov	r3, r7
  40bff0:	3708      	adds	r7, #8
  40bff2:	2e00      	cmp	r6, #0
  40bff4:	d0fa      	beq.n	40bfec <__ssprint_r+0xa0>
  40bff6:	42ae      	cmp	r6, r5
  40bff8:	f8d3 9000 	ldr.w	r9, [r3]
  40bffc:	46ab      	mov	fp, r5
  40bffe:	d2b2      	bcs.n	40bf66 <__ssprint_r+0x1a>
  40c000:	4635      	mov	r5, r6
  40c002:	46b3      	mov	fp, r6
  40c004:	e7e2      	b.n	40bfcc <__ssprint_r+0x80>
  40c006:	4650      	mov	r0, sl
  40c008:	f7ff fda4 	bl	40bb54 <_realloc_r>
  40c00c:	4603      	mov	r3, r0
  40c00e:	2800      	cmp	r0, #0
  40c010:	d1d2      	bne.n	40bfb8 <__ssprint_r+0x6c>
  40c012:	6921      	ldr	r1, [r4, #16]
  40c014:	4650      	mov	r0, sl
  40c016:	f7fe fbeb 	bl	40a7f0 <_free_r>
  40c01a:	230c      	movs	r3, #12
  40c01c:	f8ca 3000 	str.w	r3, [sl]
  40c020:	89a3      	ldrh	r3, [r4, #12]
  40c022:	2200      	movs	r2, #0
  40c024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c028:	f04f 30ff 	mov.w	r0, #4294967295
  40c02c:	81a3      	strh	r3, [r4, #12]
  40c02e:	f8c8 2008 	str.w	r2, [r8, #8]
  40c032:	f8c8 2004 	str.w	r2, [r8, #4]
  40c036:	b003      	add	sp, #12
  40c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c03c:	2000      	movs	r0, #0
  40c03e:	f8c8 0004 	str.w	r0, [r8, #4]
  40c042:	b003      	add	sp, #12
  40c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040c048 <__swbuf_r>:
  40c048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c04a:	460d      	mov	r5, r1
  40c04c:	4614      	mov	r4, r2
  40c04e:	4606      	mov	r6, r0
  40c050:	b110      	cbz	r0, 40c058 <__swbuf_r+0x10>
  40c052:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c054:	2b00      	cmp	r3, #0
  40c056:	d04b      	beq.n	40c0f0 <__swbuf_r+0xa8>
  40c058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c05c:	69a3      	ldr	r3, [r4, #24]
  40c05e:	60a3      	str	r3, [r4, #8]
  40c060:	b291      	uxth	r1, r2
  40c062:	0708      	lsls	r0, r1, #28
  40c064:	d539      	bpl.n	40c0da <__swbuf_r+0x92>
  40c066:	6923      	ldr	r3, [r4, #16]
  40c068:	2b00      	cmp	r3, #0
  40c06a:	d036      	beq.n	40c0da <__swbuf_r+0x92>
  40c06c:	b2ed      	uxtb	r5, r5
  40c06e:	0489      	lsls	r1, r1, #18
  40c070:	462f      	mov	r7, r5
  40c072:	d515      	bpl.n	40c0a0 <__swbuf_r+0x58>
  40c074:	6822      	ldr	r2, [r4, #0]
  40c076:	6961      	ldr	r1, [r4, #20]
  40c078:	1ad3      	subs	r3, r2, r3
  40c07a:	428b      	cmp	r3, r1
  40c07c:	da1c      	bge.n	40c0b8 <__swbuf_r+0x70>
  40c07e:	3301      	adds	r3, #1
  40c080:	68a1      	ldr	r1, [r4, #8]
  40c082:	1c50      	adds	r0, r2, #1
  40c084:	3901      	subs	r1, #1
  40c086:	60a1      	str	r1, [r4, #8]
  40c088:	6020      	str	r0, [r4, #0]
  40c08a:	7015      	strb	r5, [r2, #0]
  40c08c:	6962      	ldr	r2, [r4, #20]
  40c08e:	429a      	cmp	r2, r3
  40c090:	d01a      	beq.n	40c0c8 <__swbuf_r+0x80>
  40c092:	89a3      	ldrh	r3, [r4, #12]
  40c094:	07db      	lsls	r3, r3, #31
  40c096:	d501      	bpl.n	40c09c <__swbuf_r+0x54>
  40c098:	2d0a      	cmp	r5, #10
  40c09a:	d015      	beq.n	40c0c8 <__swbuf_r+0x80>
  40c09c:	4638      	mov	r0, r7
  40c09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40c0a0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40c0a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40c0a6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40c0aa:	81a2      	strh	r2, [r4, #12]
  40c0ac:	6822      	ldr	r2, [r4, #0]
  40c0ae:	6661      	str	r1, [r4, #100]	; 0x64
  40c0b0:	6961      	ldr	r1, [r4, #20]
  40c0b2:	1ad3      	subs	r3, r2, r3
  40c0b4:	428b      	cmp	r3, r1
  40c0b6:	dbe2      	blt.n	40c07e <__swbuf_r+0x36>
  40c0b8:	4621      	mov	r1, r4
  40c0ba:	4630      	mov	r0, r6
  40c0bc:	f7fe fa1a 	bl	40a4f4 <_fflush_r>
  40c0c0:	b940      	cbnz	r0, 40c0d4 <__swbuf_r+0x8c>
  40c0c2:	6822      	ldr	r2, [r4, #0]
  40c0c4:	2301      	movs	r3, #1
  40c0c6:	e7db      	b.n	40c080 <__swbuf_r+0x38>
  40c0c8:	4621      	mov	r1, r4
  40c0ca:	4630      	mov	r0, r6
  40c0cc:	f7fe fa12 	bl	40a4f4 <_fflush_r>
  40c0d0:	2800      	cmp	r0, #0
  40c0d2:	d0e3      	beq.n	40c09c <__swbuf_r+0x54>
  40c0d4:	f04f 37ff 	mov.w	r7, #4294967295
  40c0d8:	e7e0      	b.n	40c09c <__swbuf_r+0x54>
  40c0da:	4621      	mov	r1, r4
  40c0dc:	4630      	mov	r0, r6
  40c0de:	f7fd f935 	bl	40934c <__swsetup_r>
  40c0e2:	2800      	cmp	r0, #0
  40c0e4:	d1f6      	bne.n	40c0d4 <__swbuf_r+0x8c>
  40c0e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c0ea:	6923      	ldr	r3, [r4, #16]
  40c0ec:	b291      	uxth	r1, r2
  40c0ee:	e7bd      	b.n	40c06c <__swbuf_r+0x24>
  40c0f0:	f7fe fa58 	bl	40a5a4 <__sinit>
  40c0f4:	e7b0      	b.n	40c058 <__swbuf_r+0x10>
  40c0f6:	bf00      	nop

0040c0f8 <_wcrtomb_r>:
  40c0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c0fa:	4606      	mov	r6, r0
  40c0fc:	b085      	sub	sp, #20
  40c0fe:	461f      	mov	r7, r3
  40c100:	b189      	cbz	r1, 40c126 <_wcrtomb_r+0x2e>
  40c102:	4c10      	ldr	r4, [pc, #64]	; (40c144 <_wcrtomb_r+0x4c>)
  40c104:	4d10      	ldr	r5, [pc, #64]	; (40c148 <_wcrtomb_r+0x50>)
  40c106:	6824      	ldr	r4, [r4, #0]
  40c108:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40c10a:	2c00      	cmp	r4, #0
  40c10c:	bf08      	it	eq
  40c10e:	462c      	moveq	r4, r5
  40c110:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40c114:	47a0      	blx	r4
  40c116:	1c43      	adds	r3, r0, #1
  40c118:	d103      	bne.n	40c122 <_wcrtomb_r+0x2a>
  40c11a:	2200      	movs	r2, #0
  40c11c:	238a      	movs	r3, #138	; 0x8a
  40c11e:	603a      	str	r2, [r7, #0]
  40c120:	6033      	str	r3, [r6, #0]
  40c122:	b005      	add	sp, #20
  40c124:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c126:	460c      	mov	r4, r1
  40c128:	4906      	ldr	r1, [pc, #24]	; (40c144 <_wcrtomb_r+0x4c>)
  40c12a:	4a07      	ldr	r2, [pc, #28]	; (40c148 <_wcrtomb_r+0x50>)
  40c12c:	6809      	ldr	r1, [r1, #0]
  40c12e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40c130:	2900      	cmp	r1, #0
  40c132:	bf08      	it	eq
  40c134:	4611      	moveq	r1, r2
  40c136:	4622      	mov	r2, r4
  40c138:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40c13c:	a901      	add	r1, sp, #4
  40c13e:	47a0      	blx	r4
  40c140:	e7e9      	b.n	40c116 <_wcrtomb_r+0x1e>
  40c142:	bf00      	nop
  40c144:	20400040 	.word	0x20400040
  40c148:	20400474 	.word	0x20400474

0040c14c <__ascii_wctomb>:
  40c14c:	b121      	cbz	r1, 40c158 <__ascii_wctomb+0xc>
  40c14e:	2aff      	cmp	r2, #255	; 0xff
  40c150:	d804      	bhi.n	40c15c <__ascii_wctomb+0x10>
  40c152:	700a      	strb	r2, [r1, #0]
  40c154:	2001      	movs	r0, #1
  40c156:	4770      	bx	lr
  40c158:	4608      	mov	r0, r1
  40c15a:	4770      	bx	lr
  40c15c:	238a      	movs	r3, #138	; 0x8a
  40c15e:	6003      	str	r3, [r0, #0]
  40c160:	f04f 30ff 	mov.w	r0, #4294967295
  40c164:	4770      	bx	lr
  40c166:	bf00      	nop

0040c168 <_write_r>:
  40c168:	b570      	push	{r4, r5, r6, lr}
  40c16a:	460d      	mov	r5, r1
  40c16c:	4c08      	ldr	r4, [pc, #32]	; (40c190 <_write_r+0x28>)
  40c16e:	4611      	mov	r1, r2
  40c170:	4606      	mov	r6, r0
  40c172:	461a      	mov	r2, r3
  40c174:	4628      	mov	r0, r5
  40c176:	2300      	movs	r3, #0
  40c178:	6023      	str	r3, [r4, #0]
  40c17a:	f7f4 ffdb 	bl	401134 <_write>
  40c17e:	1c43      	adds	r3, r0, #1
  40c180:	d000      	beq.n	40c184 <_write_r+0x1c>
  40c182:	bd70      	pop	{r4, r5, r6, pc}
  40c184:	6823      	ldr	r3, [r4, #0]
  40c186:	2b00      	cmp	r3, #0
  40c188:	d0fb      	beq.n	40c182 <_write_r+0x1a>
  40c18a:	6033      	str	r3, [r6, #0]
  40c18c:	bd70      	pop	{r4, r5, r6, pc}
  40c18e:	bf00      	nop
  40c190:	2040c4d4 	.word	0x2040c4d4

0040c194 <__register_exitproc>:
  40c194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c198:	4d2c      	ldr	r5, [pc, #176]	; (40c24c <__register_exitproc+0xb8>)
  40c19a:	4606      	mov	r6, r0
  40c19c:	6828      	ldr	r0, [r5, #0]
  40c19e:	4698      	mov	r8, r3
  40c1a0:	460f      	mov	r7, r1
  40c1a2:	4691      	mov	r9, r2
  40c1a4:	f7fe fdcc 	bl	40ad40 <__retarget_lock_acquire_recursive>
  40c1a8:	4b29      	ldr	r3, [pc, #164]	; (40c250 <__register_exitproc+0xbc>)
  40c1aa:	681c      	ldr	r4, [r3, #0]
  40c1ac:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40c1b0:	2b00      	cmp	r3, #0
  40c1b2:	d03e      	beq.n	40c232 <__register_exitproc+0x9e>
  40c1b4:	685a      	ldr	r2, [r3, #4]
  40c1b6:	2a1f      	cmp	r2, #31
  40c1b8:	dc1c      	bgt.n	40c1f4 <__register_exitproc+0x60>
  40c1ba:	f102 0e01 	add.w	lr, r2, #1
  40c1be:	b176      	cbz	r6, 40c1de <__register_exitproc+0x4a>
  40c1c0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40c1c4:	2401      	movs	r4, #1
  40c1c6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40c1ca:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40c1ce:	4094      	lsls	r4, r2
  40c1d0:	4320      	orrs	r0, r4
  40c1d2:	2e02      	cmp	r6, #2
  40c1d4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40c1d8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40c1dc:	d023      	beq.n	40c226 <__register_exitproc+0x92>
  40c1de:	3202      	adds	r2, #2
  40c1e0:	f8c3 e004 	str.w	lr, [r3, #4]
  40c1e4:	6828      	ldr	r0, [r5, #0]
  40c1e6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40c1ea:	f7fe fdab 	bl	40ad44 <__retarget_lock_release_recursive>
  40c1ee:	2000      	movs	r0, #0
  40c1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c1f4:	4b17      	ldr	r3, [pc, #92]	; (40c254 <__register_exitproc+0xc0>)
  40c1f6:	b30b      	cbz	r3, 40c23c <__register_exitproc+0xa8>
  40c1f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40c1fc:	f7fe fe1c 	bl	40ae38 <malloc>
  40c200:	4603      	mov	r3, r0
  40c202:	b1d8      	cbz	r0, 40c23c <__register_exitproc+0xa8>
  40c204:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40c208:	6002      	str	r2, [r0, #0]
  40c20a:	2100      	movs	r1, #0
  40c20c:	6041      	str	r1, [r0, #4]
  40c20e:	460a      	mov	r2, r1
  40c210:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40c214:	f04f 0e01 	mov.w	lr, #1
  40c218:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40c21c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40c220:	2e00      	cmp	r6, #0
  40c222:	d0dc      	beq.n	40c1de <__register_exitproc+0x4a>
  40c224:	e7cc      	b.n	40c1c0 <__register_exitproc+0x2c>
  40c226:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40c22a:	430c      	orrs	r4, r1
  40c22c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40c230:	e7d5      	b.n	40c1de <__register_exitproc+0x4a>
  40c232:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40c236:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40c23a:	e7bb      	b.n	40c1b4 <__register_exitproc+0x20>
  40c23c:	6828      	ldr	r0, [r5, #0]
  40c23e:	f7fe fd81 	bl	40ad44 <__retarget_lock_release_recursive>
  40c242:	f04f 30ff 	mov.w	r0, #4294967295
  40c246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c24a:	bf00      	nop
  40c24c:	20400470 	.word	0x20400470
  40c250:	0040d98c 	.word	0x0040d98c
  40c254:	0040ae39 	.word	0x0040ae39

0040c258 <_calloc_r>:
  40c258:	b510      	push	{r4, lr}
  40c25a:	fb02 f101 	mul.w	r1, r2, r1
  40c25e:	f7fe fdf3 	bl	40ae48 <_malloc_r>
  40c262:	4604      	mov	r4, r0
  40c264:	b1d8      	cbz	r0, 40c29e <_calloc_r+0x46>
  40c266:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40c26a:	f022 0203 	bic.w	r2, r2, #3
  40c26e:	3a04      	subs	r2, #4
  40c270:	2a24      	cmp	r2, #36	; 0x24
  40c272:	d818      	bhi.n	40c2a6 <_calloc_r+0x4e>
  40c274:	2a13      	cmp	r2, #19
  40c276:	d914      	bls.n	40c2a2 <_calloc_r+0x4a>
  40c278:	2300      	movs	r3, #0
  40c27a:	2a1b      	cmp	r2, #27
  40c27c:	6003      	str	r3, [r0, #0]
  40c27e:	6043      	str	r3, [r0, #4]
  40c280:	d916      	bls.n	40c2b0 <_calloc_r+0x58>
  40c282:	2a24      	cmp	r2, #36	; 0x24
  40c284:	6083      	str	r3, [r0, #8]
  40c286:	60c3      	str	r3, [r0, #12]
  40c288:	bf11      	iteee	ne
  40c28a:	f100 0210 	addne.w	r2, r0, #16
  40c28e:	6103      	streq	r3, [r0, #16]
  40c290:	6143      	streq	r3, [r0, #20]
  40c292:	f100 0218 	addeq.w	r2, r0, #24
  40c296:	2300      	movs	r3, #0
  40c298:	6013      	str	r3, [r2, #0]
  40c29a:	6053      	str	r3, [r2, #4]
  40c29c:	6093      	str	r3, [r2, #8]
  40c29e:	4620      	mov	r0, r4
  40c2a0:	bd10      	pop	{r4, pc}
  40c2a2:	4602      	mov	r2, r0
  40c2a4:	e7f7      	b.n	40c296 <_calloc_r+0x3e>
  40c2a6:	2100      	movs	r1, #0
  40c2a8:	f7fa fd96 	bl	406dd8 <memset>
  40c2ac:	4620      	mov	r0, r4
  40c2ae:	bd10      	pop	{r4, pc}
  40c2b0:	f100 0208 	add.w	r2, r0, #8
  40c2b4:	e7ef      	b.n	40c296 <_calloc_r+0x3e>
  40c2b6:	bf00      	nop

0040c2b8 <_close_r>:
  40c2b8:	b538      	push	{r3, r4, r5, lr}
  40c2ba:	4c07      	ldr	r4, [pc, #28]	; (40c2d8 <_close_r+0x20>)
  40c2bc:	2300      	movs	r3, #0
  40c2be:	4605      	mov	r5, r0
  40c2c0:	4608      	mov	r0, r1
  40c2c2:	6023      	str	r3, [r4, #0]
  40c2c4:	f7f6 faa2 	bl	40280c <_close>
  40c2c8:	1c43      	adds	r3, r0, #1
  40c2ca:	d000      	beq.n	40c2ce <_close_r+0x16>
  40c2cc:	bd38      	pop	{r3, r4, r5, pc}
  40c2ce:	6823      	ldr	r3, [r4, #0]
  40c2d0:	2b00      	cmp	r3, #0
  40c2d2:	d0fb      	beq.n	40c2cc <_close_r+0x14>
  40c2d4:	602b      	str	r3, [r5, #0]
  40c2d6:	bd38      	pop	{r3, r4, r5, pc}
  40c2d8:	2040c4d4 	.word	0x2040c4d4

0040c2dc <_fclose_r>:
  40c2dc:	b570      	push	{r4, r5, r6, lr}
  40c2de:	b159      	cbz	r1, 40c2f8 <_fclose_r+0x1c>
  40c2e0:	4605      	mov	r5, r0
  40c2e2:	460c      	mov	r4, r1
  40c2e4:	b110      	cbz	r0, 40c2ec <_fclose_r+0x10>
  40c2e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c2e8:	2b00      	cmp	r3, #0
  40c2ea:	d03c      	beq.n	40c366 <_fclose_r+0x8a>
  40c2ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40c2ee:	07d8      	lsls	r0, r3, #31
  40c2f0:	d505      	bpl.n	40c2fe <_fclose_r+0x22>
  40c2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c2f6:	b92b      	cbnz	r3, 40c304 <_fclose_r+0x28>
  40c2f8:	2600      	movs	r6, #0
  40c2fa:	4630      	mov	r0, r6
  40c2fc:	bd70      	pop	{r4, r5, r6, pc}
  40c2fe:	89a3      	ldrh	r3, [r4, #12]
  40c300:	0599      	lsls	r1, r3, #22
  40c302:	d53c      	bpl.n	40c37e <_fclose_r+0xa2>
  40c304:	4621      	mov	r1, r4
  40c306:	4628      	mov	r0, r5
  40c308:	f7fe f854 	bl	40a3b4 <__sflush_r>
  40c30c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40c30e:	4606      	mov	r6, r0
  40c310:	b133      	cbz	r3, 40c320 <_fclose_r+0x44>
  40c312:	69e1      	ldr	r1, [r4, #28]
  40c314:	4628      	mov	r0, r5
  40c316:	4798      	blx	r3
  40c318:	2800      	cmp	r0, #0
  40c31a:	bfb8      	it	lt
  40c31c:	f04f 36ff 	movlt.w	r6, #4294967295
  40c320:	89a3      	ldrh	r3, [r4, #12]
  40c322:	061a      	lsls	r2, r3, #24
  40c324:	d422      	bmi.n	40c36c <_fclose_r+0x90>
  40c326:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40c328:	b141      	cbz	r1, 40c33c <_fclose_r+0x60>
  40c32a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40c32e:	4299      	cmp	r1, r3
  40c330:	d002      	beq.n	40c338 <_fclose_r+0x5c>
  40c332:	4628      	mov	r0, r5
  40c334:	f7fe fa5c 	bl	40a7f0 <_free_r>
  40c338:	2300      	movs	r3, #0
  40c33a:	6323      	str	r3, [r4, #48]	; 0x30
  40c33c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40c33e:	b121      	cbz	r1, 40c34a <_fclose_r+0x6e>
  40c340:	4628      	mov	r0, r5
  40c342:	f7fe fa55 	bl	40a7f0 <_free_r>
  40c346:	2300      	movs	r3, #0
  40c348:	6463      	str	r3, [r4, #68]	; 0x44
  40c34a:	f7fe f957 	bl	40a5fc <__sfp_lock_acquire>
  40c34e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40c350:	2200      	movs	r2, #0
  40c352:	07db      	lsls	r3, r3, #31
  40c354:	81a2      	strh	r2, [r4, #12]
  40c356:	d50e      	bpl.n	40c376 <_fclose_r+0x9a>
  40c358:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c35a:	f7fe fcef 	bl	40ad3c <__retarget_lock_close_recursive>
  40c35e:	f7fe f953 	bl	40a608 <__sfp_lock_release>
  40c362:	4630      	mov	r0, r6
  40c364:	bd70      	pop	{r4, r5, r6, pc}
  40c366:	f7fe f91d 	bl	40a5a4 <__sinit>
  40c36a:	e7bf      	b.n	40c2ec <_fclose_r+0x10>
  40c36c:	6921      	ldr	r1, [r4, #16]
  40c36e:	4628      	mov	r0, r5
  40c370:	f7fe fa3e 	bl	40a7f0 <_free_r>
  40c374:	e7d7      	b.n	40c326 <_fclose_r+0x4a>
  40c376:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c378:	f7fe fce4 	bl	40ad44 <__retarget_lock_release_recursive>
  40c37c:	e7ec      	b.n	40c358 <_fclose_r+0x7c>
  40c37e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c380:	f7fe fcde 	bl	40ad40 <__retarget_lock_acquire_recursive>
  40c384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c388:	2b00      	cmp	r3, #0
  40c38a:	d1bb      	bne.n	40c304 <_fclose_r+0x28>
  40c38c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40c38e:	f016 0601 	ands.w	r6, r6, #1
  40c392:	d1b1      	bne.n	40c2f8 <_fclose_r+0x1c>
  40c394:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c396:	f7fe fcd5 	bl	40ad44 <__retarget_lock_release_recursive>
  40c39a:	4630      	mov	r0, r6
  40c39c:	bd70      	pop	{r4, r5, r6, pc}
  40c39e:	bf00      	nop

0040c3a0 <_fstat_r>:
  40c3a0:	b538      	push	{r3, r4, r5, lr}
  40c3a2:	460b      	mov	r3, r1
  40c3a4:	4c07      	ldr	r4, [pc, #28]	; (40c3c4 <_fstat_r+0x24>)
  40c3a6:	4605      	mov	r5, r0
  40c3a8:	4611      	mov	r1, r2
  40c3aa:	4618      	mov	r0, r3
  40c3ac:	2300      	movs	r3, #0
  40c3ae:	6023      	str	r3, [r4, #0]
  40c3b0:	f7f6 fa2f 	bl	402812 <_fstat>
  40c3b4:	1c43      	adds	r3, r0, #1
  40c3b6:	d000      	beq.n	40c3ba <_fstat_r+0x1a>
  40c3b8:	bd38      	pop	{r3, r4, r5, pc}
  40c3ba:	6823      	ldr	r3, [r4, #0]
  40c3bc:	2b00      	cmp	r3, #0
  40c3be:	d0fb      	beq.n	40c3b8 <_fstat_r+0x18>
  40c3c0:	602b      	str	r3, [r5, #0]
  40c3c2:	bd38      	pop	{r3, r4, r5, pc}
  40c3c4:	2040c4d4 	.word	0x2040c4d4

0040c3c8 <_isatty_r>:
  40c3c8:	b538      	push	{r3, r4, r5, lr}
  40c3ca:	4c07      	ldr	r4, [pc, #28]	; (40c3e8 <_isatty_r+0x20>)
  40c3cc:	2300      	movs	r3, #0
  40c3ce:	4605      	mov	r5, r0
  40c3d0:	4608      	mov	r0, r1
  40c3d2:	6023      	str	r3, [r4, #0]
  40c3d4:	f7f6 fa22 	bl	40281c <_isatty>
  40c3d8:	1c43      	adds	r3, r0, #1
  40c3da:	d000      	beq.n	40c3de <_isatty_r+0x16>
  40c3dc:	bd38      	pop	{r3, r4, r5, pc}
  40c3de:	6823      	ldr	r3, [r4, #0]
  40c3e0:	2b00      	cmp	r3, #0
  40c3e2:	d0fb      	beq.n	40c3dc <_isatty_r+0x14>
  40c3e4:	602b      	str	r3, [r5, #0]
  40c3e6:	bd38      	pop	{r3, r4, r5, pc}
  40c3e8:	2040c4d4 	.word	0x2040c4d4

0040c3ec <_lseek_r>:
  40c3ec:	b570      	push	{r4, r5, r6, lr}
  40c3ee:	460d      	mov	r5, r1
  40c3f0:	4c08      	ldr	r4, [pc, #32]	; (40c414 <_lseek_r+0x28>)
  40c3f2:	4611      	mov	r1, r2
  40c3f4:	4606      	mov	r6, r0
  40c3f6:	461a      	mov	r2, r3
  40c3f8:	4628      	mov	r0, r5
  40c3fa:	2300      	movs	r3, #0
  40c3fc:	6023      	str	r3, [r4, #0]
  40c3fe:	f7f6 fa0f 	bl	402820 <_lseek>
  40c402:	1c43      	adds	r3, r0, #1
  40c404:	d000      	beq.n	40c408 <_lseek_r+0x1c>
  40c406:	bd70      	pop	{r4, r5, r6, pc}
  40c408:	6823      	ldr	r3, [r4, #0]
  40c40a:	2b00      	cmp	r3, #0
  40c40c:	d0fb      	beq.n	40c406 <_lseek_r+0x1a>
  40c40e:	6033      	str	r3, [r6, #0]
  40c410:	bd70      	pop	{r4, r5, r6, pc}
  40c412:	bf00      	nop
  40c414:	2040c4d4 	.word	0x2040c4d4

0040c418 <_read_r>:
  40c418:	b570      	push	{r4, r5, r6, lr}
  40c41a:	460d      	mov	r5, r1
  40c41c:	4c08      	ldr	r4, [pc, #32]	; (40c440 <_read_r+0x28>)
  40c41e:	4611      	mov	r1, r2
  40c420:	4606      	mov	r6, r0
  40c422:	461a      	mov	r2, r3
  40c424:	4628      	mov	r0, r5
  40c426:	2300      	movs	r3, #0
  40c428:	6023      	str	r3, [r4, #0]
  40c42a:	f7f4 fe65 	bl	4010f8 <_read>
  40c42e:	1c43      	adds	r3, r0, #1
  40c430:	d000      	beq.n	40c434 <_read_r+0x1c>
  40c432:	bd70      	pop	{r4, r5, r6, pc}
  40c434:	6823      	ldr	r3, [r4, #0]
  40c436:	2b00      	cmp	r3, #0
  40c438:	d0fb      	beq.n	40c432 <_read_r+0x1a>
  40c43a:	6033      	str	r3, [r6, #0]
  40c43c:	bd70      	pop	{r4, r5, r6, pc}
  40c43e:	bf00      	nop
  40c440:	2040c4d4 	.word	0x2040c4d4

0040c444 <__aeabi_drsub>:
  40c444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40c448:	e002      	b.n	40c450 <__adddf3>
  40c44a:	bf00      	nop

0040c44c <__aeabi_dsub>:
  40c44c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040c450 <__adddf3>:
  40c450:	b530      	push	{r4, r5, lr}
  40c452:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40c456:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40c45a:	ea94 0f05 	teq	r4, r5
  40c45e:	bf08      	it	eq
  40c460:	ea90 0f02 	teqeq	r0, r2
  40c464:	bf1f      	itttt	ne
  40c466:	ea54 0c00 	orrsne.w	ip, r4, r0
  40c46a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40c46e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40c472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40c476:	f000 80e2 	beq.w	40c63e <__adddf3+0x1ee>
  40c47a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40c47e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40c482:	bfb8      	it	lt
  40c484:	426d      	neglt	r5, r5
  40c486:	dd0c      	ble.n	40c4a2 <__adddf3+0x52>
  40c488:	442c      	add	r4, r5
  40c48a:	ea80 0202 	eor.w	r2, r0, r2
  40c48e:	ea81 0303 	eor.w	r3, r1, r3
  40c492:	ea82 0000 	eor.w	r0, r2, r0
  40c496:	ea83 0101 	eor.w	r1, r3, r1
  40c49a:	ea80 0202 	eor.w	r2, r0, r2
  40c49e:	ea81 0303 	eor.w	r3, r1, r3
  40c4a2:	2d36      	cmp	r5, #54	; 0x36
  40c4a4:	bf88      	it	hi
  40c4a6:	bd30      	pophi	{r4, r5, pc}
  40c4a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c4ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40c4b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40c4b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40c4b8:	d002      	beq.n	40c4c0 <__adddf3+0x70>
  40c4ba:	4240      	negs	r0, r0
  40c4bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c4c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40c4c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40c4c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40c4cc:	d002      	beq.n	40c4d4 <__adddf3+0x84>
  40c4ce:	4252      	negs	r2, r2
  40c4d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c4d4:	ea94 0f05 	teq	r4, r5
  40c4d8:	f000 80a7 	beq.w	40c62a <__adddf3+0x1da>
  40c4dc:	f1a4 0401 	sub.w	r4, r4, #1
  40c4e0:	f1d5 0e20 	rsbs	lr, r5, #32
  40c4e4:	db0d      	blt.n	40c502 <__adddf3+0xb2>
  40c4e6:	fa02 fc0e 	lsl.w	ip, r2, lr
  40c4ea:	fa22 f205 	lsr.w	r2, r2, r5
  40c4ee:	1880      	adds	r0, r0, r2
  40c4f0:	f141 0100 	adc.w	r1, r1, #0
  40c4f4:	fa03 f20e 	lsl.w	r2, r3, lr
  40c4f8:	1880      	adds	r0, r0, r2
  40c4fa:	fa43 f305 	asr.w	r3, r3, r5
  40c4fe:	4159      	adcs	r1, r3
  40c500:	e00e      	b.n	40c520 <__adddf3+0xd0>
  40c502:	f1a5 0520 	sub.w	r5, r5, #32
  40c506:	f10e 0e20 	add.w	lr, lr, #32
  40c50a:	2a01      	cmp	r2, #1
  40c50c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40c510:	bf28      	it	cs
  40c512:	f04c 0c02 	orrcs.w	ip, ip, #2
  40c516:	fa43 f305 	asr.w	r3, r3, r5
  40c51a:	18c0      	adds	r0, r0, r3
  40c51c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40c520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c524:	d507      	bpl.n	40c536 <__adddf3+0xe6>
  40c526:	f04f 0e00 	mov.w	lr, #0
  40c52a:	f1dc 0c00 	rsbs	ip, ip, #0
  40c52e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40c532:	eb6e 0101 	sbc.w	r1, lr, r1
  40c536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40c53a:	d31b      	bcc.n	40c574 <__adddf3+0x124>
  40c53c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40c540:	d30c      	bcc.n	40c55c <__adddf3+0x10c>
  40c542:	0849      	lsrs	r1, r1, #1
  40c544:	ea5f 0030 	movs.w	r0, r0, rrx
  40c548:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40c54c:	f104 0401 	add.w	r4, r4, #1
  40c550:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40c554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40c558:	f080 809a 	bcs.w	40c690 <__adddf3+0x240>
  40c55c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40c560:	bf08      	it	eq
  40c562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c566:	f150 0000 	adcs.w	r0, r0, #0
  40c56a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c56e:	ea41 0105 	orr.w	r1, r1, r5
  40c572:	bd30      	pop	{r4, r5, pc}
  40c574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40c578:	4140      	adcs	r0, r0
  40c57a:	eb41 0101 	adc.w	r1, r1, r1
  40c57e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c582:	f1a4 0401 	sub.w	r4, r4, #1
  40c586:	d1e9      	bne.n	40c55c <__adddf3+0x10c>
  40c588:	f091 0f00 	teq	r1, #0
  40c58c:	bf04      	itt	eq
  40c58e:	4601      	moveq	r1, r0
  40c590:	2000      	moveq	r0, #0
  40c592:	fab1 f381 	clz	r3, r1
  40c596:	bf08      	it	eq
  40c598:	3320      	addeq	r3, #32
  40c59a:	f1a3 030b 	sub.w	r3, r3, #11
  40c59e:	f1b3 0220 	subs.w	r2, r3, #32
  40c5a2:	da0c      	bge.n	40c5be <__adddf3+0x16e>
  40c5a4:	320c      	adds	r2, #12
  40c5a6:	dd08      	ble.n	40c5ba <__adddf3+0x16a>
  40c5a8:	f102 0c14 	add.w	ip, r2, #20
  40c5ac:	f1c2 020c 	rsb	r2, r2, #12
  40c5b0:	fa01 f00c 	lsl.w	r0, r1, ip
  40c5b4:	fa21 f102 	lsr.w	r1, r1, r2
  40c5b8:	e00c      	b.n	40c5d4 <__adddf3+0x184>
  40c5ba:	f102 0214 	add.w	r2, r2, #20
  40c5be:	bfd8      	it	le
  40c5c0:	f1c2 0c20 	rsble	ip, r2, #32
  40c5c4:	fa01 f102 	lsl.w	r1, r1, r2
  40c5c8:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c5cc:	bfdc      	itt	le
  40c5ce:	ea41 010c 	orrle.w	r1, r1, ip
  40c5d2:	4090      	lslle	r0, r2
  40c5d4:	1ae4      	subs	r4, r4, r3
  40c5d6:	bfa2      	ittt	ge
  40c5d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40c5dc:	4329      	orrge	r1, r5
  40c5de:	bd30      	popge	{r4, r5, pc}
  40c5e0:	ea6f 0404 	mvn.w	r4, r4
  40c5e4:	3c1f      	subs	r4, #31
  40c5e6:	da1c      	bge.n	40c622 <__adddf3+0x1d2>
  40c5e8:	340c      	adds	r4, #12
  40c5ea:	dc0e      	bgt.n	40c60a <__adddf3+0x1ba>
  40c5ec:	f104 0414 	add.w	r4, r4, #20
  40c5f0:	f1c4 0220 	rsb	r2, r4, #32
  40c5f4:	fa20 f004 	lsr.w	r0, r0, r4
  40c5f8:	fa01 f302 	lsl.w	r3, r1, r2
  40c5fc:	ea40 0003 	orr.w	r0, r0, r3
  40c600:	fa21 f304 	lsr.w	r3, r1, r4
  40c604:	ea45 0103 	orr.w	r1, r5, r3
  40c608:	bd30      	pop	{r4, r5, pc}
  40c60a:	f1c4 040c 	rsb	r4, r4, #12
  40c60e:	f1c4 0220 	rsb	r2, r4, #32
  40c612:	fa20 f002 	lsr.w	r0, r0, r2
  40c616:	fa01 f304 	lsl.w	r3, r1, r4
  40c61a:	ea40 0003 	orr.w	r0, r0, r3
  40c61e:	4629      	mov	r1, r5
  40c620:	bd30      	pop	{r4, r5, pc}
  40c622:	fa21 f004 	lsr.w	r0, r1, r4
  40c626:	4629      	mov	r1, r5
  40c628:	bd30      	pop	{r4, r5, pc}
  40c62a:	f094 0f00 	teq	r4, #0
  40c62e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40c632:	bf06      	itte	eq
  40c634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40c638:	3401      	addeq	r4, #1
  40c63a:	3d01      	subne	r5, #1
  40c63c:	e74e      	b.n	40c4dc <__adddf3+0x8c>
  40c63e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c642:	bf18      	it	ne
  40c644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40c648:	d029      	beq.n	40c69e <__adddf3+0x24e>
  40c64a:	ea94 0f05 	teq	r4, r5
  40c64e:	bf08      	it	eq
  40c650:	ea90 0f02 	teqeq	r0, r2
  40c654:	d005      	beq.n	40c662 <__adddf3+0x212>
  40c656:	ea54 0c00 	orrs.w	ip, r4, r0
  40c65a:	bf04      	itt	eq
  40c65c:	4619      	moveq	r1, r3
  40c65e:	4610      	moveq	r0, r2
  40c660:	bd30      	pop	{r4, r5, pc}
  40c662:	ea91 0f03 	teq	r1, r3
  40c666:	bf1e      	ittt	ne
  40c668:	2100      	movne	r1, #0
  40c66a:	2000      	movne	r0, #0
  40c66c:	bd30      	popne	{r4, r5, pc}
  40c66e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40c672:	d105      	bne.n	40c680 <__adddf3+0x230>
  40c674:	0040      	lsls	r0, r0, #1
  40c676:	4149      	adcs	r1, r1
  40c678:	bf28      	it	cs
  40c67a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40c67e:	bd30      	pop	{r4, r5, pc}
  40c680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40c684:	bf3c      	itt	cc
  40c686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40c68a:	bd30      	popcc	{r4, r5, pc}
  40c68c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40c694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c698:	f04f 0000 	mov.w	r0, #0
  40c69c:	bd30      	pop	{r4, r5, pc}
  40c69e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c6a2:	bf1a      	itte	ne
  40c6a4:	4619      	movne	r1, r3
  40c6a6:	4610      	movne	r0, r2
  40c6a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40c6ac:	bf1c      	itt	ne
  40c6ae:	460b      	movne	r3, r1
  40c6b0:	4602      	movne	r2, r0
  40c6b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c6b6:	bf06      	itte	eq
  40c6b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40c6bc:	ea91 0f03 	teqeq	r1, r3
  40c6c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40c6c4:	bd30      	pop	{r4, r5, pc}
  40c6c6:	bf00      	nop

0040c6c8 <__aeabi_ui2d>:
  40c6c8:	f090 0f00 	teq	r0, #0
  40c6cc:	bf04      	itt	eq
  40c6ce:	2100      	moveq	r1, #0
  40c6d0:	4770      	bxeq	lr
  40c6d2:	b530      	push	{r4, r5, lr}
  40c6d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c6d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c6dc:	f04f 0500 	mov.w	r5, #0
  40c6e0:	f04f 0100 	mov.w	r1, #0
  40c6e4:	e750      	b.n	40c588 <__adddf3+0x138>
  40c6e6:	bf00      	nop

0040c6e8 <__aeabi_i2d>:
  40c6e8:	f090 0f00 	teq	r0, #0
  40c6ec:	bf04      	itt	eq
  40c6ee:	2100      	moveq	r1, #0
  40c6f0:	4770      	bxeq	lr
  40c6f2:	b530      	push	{r4, r5, lr}
  40c6f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c6f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c6fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40c700:	bf48      	it	mi
  40c702:	4240      	negmi	r0, r0
  40c704:	f04f 0100 	mov.w	r1, #0
  40c708:	e73e      	b.n	40c588 <__adddf3+0x138>
  40c70a:	bf00      	nop

0040c70c <__aeabi_f2d>:
  40c70c:	0042      	lsls	r2, r0, #1
  40c70e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40c712:	ea4f 0131 	mov.w	r1, r1, rrx
  40c716:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40c71a:	bf1f      	itttt	ne
  40c71c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40c720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40c728:	4770      	bxne	lr
  40c72a:	f092 0f00 	teq	r2, #0
  40c72e:	bf14      	ite	ne
  40c730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c734:	4770      	bxeq	lr
  40c736:	b530      	push	{r4, r5, lr}
  40c738:	f44f 7460 	mov.w	r4, #896	; 0x380
  40c73c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c744:	e720      	b.n	40c588 <__adddf3+0x138>
  40c746:	bf00      	nop

0040c748 <__aeabi_ul2d>:
  40c748:	ea50 0201 	orrs.w	r2, r0, r1
  40c74c:	bf08      	it	eq
  40c74e:	4770      	bxeq	lr
  40c750:	b530      	push	{r4, r5, lr}
  40c752:	f04f 0500 	mov.w	r5, #0
  40c756:	e00a      	b.n	40c76e <__aeabi_l2d+0x16>

0040c758 <__aeabi_l2d>:
  40c758:	ea50 0201 	orrs.w	r2, r0, r1
  40c75c:	bf08      	it	eq
  40c75e:	4770      	bxeq	lr
  40c760:	b530      	push	{r4, r5, lr}
  40c762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40c766:	d502      	bpl.n	40c76e <__aeabi_l2d+0x16>
  40c768:	4240      	negs	r0, r0
  40c76a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c76e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c772:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40c77a:	f43f aedc 	beq.w	40c536 <__adddf3+0xe6>
  40c77e:	f04f 0203 	mov.w	r2, #3
  40c782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c786:	bf18      	it	ne
  40c788:	3203      	addne	r2, #3
  40c78a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c78e:	bf18      	it	ne
  40c790:	3203      	addne	r2, #3
  40c792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40c796:	f1c2 0320 	rsb	r3, r2, #32
  40c79a:	fa00 fc03 	lsl.w	ip, r0, r3
  40c79e:	fa20 f002 	lsr.w	r0, r0, r2
  40c7a2:	fa01 fe03 	lsl.w	lr, r1, r3
  40c7a6:	ea40 000e 	orr.w	r0, r0, lr
  40c7aa:	fa21 f102 	lsr.w	r1, r1, r2
  40c7ae:	4414      	add	r4, r2
  40c7b0:	e6c1      	b.n	40c536 <__adddf3+0xe6>
  40c7b2:	bf00      	nop

0040c7b4 <__aeabi_dmul>:
  40c7b4:	b570      	push	{r4, r5, r6, lr}
  40c7b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c7ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c7be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c7c2:	bf1d      	ittte	ne
  40c7c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c7c8:	ea94 0f0c 	teqne	r4, ip
  40c7cc:	ea95 0f0c 	teqne	r5, ip
  40c7d0:	f000 f8de 	bleq	40c990 <__aeabi_dmul+0x1dc>
  40c7d4:	442c      	add	r4, r5
  40c7d6:	ea81 0603 	eor.w	r6, r1, r3
  40c7da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40c7de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40c7e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40c7e6:	bf18      	it	ne
  40c7e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40c7ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c7f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40c7f4:	d038      	beq.n	40c868 <__aeabi_dmul+0xb4>
  40c7f6:	fba0 ce02 	umull	ip, lr, r0, r2
  40c7fa:	f04f 0500 	mov.w	r5, #0
  40c7fe:	fbe1 e502 	umlal	lr, r5, r1, r2
  40c802:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40c806:	fbe0 e503 	umlal	lr, r5, r0, r3
  40c80a:	f04f 0600 	mov.w	r6, #0
  40c80e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40c812:	f09c 0f00 	teq	ip, #0
  40c816:	bf18      	it	ne
  40c818:	f04e 0e01 	orrne.w	lr, lr, #1
  40c81c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40c820:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40c824:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40c828:	d204      	bcs.n	40c834 <__aeabi_dmul+0x80>
  40c82a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40c82e:	416d      	adcs	r5, r5
  40c830:	eb46 0606 	adc.w	r6, r6, r6
  40c834:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40c838:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40c83c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40c840:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40c844:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40c848:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c84c:	bf88      	it	hi
  40c84e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c852:	d81e      	bhi.n	40c892 <__aeabi_dmul+0xde>
  40c854:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40c858:	bf08      	it	eq
  40c85a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40c85e:	f150 0000 	adcs.w	r0, r0, #0
  40c862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c866:	bd70      	pop	{r4, r5, r6, pc}
  40c868:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40c86c:	ea46 0101 	orr.w	r1, r6, r1
  40c870:	ea40 0002 	orr.w	r0, r0, r2
  40c874:	ea81 0103 	eor.w	r1, r1, r3
  40c878:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40c87c:	bfc2      	ittt	gt
  40c87e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c886:	bd70      	popgt	{r4, r5, r6, pc}
  40c888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c88c:	f04f 0e00 	mov.w	lr, #0
  40c890:	3c01      	subs	r4, #1
  40c892:	f300 80ab 	bgt.w	40c9ec <__aeabi_dmul+0x238>
  40c896:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40c89a:	bfde      	ittt	le
  40c89c:	2000      	movle	r0, #0
  40c89e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40c8a2:	bd70      	pople	{r4, r5, r6, pc}
  40c8a4:	f1c4 0400 	rsb	r4, r4, #0
  40c8a8:	3c20      	subs	r4, #32
  40c8aa:	da35      	bge.n	40c918 <__aeabi_dmul+0x164>
  40c8ac:	340c      	adds	r4, #12
  40c8ae:	dc1b      	bgt.n	40c8e8 <__aeabi_dmul+0x134>
  40c8b0:	f104 0414 	add.w	r4, r4, #20
  40c8b4:	f1c4 0520 	rsb	r5, r4, #32
  40c8b8:	fa00 f305 	lsl.w	r3, r0, r5
  40c8bc:	fa20 f004 	lsr.w	r0, r0, r4
  40c8c0:	fa01 f205 	lsl.w	r2, r1, r5
  40c8c4:	ea40 0002 	orr.w	r0, r0, r2
  40c8c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40c8cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c8d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c8d4:	fa21 f604 	lsr.w	r6, r1, r4
  40c8d8:	eb42 0106 	adc.w	r1, r2, r6
  40c8dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c8e0:	bf08      	it	eq
  40c8e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c8e6:	bd70      	pop	{r4, r5, r6, pc}
  40c8e8:	f1c4 040c 	rsb	r4, r4, #12
  40c8ec:	f1c4 0520 	rsb	r5, r4, #32
  40c8f0:	fa00 f304 	lsl.w	r3, r0, r4
  40c8f4:	fa20 f005 	lsr.w	r0, r0, r5
  40c8f8:	fa01 f204 	lsl.w	r2, r1, r4
  40c8fc:	ea40 0002 	orr.w	r0, r0, r2
  40c900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c904:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c908:	f141 0100 	adc.w	r1, r1, #0
  40c90c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c910:	bf08      	it	eq
  40c912:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c916:	bd70      	pop	{r4, r5, r6, pc}
  40c918:	f1c4 0520 	rsb	r5, r4, #32
  40c91c:	fa00 f205 	lsl.w	r2, r0, r5
  40c920:	ea4e 0e02 	orr.w	lr, lr, r2
  40c924:	fa20 f304 	lsr.w	r3, r0, r4
  40c928:	fa01 f205 	lsl.w	r2, r1, r5
  40c92c:	ea43 0302 	orr.w	r3, r3, r2
  40c930:	fa21 f004 	lsr.w	r0, r1, r4
  40c934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c938:	fa21 f204 	lsr.w	r2, r1, r4
  40c93c:	ea20 0002 	bic.w	r0, r0, r2
  40c940:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40c944:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c948:	bf08      	it	eq
  40c94a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c94e:	bd70      	pop	{r4, r5, r6, pc}
  40c950:	f094 0f00 	teq	r4, #0
  40c954:	d10f      	bne.n	40c976 <__aeabi_dmul+0x1c2>
  40c956:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40c95a:	0040      	lsls	r0, r0, #1
  40c95c:	eb41 0101 	adc.w	r1, r1, r1
  40c960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c964:	bf08      	it	eq
  40c966:	3c01      	subeq	r4, #1
  40c968:	d0f7      	beq.n	40c95a <__aeabi_dmul+0x1a6>
  40c96a:	ea41 0106 	orr.w	r1, r1, r6
  40c96e:	f095 0f00 	teq	r5, #0
  40c972:	bf18      	it	ne
  40c974:	4770      	bxne	lr
  40c976:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40c97a:	0052      	lsls	r2, r2, #1
  40c97c:	eb43 0303 	adc.w	r3, r3, r3
  40c980:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40c984:	bf08      	it	eq
  40c986:	3d01      	subeq	r5, #1
  40c988:	d0f7      	beq.n	40c97a <__aeabi_dmul+0x1c6>
  40c98a:	ea43 0306 	orr.w	r3, r3, r6
  40c98e:	4770      	bx	lr
  40c990:	ea94 0f0c 	teq	r4, ip
  40c994:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c998:	bf18      	it	ne
  40c99a:	ea95 0f0c 	teqne	r5, ip
  40c99e:	d00c      	beq.n	40c9ba <__aeabi_dmul+0x206>
  40c9a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c9a4:	bf18      	it	ne
  40c9a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c9aa:	d1d1      	bne.n	40c950 <__aeabi_dmul+0x19c>
  40c9ac:	ea81 0103 	eor.w	r1, r1, r3
  40c9b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c9b4:	f04f 0000 	mov.w	r0, #0
  40c9b8:	bd70      	pop	{r4, r5, r6, pc}
  40c9ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c9be:	bf06      	itte	eq
  40c9c0:	4610      	moveq	r0, r2
  40c9c2:	4619      	moveq	r1, r3
  40c9c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c9c8:	d019      	beq.n	40c9fe <__aeabi_dmul+0x24a>
  40c9ca:	ea94 0f0c 	teq	r4, ip
  40c9ce:	d102      	bne.n	40c9d6 <__aeabi_dmul+0x222>
  40c9d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40c9d4:	d113      	bne.n	40c9fe <__aeabi_dmul+0x24a>
  40c9d6:	ea95 0f0c 	teq	r5, ip
  40c9da:	d105      	bne.n	40c9e8 <__aeabi_dmul+0x234>
  40c9dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40c9e0:	bf1c      	itt	ne
  40c9e2:	4610      	movne	r0, r2
  40c9e4:	4619      	movne	r1, r3
  40c9e6:	d10a      	bne.n	40c9fe <__aeabi_dmul+0x24a>
  40c9e8:	ea81 0103 	eor.w	r1, r1, r3
  40c9ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c9f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c9f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c9f8:	f04f 0000 	mov.w	r0, #0
  40c9fc:	bd70      	pop	{r4, r5, r6, pc}
  40c9fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ca02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40ca06:	bd70      	pop	{r4, r5, r6, pc}

0040ca08 <__aeabi_ddiv>:
  40ca08:	b570      	push	{r4, r5, r6, lr}
  40ca0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ca0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ca12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ca16:	bf1d      	ittte	ne
  40ca18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ca1c:	ea94 0f0c 	teqne	r4, ip
  40ca20:	ea95 0f0c 	teqne	r5, ip
  40ca24:	f000 f8a7 	bleq	40cb76 <__aeabi_ddiv+0x16e>
  40ca28:	eba4 0405 	sub.w	r4, r4, r5
  40ca2c:	ea81 0e03 	eor.w	lr, r1, r3
  40ca30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ca34:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40ca38:	f000 8088 	beq.w	40cb4c <__aeabi_ddiv+0x144>
  40ca3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40ca40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40ca44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40ca48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40ca4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40ca50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40ca54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40ca58:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40ca5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40ca60:	429d      	cmp	r5, r3
  40ca62:	bf08      	it	eq
  40ca64:	4296      	cmpeq	r6, r2
  40ca66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40ca6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40ca6e:	d202      	bcs.n	40ca76 <__aeabi_ddiv+0x6e>
  40ca70:	085b      	lsrs	r3, r3, #1
  40ca72:	ea4f 0232 	mov.w	r2, r2, rrx
  40ca76:	1ab6      	subs	r6, r6, r2
  40ca78:	eb65 0503 	sbc.w	r5, r5, r3
  40ca7c:	085b      	lsrs	r3, r3, #1
  40ca7e:	ea4f 0232 	mov.w	r2, r2, rrx
  40ca82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40ca86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40ca8a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ca8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ca92:	bf22      	ittt	cs
  40ca94:	1ab6      	subcs	r6, r6, r2
  40ca96:	4675      	movcs	r5, lr
  40ca98:	ea40 000c 	orrcs.w	r0, r0, ip
  40ca9c:	085b      	lsrs	r3, r3, #1
  40ca9e:	ea4f 0232 	mov.w	r2, r2, rrx
  40caa2:	ebb6 0e02 	subs.w	lr, r6, r2
  40caa6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40caaa:	bf22      	ittt	cs
  40caac:	1ab6      	subcs	r6, r6, r2
  40caae:	4675      	movcs	r5, lr
  40cab0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40cab4:	085b      	lsrs	r3, r3, #1
  40cab6:	ea4f 0232 	mov.w	r2, r2, rrx
  40caba:	ebb6 0e02 	subs.w	lr, r6, r2
  40cabe:	eb75 0e03 	sbcs.w	lr, r5, r3
  40cac2:	bf22      	ittt	cs
  40cac4:	1ab6      	subcs	r6, r6, r2
  40cac6:	4675      	movcs	r5, lr
  40cac8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40cacc:	085b      	lsrs	r3, r3, #1
  40cace:	ea4f 0232 	mov.w	r2, r2, rrx
  40cad2:	ebb6 0e02 	subs.w	lr, r6, r2
  40cad6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40cada:	bf22      	ittt	cs
  40cadc:	1ab6      	subcs	r6, r6, r2
  40cade:	4675      	movcs	r5, lr
  40cae0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40cae4:	ea55 0e06 	orrs.w	lr, r5, r6
  40cae8:	d018      	beq.n	40cb1c <__aeabi_ddiv+0x114>
  40caea:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40caee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40caf2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40caf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40cafa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40cafe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40cb02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40cb06:	d1c0      	bne.n	40ca8a <__aeabi_ddiv+0x82>
  40cb08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40cb0c:	d10b      	bne.n	40cb26 <__aeabi_ddiv+0x11e>
  40cb0e:	ea41 0100 	orr.w	r1, r1, r0
  40cb12:	f04f 0000 	mov.w	r0, #0
  40cb16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40cb1a:	e7b6      	b.n	40ca8a <__aeabi_ddiv+0x82>
  40cb1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40cb20:	bf04      	itt	eq
  40cb22:	4301      	orreq	r1, r0
  40cb24:	2000      	moveq	r0, #0
  40cb26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40cb2a:	bf88      	it	hi
  40cb2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40cb30:	f63f aeaf 	bhi.w	40c892 <__aeabi_dmul+0xde>
  40cb34:	ebb5 0c03 	subs.w	ip, r5, r3
  40cb38:	bf04      	itt	eq
  40cb3a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40cb3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40cb42:	f150 0000 	adcs.w	r0, r0, #0
  40cb46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40cb4a:	bd70      	pop	{r4, r5, r6, pc}
  40cb4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40cb50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40cb54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40cb58:	bfc2      	ittt	gt
  40cb5a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40cb5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40cb62:	bd70      	popgt	{r4, r5, r6, pc}
  40cb64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40cb68:	f04f 0e00 	mov.w	lr, #0
  40cb6c:	3c01      	subs	r4, #1
  40cb6e:	e690      	b.n	40c892 <__aeabi_dmul+0xde>
  40cb70:	ea45 0e06 	orr.w	lr, r5, r6
  40cb74:	e68d      	b.n	40c892 <__aeabi_dmul+0xde>
  40cb76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40cb7a:	ea94 0f0c 	teq	r4, ip
  40cb7e:	bf08      	it	eq
  40cb80:	ea95 0f0c 	teqeq	r5, ip
  40cb84:	f43f af3b 	beq.w	40c9fe <__aeabi_dmul+0x24a>
  40cb88:	ea94 0f0c 	teq	r4, ip
  40cb8c:	d10a      	bne.n	40cba4 <__aeabi_ddiv+0x19c>
  40cb8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40cb92:	f47f af34 	bne.w	40c9fe <__aeabi_dmul+0x24a>
  40cb96:	ea95 0f0c 	teq	r5, ip
  40cb9a:	f47f af25 	bne.w	40c9e8 <__aeabi_dmul+0x234>
  40cb9e:	4610      	mov	r0, r2
  40cba0:	4619      	mov	r1, r3
  40cba2:	e72c      	b.n	40c9fe <__aeabi_dmul+0x24a>
  40cba4:	ea95 0f0c 	teq	r5, ip
  40cba8:	d106      	bne.n	40cbb8 <__aeabi_ddiv+0x1b0>
  40cbaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40cbae:	f43f aefd 	beq.w	40c9ac <__aeabi_dmul+0x1f8>
  40cbb2:	4610      	mov	r0, r2
  40cbb4:	4619      	mov	r1, r3
  40cbb6:	e722      	b.n	40c9fe <__aeabi_dmul+0x24a>
  40cbb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40cbbc:	bf18      	it	ne
  40cbbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40cbc2:	f47f aec5 	bne.w	40c950 <__aeabi_dmul+0x19c>
  40cbc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40cbca:	f47f af0d 	bne.w	40c9e8 <__aeabi_dmul+0x234>
  40cbce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40cbd2:	f47f aeeb 	bne.w	40c9ac <__aeabi_dmul+0x1f8>
  40cbd6:	e712      	b.n	40c9fe <__aeabi_dmul+0x24a>

0040cbd8 <__gedf2>:
  40cbd8:	f04f 3cff 	mov.w	ip, #4294967295
  40cbdc:	e006      	b.n	40cbec <__cmpdf2+0x4>
  40cbde:	bf00      	nop

0040cbe0 <__ledf2>:
  40cbe0:	f04f 0c01 	mov.w	ip, #1
  40cbe4:	e002      	b.n	40cbec <__cmpdf2+0x4>
  40cbe6:	bf00      	nop

0040cbe8 <__cmpdf2>:
  40cbe8:	f04f 0c01 	mov.w	ip, #1
  40cbec:	f84d cd04 	str.w	ip, [sp, #-4]!
  40cbf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40cbf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40cbf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40cbfc:	bf18      	it	ne
  40cbfe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40cc02:	d01b      	beq.n	40cc3c <__cmpdf2+0x54>
  40cc04:	b001      	add	sp, #4
  40cc06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40cc0a:	bf0c      	ite	eq
  40cc0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40cc10:	ea91 0f03 	teqne	r1, r3
  40cc14:	bf02      	ittt	eq
  40cc16:	ea90 0f02 	teqeq	r0, r2
  40cc1a:	2000      	moveq	r0, #0
  40cc1c:	4770      	bxeq	lr
  40cc1e:	f110 0f00 	cmn.w	r0, #0
  40cc22:	ea91 0f03 	teq	r1, r3
  40cc26:	bf58      	it	pl
  40cc28:	4299      	cmppl	r1, r3
  40cc2a:	bf08      	it	eq
  40cc2c:	4290      	cmpeq	r0, r2
  40cc2e:	bf2c      	ite	cs
  40cc30:	17d8      	asrcs	r0, r3, #31
  40cc32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40cc36:	f040 0001 	orr.w	r0, r0, #1
  40cc3a:	4770      	bx	lr
  40cc3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40cc40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40cc44:	d102      	bne.n	40cc4c <__cmpdf2+0x64>
  40cc46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40cc4a:	d107      	bne.n	40cc5c <__cmpdf2+0x74>
  40cc4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40cc50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40cc54:	d1d6      	bne.n	40cc04 <__cmpdf2+0x1c>
  40cc56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40cc5a:	d0d3      	beq.n	40cc04 <__cmpdf2+0x1c>
  40cc5c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40cc60:	4770      	bx	lr
  40cc62:	bf00      	nop

0040cc64 <__aeabi_cdrcmple>:
  40cc64:	4684      	mov	ip, r0
  40cc66:	4610      	mov	r0, r2
  40cc68:	4662      	mov	r2, ip
  40cc6a:	468c      	mov	ip, r1
  40cc6c:	4619      	mov	r1, r3
  40cc6e:	4663      	mov	r3, ip
  40cc70:	e000      	b.n	40cc74 <__aeabi_cdcmpeq>
  40cc72:	bf00      	nop

0040cc74 <__aeabi_cdcmpeq>:
  40cc74:	b501      	push	{r0, lr}
  40cc76:	f7ff ffb7 	bl	40cbe8 <__cmpdf2>
  40cc7a:	2800      	cmp	r0, #0
  40cc7c:	bf48      	it	mi
  40cc7e:	f110 0f00 	cmnmi.w	r0, #0
  40cc82:	bd01      	pop	{r0, pc}

0040cc84 <__aeabi_dcmpeq>:
  40cc84:	f84d ed08 	str.w	lr, [sp, #-8]!
  40cc88:	f7ff fff4 	bl	40cc74 <__aeabi_cdcmpeq>
  40cc8c:	bf0c      	ite	eq
  40cc8e:	2001      	moveq	r0, #1
  40cc90:	2000      	movne	r0, #0
  40cc92:	f85d fb08 	ldr.w	pc, [sp], #8
  40cc96:	bf00      	nop

0040cc98 <__aeabi_dcmplt>:
  40cc98:	f84d ed08 	str.w	lr, [sp, #-8]!
  40cc9c:	f7ff ffea 	bl	40cc74 <__aeabi_cdcmpeq>
  40cca0:	bf34      	ite	cc
  40cca2:	2001      	movcc	r0, #1
  40cca4:	2000      	movcs	r0, #0
  40cca6:	f85d fb08 	ldr.w	pc, [sp], #8
  40ccaa:	bf00      	nop

0040ccac <__aeabi_dcmple>:
  40ccac:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ccb0:	f7ff ffe0 	bl	40cc74 <__aeabi_cdcmpeq>
  40ccb4:	bf94      	ite	ls
  40ccb6:	2001      	movls	r0, #1
  40ccb8:	2000      	movhi	r0, #0
  40ccba:	f85d fb08 	ldr.w	pc, [sp], #8
  40ccbe:	bf00      	nop

0040ccc0 <__aeabi_dcmpge>:
  40ccc0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ccc4:	f7ff ffce 	bl	40cc64 <__aeabi_cdrcmple>
  40ccc8:	bf94      	ite	ls
  40ccca:	2001      	movls	r0, #1
  40cccc:	2000      	movhi	r0, #0
  40ccce:	f85d fb08 	ldr.w	pc, [sp], #8
  40ccd2:	bf00      	nop

0040ccd4 <__aeabi_dcmpgt>:
  40ccd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ccd8:	f7ff ffc4 	bl	40cc64 <__aeabi_cdrcmple>
  40ccdc:	bf34      	ite	cc
  40ccde:	2001      	movcc	r0, #1
  40cce0:	2000      	movcs	r0, #0
  40cce2:	f85d fb08 	ldr.w	pc, [sp], #8
  40cce6:	bf00      	nop

0040cce8 <__aeabi_dcmpun>:
  40cce8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ccec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ccf0:	d102      	bne.n	40ccf8 <__aeabi_dcmpun+0x10>
  40ccf2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ccf6:	d10a      	bne.n	40cd0e <__aeabi_dcmpun+0x26>
  40ccf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ccfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40cd00:	d102      	bne.n	40cd08 <__aeabi_dcmpun+0x20>
  40cd02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40cd06:	d102      	bne.n	40cd0e <__aeabi_dcmpun+0x26>
  40cd08:	f04f 0000 	mov.w	r0, #0
  40cd0c:	4770      	bx	lr
  40cd0e:	f04f 0001 	mov.w	r0, #1
  40cd12:	4770      	bx	lr

0040cd14 <__aeabi_d2iz>:
  40cd14:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40cd18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40cd1c:	d215      	bcs.n	40cd4a <__aeabi_d2iz+0x36>
  40cd1e:	d511      	bpl.n	40cd44 <__aeabi_d2iz+0x30>
  40cd20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40cd24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40cd28:	d912      	bls.n	40cd50 <__aeabi_d2iz+0x3c>
  40cd2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40cd2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40cd32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40cd36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40cd3a:	fa23 f002 	lsr.w	r0, r3, r2
  40cd3e:	bf18      	it	ne
  40cd40:	4240      	negne	r0, r0
  40cd42:	4770      	bx	lr
  40cd44:	f04f 0000 	mov.w	r0, #0
  40cd48:	4770      	bx	lr
  40cd4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40cd4e:	d105      	bne.n	40cd5c <__aeabi_d2iz+0x48>
  40cd50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40cd54:	bf08      	it	eq
  40cd56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40cd5a:	4770      	bx	lr
  40cd5c:	f04f 0000 	mov.w	r0, #0
  40cd60:	4770      	bx	lr
  40cd62:	bf00      	nop

0040cd64 <__aeabi_uldivmod>:
  40cd64:	b953      	cbnz	r3, 40cd7c <__aeabi_uldivmod+0x18>
  40cd66:	b94a      	cbnz	r2, 40cd7c <__aeabi_uldivmod+0x18>
  40cd68:	2900      	cmp	r1, #0
  40cd6a:	bf08      	it	eq
  40cd6c:	2800      	cmpeq	r0, #0
  40cd6e:	bf1c      	itt	ne
  40cd70:	f04f 31ff 	movne.w	r1, #4294967295
  40cd74:	f04f 30ff 	movne.w	r0, #4294967295
  40cd78:	f000 b97a 	b.w	40d070 <__aeabi_idiv0>
  40cd7c:	f1ad 0c08 	sub.w	ip, sp, #8
  40cd80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40cd84:	f000 f806 	bl	40cd94 <__udivmoddi4>
  40cd88:	f8dd e004 	ldr.w	lr, [sp, #4]
  40cd8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40cd90:	b004      	add	sp, #16
  40cd92:	4770      	bx	lr

0040cd94 <__udivmoddi4>:
  40cd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40cd98:	468c      	mov	ip, r1
  40cd9a:	460d      	mov	r5, r1
  40cd9c:	4604      	mov	r4, r0
  40cd9e:	9e08      	ldr	r6, [sp, #32]
  40cda0:	2b00      	cmp	r3, #0
  40cda2:	d151      	bne.n	40ce48 <__udivmoddi4+0xb4>
  40cda4:	428a      	cmp	r2, r1
  40cda6:	4617      	mov	r7, r2
  40cda8:	d96d      	bls.n	40ce86 <__udivmoddi4+0xf2>
  40cdaa:	fab2 fe82 	clz	lr, r2
  40cdae:	f1be 0f00 	cmp.w	lr, #0
  40cdb2:	d00b      	beq.n	40cdcc <__udivmoddi4+0x38>
  40cdb4:	f1ce 0c20 	rsb	ip, lr, #32
  40cdb8:	fa01 f50e 	lsl.w	r5, r1, lr
  40cdbc:	fa20 fc0c 	lsr.w	ip, r0, ip
  40cdc0:	fa02 f70e 	lsl.w	r7, r2, lr
  40cdc4:	ea4c 0c05 	orr.w	ip, ip, r5
  40cdc8:	fa00 f40e 	lsl.w	r4, r0, lr
  40cdcc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40cdd0:	0c25      	lsrs	r5, r4, #16
  40cdd2:	fbbc f8fa 	udiv	r8, ip, sl
  40cdd6:	fa1f f987 	uxth.w	r9, r7
  40cdda:	fb0a cc18 	mls	ip, sl, r8, ip
  40cdde:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40cde2:	fb08 f309 	mul.w	r3, r8, r9
  40cde6:	42ab      	cmp	r3, r5
  40cde8:	d90a      	bls.n	40ce00 <__udivmoddi4+0x6c>
  40cdea:	19ed      	adds	r5, r5, r7
  40cdec:	f108 32ff 	add.w	r2, r8, #4294967295
  40cdf0:	f080 8123 	bcs.w	40d03a <__udivmoddi4+0x2a6>
  40cdf4:	42ab      	cmp	r3, r5
  40cdf6:	f240 8120 	bls.w	40d03a <__udivmoddi4+0x2a6>
  40cdfa:	f1a8 0802 	sub.w	r8, r8, #2
  40cdfe:	443d      	add	r5, r7
  40ce00:	1aed      	subs	r5, r5, r3
  40ce02:	b2a4      	uxth	r4, r4
  40ce04:	fbb5 f0fa 	udiv	r0, r5, sl
  40ce08:	fb0a 5510 	mls	r5, sl, r0, r5
  40ce0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40ce10:	fb00 f909 	mul.w	r9, r0, r9
  40ce14:	45a1      	cmp	r9, r4
  40ce16:	d909      	bls.n	40ce2c <__udivmoddi4+0x98>
  40ce18:	19e4      	adds	r4, r4, r7
  40ce1a:	f100 33ff 	add.w	r3, r0, #4294967295
  40ce1e:	f080 810a 	bcs.w	40d036 <__udivmoddi4+0x2a2>
  40ce22:	45a1      	cmp	r9, r4
  40ce24:	f240 8107 	bls.w	40d036 <__udivmoddi4+0x2a2>
  40ce28:	3802      	subs	r0, #2
  40ce2a:	443c      	add	r4, r7
  40ce2c:	eba4 0409 	sub.w	r4, r4, r9
  40ce30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40ce34:	2100      	movs	r1, #0
  40ce36:	2e00      	cmp	r6, #0
  40ce38:	d061      	beq.n	40cefe <__udivmoddi4+0x16a>
  40ce3a:	fa24 f40e 	lsr.w	r4, r4, lr
  40ce3e:	2300      	movs	r3, #0
  40ce40:	6034      	str	r4, [r6, #0]
  40ce42:	6073      	str	r3, [r6, #4]
  40ce44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ce48:	428b      	cmp	r3, r1
  40ce4a:	d907      	bls.n	40ce5c <__udivmoddi4+0xc8>
  40ce4c:	2e00      	cmp	r6, #0
  40ce4e:	d054      	beq.n	40cefa <__udivmoddi4+0x166>
  40ce50:	2100      	movs	r1, #0
  40ce52:	e886 0021 	stmia.w	r6, {r0, r5}
  40ce56:	4608      	mov	r0, r1
  40ce58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ce5c:	fab3 f183 	clz	r1, r3
  40ce60:	2900      	cmp	r1, #0
  40ce62:	f040 808e 	bne.w	40cf82 <__udivmoddi4+0x1ee>
  40ce66:	42ab      	cmp	r3, r5
  40ce68:	d302      	bcc.n	40ce70 <__udivmoddi4+0xdc>
  40ce6a:	4282      	cmp	r2, r0
  40ce6c:	f200 80fa 	bhi.w	40d064 <__udivmoddi4+0x2d0>
  40ce70:	1a84      	subs	r4, r0, r2
  40ce72:	eb65 0503 	sbc.w	r5, r5, r3
  40ce76:	2001      	movs	r0, #1
  40ce78:	46ac      	mov	ip, r5
  40ce7a:	2e00      	cmp	r6, #0
  40ce7c:	d03f      	beq.n	40cefe <__udivmoddi4+0x16a>
  40ce7e:	e886 1010 	stmia.w	r6, {r4, ip}
  40ce82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ce86:	b912      	cbnz	r2, 40ce8e <__udivmoddi4+0xfa>
  40ce88:	2701      	movs	r7, #1
  40ce8a:	fbb7 f7f2 	udiv	r7, r7, r2
  40ce8e:	fab7 fe87 	clz	lr, r7
  40ce92:	f1be 0f00 	cmp.w	lr, #0
  40ce96:	d134      	bne.n	40cf02 <__udivmoddi4+0x16e>
  40ce98:	1beb      	subs	r3, r5, r7
  40ce9a:	0c3a      	lsrs	r2, r7, #16
  40ce9c:	fa1f fc87 	uxth.w	ip, r7
  40cea0:	2101      	movs	r1, #1
  40cea2:	fbb3 f8f2 	udiv	r8, r3, r2
  40cea6:	0c25      	lsrs	r5, r4, #16
  40cea8:	fb02 3318 	mls	r3, r2, r8, r3
  40ceac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40ceb0:	fb0c f308 	mul.w	r3, ip, r8
  40ceb4:	42ab      	cmp	r3, r5
  40ceb6:	d907      	bls.n	40cec8 <__udivmoddi4+0x134>
  40ceb8:	19ed      	adds	r5, r5, r7
  40ceba:	f108 30ff 	add.w	r0, r8, #4294967295
  40cebe:	d202      	bcs.n	40cec6 <__udivmoddi4+0x132>
  40cec0:	42ab      	cmp	r3, r5
  40cec2:	f200 80d1 	bhi.w	40d068 <__udivmoddi4+0x2d4>
  40cec6:	4680      	mov	r8, r0
  40cec8:	1aed      	subs	r5, r5, r3
  40ceca:	b2a3      	uxth	r3, r4
  40cecc:	fbb5 f0f2 	udiv	r0, r5, r2
  40ced0:	fb02 5510 	mls	r5, r2, r0, r5
  40ced4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40ced8:	fb0c fc00 	mul.w	ip, ip, r0
  40cedc:	45a4      	cmp	ip, r4
  40cede:	d907      	bls.n	40cef0 <__udivmoddi4+0x15c>
  40cee0:	19e4      	adds	r4, r4, r7
  40cee2:	f100 33ff 	add.w	r3, r0, #4294967295
  40cee6:	d202      	bcs.n	40ceee <__udivmoddi4+0x15a>
  40cee8:	45a4      	cmp	ip, r4
  40ceea:	f200 80b8 	bhi.w	40d05e <__udivmoddi4+0x2ca>
  40ceee:	4618      	mov	r0, r3
  40cef0:	eba4 040c 	sub.w	r4, r4, ip
  40cef4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40cef8:	e79d      	b.n	40ce36 <__udivmoddi4+0xa2>
  40cefa:	4631      	mov	r1, r6
  40cefc:	4630      	mov	r0, r6
  40cefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cf02:	f1ce 0420 	rsb	r4, lr, #32
  40cf06:	fa05 f30e 	lsl.w	r3, r5, lr
  40cf0a:	fa07 f70e 	lsl.w	r7, r7, lr
  40cf0e:	fa20 f804 	lsr.w	r8, r0, r4
  40cf12:	0c3a      	lsrs	r2, r7, #16
  40cf14:	fa25 f404 	lsr.w	r4, r5, r4
  40cf18:	ea48 0803 	orr.w	r8, r8, r3
  40cf1c:	fbb4 f1f2 	udiv	r1, r4, r2
  40cf20:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40cf24:	fb02 4411 	mls	r4, r2, r1, r4
  40cf28:	fa1f fc87 	uxth.w	ip, r7
  40cf2c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40cf30:	fb01 f30c 	mul.w	r3, r1, ip
  40cf34:	42ab      	cmp	r3, r5
  40cf36:	fa00 f40e 	lsl.w	r4, r0, lr
  40cf3a:	d909      	bls.n	40cf50 <__udivmoddi4+0x1bc>
  40cf3c:	19ed      	adds	r5, r5, r7
  40cf3e:	f101 30ff 	add.w	r0, r1, #4294967295
  40cf42:	f080 808a 	bcs.w	40d05a <__udivmoddi4+0x2c6>
  40cf46:	42ab      	cmp	r3, r5
  40cf48:	f240 8087 	bls.w	40d05a <__udivmoddi4+0x2c6>
  40cf4c:	3902      	subs	r1, #2
  40cf4e:	443d      	add	r5, r7
  40cf50:	1aeb      	subs	r3, r5, r3
  40cf52:	fa1f f588 	uxth.w	r5, r8
  40cf56:	fbb3 f0f2 	udiv	r0, r3, r2
  40cf5a:	fb02 3310 	mls	r3, r2, r0, r3
  40cf5e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40cf62:	fb00 f30c 	mul.w	r3, r0, ip
  40cf66:	42ab      	cmp	r3, r5
  40cf68:	d907      	bls.n	40cf7a <__udivmoddi4+0x1e6>
  40cf6a:	19ed      	adds	r5, r5, r7
  40cf6c:	f100 38ff 	add.w	r8, r0, #4294967295
  40cf70:	d26f      	bcs.n	40d052 <__udivmoddi4+0x2be>
  40cf72:	42ab      	cmp	r3, r5
  40cf74:	d96d      	bls.n	40d052 <__udivmoddi4+0x2be>
  40cf76:	3802      	subs	r0, #2
  40cf78:	443d      	add	r5, r7
  40cf7a:	1aeb      	subs	r3, r5, r3
  40cf7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40cf80:	e78f      	b.n	40cea2 <__udivmoddi4+0x10e>
  40cf82:	f1c1 0720 	rsb	r7, r1, #32
  40cf86:	fa22 f807 	lsr.w	r8, r2, r7
  40cf8a:	408b      	lsls	r3, r1
  40cf8c:	fa05 f401 	lsl.w	r4, r5, r1
  40cf90:	ea48 0303 	orr.w	r3, r8, r3
  40cf94:	fa20 fe07 	lsr.w	lr, r0, r7
  40cf98:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40cf9c:	40fd      	lsrs	r5, r7
  40cf9e:	ea4e 0e04 	orr.w	lr, lr, r4
  40cfa2:	fbb5 f9fc 	udiv	r9, r5, ip
  40cfa6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40cfaa:	fb0c 5519 	mls	r5, ip, r9, r5
  40cfae:	fa1f f883 	uxth.w	r8, r3
  40cfb2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40cfb6:	fb09 f408 	mul.w	r4, r9, r8
  40cfba:	42ac      	cmp	r4, r5
  40cfbc:	fa02 f201 	lsl.w	r2, r2, r1
  40cfc0:	fa00 fa01 	lsl.w	sl, r0, r1
  40cfc4:	d908      	bls.n	40cfd8 <__udivmoddi4+0x244>
  40cfc6:	18ed      	adds	r5, r5, r3
  40cfc8:	f109 30ff 	add.w	r0, r9, #4294967295
  40cfcc:	d243      	bcs.n	40d056 <__udivmoddi4+0x2c2>
  40cfce:	42ac      	cmp	r4, r5
  40cfd0:	d941      	bls.n	40d056 <__udivmoddi4+0x2c2>
  40cfd2:	f1a9 0902 	sub.w	r9, r9, #2
  40cfd6:	441d      	add	r5, r3
  40cfd8:	1b2d      	subs	r5, r5, r4
  40cfda:	fa1f fe8e 	uxth.w	lr, lr
  40cfde:	fbb5 f0fc 	udiv	r0, r5, ip
  40cfe2:	fb0c 5510 	mls	r5, ip, r0, r5
  40cfe6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40cfea:	fb00 f808 	mul.w	r8, r0, r8
  40cfee:	45a0      	cmp	r8, r4
  40cff0:	d907      	bls.n	40d002 <__udivmoddi4+0x26e>
  40cff2:	18e4      	adds	r4, r4, r3
  40cff4:	f100 35ff 	add.w	r5, r0, #4294967295
  40cff8:	d229      	bcs.n	40d04e <__udivmoddi4+0x2ba>
  40cffa:	45a0      	cmp	r8, r4
  40cffc:	d927      	bls.n	40d04e <__udivmoddi4+0x2ba>
  40cffe:	3802      	subs	r0, #2
  40d000:	441c      	add	r4, r3
  40d002:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40d006:	eba4 0408 	sub.w	r4, r4, r8
  40d00a:	fba0 8902 	umull	r8, r9, r0, r2
  40d00e:	454c      	cmp	r4, r9
  40d010:	46c6      	mov	lr, r8
  40d012:	464d      	mov	r5, r9
  40d014:	d315      	bcc.n	40d042 <__udivmoddi4+0x2ae>
  40d016:	d012      	beq.n	40d03e <__udivmoddi4+0x2aa>
  40d018:	b156      	cbz	r6, 40d030 <__udivmoddi4+0x29c>
  40d01a:	ebba 030e 	subs.w	r3, sl, lr
  40d01e:	eb64 0405 	sbc.w	r4, r4, r5
  40d022:	fa04 f707 	lsl.w	r7, r4, r7
  40d026:	40cb      	lsrs	r3, r1
  40d028:	431f      	orrs	r7, r3
  40d02a:	40cc      	lsrs	r4, r1
  40d02c:	6037      	str	r7, [r6, #0]
  40d02e:	6074      	str	r4, [r6, #4]
  40d030:	2100      	movs	r1, #0
  40d032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d036:	4618      	mov	r0, r3
  40d038:	e6f8      	b.n	40ce2c <__udivmoddi4+0x98>
  40d03a:	4690      	mov	r8, r2
  40d03c:	e6e0      	b.n	40ce00 <__udivmoddi4+0x6c>
  40d03e:	45c2      	cmp	sl, r8
  40d040:	d2ea      	bcs.n	40d018 <__udivmoddi4+0x284>
  40d042:	ebb8 0e02 	subs.w	lr, r8, r2
  40d046:	eb69 0503 	sbc.w	r5, r9, r3
  40d04a:	3801      	subs	r0, #1
  40d04c:	e7e4      	b.n	40d018 <__udivmoddi4+0x284>
  40d04e:	4628      	mov	r0, r5
  40d050:	e7d7      	b.n	40d002 <__udivmoddi4+0x26e>
  40d052:	4640      	mov	r0, r8
  40d054:	e791      	b.n	40cf7a <__udivmoddi4+0x1e6>
  40d056:	4681      	mov	r9, r0
  40d058:	e7be      	b.n	40cfd8 <__udivmoddi4+0x244>
  40d05a:	4601      	mov	r1, r0
  40d05c:	e778      	b.n	40cf50 <__udivmoddi4+0x1bc>
  40d05e:	3802      	subs	r0, #2
  40d060:	443c      	add	r4, r7
  40d062:	e745      	b.n	40cef0 <__udivmoddi4+0x15c>
  40d064:	4608      	mov	r0, r1
  40d066:	e708      	b.n	40ce7a <__udivmoddi4+0xe6>
  40d068:	f1a8 0802 	sub.w	r8, r8, #2
  40d06c:	443d      	add	r5, r7
  40d06e:	e72b      	b.n	40cec8 <__udivmoddi4+0x134>

0040d070 <__aeabi_idiv0>:
  40d070:	4770      	bx	lr
  40d072:	bf00      	nop

0040d074 <mmc_trans_multipliers>:
  40d074:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40d084:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  40d094:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  40d0a4:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040d0b4 <sd_mmc_trans_units>:
  40d0b4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0040d0d0 <sd_trans_multipliers>:
  40d0d0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40d0e0:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  40d0f0:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  40d100:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040d110 <LfnOfs>:
  40d110:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0040d120 <excvt.5681>:
  40d120:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  40d130:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  40d140:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  40d150:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  40d160:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  40d170:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  40d180:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  40d190:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  40d1a0:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  40d1b0:	5d5b 0000                                   []..

0040d1b4 <Tbl>:
  40d1b4:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  40d1c4:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  40d1d4:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  40d1e4:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  40d1f4:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  40d204:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  40d214:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  40d224:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  40d234:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  40d244:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  40d254:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  40d264:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  40d274:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  40d284:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  40d294:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  40d2a4:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0040d2b4 <tbl_lower.5431>:
  40d2b4:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  40d2c4:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  40d2d4:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  40d2e4:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  40d2f4:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  40d304:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  40d314:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  40d324:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  40d334:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  40d344:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  40d354:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  40d364:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  40d374:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  40d384:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  40d394:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  40d3a4:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  40d3b4:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  40d3c4:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  40d3d4:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  40d3e4:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  40d3f4:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  40d404:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  40d414:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  40d424:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  40d434:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  40d444:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  40d454:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  40d464:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  40d474:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  40d484:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0040d494 <tbl_upper.5432>:
  40d494:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  40d4a4:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  40d4b4:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  40d4c4:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  40d4d4:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  40d4e4:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  40d4f4:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  40d504:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  40d514:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  40d524:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  40d534:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  40d544:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  40d554:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  40d564:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  40d574:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  40d584:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  40d594:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  40d5a4:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  40d5b4:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  40d5c4:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  40d5d4:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  40d5e4:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  40d5f4:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  40d604:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  40d614:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  40d624:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  40d634:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  40d644:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  40d654:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  40d664:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  40d674:	4449 454c 0000 0000 6d54 5172 0000 0000     IDLE....TmrQ....
  40d684:	6d54 2072 7653 0063 6544 6f6d 6420 206f     Tmr Svc.Demo do 
  40d694:	6573 736e 726f 4220 454d 3832 2c30 7320     sensor BME280, s
  40d6a4:	6d65 6320 6c61 6269 6172 6163 216f 0a20     em calibracao! .
  40d6b4:	0000 0000 6573 736e 726f 0000 6146 6c69     ....sensor..Fail
  40d6c4:	6465 7420 206f 7263 6165 6574 7420 7365     ed to create tes
  40d6d4:	2074 656c 2064 6174 6b73 0a0d 0000 0000     t led task......
  40d6e4:	6574 6d72 6e69 6c61 0000 0000 6473 6163     terminal....sdca
  40d6f4:	6472 0000 0a0c 2d0d 202d 4453 4d2f 434d     rd.....-- SD/MMC
  40d704:	532f 4944 204f 6143 6472 4520 6178 706d     /SDIO Card Examp
  40d714:	656c 6f20 206e 6146 4674 2073 2d2d 0d0a     le on FatFs --..
  40d724:	0000 0000 3330 323a 3a39 3731 0000 0000     ....03:29:17....
  40d734:	754a 206e 3431 3220 3130 0039 2d2d 4320     Jun 14 2019.-- C
  40d744:	6d6f 6970 656c 3a64 2520 2073 7325 2d20     ompiled: %s %s -
  40d754:	0a2d 000d 6c50 6165 6573 7020 756c 2067     -...Please plug 
  40d764:	6e61 5320 2c44 4d20 434d 6f20 2072 4453     an SD, MMC or SD
  40d774:	4f49 6320 7261 2064 6e69 7320 6f6c 2e74     IO card in slot.
  40d784:	0d0a 0000 6143 6472 6920 736e 6174 6c6c     ....Card install
  40d794:	4620 4941 0a4c 000d 6c50 6165 6573 7520      FAIL...Please u
  40d7a4:	706e 756c 2067 6e61 2064 6572 702d 756c     nplug and re-plu
  40d7b4:	2067 6874 2065 6163 6472 0a2e 000d 0000     g the card......
  40d7c4:	6f4d 6e75 2074 6964 6b73 2820 5f66 6f6d     Mount disk (f_mo
  40d7d4:	6e75 2974 2e2e 0d2e 000a 0000 465b 4941     unt)........[FAI
  40d7e4:	5d4c 7220 7365 2520 0d64 000a 4f5b 5d4b     L] res %d...[OK]
  40d7f4:	0a0d 0000 7243 6165 6574 6120 6620 6c69     ....Create a fil
  40d804:	2065 6628 6f5f 6570 296e 2e2e 0d2e 000a     e (f_open)......
  40d814:	6c50 6165 6573 7520 706e 756c 2067 6874     Please unplug th
  40d824:	2065 6163 6472 0a2e 000d 0000 7257 7469     e card......Writ
  40d834:	2065 6f74 7420 7365 2074 6966 656c 2820     e to test file (
  40d844:	5f66 7570 7374 2e29 2e2e 0a0d 0000 0000     f_puts).........
  40d854:	6554 7473 5320 2f44 4d4d 2043 7473 6361     Test SD/MMC stac
  40d864:	0a6b 0000 465b 4941 5d4c 0a0d 0000 0000     k...[FAIL]......
  40d874:	6554 7473 6920 2073 7573 6363 7365 6673     Test is successf
  40d884:	6c75 0a2e 000d 0000 3a30 6473 6d5f 636d     ul......0:sd_mmc
  40d894:	745f 7365 2e74 7874 0074 0000 6e49 6369     _test.txt...Inic
  40d8a4:	6169 696c 617a 646e 206f 7562 2073 3269     ializando bus i2
  40d8b4:	2063 000a 6843 7069 6e20 6f61 6520 636e     c ..Chip nao enc
  40d8c4:	6e6f 7274 6461 0a6f 0000 0000 6843 7069     ontrado.....Chip
  40d8d4:	6520 636e 6e6f 7274 6461 2c6f 6920 696e      encontrado, ini
  40d8e4:	6963 6c61 7a69 6e61 6f64 7420 6d65 6570     cializando tempe
  40d8f4:	6172 7574 6172 0a20 0000 0000 7265 6f72     ratura .....erro
  40d904:	7220 6165 6964 476e 7420 6d65 6570 6172      readinG tempera
  40d914:	7574 6572 0a20 0000 3a54 2520 2064 0a0d     ture ...T: %d ..
  40d924:	0000 0000 7265 6f72 7220 6165 6964 676e     ....erro reading
  40d934:	6820 6d75 6469 6461 2065 0a0d 0000 0000      humidade ......
  40d944:	3a48 2520 2064 0a0d 0000 0000 7265 6f72     H: %d ......erro
  40d954:	7220 6165 6964 676e 7020 6572 7373 6f61      reading pressao
  40d964:	0a20 0000 3a50 2520 2064 000a 7325 000a      ...P: %d ..%s..
  40d974:	7473 6361 206b 766f 7265 6c66 776f 2520     stack overflow %
  40d984:	2078 7325 0a0d 0000                         x %s....

0040d98c <_global_impure_ptr>:
  40d98c:	0048 2040 4e49 0046 6e69 0066 414e 004e     H.@ INF.inf.NAN.
  40d99c:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40d9ac:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40d9bc:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40d9cc:	296c 0000 0030 0000                         l)..0...

0040d9d4 <blanks.7223>:
  40d9d4:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040d9e4 <zeroes.7224>:
  40d9e4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040d9f4 <blanks.7217>:
  40d9f4:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040da04 <zeroes.7218>:
  40da04:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40da14:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40da24:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......
  40da34:	0000 0000                                   ....

0040da38 <__mprec_bigtens>:
  40da38:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40da48:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40da58:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040da60 <__mprec_tens>:
  40da60:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40da70:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40da80:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40da90:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40daa0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40dab0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40dac0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40dad0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40dae0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40daf0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40db00:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40db10:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40db20:	9db4 79d9 7843 44ea                         ...yCx.D

0040db28 <p05.6055>:
  40db28:	0005 0000 0019 0000 007d 0000               ........}...

0040db34 <_ctype_>:
  40db34:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40db44:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40db54:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40db64:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40db74:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40db84:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40db94:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40dba4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40dbb4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040dc38 <_init>:
  40dc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40dc3a:	bf00      	nop
  40dc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40dc3e:	bc08      	pop	{r3}
  40dc40:	469e      	mov	lr, r3
  40dc42:	4770      	bx	lr

0040dc44 <__init_array_start>:
  40dc44:	00409415 	.word	0x00409415

0040dc48 <__frame_dummy_init_array_entry>:
  40dc48:	00400165                                e.@.

0040dc4c <_fini>:
  40dc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40dc4e:	bf00      	nop
  40dc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40dc52:	bc08      	pop	{r3}
  40dc54:	469e      	mov	lr, r3
  40dc56:	4770      	bx	lr

0040dc58 <__fini_array_start>:
  40dc58:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <g_interrupt_enabled>:
20400030:	0001 0000                                   ....

20400034 <SystemCoreClock>:
20400034:	0900 003d                                   ..=.

20400038 <uxCriticalNesting>:
20400038:	aaaa aaaa                                   ....

2040003c <timestamp>:
2040003c:	d1b9 5cf2                                   ...\

20400040 <_impure_ptr>:
20400040:	0048 2040 0000 0000                         H.@ ....

20400048 <impure_data>:
20400048:	0000 0000 0334 2040 039c 2040 0404 2040     ....4.@ ..@ ..@ 
	...
204000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400470 <__atexit_recursive_mutex>:
20400470:	c4b0 2040                                   ..@ 

20400474 <__global_locale>:
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400554:	c14d 0040 b3a9 0040 0000 0000 db34 0040     M.@...@.....4.@.
20400564:	da30 0040 d94c 0040 d94c 0040 d94c 0040     0.@.L.@.L.@.L.@.
20400574:	d94c 0040 d94c 0040 d94c 0040 d94c 0040     L.@.L.@.L.@.L.@.
20400584:	d94c 0040 d94c 0040 ffff ffff ffff ffff     L.@.L.@.........
20400594:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005bc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005e0 <__malloc_av_>:
	...
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 
204009c8:	09c0 2040 09c0 2040 09c8 2040 09c8 2040     ..@ ..@ ..@ ..@ 
204009d8:	09d0 2040 09d0 2040 09d8 2040 09d8 2040     ..@ ..@ ..@ ..@ 

204009e8 <__malloc_sbrk_base>:
204009e8:	ffff ffff                                   ....

204009ec <__malloc_trim_threshold>:
204009ec:	0000 0002                                   ....
