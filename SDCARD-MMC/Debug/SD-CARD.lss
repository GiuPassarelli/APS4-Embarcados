
SD-CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008274  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408274  00408274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20400000  0040827c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000013c  204009e8  00408c64  000209e8  2**2
                  ALLOC
  4 .stack        00002004  20400b24  00408da0  000209e8  2**0
                  ALLOC
  5 .heap         00000200  20402b28  0040ada4  000209e8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY
  8 .debug_info   000254e0  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004da6  00000000  00000000  00045f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f4cc  00000000  00000000  0004acf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010a8  00000000  00000000  0005a1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001318  00000000  00000000  0005b269  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002545c  00000000  00000000  0005c581  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014049  00000000  00000000  000819dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094ed0  00000000  00000000  00095a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000356c  00000000  00000000  0012a8f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 2b 40 20 dd 23 40 00 db 23 40 00 db 23 40 00     (+@ .#@..#@..#@.
  400010:	db 23 40 00 db 23 40 00 db 23 40 00 00 00 00 00     .#@..#@..#@.....
	...
  40002c:	db 23 40 00 db 23 40 00 00 00 00 00 db 23 40 00     .#@..#@......#@.
  40003c:	db 23 40 00 db 23 40 00 db 23 40 00 db 23 40 00     .#@..#@..#@..#@.
  40004c:	db 23 40 00 db 23 40 00 db 23 40 00 db 23 40 00     .#@..#@..#@..#@.
  40005c:	db 23 40 00 db 23 40 00 00 00 00 00 95 1d 40 00     .#@..#@.......@.
  40006c:	a9 1d 40 00 bd 1d 40 00 db 23 40 00 db 23 40 00     ..@...@..#@..#@.
  40007c:	db 23 40 00 d1 1d 40 00 e5 1d 40 00 db 23 40 00     .#@...@...@..#@.
  40008c:	db 23 40 00 db 23 40 00 db 23 40 00 db 23 40 00     .#@..#@..#@..#@.
  40009c:	db 23 40 00 db 23 40 00 db 23 40 00 db 23 40 00     .#@..#@..#@..#@.
  4000ac:	db 23 40 00 db 23 40 00 db 23 40 00 db 23 40 00     .#@..#@..#@..#@.
  4000bc:	db 23 40 00 db 23 40 00 db 23 40 00 db 23 40 00     .#@..#@..#@..#@.
  4000cc:	db 23 40 00 00 00 00 00 db 23 40 00 00 00 00 00     .#@......#@.....
  4000dc:	db 23 40 00 db 23 40 00 db 23 40 00 db 23 40 00     .#@..#@..#@..#@.
  4000ec:	db 23 40 00 db 23 40 00 db 23 40 00 db 23 40 00     .#@..#@..#@..#@.
  4000fc:	db 23 40 00 db 23 40 00 db 23 40 00 db 23 40 00     .#@..#@..#@..#@.
  40010c:	db 23 40 00 db 23 40 00 00 00 00 00 00 00 00 00     .#@..#@.........
  40011c:	00 00 00 00 db 23 40 00 db 23 40 00 db 23 40 00     .....#@..#@..#@.
  40012c:	db 23 40 00 db 23 40 00 00 00 00 00 db 23 40 00     .#@..#@......#@.
  40013c:	db 23 40 00                                         .#@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009e8 	.word	0x204009e8
  40015c:	00000000 	.word	0x00000000
  400160:	0040827c 	.word	0x0040827c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040827c 	.word	0x0040827c
  4001a0:	204009ec 	.word	0x204009ec
  4001a4:	0040827c 	.word	0x0040827c
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001b6:	3300      	adds	r3, #0
  4001b8:	bf18      	it	ne
  4001ba:	2301      	movne	r3, #1
  4001bc:	7c4a      	ldrb	r2, [r1, #17]
  4001be:	6809      	ldr	r1, [r1, #0]
  4001c0:	4803      	ldr	r0, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c2:	7800      	ldrb	r0, [r0, #0]
  4001c4:	4c03      	ldr	r4, [pc, #12]	; (4001d4 <sd_mmc_configure_slot+0x28>)
  4001c6:	47a0      	blx	r4
  4001c8:	bd10      	pop	{r4, pc}
  4001ca:	bf00      	nop
  4001cc:	20400a04 	.word	0x20400a04
  4001d0:	20400a0d 	.word	0x20400a0d
  4001d4:	00401625 	.word	0x00401625

004001d8 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d8:	b108      	cbz	r0, 4001de <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001da:	2004      	movs	r0, #4
  4001dc:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001de:	4b32      	ldr	r3, [pc, #200]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001e0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001e2:	4b32      	ldr	r3, [pc, #200]	; (4002ac <sd_mmc_select_slot+0xd4>)
  4001e4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001e8:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4001ec:	f002 021f 	and.w	r2, r2, #31
  4001f0:	2301      	movs	r3, #1
  4001f2:	fa03 f202 	lsl.w	r2, r3, r2
  4001f6:	420a      	tst	r2, r1
  4001f8:	d010      	beq.n	40021c <sd_mmc_select_slot+0x44>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001fc:	7b9b      	ldrb	r3, [r3, #14]
  4001fe:	2b01      	cmp	r3, #1
  400200:	d004      	beq.n	40020c <sd_mmc_select_slot+0x34>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400202:	2204      	movs	r2, #4
  400204:	4b28      	ldr	r3, [pc, #160]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400206:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400208:	2002      	movs	r0, #2
  40020a:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  40020c:	4b28      	ldr	r3, [pc, #160]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  40020e:	781b      	ldrb	r3, [r3, #0]
  400210:	2b00      	cmp	r3, #0
  400212:	d0f6      	beq.n	400202 <sd_mmc_select_slot+0x2a>
		SysTick->CTRL = 0;
  400214:	2200      	movs	r2, #0
  400216:	4b27      	ldr	r3, [pc, #156]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400218:	601a      	str	r2, [r3, #0]
  40021a:	e7f2      	b.n	400202 <sd_mmc_select_slot+0x2a>
{
  40021c:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  40021e:	4b22      	ldr	r3, [pc, #136]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400220:	7b9b      	ldrb	r3, [r3, #14]
  400222:	2b04      	cmp	r3, #4
  400224:	d005      	beq.n	400232 <sd_mmc_select_slot+0x5a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400226:	2b01      	cmp	r3, #1
  400228:	d019      	beq.n	40025e <sd_mmc_select_slot+0x86>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  40022a:	2b03      	cmp	r3, #3
  40022c:	d12c      	bne.n	400288 <sd_mmc_select_slot+0xb0>
		return SD_MMC_ERR_UNUSABLE;
  40022e:	2003      	movs	r0, #3
  400230:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400232:	2201      	movs	r2, #1
  400234:	4b1c      	ldr	r3, [pc, #112]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400236:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  400238:	4b1e      	ldr	r3, [pc, #120]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	b93b      	cbnz	r3, 40024e <sd_mmc_select_slot+0x76>
		sd_mmc_sam_systick_used = true;
  40023e:	4b1c      	ldr	r3, [pc, #112]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400240:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400242:	4b1c      	ldr	r3, [pc, #112]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400244:	491c      	ldr	r1, [pc, #112]	; (4002b8 <sd_mmc_select_slot+0xe0>)
  400246:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400248:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  40024a:	2002      	movs	r0, #2
  40024c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40024e:	2200      	movs	r2, #0
  400250:	4b17      	ldr	r3, [pc, #92]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400252:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400254:	4819      	ldr	r0, [pc, #100]	; (4002bc <sd_mmc_select_slot+0xe4>)
  400256:	4b1a      	ldr	r3, [pc, #104]	; (4002c0 <sd_mmc_select_slot+0xe8>)
  400258:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  40025a:	2002      	movs	r0, #2
  40025c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40025e:	4b14      	ldr	r3, [pc, #80]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400260:	781b      	ldrb	r3, [r3, #0]
  400262:	b13b      	cbz	r3, 400274 <sd_mmc_select_slot+0x9c>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400264:	4b13      	ldr	r3, [pc, #76]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400266:	681b      	ldr	r3, [r3, #0]
  400268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40026c:	d01a      	beq.n	4002a4 <sd_mmc_select_slot+0xcc>
		SysTick->CTRL = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b10      	ldr	r3, [pc, #64]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400272:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400274:	4b0c      	ldr	r3, [pc, #48]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400276:	2202      	movs	r2, #2
  400278:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40027a:	4a12      	ldr	r2, [pc, #72]	; (4002c4 <sd_mmc_select_slot+0xec>)
  40027c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40027e:	2201      	movs	r2, #1
  400280:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400282:	2200      	movs	r2, #0
  400284:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  400288:	2200      	movs	r2, #0
  40028a:	4b0f      	ldr	r3, [pc, #60]	; (4002c8 <sd_mmc_select_slot+0xf0>)
  40028c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40028e:	4c06      	ldr	r4, [pc, #24]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400290:	4b0e      	ldr	r3, [pc, #56]	; (4002cc <sd_mmc_select_slot+0xf4>)
  400292:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400294:	4b0e      	ldr	r3, [pc, #56]	; (4002d0 <sd_mmc_select_slot+0xf8>)
  400296:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400298:	7ba0      	ldrb	r0, [r4, #14]
  40029a:	2802      	cmp	r0, #2
  40029c:	bf14      	ite	ne
  40029e:	2000      	movne	r0, #0
  4002a0:	2001      	moveq	r0, #1
  4002a2:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  4002a4:	2002      	movs	r0, #2
  4002a6:	bd10      	pop	{r4, pc}
  4002a8:	2040000c 	.word	0x2040000c
  4002ac:	00200707 	.word	0x00200707
  4002b0:	20400a0c 	.word	0x20400a0c
  4002b4:	e000e010 	.word	0xe000e010
  4002b8:	023c3460 	.word	0x023c3460
  4002bc:	0303af6b 	.word	0x0303af6b
  4002c0:	20400001 	.word	0x20400001
  4002c4:	00061a80 	.word	0x00061a80
  4002c8:	20400a0d 	.word	0x20400a0d
  4002cc:	20400a04 	.word	0x20400a04
  4002d0:	004001ad 	.word	0x004001ad

004002d4 <sdio_cmd52>:
{
  4002d4:	b538      	push	{r3, r4, r5, lr}
  4002d6:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4002d8:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002da:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4002de:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4002e2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4002e6:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002e8:	4311      	orrs	r1, r2
  4002ea:	f241 3034 	movw	r0, #4916	; 0x1334
  4002ee:	4b05      	ldr	r3, [pc, #20]	; (400304 <sdio_cmd52+0x30>)
  4002f0:	4798      	blx	r3
  4002f2:	4605      	mov	r5, r0
  4002f4:	b908      	cbnz	r0, 4002fa <sdio_cmd52+0x26>
}
  4002f6:	4628      	mov	r0, r5
  4002f8:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  4002fa:	4b03      	ldr	r3, [pc, #12]	; (400308 <sdio_cmd52+0x34>)
  4002fc:	4798      	blx	r3
  4002fe:	7020      	strb	r0, [r4, #0]
	return true;
  400300:	e7f9      	b.n	4002f6 <sdio_cmd52+0x22>
  400302:	bf00      	nop
  400304:	0040170d 	.word	0x0040170d
  400308:	00401731 	.word	0x00401731

0040030c <sd_mmc_cmd9_mci>:
{
  40030c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40030e:	4b09      	ldr	r3, [pc, #36]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	8999      	ldrh	r1, [r3, #12]
  400314:	0409      	lsls	r1, r1, #16
  400316:	f641 3009 	movw	r0, #6921	; 0x1b09
  40031a:	4b07      	ldr	r3, [pc, #28]	; (400338 <sd_mmc_cmd9_mci+0x2c>)
  40031c:	4798      	blx	r3
  40031e:	4604      	mov	r4, r0
  400320:	b908      	cbnz	r0, 400326 <sd_mmc_cmd9_mci+0x1a>
}
  400322:	4620      	mov	r0, r4
  400324:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400326:	4b03      	ldr	r3, [pc, #12]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400328:	6818      	ldr	r0, [r3, #0]
  40032a:	3012      	adds	r0, #18
  40032c:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_cmd9_mci+0x30>)
  40032e:	4798      	blx	r3
	return true;
  400330:	e7f7      	b.n	400322 <sd_mmc_cmd9_mci+0x16>
  400332:	bf00      	nop
  400334:	20400a04 	.word	0x20400a04
  400338:	0040170d 	.word	0x0040170d
  40033c:	00401739 	.word	0x00401739

00400340 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400340:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400342:	4b04      	ldr	r3, [pc, #16]	; (400354 <sd_mmc_deselect_slot+0x14>)
  400344:	781b      	ldrb	r3, [r3, #0]
  400346:	b103      	cbz	r3, 40034a <sd_mmc_deselect_slot+0xa>
  400348:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40034a:	2000      	movs	r0, #0
  40034c:	4b02      	ldr	r3, [pc, #8]	; (400358 <sd_mmc_deselect_slot+0x18>)
  40034e:	4798      	blx	r3
	}
}
  400350:	e7fa      	b.n	400348 <sd_mmc_deselect_slot+0x8>
  400352:	bf00      	nop
  400354:	20400a0d 	.word	0x20400a0d
  400358:	004016e9 	.word	0x004016e9

0040035c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40035c:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  40035e:	2010      	movs	r0, #16
  400360:	4b05      	ldr	r3, [pc, #20]	; (400378 <sd_mmc_init+0x1c>)
  400362:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400364:	2204      	movs	r2, #4
  400366:	4b05      	ldr	r3, [pc, #20]	; (40037c <sd_mmc_init+0x20>)
  400368:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40036a:	22ff      	movs	r2, #255	; 0xff
  40036c:	4b04      	ldr	r3, [pc, #16]	; (400380 <sd_mmc_init+0x24>)
  40036e:	701a      	strb	r2, [r3, #0]
	driver_init();
  400370:	4b04      	ldr	r3, [pc, #16]	; (400384 <sd_mmc_init+0x28>)
  400372:	4798      	blx	r3
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	00401f19 	.word	0x00401f19
  40037c:	2040000c 	.word	0x2040000c
  400380:	20400a0d 	.word	0x20400a0d
  400384:	004015e9 	.word	0x004015e9

00400388 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40038c:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40038e:	4ba7      	ldr	r3, [pc, #668]	; (40062c <sd_mmc_check+0x2a4>)
  400390:	4798      	blx	r3
  400392:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400394:	2801      	cmp	r0, #1
  400396:	d005      	beq.n	4003a4 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  400398:	4ba5      	ldr	r3, [pc, #660]	; (400630 <sd_mmc_check+0x2a8>)
  40039a:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  40039c:	4620      	mov	r0, r4
  40039e:	b015      	add	sp, #84	; 0x54
  4003a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4003a4:	ae14      	add	r6, sp, #80	; 0x50
  4003a6:	2308      	movs	r3, #8
  4003a8:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4003ac:	4ba1      	ldr	r3, [pc, #644]	; (400634 <sd_mmc_check+0x2ac>)
  4003ae:	681b      	ldr	r3, [r3, #0]
  4003b0:	2701      	movs	r7, #1
  4003b2:	73df      	strb	r7, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4003b4:	2500      	movs	r5, #0
  4003b6:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  4003b8:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  4003ba:	4b9f      	ldr	r3, [pc, #636]	; (400638 <sd_mmc_check+0x2b0>)
  4003bc:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003be:	9600      	str	r6, [sp, #0]
  4003c0:	462b      	mov	r3, r5
  4003c2:	2206      	movs	r2, #6
  4003c4:	4629      	mov	r1, r5
  4003c6:	4638      	mov	r0, r7
  4003c8:	4e9c      	ldr	r6, [pc, #624]	; (40063c <sd_mmc_check+0x2b4>)
  4003ca:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003cc:	4629      	mov	r1, r5
  4003ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003d2:	4b9b      	ldr	r3, [pc, #620]	; (400640 <sd_mmc_check+0x2b8>)
  4003d4:	4798      	blx	r3
  4003d6:	b930      	cbnz	r0, 4003e6 <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4003d8:	4b96      	ldr	r3, [pc, #600]	; (400634 <sd_mmc_check+0x2ac>)
  4003da:	681b      	ldr	r3, [r3, #0]
  4003dc:	2403      	movs	r4, #3
  4003de:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  4003e0:	4b93      	ldr	r3, [pc, #588]	; (400630 <sd_mmc_check+0x2a8>)
  4003e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4003e4:	e7da      	b.n	40039c <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003ea:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ee:	4b94      	ldr	r3, [pc, #592]	; (400640 <sd_mmc_check+0x2b8>)
  4003f0:	4798      	blx	r3
  4003f2:	2800      	cmp	r0, #0
  4003f4:	f040 8093 	bne.w	40051e <sd_mmc_check+0x196>
	*v2 = 0;
  4003f8:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  4003fc:	2100      	movs	r1, #0
  4003fe:	f244 5005 	movw	r0, #17669	; 0x4505
  400402:	4b8f      	ldr	r3, [pc, #572]	; (400640 <sd_mmc_check+0x2b8>)
  400404:	4798      	blx	r3
  400406:	2800      	cmp	r0, #0
  400408:	f040 8097 	bne.w	40053a <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40040c:	4b89      	ldr	r3, [pc, #548]	; (400634 <sd_mmc_check+0x2ac>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	7bdb      	ldrb	r3, [r3, #15]
  400412:	f013 0f01 	tst.w	r3, #1
  400416:	f040 80b5 	bne.w	400584 <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40041a:	2100      	movs	r1, #0
  40041c:	f245 1003 	movw	r0, #20739	; 0x5103
  400420:	4b87      	ldr	r3, [pc, #540]	; (400640 <sd_mmc_check+0x2b8>)
  400422:	4798      	blx	r3
  400424:	2800      	cmp	r0, #0
  400426:	d0d7      	beq.n	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400428:	4d82      	ldr	r5, [pc, #520]	; (400634 <sd_mmc_check+0x2ac>)
  40042a:	682e      	ldr	r6, [r5, #0]
  40042c:	4b85      	ldr	r3, [pc, #532]	; (400644 <sd_mmc_check+0x2bc>)
  40042e:	4798      	blx	r3
  400430:	0c00      	lsrs	r0, r0, #16
  400432:	81b0      	strh	r0, [r6, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400434:	682b      	ldr	r3, [r5, #0]
  400436:	7bdb      	ldrb	r3, [r3, #15]
  400438:	f013 0f01 	tst.w	r3, #1
  40043c:	d034      	beq.n	4004a8 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  40043e:	4b82      	ldr	r3, [pc, #520]	; (400648 <sd_mmc_check+0x2c0>)
  400440:	4798      	blx	r3
  400442:	2800      	cmp	r0, #0
  400444:	d0c8      	beq.n	4003d8 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400446:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400448:	7d5a      	ldrb	r2, [r3, #21]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40044a:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40044e:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400452:	497e      	ldr	r1, [pc, #504]	; (40064c <sd_mmc_check+0x2c4>)
  400454:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40045c:	fb02 f201 	mul.w	r2, r2, r1
  400460:	497b      	ldr	r1, [pc, #492]	; (400650 <sd_mmc_check+0x2c8>)
  400462:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400466:	fb02 f201 	mul.w	r2, r2, r1
  40046a:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  40046c:	7c9a      	ldrb	r2, [r3, #18]
  40046e:	0992      	lsrs	r2, r2, #6
  400470:	f040 820c 	bne.w	40088c <sd_mmc_check+0x504>
  400474:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400476:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400478:	7e1a      	ldrb	r2, [r3, #24]
  40047a:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40047c:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  400480:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400484:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400486:	7ed9      	ldrb	r1, [r3, #27]
  400488:	0049      	lsls	r1, r1, #1
  40048a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40048e:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400492:	3201      	adds	r2, #1
  400494:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400498:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40049a:	408a      	lsls	r2, r1
  40049c:	7dd9      	ldrb	r1, [r3, #23]
  40049e:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4004a2:	408a      	lsls	r2, r1
				/ 1024;
  4004a4:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4004a6:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4004a8:	4b62      	ldr	r3, [pc, #392]	; (400634 <sd_mmc_check+0x2ac>)
  4004aa:	681b      	ldr	r3, [r3, #0]
  4004ac:	8999      	ldrh	r1, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4004ae:	0409      	lsls	r1, r1, #16
  4004b0:	f243 1007 	movw	r0, #12551	; 0x3107
  4004b4:	4b62      	ldr	r3, [pc, #392]	; (400640 <sd_mmc_check+0x2b8>)
  4004b6:	4798      	blx	r3
  4004b8:	2800      	cmp	r0, #0
  4004ba:	d08d      	beq.n	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4004bc:	4b5d      	ldr	r3, [pc, #372]	; (400634 <sd_mmc_check+0x2ac>)
  4004be:	681b      	ldr	r3, [r3, #0]
  4004c0:	7bda      	ldrb	r2, [r3, #15]
  4004c2:	f012 0f01 	tst.w	r2, #1
  4004c6:	f040 81ee 	bne.w	4008a6 <sd_mmc_check+0x51e>
	if (IS_SDIO()) {
  4004ca:	4b5a      	ldr	r3, [pc, #360]	; (400634 <sd_mmc_check+0x2ac>)
  4004cc:	681b      	ldr	r3, [r3, #0]
  4004ce:	7bdb      	ldrb	r3, [r3, #15]
  4004d0:	f013 0f04 	tst.w	r3, #4
  4004d4:	f000 829d 	beq.w	400a12 <sd_mmc_check+0x68a>
  4004d8:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4004da:	2700      	movs	r7, #0
  4004dc:	4e57      	ldr	r6, [pc, #348]	; (40063c <sd_mmc_check+0x2b4>)
  4004de:	f1a5 0309 	sub.w	r3, r5, #9
  4004e2:	aa03      	add	r2, sp, #12
  4004e4:	4413      	add	r3, r2
  4004e6:	9300      	str	r3, [sp, #0]
  4004e8:	463b      	mov	r3, r7
  4004ea:	462a      	mov	r2, r5
  4004ec:	4639      	mov	r1, r7
  4004ee:	4638      	mov	r0, r7
  4004f0:	47b0      	blx	r6
		addr_old++;
  4004f2:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4004f4:	2d0d      	cmp	r5, #13
  4004f6:	d1f2      	bne.n	4004de <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4004f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4004fc:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400500:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400504:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400508:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40050c:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400510:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  400514:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400516:	f04f 0800 	mov.w	r8, #0
  40051a:	4f48      	ldr	r7, [pc, #288]	; (40063c <sd_mmc_check+0x2b4>)
  40051c:	e23a      	b.n	400994 <sd_mmc_check+0x60c>
	resp = driver_get_response();
  40051e:	4b49      	ldr	r3, [pc, #292]	; (400644 <sd_mmc_check+0x2bc>)
  400520:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400522:	f1b0 3fff 	cmp.w	r0, #4294967295
  400526:	f000 834a 	beq.w	400bbe <sd_mmc_check+0x836>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  40052a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40052e:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  400532:	f47f af51 	bne.w	4003d8 <sd_mmc_check+0x50>
	*v2 = 1;
  400536:	46b9      	mov	r9, r7
  400538:	e760      	b.n	4003fc <sd_mmc_check+0x74>
	resp = driver_get_response();
  40053a:	4b42      	ldr	r3, [pc, #264]	; (400644 <sd_mmc_check+0x2bc>)
  40053c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  40053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  400542:	f43f af63 	beq.w	40040c <sd_mmc_check+0x84>
  400546:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40054a:	f244 5805 	movw	r8, #17669	; 0x4505
  40054e:	4e3c      	ldr	r6, [pc, #240]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400550:	4f3c      	ldr	r7, [pc, #240]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400552:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  400556:	4640      	mov	r0, r8
  400558:	47b0      	blx	r6
  40055a:	2800      	cmp	r0, #0
  40055c:	f43f af3c 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400560:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400562:	2800      	cmp	r0, #0
  400564:	db02      	blt.n	40056c <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  400566:	3d01      	subs	r5, #1
  400568:	d1f3      	bne.n	400552 <sd_mmc_check+0x1ca>
  40056a:	e735      	b.n	4003d8 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  40056c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400570:	d104      	bne.n	40057c <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400572:	4b30      	ldr	r3, [pc, #192]	; (400634 <sd_mmc_check+0x2ac>)
  400574:	681b      	ldr	r3, [r3, #0]
  400576:	2204      	movs	r2, #4
  400578:	73da      	strb	r2, [r3, #15]
  40057a:	e74e      	b.n	40041a <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40057c:	4b2d      	ldr	r3, [pc, #180]	; (400634 <sd_mmc_check+0x2ac>)
  40057e:	681b      	ldr	r3, [r3, #0]
  400580:	2205      	movs	r2, #5
  400582:	73da      	strb	r2, [r3, #15]
  400584:	f1b9 0f00 	cmp.w	r9, #0
  400588:	4f32      	ldr	r7, [pc, #200]	; (400654 <sd_mmc_check+0x2cc>)
  40058a:	bf14      	ite	ne
  40058c:	46b9      	movne	r9, r7
  40058e:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  400592:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400596:	f04f 0800 	mov.w	r8, #0
  40059a:	4e29      	ldr	r6, [pc, #164]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  40059c:	4f29      	ldr	r7, [pc, #164]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40059e:	4641      	mov	r1, r8
  4005a0:	f241 1037 	movw	r0, #4407	; 0x1137
  4005a4:	47b0      	blx	r6
  4005a6:	b148      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4005a8:	4649      	mov	r1, r9
  4005aa:	f244 5029 	movw	r0, #17705	; 0x4529
  4005ae:	47b0      	blx	r6
  4005b0:	b120      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		resp = driver_get_response();
  4005b2:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005b4:	2800      	cmp	r0, #0
  4005b6:	db20      	blt.n	4005fa <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4005b8:	3d01      	subs	r5, #1
  4005ba:	d1f0      	bne.n	40059e <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4005bc:	4b1d      	ldr	r3, [pc, #116]	; (400634 <sd_mmc_check+0x2ac>)
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	2202      	movs	r2, #2
  4005c2:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4005c4:	2100      	movs	r1, #0
  4005c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4005ca:	4b1d      	ldr	r3, [pc, #116]	; (400640 <sd_mmc_check+0x2b8>)
  4005cc:	4798      	blx	r3
  4005ce:	2800      	cmp	r0, #0
  4005d0:	f43f af02 	beq.w	4003d8 <sd_mmc_check+0x50>
  4005d4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005d8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400654 <sd_mmc_check+0x2cc>
  4005dc:	4e18      	ldr	r6, [pc, #96]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4005de:	4f19      	ldr	r7, [pc, #100]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005e0:	4641      	mov	r1, r8
  4005e2:	f244 5001 	movw	r0, #17665	; 0x4501
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f43f aef5 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  4005ee:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005f0:	2800      	cmp	r0, #0
  4005f2:	db31      	blt.n	400658 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  4005f4:	3d01      	subs	r5, #1
  4005f6:	d1f3      	bne.n	4005e0 <sd_mmc_check+0x258>
  4005f8:	e6ee      	b.n	4003d8 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  4005fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4005fe:	d005      	beq.n	40060c <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400600:	4b0c      	ldr	r3, [pc, #48]	; (400634 <sd_mmc_check+0x2ac>)
  400602:	681a      	ldr	r2, [r3, #0]
  400604:	7bd3      	ldrb	r3, [r2, #15]
  400606:	f043 0308 	orr.w	r3, r3, #8
  40060a:	73d3      	strb	r3, [r2, #15]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40060c:	4b09      	ldr	r3, [pc, #36]	; (400634 <sd_mmc_check+0x2ac>)
  40060e:	681b      	ldr	r3, [r3, #0]
  400610:	7bdb      	ldrb	r3, [r3, #15]
  400612:	f013 0f01 	tst.w	r3, #1
  400616:	f43f af00 	beq.w	40041a <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40061a:	2100      	movs	r1, #0
  40061c:	f645 3002 	movw	r0, #23298	; 0x5b02
  400620:	4b07      	ldr	r3, [pc, #28]	; (400640 <sd_mmc_check+0x2b8>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f47f aef8 	bne.w	40041a <sd_mmc_check+0x92>
  40062a:	e6d5      	b.n	4003d8 <sd_mmc_check+0x50>
  40062c:	004001d9 	.word	0x004001d9
  400630:	00400341 	.word	0x00400341
  400634:	20400a04 	.word	0x20400a04
  400638:	004016eb 	.word	0x004016eb
  40063c:	004002d5 	.word	0x004002d5
  400640:	0040170d 	.word	0x0040170d
  400644:	00401731 	.word	0x00401731
  400648:	0040030d 	.word	0x0040030d
  40064c:	00407888 	.word	0x00407888
  400650:	004078a4 	.word	0x004078a4
  400654:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400658:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40065c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400660:	d027      	beq.n	4006b2 <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400662:	2100      	movs	r1, #0
  400664:	f645 3002 	movw	r0, #23298	; 0x5b02
  400668:	4ba5      	ldr	r3, [pc, #660]	; (400900 <sd_mmc_check+0x578>)
  40066a:	4798      	blx	r3
  40066c:	2800      	cmp	r0, #0
  40066e:	f43f aeb3 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  400672:	4ba4      	ldr	r3, [pc, #656]	; (400904 <sd_mmc_check+0x57c>)
  400674:	681b      	ldr	r3, [r3, #0]
  400676:	2201      	movs	r2, #1
  400678:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  40067a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40067e:	f241 1003 	movw	r0, #4355	; 0x1103
  400682:	4b9f      	ldr	r3, [pc, #636]	; (400900 <sd_mmc_check+0x578>)
  400684:	4798      	blx	r3
  400686:	2800      	cmp	r0, #0
  400688:	f43f aea6 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  40068c:	4b9e      	ldr	r3, [pc, #632]	; (400908 <sd_mmc_check+0x580>)
  40068e:	4798      	blx	r3
  400690:	2800      	cmp	r0, #0
  400692:	f43f aea1 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400696:	4b9b      	ldr	r3, [pc, #620]	; (400904 <sd_mmc_check+0x57c>)
  400698:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40069a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  40069c:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4006a0:	3b01      	subs	r3, #1
  4006a2:	2b03      	cmp	r3, #3
  4006a4:	d80c      	bhi.n	4006c0 <sd_mmc_check+0x338>
  4006a6:	e8df f013 	tbh	[pc, r3, lsl #1]
  4006aa:	00cd      	.short	0x00cd
  4006ac:	00d300d0 	.word	0x00d300d0
  4006b0:	00d6      	.short	0x00d6
				sd_mmc_card->type |= CARD_TYPE_HC;
  4006b2:	4b94      	ldr	r3, [pc, #592]	; (400904 <sd_mmc_check+0x57c>)
  4006b4:	681a      	ldr	r2, [r3, #0]
  4006b6:	7bd3      	ldrb	r3, [r2, #15]
  4006b8:	f043 0308 	orr.w	r3, r3, #8
  4006bc:	73d3      	strb	r3, [r2, #15]
  4006be:	e7d0      	b.n	400662 <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4006c0:	2312      	movs	r3, #18
  4006c2:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c4:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4006c6:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4006ca:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4006ce:	498f      	ldr	r1, [pc, #572]	; (40090c <sd_mmc_check+0x584>)
  4006d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4006d8:	fb03 f301 	mul.w	r3, r3, r1
  4006dc:	498c      	ldr	r1, [pc, #560]	; (400910 <sd_mmc_check+0x588>)
  4006de:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4006e2:	fb03 f301 	mul.w	r3, r3, r1
  4006e6:	6013      	str	r3, [r2, #0]
  4006e8:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006ea:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ec:	7e13      	ldrb	r3, [r2, #24]
  4006ee:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006f0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4006f4:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4006f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4006fc:	f640 71ff 	movw	r1, #4095	; 0xfff
  400700:	428b      	cmp	r3, r1
  400702:	d00f      	beq.n	400724 <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400704:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400706:	7ed1      	ldrb	r1, [r2, #27]
  400708:	0049      	lsls	r1, r1, #1
  40070a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40070e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400710:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400714:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400716:	408b      	lsls	r3, r1
  400718:	7dd1      	ldrb	r1, [r2, #23]
  40071a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40071e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400720:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400722:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400724:	8991      	ldrh	r1, [r2, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400726:	0409      	lsls	r1, r1, #16
  400728:	f243 1007 	movw	r0, #12551	; 0x3107
  40072c:	4b74      	ldr	r3, [pc, #464]	; (400900 <sd_mmc_check+0x578>)
  40072e:	4798      	blx	r3
  400730:	2800      	cmp	r0, #0
  400732:	f43f ae51 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400736:	4b73      	ldr	r3, [pc, #460]	; (400904 <sd_mmc_check+0x57c>)
  400738:	681b      	ldr	r3, [r3, #0]
  40073a:	7c1b      	ldrb	r3, [r3, #16]
  40073c:	2b3f      	cmp	r3, #63	; 0x3f
  40073e:	f240 8097 	bls.w	400870 <sd_mmc_check+0x4e8>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400742:	2100      	movs	r1, #0
  400744:	9100      	str	r1, [sp, #0]
  400746:	2301      	movs	r3, #1
  400748:	f44f 7200 	mov.w	r2, #512	; 0x200
  40074c:	4871      	ldr	r0, [pc, #452]	; (400914 <sd_mmc_check+0x58c>)
  40074e:	4d72      	ldr	r5, [pc, #456]	; (400918 <sd_mmc_check+0x590>)
  400750:	47a8      	blx	r5
  400752:	2800      	cmp	r0, #0
  400754:	f43f ae40 	beq.w	4003d8 <sd_mmc_check+0x50>
  400758:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40075a:	4e70      	ldr	r6, [pc, #448]	; (40091c <sd_mmc_check+0x594>)
  40075c:	a803      	add	r0, sp, #12
  40075e:	47b0      	blx	r6
  400760:	2800      	cmp	r0, #0
  400762:	f43f ae39 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400766:	3501      	adds	r5, #1
  400768:	b2ad      	uxth	r5, r5
  40076a:	2d32      	cmp	r5, #50	; 0x32
  40076c:	d1f6      	bne.n	40075c <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  40076e:	9e03      	ldr	r6, [sp, #12]
  400770:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400774:	4b63      	ldr	r3, [pc, #396]	; (400904 <sd_mmc_check+0x57c>)
  400776:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400778:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40077a:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40077c:	7e1b      	ldrb	r3, [r3, #24]
  40077e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400780:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  400784:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400788:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40078c:	f640 72ff 	movw	r2, #4095	; 0xfff
  400790:	4293      	cmp	r3, r2
  400792:	d10e      	bne.n	4007b2 <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  400794:	4f61      	ldr	r7, [pc, #388]	; (40091c <sd_mmc_check+0x594>)
  400796:	a804      	add	r0, sp, #16
  400798:	47b8      	blx	r7
  40079a:	2800      	cmp	r0, #0
  40079c:	f43f ae1c 	beq.w	4003d8 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4007a0:	3501      	adds	r5, #1
  4007a2:	b2ad      	uxth	r5, r5
  4007a4:	2d35      	cmp	r5, #53	; 0x35
  4007a6:	d9f6      	bls.n	400796 <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4007a8:	4b56      	ldr	r3, [pc, #344]	; (400904 <sd_mmc_check+0x57c>)
  4007aa:	681a      	ldr	r2, [r3, #0]
  4007ac:	9b04      	ldr	r3, [sp, #16]
  4007ae:	085b      	lsrs	r3, r3, #1
  4007b0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4007b2:	4f5a      	ldr	r7, [pc, #360]	; (40091c <sd_mmc_check+0x594>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4007b4:	2d7f      	cmp	r5, #127	; 0x7f
  4007b6:	d951      	bls.n	40085c <sd_mmc_check+0x4d4>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4007b8:	4b59      	ldr	r3, [pc, #356]	; (400920 <sd_mmc_check+0x598>)
  4007ba:	7818      	ldrb	r0, [r3, #0]
  4007bc:	4b59      	ldr	r3, [pc, #356]	; (400924 <sd_mmc_check+0x59c>)
  4007be:	4798      	blx	r3
  4007c0:	2803      	cmp	r0, #3
  4007c2:	d91d      	bls.n	400800 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4007c4:	4b56      	ldr	r3, [pc, #344]	; (400920 <sd_mmc_check+0x598>)
  4007c6:	7818      	ldrb	r0, [r3, #0]
  4007c8:	4b56      	ldr	r3, [pc, #344]	; (400924 <sd_mmc_check+0x59c>)
  4007ca:	4798      	blx	r3
  4007cc:	4605      	mov	r5, r0
	switch (bus_width) {
  4007ce:	2804      	cmp	r0, #4
  4007d0:	d04c      	beq.n	40086c <sd_mmc_check+0x4e4>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4007d2:	4b55      	ldr	r3, [pc, #340]	; (400928 <sd_mmc_check+0x5a0>)
  4007d4:	4955      	ldr	r1, [pc, #340]	; (40092c <sd_mmc_check+0x5a4>)
  4007d6:	2808      	cmp	r0, #8
  4007d8:	bf18      	it	ne
  4007da:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4007dc:	f243 1006 	movw	r0, #12550	; 0x3106
  4007e0:	4b47      	ldr	r3, [pc, #284]	; (400900 <sd_mmc_check+0x578>)
  4007e2:	4798      	blx	r3
  4007e4:	2800      	cmp	r0, #0
  4007e6:	f43f adf7 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4007ea:	4b51      	ldr	r3, [pc, #324]	; (400930 <sd_mmc_check+0x5a8>)
  4007ec:	4798      	blx	r3
  4007ee:	f010 0f80 	tst.w	r0, #128	; 0x80
  4007f2:	f47f adf1 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  4007f6:	4b43      	ldr	r3, [pc, #268]	; (400904 <sd_mmc_check+0x57c>)
  4007f8:	681b      	ldr	r3, [r3, #0]
  4007fa:	745d      	strb	r5, [r3, #17]
			sd_mmc_configure_slot();
  4007fc:	4b4d      	ldr	r3, [pc, #308]	; (400934 <sd_mmc_check+0x5ac>)
  4007fe:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400800:	4b4d      	ldr	r3, [pc, #308]	; (400938 <sd_mmc_check+0x5b0>)
  400802:	4798      	blx	r3
  400804:	b1be      	cbz	r6, 400836 <sd_mmc_check+0x4ae>
  400806:	b1b0      	cbz	r0, 400836 <sd_mmc_check+0x4ae>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400808:	494c      	ldr	r1, [pc, #304]	; (40093c <sd_mmc_check+0x5b4>)
  40080a:	f243 1006 	movw	r0, #12550	; 0x3106
  40080e:	4b3c      	ldr	r3, [pc, #240]	; (400900 <sd_mmc_check+0x578>)
  400810:	4798      	blx	r3
  400812:	2800      	cmp	r0, #0
  400814:	f43f ade0 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400818:	4b45      	ldr	r3, [pc, #276]	; (400930 <sd_mmc_check+0x5a8>)
  40081a:	4798      	blx	r3
  40081c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400820:	f47f adda 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400824:	4b37      	ldr	r3, [pc, #220]	; (400904 <sd_mmc_check+0x57c>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2201      	movs	r2, #1
  40082a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  40082e:	4a44      	ldr	r2, [pc, #272]	; (400940 <sd_mmc_check+0x5b8>)
  400830:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400832:	4b40      	ldr	r3, [pc, #256]	; (400934 <sd_mmc_check+0x5ac>)
  400834:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400836:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400838:	f44f 7800 	mov.w	r8, #512	; 0x200
  40083c:	f241 1710 	movw	r7, #4368	; 0x1110
  400840:	4e2f      	ldr	r6, [pc, #188]	; (400900 <sd_mmc_check+0x578>)
  400842:	e01d      	b.n	400880 <sd_mmc_check+0x4f8>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400844:	2314      	movs	r3, #20
  400846:	7413      	strb	r3, [r2, #16]
  400848:	e73c      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40084a:	2322      	movs	r3, #34	; 0x22
  40084c:	7413      	strb	r3, [r2, #16]
  40084e:	e739      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400850:	2330      	movs	r3, #48	; 0x30
  400852:	7413      	strb	r3, [r2, #16]
  400854:	e736      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400856:	2340      	movs	r3, #64	; 0x40
  400858:	7413      	strb	r3, [r2, #16]
  40085a:	e733      	b.n	4006c4 <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  40085c:	a804      	add	r0, sp, #16
  40085e:	47b8      	blx	r7
  400860:	2800      	cmp	r0, #0
  400862:	f43f adb9 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400866:	3501      	adds	r5, #1
  400868:	b2ad      	uxth	r5, r5
  40086a:	e7a3      	b.n	4007b4 <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40086c:	4935      	ldr	r1, [pc, #212]	; (400944 <sd_mmc_check+0x5bc>)
  40086e:	e7b5      	b.n	4007dc <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  400870:	4b30      	ldr	r3, [pc, #192]	; (400934 <sd_mmc_check+0x5ac>)
  400872:	4798      	blx	r3
  400874:	e7df      	b.n	400836 <sd_mmc_check+0x4ae>
  400876:	3d01      	subs	r5, #1
	while (retry--) {
  400878:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  40087c:	f43f adac 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400880:	4641      	mov	r1, r8
  400882:	4638      	mov	r0, r7
  400884:	47b0      	blx	r6
  400886:	2800      	cmp	r0, #0
  400888:	d0f5      	beq.n	400876 <sd_mmc_check+0x4ee>
  40088a:	e10e      	b.n	400aaa <sd_mmc_check+0x722>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40088c:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40088e:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400890:	7e5a      	ldrb	r2, [r3, #25]
  400892:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400894:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  400898:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  40089a:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  40089e:	3201      	adds	r2, #1
  4008a0:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4008a2:	605a      	str	r2, [r3, #4]
  4008a4:	e600      	b.n	4004a8 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4008a6:	8999      	ldrh	r1, [r3, #12]
  4008a8:	0409      	lsls	r1, r1, #16
  4008aa:	f241 1037 	movw	r0, #4407	; 0x1137
  4008ae:	4b14      	ldr	r3, [pc, #80]	; (400900 <sd_mmc_check+0x578>)
  4008b0:	4798      	blx	r3
  4008b2:	2800      	cmp	r0, #0
  4008b4:	f43f ad90 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4008b8:	2301      	movs	r3, #1
  4008ba:	9300      	str	r3, [sp, #0]
  4008bc:	2208      	movs	r2, #8
  4008be:	2100      	movs	r1, #0
  4008c0:	4821      	ldr	r0, [pc, #132]	; (400948 <sd_mmc_check+0x5c0>)
  4008c2:	4d15      	ldr	r5, [pc, #84]	; (400918 <sd_mmc_check+0x590>)
  4008c4:	47a8      	blx	r5
  4008c6:	2800      	cmp	r0, #0
  4008c8:	f43f ad86 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  4008cc:	2101      	movs	r1, #1
  4008ce:	a804      	add	r0, sp, #16
  4008d0:	4b1e      	ldr	r3, [pc, #120]	; (40094c <sd_mmc_check+0x5c4>)
  4008d2:	4798      	blx	r3
  4008d4:	2800      	cmp	r0, #0
  4008d6:	f43f ad7f 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  4008da:	4b1d      	ldr	r3, [pc, #116]	; (400950 <sd_mmc_check+0x5c8>)
  4008dc:	4798      	blx	r3
  4008de:	2800      	cmp	r0, #0
  4008e0:	f43f ad7a 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  4008e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008e8:	f003 030f 	and.w	r3, r3, #15
  4008ec:	2b01      	cmp	r3, #1
  4008ee:	d036      	beq.n	40095e <sd_mmc_check+0x5d6>
  4008f0:	b383      	cbz	r3, 400954 <sd_mmc_check+0x5cc>
  4008f2:	2b02      	cmp	r3, #2
  4008f4:	d038      	beq.n	400968 <sd_mmc_check+0x5e0>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4008f6:	4b03      	ldr	r3, [pc, #12]	; (400904 <sd_mmc_check+0x57c>)
  4008f8:	681b      	ldr	r3, [r3, #0]
  4008fa:	2210      	movs	r2, #16
  4008fc:	741a      	strb	r2, [r3, #16]
  4008fe:	e5e4      	b.n	4004ca <sd_mmc_check+0x142>
  400900:	0040170d 	.word	0x0040170d
  400904:	20400a04 	.word	0x20400a04
  400908:	0040030d 	.word	0x0040030d
  40090c:	00407888 	.word	0x00407888
  400910:	00407848 	.word	0x00407848
  400914:	00081108 	.word	0x00081108
  400918:	00401769 	.word	0x00401769
  40091c:	00401831 	.word	0x00401831
  400920:	20400a0d 	.word	0x20400a0d
  400924:	00401615 	.word	0x00401615
  400928:	01b70000 	.word	0x01b70000
  40092c:	01b70200 	.word	0x01b70200
  400930:	00401731 	.word	0x00401731
  400934:	004001ad 	.word	0x004001ad
  400938:	0040161f 	.word	0x0040161f
  40093c:	03b90100 	.word	0x03b90100
  400940:	03197500 	.word	0x03197500
  400944:	01b70100 	.word	0x01b70100
  400948:	00081133 	.word	0x00081133
  40094c:	004018a5 	.word	0x004018a5
  400950:	0040199d 	.word	0x0040199d
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400954:	4b9b      	ldr	r3, [pc, #620]	; (400bc4 <sd_mmc_check+0x83c>)
  400956:	681b      	ldr	r3, [r3, #0]
  400958:	2210      	movs	r2, #16
  40095a:	741a      	strb	r2, [r3, #16]
  40095c:	e5b5      	b.n	4004ca <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  40095e:	4b99      	ldr	r3, [pc, #612]	; (400bc4 <sd_mmc_check+0x83c>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	221a      	movs	r2, #26
  400964:	741a      	strb	r2, [r3, #16]
  400966:	e5b0      	b.n	4004ca <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400968:	f89d 3012 	ldrb.w	r3, [sp, #18]
  40096c:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  40096e:	4b95      	ldr	r3, [pc, #596]	; (400bc4 <sd_mmc_check+0x83c>)
  400970:	681b      	ldr	r3, [r3, #0]
  400972:	bf14      	ite	ne
  400974:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400976:	2220      	moveq	r2, #32
  400978:	741a      	strb	r2, [r3, #16]
  40097a:	e5a6      	b.n	4004ca <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  40097c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400980:	2b00      	cmp	r3, #0
  400982:	f43f ad29 	beq.w	4003d8 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400986:	3302      	adds	r3, #2
  400988:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  40098a:	f509 7380 	add.w	r3, r9, #256	; 0x100
  40098e:	429e      	cmp	r6, r3
  400990:	f63f ad22 	bhi.w	4003d8 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400994:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400996:	ab04      	add	r3, sp, #16
  400998:	442b      	add	r3, r5
  40099a:	9300      	str	r3, [sp, #0]
  40099c:	4643      	mov	r3, r8
  40099e:	1972      	adds	r2, r6, r5
  4009a0:	4641      	mov	r1, r8
  4009a2:	4640      	mov	r0, r8
  4009a4:	47b8      	blx	r7
  4009a6:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  4009a8:	2d03      	cmp	r5, #3
  4009aa:	d1f4      	bne.n	400996 <sd_mmc_check+0x60e>
		if (buf[0] == SDIO_CISTPL_END) {
  4009ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009b0:	2bff      	cmp	r3, #255	; 0xff
  4009b2:	f43f ad11 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4009b6:	2b22      	cmp	r3, #34	; 0x22
  4009b8:	d1e0      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4009be:	2b00      	cmp	r3, #0
  4009c0:	d1dc      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009c2:	ad04      	add	r5, sp, #16
  4009c4:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4009c8:	f04f 0800 	mov.w	r8, #0
  4009cc:	4f7e      	ldr	r7, [pc, #504]	; (400bc8 <sd_mmc_check+0x840>)
  4009ce:	9500      	str	r5, [sp, #0]
  4009d0:	4643      	mov	r3, r8
  4009d2:	4632      	mov	r2, r6
  4009d4:	4641      	mov	r1, r8
  4009d6:	4640      	mov	r0, r8
  4009d8:	47b8      	blx	r7
		addr_new++;
  4009da:	3601      	adds	r6, #1
  4009dc:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  4009de:	454e      	cmp	r6, r9
  4009e0:	d1f5      	bne.n	4009ce <sd_mmc_check+0x646>
	tplfe_max_tran_speed = buf[5];
  4009e2:	f89d 3015 	ldrb.w	r3, [sp, #21]
  4009e6:	2b32      	cmp	r3, #50	; 0x32
  4009e8:	bf28      	it	cs
  4009ea:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  4009ec:	4a75      	ldr	r2, [pc, #468]	; (400bc4 <sd_mmc_check+0x83c>)
  4009ee:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  4009f0:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4009f4:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4009f8:	4974      	ldr	r1, [pc, #464]	; (400bcc <sd_mmc_check+0x844>)
  4009fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400a02:	fb03 f301 	mul.w	r3, r3, r1
  400a06:	4972      	ldr	r1, [pc, #456]	; (400bd0 <sd_mmc_check+0x848>)
  400a08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400a0c:	fb03 f301 	mul.w	r3, r3, r1
  400a10:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400a12:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x84c>)
  400a14:	7818      	ldrb	r0, [r3, #0]
  400a16:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x850>)
  400a18:	4798      	blx	r3
  400a1a:	2803      	cmp	r0, #3
  400a1c:	d922      	bls.n	400a64 <sd_mmc_check+0x6dc>
		if (IS_SDIO()) {
  400a1e:	4b69      	ldr	r3, [pc, #420]	; (400bc4 <sd_mmc_check+0x83c>)
  400a20:	681b      	ldr	r3, [r3, #0]
  400a22:	7bdb      	ldrb	r3, [r3, #15]
  400a24:	f013 0f04 	tst.w	r3, #4
  400a28:	d146      	bne.n	400ab8 <sd_mmc_check+0x730>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a2a:	4b66      	ldr	r3, [pc, #408]	; (400bc4 <sd_mmc_check+0x83c>)
  400a2c:	681b      	ldr	r3, [r3, #0]
  400a2e:	7bda      	ldrb	r2, [r3, #15]
  400a30:	f012 0f01 	tst.w	r2, #1
  400a34:	d014      	beq.n	400a60 <sd_mmc_check+0x6d8>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400a36:	8999      	ldrh	r1, [r3, #12]
  400a38:	0409      	lsls	r1, r1, #16
  400a3a:	f241 1037 	movw	r0, #4407	; 0x1137
  400a3e:	4b67      	ldr	r3, [pc, #412]	; (400bdc <sd_mmc_check+0x854>)
  400a40:	4798      	blx	r3
  400a42:	2800      	cmp	r0, #0
  400a44:	f43f acc8 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400a48:	2102      	movs	r1, #2
  400a4a:	f241 1006 	movw	r0, #4358	; 0x1106
  400a4e:	4b63      	ldr	r3, [pc, #396]	; (400bdc <sd_mmc_check+0x854>)
  400a50:	4798      	blx	r3
  400a52:	2800      	cmp	r0, #0
  400a54:	f43f acc0 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400a58:	4b5a      	ldr	r3, [pc, #360]	; (400bc4 <sd_mmc_check+0x83c>)
  400a5a:	681b      	ldr	r3, [r3, #0]
  400a5c:	2204      	movs	r2, #4
  400a5e:	745a      	strb	r2, [r3, #17]
		sd_mmc_configure_slot();
  400a60:	4b5f      	ldr	r3, [pc, #380]	; (400be0 <sd_mmc_check+0x858>)
  400a62:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400a64:	4b5f      	ldr	r3, [pc, #380]	; (400be4 <sd_mmc_check+0x85c>)
  400a66:	4798      	blx	r3
  400a68:	b180      	cbz	r0, 400a8c <sd_mmc_check+0x704>
		if (IS_SDIO()) {
  400a6a:	4b56      	ldr	r3, [pc, #344]	; (400bc4 <sd_mmc_check+0x83c>)
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	7bdb      	ldrb	r3, [r3, #15]
  400a70:	f013 0f04 	tst.w	r3, #4
  400a74:	d141      	bne.n	400afa <sd_mmc_check+0x772>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a76:	4b53      	ldr	r3, [pc, #332]	; (400bc4 <sd_mmc_check+0x83c>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	7bda      	ldrb	r2, [r3, #15]
  400a7c:	f012 0f01 	tst.w	r2, #1
  400a80:	d002      	beq.n	400a88 <sd_mmc_check+0x700>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a82:	7c1b      	ldrb	r3, [r3, #16]
  400a84:	2b10      	cmp	r3, #16
  400a86:	d85e      	bhi.n	400b46 <sd_mmc_check+0x7be>
		sd_mmc_configure_slot();
  400a88:	4b55      	ldr	r3, [pc, #340]	; (400be0 <sd_mmc_check+0x858>)
  400a8a:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a8c:	4b4d      	ldr	r3, [pc, #308]	; (400bc4 <sd_mmc_check+0x83c>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	7bdb      	ldrb	r3, [r3, #15]
  400a92:	f013 0f01 	tst.w	r3, #1
  400a96:	d008      	beq.n	400aaa <sd_mmc_check+0x722>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400a98:	f44f 7100 	mov.w	r1, #512	; 0x200
  400a9c:	f241 1010 	movw	r0, #4368	; 0x1110
  400aa0:	4b4e      	ldr	r3, [pc, #312]	; (400bdc <sd_mmc_check+0x854>)
  400aa2:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400aa4:	2800      	cmp	r0, #0
  400aa6:	f43f ac97 	beq.w	4003d8 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400aaa:	4b46      	ldr	r3, [pc, #280]	; (400bc4 <sd_mmc_check+0x83c>)
  400aac:	681b      	ldr	r3, [r3, #0]
  400aae:	2200      	movs	r2, #0
  400ab0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400ab2:	4b4d      	ldr	r3, [pc, #308]	; (400be8 <sd_mmc_check+0x860>)
  400ab4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400ab6:	e471      	b.n	40039c <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400ab8:	ab04      	add	r3, sp, #16
  400aba:	9300      	str	r3, [sp, #0]
  400abc:	2300      	movs	r3, #0
  400abe:	2208      	movs	r2, #8
  400ac0:	4619      	mov	r1, r3
  400ac2:	4618      	mov	r0, r3
  400ac4:	4d40      	ldr	r5, [pc, #256]	; (400bc8 <sd_mmc_check+0x840>)
  400ac6:	47a8      	blx	r5
  400ac8:	2800      	cmp	r0, #0
  400aca:	f43f ac85 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400ace:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400ad2:	2b00      	cmp	r3, #0
  400ad4:	daa9      	bge.n	400a2a <sd_mmc_check+0x6a2>
	u8_value = SDIO_BUSWIDTH_4B;
  400ad6:	ab14      	add	r3, sp, #80	; 0x50
  400ad8:	2202      	movs	r2, #2
  400ada:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400ade:	9300      	str	r3, [sp, #0]
  400ae0:	2301      	movs	r3, #1
  400ae2:	2207      	movs	r2, #7
  400ae4:	2100      	movs	r1, #0
  400ae6:	4618      	mov	r0, r3
  400ae8:	47a8      	blx	r5
  400aea:	2800      	cmp	r0, #0
  400aec:	f43f ac74 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400af0:	4b34      	ldr	r3, [pc, #208]	; (400bc4 <sd_mmc_check+0x83c>)
  400af2:	681b      	ldr	r3, [r3, #0]
  400af4:	2204      	movs	r2, #4
  400af6:	745a      	strb	r2, [r3, #17]
  400af8:	e797      	b.n	400a2a <sd_mmc_check+0x6a2>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400afa:	ab04      	add	r3, sp, #16
  400afc:	9300      	str	r3, [sp, #0]
  400afe:	2300      	movs	r3, #0
  400b00:	2213      	movs	r2, #19
  400b02:	4619      	mov	r1, r3
  400b04:	4618      	mov	r0, r3
  400b06:	4d30      	ldr	r5, [pc, #192]	; (400bc8 <sd_mmc_check+0x840>)
  400b08:	47a8      	blx	r5
  400b0a:	2800      	cmp	r0, #0
  400b0c:	f43f ac64 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400b10:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400b14:	f013 0f01 	tst.w	r3, #1
  400b18:	d0ad      	beq.n	400a76 <sd_mmc_check+0x6ee>
	u8_value = SDIO_EHS;
  400b1a:	ab14      	add	r3, sp, #80	; 0x50
  400b1c:	2202      	movs	r2, #2
  400b1e:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400b22:	9300      	str	r3, [sp, #0]
  400b24:	2301      	movs	r3, #1
  400b26:	2213      	movs	r2, #19
  400b28:	2100      	movs	r1, #0
  400b2a:	4618      	mov	r0, r3
  400b2c:	47a8      	blx	r5
  400b2e:	2800      	cmp	r0, #0
  400b30:	f43f ac52 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400b34:	4b23      	ldr	r3, [pc, #140]	; (400bc4 <sd_mmc_check+0x83c>)
  400b36:	681b      	ldr	r3, [r3, #0]
  400b38:	2201      	movs	r2, #1
  400b3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400b3e:	681a      	ldr	r2, [r3, #0]
  400b40:	0052      	lsls	r2, r2, #1
  400b42:	601a      	str	r2, [r3, #0]
  400b44:	e797      	b.n	400a76 <sd_mmc_check+0x6ee>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400b46:	2540      	movs	r5, #64	; 0x40
  400b48:	462a      	mov	r2, r5
  400b4a:	2100      	movs	r1, #0
  400b4c:	a804      	add	r0, sp, #16
  400b4e:	4b27      	ldr	r3, [pc, #156]	; (400bec <sd_mmc_check+0x864>)
  400b50:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400b52:	2301      	movs	r3, #1
  400b54:	9300      	str	r3, [sp, #0]
  400b56:	462a      	mov	r2, r5
  400b58:	4925      	ldr	r1, [pc, #148]	; (400bf0 <sd_mmc_check+0x868>)
  400b5a:	4826      	ldr	r0, [pc, #152]	; (400bf4 <sd_mmc_check+0x86c>)
  400b5c:	4d26      	ldr	r5, [pc, #152]	; (400bf8 <sd_mmc_check+0x870>)
  400b5e:	47a8      	blx	r5
  400b60:	2800      	cmp	r0, #0
  400b62:	f43f ac39 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400b66:	2101      	movs	r1, #1
  400b68:	a804      	add	r0, sp, #16
  400b6a:	4b24      	ldr	r3, [pc, #144]	; (400bfc <sd_mmc_check+0x874>)
  400b6c:	4798      	blx	r3
  400b6e:	2800      	cmp	r0, #0
  400b70:	f43f ac32 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400b74:	4b22      	ldr	r3, [pc, #136]	; (400c00 <sd_mmc_check+0x878>)
  400b76:	4798      	blx	r3
  400b78:	2800      	cmp	r0, #0
  400b7a:	f43f ac2d 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400b7e:	4b21      	ldr	r3, [pc, #132]	; (400c04 <sd_mmc_check+0x87c>)
  400b80:	4798      	blx	r3
  400b82:	f010 0f80 	tst.w	r0, #128	; 0x80
  400b86:	f47f ac27 	bne.w	4003d8 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400b8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400b8e:	f003 030f 	and.w	r3, r3, #15
  400b92:	2b0f      	cmp	r3, #15
  400b94:	f43f af78 	beq.w	400a88 <sd_mmc_check+0x700>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400b98:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400b9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ba0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ba4:	f47f ac18 	bne.w	4003d8 <sd_mmc_check+0x50>
	driver_send_clock();
  400ba8:	4b17      	ldr	r3, [pc, #92]	; (400c08 <sd_mmc_check+0x880>)
  400baa:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400bac:	4b05      	ldr	r3, [pc, #20]	; (400bc4 <sd_mmc_check+0x83c>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	2201      	movs	r2, #1
  400bb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400bb6:	681a      	ldr	r2, [r3, #0]
  400bb8:	0052      	lsls	r2, r2, #1
  400bba:	601a      	str	r2, [r3, #0]
  400bbc:	e764      	b.n	400a88 <sd_mmc_check+0x700>
	*v2 = 0;
  400bbe:	f04f 0900 	mov.w	r9, #0
  400bc2:	e41b      	b.n	4003fc <sd_mmc_check+0x74>
  400bc4:	20400a04 	.word	0x20400a04
  400bc8:	004002d5 	.word	0x004002d5
  400bcc:	00407888 	.word	0x00407888
  400bd0:	004078a4 	.word	0x004078a4
  400bd4:	20400a0d 	.word	0x20400a0d
  400bd8:	00401615 	.word	0x00401615
  400bdc:	0040170d 	.word	0x0040170d
  400be0:	004001ad 	.word	0x004001ad
  400be4:	0040161f 	.word	0x0040161f
  400be8:	00400341 	.word	0x00400341
  400bec:	0040492d 	.word	0x0040492d
  400bf0:	80ffff01 	.word	0x80ffff01
  400bf4:	00081106 	.word	0x00081106
  400bf8:	00401769 	.word	0x00401769
  400bfc:	004018a5 	.word	0x004018a5
  400c00:	0040199d 	.word	0x0040199d
  400c04:	00401731 	.word	0x00401731
  400c08:	004016eb 	.word	0x004016eb

00400c0c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c0c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c0e:	4b05      	ldr	r3, [pc, #20]	; (400c24 <sd_mmc_get_type+0x18>)
  400c10:	4798      	blx	r3
  400c12:	b108      	cbz	r0, 400c18 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400c14:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c16:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c18:	4b03      	ldr	r3, [pc, #12]	; (400c28 <sd_mmc_get_type+0x1c>)
  400c1a:	4798      	blx	r3
	return sd_mmc_card->type;
  400c1c:	4b03      	ldr	r3, [pc, #12]	; (400c2c <sd_mmc_get_type+0x20>)
  400c1e:	681b      	ldr	r3, [r3, #0]
  400c20:	7bd8      	ldrb	r0, [r3, #15]
  400c22:	bd08      	pop	{r3, pc}
  400c24:	004001d9 	.word	0x004001d9
  400c28:	00400341 	.word	0x00400341
  400c2c:	20400a04 	.word	0x20400a04

00400c30 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400c30:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c32:	4b05      	ldr	r3, [pc, #20]	; (400c48 <sd_mmc_get_capacity+0x18>)
  400c34:	4798      	blx	r3
  400c36:	b108      	cbz	r0, 400c3c <sd_mmc_get_capacity+0xc>
		return 0;
  400c38:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400c3a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c3c:	4b03      	ldr	r3, [pc, #12]	; (400c4c <sd_mmc_get_capacity+0x1c>)
  400c3e:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400c40:	4b03      	ldr	r3, [pc, #12]	; (400c50 <sd_mmc_get_capacity+0x20>)
  400c42:	681b      	ldr	r3, [r3, #0]
  400c44:	6858      	ldr	r0, [r3, #4]
  400c46:	bd08      	pop	{r3, pc}
  400c48:	004001d9 	.word	0x004001d9
  400c4c:	00400341 	.word	0x00400341
  400c50:	20400a04 	.word	0x20400a04

00400c54 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400c54:	2000      	movs	r0, #0
  400c56:	4770      	bx	lr

00400c58 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c5c:	b082      	sub	sp, #8
  400c5e:	468a      	mov	sl, r1
  400c60:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400c62:	4b26      	ldr	r3, [pc, #152]	; (400cfc <sd_mmc_init_read_blocks+0xa4>)
  400c64:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400c66:	4680      	mov	r8, r0
  400c68:	b118      	cbz	r0, 400c72 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400c6a:	4640      	mov	r0, r8
  400c6c:	b002      	add	sp, #8
  400c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c72:	4c23      	ldr	r4, [pc, #140]	; (400d00 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c74:	4e23      	ldr	r6, [pc, #140]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c76:	4d24      	ldr	r5, [pc, #144]	; (400d08 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c78:	4f24      	ldr	r7, [pc, #144]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c7a:	6833      	ldr	r3, [r6, #0]
  400c7c:	8999      	ldrh	r1, [r3, #12]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c7e:	0409      	lsls	r1, r1, #16
  400c80:	f241 100d 	movw	r0, #4365	; 0x110d
  400c84:	47a8      	blx	r5
  400c86:	b128      	cbz	r0, 400c94 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c88:	47b8      	blx	r7
  400c8a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400c8e:	d117      	bne.n	400cc0 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400c90:	3c01      	subs	r4, #1
  400c92:	d1f2      	bne.n	400c7a <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400c94:	4b1e      	ldr	r3, [pc, #120]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400c96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400c98:	f04f 0805 	mov.w	r8, #5
  400c9c:	e7e5      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400c9e:	4b1b      	ldr	r3, [pc, #108]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
  400ca0:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400ca2:	4b1c      	ldr	r3, [pc, #112]	; (400d14 <sd_mmc_init_read_blocks+0xbc>)
  400ca4:	4003      	ands	r3, r0
  400ca6:	b933      	cbnz	r3, 400cb6 <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400ca8:	4b1b      	ldr	r3, [pc, #108]	; (400d18 <sd_mmc_init_read_blocks+0xc0>)
  400caa:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400cae:	4b1b      	ldr	r3, [pc, #108]	; (400d1c <sd_mmc_init_read_blocks+0xc4>)
  400cb0:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400cb4:	e7d9      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400cb6:	4b16      	ldr	r3, [pc, #88]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cb8:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400cba:	f04f 0805 	mov.w	r8, #5
  400cbe:	e7d4      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400cc0:	4b17      	ldr	r3, [pc, #92]	; (400d20 <sd_mmc_init_read_blocks+0xc8>)
  400cc2:	4818      	ldr	r0, [pc, #96]	; (400d24 <sd_mmc_init_read_blocks+0xcc>)
  400cc4:	f1b9 0f01 	cmp.w	r9, #1
  400cc8:	bf98      	it	ls
  400cca:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400ccc:	4b0d      	ldr	r3, [pc, #52]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
  400cce:	681b      	ldr	r3, [r3, #0]
  400cd0:	7bdb      	ldrb	r3, [r3, #15]
  400cd2:	f013 0f08 	tst.w	r3, #8
  400cd6:	d101      	bne.n	400cdc <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400cd8:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400cdc:	2301      	movs	r3, #1
  400cde:	9300      	str	r3, [sp, #0]
  400ce0:	464b      	mov	r3, r9
  400ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ce6:	4651      	mov	r1, sl
  400ce8:	4c0f      	ldr	r4, [pc, #60]	; (400d28 <sd_mmc_init_read_blocks+0xd0>)
  400cea:	47a0      	blx	r4
  400cec:	2800      	cmp	r0, #0
  400cee:	d1d6      	bne.n	400c9e <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400cf0:	4b07      	ldr	r3, [pc, #28]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cf2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400cf4:	f04f 0805 	mov.w	r8, #5
  400cf8:	e7b7      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
  400cfa:	bf00      	nop
  400cfc:	004001d9 	.word	0x004001d9
  400d00:	00030d41 	.word	0x00030d41
  400d04:	20400a04 	.word	0x20400a04
  400d08:	0040170d 	.word	0x0040170d
  400d0c:	00401731 	.word	0x00401731
  400d10:	00400341 	.word	0x00400341
  400d14:	e4580000 	.word	0xe4580000
  400d18:	20400a08 	.word	0x20400a08
  400d1c:	20400a0a 	.word	0x20400a0a
  400d20:	00081111 	.word	0x00081111
  400d24:	00101112 	.word	0x00101112
  400d28:	00401769 	.word	0x00401769

00400d2c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400d2c:	b510      	push	{r4, lr}
  400d2e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400d30:	4b06      	ldr	r3, [pc, #24]	; (400d4c <sd_mmc_start_read_blocks+0x20>)
  400d32:	4798      	blx	r3
  400d34:	b920      	cbnz	r0, 400d40 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d36:	2200      	movs	r2, #0
  400d38:	4b05      	ldr	r3, [pc, #20]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d3a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400d3c:	2005      	movs	r0, #5
  400d3e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400d40:	4a03      	ldr	r2, [pc, #12]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d42:	8813      	ldrh	r3, [r2, #0]
  400d44:	1b1c      	subs	r4, r3, r4
  400d46:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400d48:	2000      	movs	r0, #0
}
  400d4a:	bd10      	pop	{r4, pc}
  400d4c:	004018a5 	.word	0x004018a5
  400d50:	20400a08 	.word	0x20400a08

00400d54 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400d54:	b510      	push	{r4, lr}
  400d56:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400d58:	4b13      	ldr	r3, [pc, #76]	; (400da8 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d5a:	4798      	blx	r3
  400d5c:	b908      	cbnz	r0, 400d62 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400d5e:	2005      	movs	r0, #5
  400d60:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400d62:	b184      	cbz	r4, 400d86 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400d64:	2200      	movs	r2, #0
  400d66:	4b11      	ldr	r3, [pc, #68]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d68:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400d6a:	4b11      	ldr	r3, [pc, #68]	; (400db0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d6c:	881b      	ldrh	r3, [r3, #0]
  400d6e:	2b01      	cmp	r3, #1
  400d70:	d00f      	beq.n	400d92 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400d72:	2100      	movs	r1, #0
  400d74:	f243 100c 	movw	r0, #12556	; 0x310c
  400d78:	4b0e      	ldr	r3, [pc, #56]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d7a:	4798      	blx	r3
  400d7c:	b168      	cbz	r0, 400d9a <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400d7e:	4b0e      	ldr	r3, [pc, #56]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d80:	4798      	blx	r3
	return SD_MMC_OK;
  400d82:	2000      	movs	r0, #0
  400d84:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400d86:	4b09      	ldr	r3, [pc, #36]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d88:	881b      	ldrh	r3, [r3, #0]
  400d8a:	2b00      	cmp	r3, #0
  400d8c:	d0ed      	beq.n	400d6a <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400d8e:	2000      	movs	r0, #0
}
  400d90:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400d92:	4b09      	ldr	r3, [pc, #36]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d94:	4798      	blx	r3
		return SD_MMC_OK;
  400d96:	2000      	movs	r0, #0
  400d98:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400d9a:	2100      	movs	r1, #0
  400d9c:	f243 100c 	movw	r0, #12556	; 0x310c
  400da0:	4b04      	ldr	r3, [pc, #16]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400da2:	4798      	blx	r3
  400da4:	e7eb      	b.n	400d7e <sd_mmc_wait_end_of_read_blocks+0x2a>
  400da6:	bf00      	nop
  400da8:	0040199d 	.word	0x0040199d
  400dac:	20400a08 	.word	0x20400a08
  400db0:	20400a0a 	.word	0x20400a0a
  400db4:	0040170d 	.word	0x0040170d
  400db8:	00400341 	.word	0x00400341

00400dbc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400dbc:	b570      	push	{r4, r5, r6, lr}
  400dbe:	b082      	sub	sp, #8
  400dc0:	460e      	mov	r6, r1
  400dc2:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400dc4:	4b16      	ldr	r3, [pc, #88]	; (400e20 <sd_mmc_init_write_blocks+0x64>)
  400dc6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400dc8:	4604      	mov	r4, r0
  400dca:	b9b8      	cbnz	r0, 400dfc <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400dcc:	4b15      	ldr	r3, [pc, #84]	; (400e24 <sd_mmc_init_write_blocks+0x68>)
  400dce:	4816      	ldr	r0, [pc, #88]	; (400e28 <sd_mmc_init_write_blocks+0x6c>)
  400dd0:	2d01      	cmp	r5, #1
  400dd2:	bf98      	it	ls
  400dd4:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400dd6:	4b15      	ldr	r3, [pc, #84]	; (400e2c <sd_mmc_init_write_blocks+0x70>)
  400dd8:	681b      	ldr	r3, [r3, #0]
  400dda:	7bdb      	ldrb	r3, [r3, #15]
  400ddc:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400de0:	bf08      	it	eq
  400de2:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400de4:	2301      	movs	r3, #1
  400de6:	9300      	str	r3, [sp, #0]
  400de8:	462b      	mov	r3, r5
  400dea:	f44f 7200 	mov.w	r2, #512	; 0x200
  400dee:	4631      	mov	r1, r6
  400df0:	4e0f      	ldr	r6, [pc, #60]	; (400e30 <sd_mmc_init_write_blocks+0x74>)
  400df2:	47b0      	blx	r6
  400df4:	b928      	cbnz	r0, 400e02 <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400df6:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400df8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400dfa:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400dfc:	4620      	mov	r0, r4
  400dfe:	b002      	add	sp, #8
  400e00:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400e02:	4b0d      	ldr	r3, [pc, #52]	; (400e38 <sd_mmc_init_write_blocks+0x7c>)
  400e04:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400e06:	4b0d      	ldr	r3, [pc, #52]	; (400e3c <sd_mmc_init_write_blocks+0x80>)
  400e08:	4003      	ands	r3, r0
  400e0a:	b923      	cbnz	r3, 400e16 <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400e0c:	4b0c      	ldr	r3, [pc, #48]	; (400e40 <sd_mmc_init_write_blocks+0x84>)
  400e0e:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400e10:	4b0c      	ldr	r3, [pc, #48]	; (400e44 <sd_mmc_init_write_blocks+0x88>)
  400e12:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400e14:	e7f2      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400e16:	4b07      	ldr	r3, [pc, #28]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400e18:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e1a:	2405      	movs	r4, #5
  400e1c:	e7ee      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
  400e1e:	bf00      	nop
  400e20:	004001d9 	.word	0x004001d9
  400e24:	00089118 	.word	0x00089118
  400e28:	00109119 	.word	0x00109119
  400e2c:	20400a04 	.word	0x20400a04
  400e30:	00401769 	.word	0x00401769
  400e34:	00400341 	.word	0x00400341
  400e38:	00401731 	.word	0x00401731
  400e3c:	e4580000 	.word	0xe4580000
  400e40:	20400a08 	.word	0x20400a08
  400e44:	20400a0a 	.word	0x20400a0a

00400e48 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400e48:	b510      	push	{r4, lr}
  400e4a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400e4c:	4b06      	ldr	r3, [pc, #24]	; (400e68 <sd_mmc_start_write_blocks+0x20>)
  400e4e:	4798      	blx	r3
  400e50:	b920      	cbnz	r0, 400e5c <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e52:	2200      	movs	r2, #0
  400e54:	4b05      	ldr	r3, [pc, #20]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e56:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e58:	2005      	movs	r0, #5
  400e5a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e5c:	4a03      	ldr	r2, [pc, #12]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e5e:	8813      	ldrh	r3, [r2, #0]
  400e60:	1b1c      	subs	r4, r3, r4
  400e62:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e64:	2000      	movs	r0, #0
}
  400e66:	bd10      	pop	{r4, pc}
  400e68:	00401a01 	.word	0x00401a01
  400e6c:	20400a08 	.word	0x20400a08

00400e70 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400e70:	b510      	push	{r4, lr}
  400e72:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400e74:	4b12      	ldr	r3, [pc, #72]	; (400ec0 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400e76:	4798      	blx	r3
  400e78:	b908      	cbnz	r0, 400e7e <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e7a:	2005      	movs	r0, #5
  400e7c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e7e:	b184      	cbz	r4, 400ea2 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e80:	2200      	movs	r2, #0
  400e82:	4b10      	ldr	r3, [pc, #64]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e84:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e86:	4b10      	ldr	r3, [pc, #64]	; (400ec8 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400e88:	881b      	ldrh	r3, [r3, #0]
  400e8a:	2b01      	cmp	r3, #1
  400e8c:	d00f      	beq.n	400eae <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400e8e:	2100      	movs	r1, #0
  400e90:	f243 100c 	movw	r0, #12556	; 0x310c
  400e94:	4b0d      	ldr	r3, [pc, #52]	; (400ecc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e96:	4798      	blx	r3
  400e98:	b968      	cbnz	r0, 400eb6 <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400e9a:	4b0d      	ldr	r3, [pc, #52]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400e9c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e9e:	2005      	movs	r0, #5
  400ea0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400ea2:	4b08      	ldr	r3, [pc, #32]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400ea4:	881b      	ldrh	r3, [r3, #0]
  400ea6:	2b00      	cmp	r3, #0
  400ea8:	d0ed      	beq.n	400e86 <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400eaa:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400eac:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400eae:	4b08      	ldr	r3, [pc, #32]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb0:	4798      	blx	r3
		return SD_MMC_OK;
  400eb2:	2000      	movs	r0, #0
  400eb4:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400eb6:	4b06      	ldr	r3, [pc, #24]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb8:	4798      	blx	r3
	return SD_MMC_OK;
  400eba:	2000      	movs	r0, #0
  400ebc:	bd10      	pop	{r4, pc}
  400ebe:	bf00      	nop
  400ec0:	00401af9 	.word	0x00401af9
  400ec4:	20400a08 	.word	0x20400a08
  400ec8:	20400a0a 	.word	0x20400a0a
  400ecc:	0040170d 	.word	0x0040170d
  400ed0:	00400341 	.word	0x00400341

00400ed4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400ed4:	b510      	push	{r4, lr}
  400ed6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400ed8:	4b0f      	ldr	r3, [pc, #60]	; (400f18 <sd_mmc_test_unit_ready+0x44>)
  400eda:	4798      	blx	r3
  400edc:	2801      	cmp	r0, #1
  400ede:	d018      	beq.n	400f12 <sd_mmc_test_unit_ready+0x3e>
  400ee0:	b118      	cbz	r0, 400eea <sd_mmc_test_unit_ready+0x16>
  400ee2:	2802      	cmp	r0, #2
  400ee4:	d010      	beq.n	400f08 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400ee6:	2001      	movs	r0, #1
  400ee8:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400eea:	4b0c      	ldr	r3, [pc, #48]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400eec:	5d1b      	ldrb	r3, [r3, r4]
  400eee:	b10b      	cbz	r3, 400ef4 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400ef0:	2002      	movs	r0, #2
	}
}
  400ef2:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400ef4:	4620      	mov	r0, r4
  400ef6:	4b0a      	ldr	r3, [pc, #40]	; (400f20 <sd_mmc_test_unit_ready+0x4c>)
  400ef8:	4798      	blx	r3
  400efa:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400efe:	2800      	cmp	r0, #0
  400f00:	bf14      	ite	ne
  400f02:	2000      	movne	r0, #0
  400f04:	2002      	moveq	r0, #2
  400f06:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400f08:	2200      	movs	r2, #0
  400f0a:	4b04      	ldr	r3, [pc, #16]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400f0c:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400f0e:	2002      	movs	r0, #2
  400f10:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400f12:	2003      	movs	r0, #3
  400f14:	bd10      	pop	{r4, pc}
  400f16:	bf00      	nop
  400f18:	00400389 	.word	0x00400389
  400f1c:	20400a10 	.word	0x20400a10
  400f20:	00400c0d 	.word	0x00400c0d

00400f24 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400f24:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400f26:	2000      	movs	r0, #0
  400f28:	4b01      	ldr	r3, [pc, #4]	; (400f30 <sd_mmc_test_unit_ready_0+0xc>)
  400f2a:	4798      	blx	r3
}
  400f2c:	bd08      	pop	{r3, pc}
  400f2e:	bf00      	nop
  400f30:	00400ed5 	.word	0x00400ed5

00400f34 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400f34:	b538      	push	{r3, r4, r5, lr}
  400f36:	4604      	mov	r4, r0
  400f38:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400f3a:	4b04      	ldr	r3, [pc, #16]	; (400f4c <sd_mmc_read_capacity+0x18>)
  400f3c:	4798      	blx	r3
  400f3e:	0040      	lsls	r0, r0, #1
  400f40:	3801      	subs	r0, #1
  400f42:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400f44:	4620      	mov	r0, r4
  400f46:	4b02      	ldr	r3, [pc, #8]	; (400f50 <sd_mmc_read_capacity+0x1c>)
  400f48:	4798      	blx	r3
}
  400f4a:	bd38      	pop	{r3, r4, r5, pc}
  400f4c:	00400c31 	.word	0x00400c31
  400f50:	00400ed5 	.word	0x00400ed5

00400f54 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400f54:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400f56:	4601      	mov	r1, r0
  400f58:	2000      	movs	r0, #0
  400f5a:	4b01      	ldr	r3, [pc, #4]	; (400f60 <sd_mmc_read_capacity_0+0xc>)
  400f5c:	4798      	blx	r3
}
  400f5e:	bd08      	pop	{r3, pc}
  400f60:	00400f35 	.word	0x00400f35

00400f64 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400f64:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400f66:	2000      	movs	r0, #0
  400f68:	4b01      	ldr	r3, [pc, #4]	; (400f70 <sd_mmc_wr_protect_0+0xc>)
  400f6a:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  400f6c:	bd08      	pop	{r3, pc}
  400f6e:	bf00      	nop
  400f70:	00400c55 	.word	0x00400c55

00400f74 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400f74:	b510      	push	{r4, lr}
  400f76:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400f78:	2201      	movs	r2, #1
  400f7a:	4b0a      	ldr	r3, [pc, #40]	; (400fa4 <sd_mmc_mem_2_ram+0x30>)
  400f7c:	4798      	blx	r3
  400f7e:	b120      	cbz	r0, 400f8a <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400f80:	2802      	cmp	r0, #2
  400f82:	bf0c      	ite	eq
  400f84:	2002      	moveq	r0, #2
  400f86:	2001      	movne	r0, #1
  400f88:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400f8a:	2101      	movs	r1, #1
  400f8c:	4620      	mov	r0, r4
  400f8e:	4b06      	ldr	r3, [pc, #24]	; (400fa8 <sd_mmc_mem_2_ram+0x34>)
  400f90:	4798      	blx	r3
  400f92:	b108      	cbz	r0, 400f98 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  400f94:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400f96:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400f98:	4b04      	ldr	r3, [pc, #16]	; (400fac <sd_mmc_mem_2_ram+0x38>)
  400f9a:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400f9c:	3000      	adds	r0, #0
  400f9e:	bf18      	it	ne
  400fa0:	2001      	movne	r0, #1
  400fa2:	bd10      	pop	{r4, pc}
  400fa4:	00400c59 	.word	0x00400c59
  400fa8:	00400d2d 	.word	0x00400d2d
  400fac:	00400d55 	.word	0x00400d55

00400fb0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400fb0:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400fb2:	460a      	mov	r2, r1
  400fb4:	4601      	mov	r1, r0
  400fb6:	2000      	movs	r0, #0
  400fb8:	4b01      	ldr	r3, [pc, #4]	; (400fc0 <sd_mmc_mem_2_ram_0+0x10>)
  400fba:	4798      	blx	r3
}
  400fbc:	bd08      	pop	{r3, pc}
  400fbe:	bf00      	nop
  400fc0:	00400f75 	.word	0x00400f75

00400fc4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  400fc4:	b510      	push	{r4, lr}
  400fc6:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  400fc8:	2201      	movs	r2, #1
  400fca:	4b0a      	ldr	r3, [pc, #40]	; (400ff4 <sd_mmc_ram_2_mem+0x30>)
  400fcc:	4798      	blx	r3
  400fce:	b120      	cbz	r0, 400fda <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400fd0:	2802      	cmp	r0, #2
  400fd2:	bf0c      	ite	eq
  400fd4:	2002      	moveq	r0, #2
  400fd6:	2001      	movne	r0, #1
  400fd8:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  400fda:	2101      	movs	r1, #1
  400fdc:	4620      	mov	r0, r4
  400fde:	4b06      	ldr	r3, [pc, #24]	; (400ff8 <sd_mmc_ram_2_mem+0x34>)
  400fe0:	4798      	blx	r3
  400fe2:	b108      	cbz	r0, 400fe8 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  400fe4:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400fe6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  400fe8:	4b04      	ldr	r3, [pc, #16]	; (400ffc <sd_mmc_ram_2_mem+0x38>)
  400fea:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400fec:	3000      	adds	r0, #0
  400fee:	bf18      	it	ne
  400ff0:	2001      	movne	r0, #1
  400ff2:	bd10      	pop	{r4, pc}
  400ff4:	00400dbd 	.word	0x00400dbd
  400ff8:	00400e49 	.word	0x00400e49
  400ffc:	00400e71 	.word	0x00400e71

00401000 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401000:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  401002:	460a      	mov	r2, r1
  401004:	4601      	mov	r1, r0
  401006:	2000      	movs	r0, #0
  401008:	4b01      	ldr	r3, [pc, #4]	; (401010 <sd_mmc_ram_2_mem_0+0x10>)
  40100a:	4798      	blx	r3
}
  40100c:	bd08      	pop	{r3, pc}
  40100e:	bf00      	nop
  401010:	00400fc5 	.word	0x00400fc5

00401014 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401014:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401016:	4810      	ldr	r0, [pc, #64]	; (401058 <sysclk_init+0x44>)
  401018:	4b10      	ldr	r3, [pc, #64]	; (40105c <sysclk_init+0x48>)
  40101a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40101c:	213e      	movs	r1, #62	; 0x3e
  40101e:	2000      	movs	r0, #0
  401020:	4b0f      	ldr	r3, [pc, #60]	; (401060 <sysclk_init+0x4c>)
  401022:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401024:	4c0f      	ldr	r4, [pc, #60]	; (401064 <sysclk_init+0x50>)
  401026:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401028:	2800      	cmp	r0, #0
  40102a:	d0fc      	beq.n	401026 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40102c:	4b0e      	ldr	r3, [pc, #56]	; (401068 <sysclk_init+0x54>)
  40102e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401030:	4a0e      	ldr	r2, [pc, #56]	; (40106c <sysclk_init+0x58>)
  401032:	4b0f      	ldr	r3, [pc, #60]	; (401070 <sysclk_init+0x5c>)
  401034:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401036:	4c0f      	ldr	r4, [pc, #60]	; (401074 <sysclk_init+0x60>)
  401038:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40103a:	2800      	cmp	r0, #0
  40103c:	d0fc      	beq.n	401038 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40103e:	2002      	movs	r0, #2
  401040:	4b0d      	ldr	r3, [pc, #52]	; (401078 <sysclk_init+0x64>)
  401042:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401044:	2000      	movs	r0, #0
  401046:	4b0d      	ldr	r3, [pc, #52]	; (40107c <sysclk_init+0x68>)
  401048:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40104a:	4b0d      	ldr	r3, [pc, #52]	; (401080 <sysclk_init+0x6c>)
  40104c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40104e:	4802      	ldr	r0, [pc, #8]	; (401058 <sysclk_init+0x44>)
  401050:	4b02      	ldr	r3, [pc, #8]	; (40105c <sysclk_init+0x48>)
  401052:	4798      	blx	r3
  401054:	bd10      	pop	{r4, pc}
  401056:	bf00      	nop
  401058:	11e1a300 	.word	0x11e1a300
  40105c:	004025b1 	.word	0x004025b1
  401060:	00401e95 	.word	0x00401e95
  401064:	00401ee9 	.word	0x00401ee9
  401068:	00401ef9 	.word	0x00401ef9
  40106c:	20183f01 	.word	0x20183f01
  401070:	400e0600 	.word	0x400e0600
  401074:	00401f09 	.word	0x00401f09
  401078:	00401df9 	.word	0x00401df9
  40107c:	00401e31 	.word	0x00401e31
  401080:	004024a5 	.word	0x004024a5

00401084 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401084:	b108      	cbz	r0, 40108a <mem_test_unit_ready+0x6>
  401086:	2001      	movs	r0, #1
  401088:	4770      	bx	lr
{
  40108a:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  40108c:	4b01      	ldr	r3, [pc, #4]	; (401094 <mem_test_unit_ready+0x10>)
  40108e:	4798      	blx	r3
  401090:	bd08      	pop	{r3, pc}
  401092:	bf00      	nop
  401094:	00400f25 	.word	0x00400f25

00401098 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401098:	b108      	cbz	r0, 40109e <mem_read_capacity+0x6>
  40109a:	2001      	movs	r0, #1
  40109c:	4770      	bx	lr
{
  40109e:	b508      	push	{r3, lr}
  4010a0:	4608      	mov	r0, r1
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4010a2:	4b01      	ldr	r3, [pc, #4]	; (4010a8 <mem_read_capacity+0x10>)
  4010a4:	4798      	blx	r3
  4010a6:	bd08      	pop	{r3, pc}
  4010a8:	00400f55 	.word	0x00400f55

004010ac <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  4010ac:	fab0 f080 	clz	r0, r0
  4010b0:	0940      	lsrs	r0, r0, #5
  4010b2:	4770      	bx	lr

004010b4 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4010b4:	b108      	cbz	r0, 4010ba <mem_wr_protect+0x6>
  4010b6:	2001      	movs	r0, #1
  4010b8:	4770      	bx	lr
{
  4010ba:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4010bc:	4b01      	ldr	r3, [pc, #4]	; (4010c4 <mem_wr_protect+0x10>)
  4010be:	4798      	blx	r3
  4010c0:	bd08      	pop	{r3, pc}
  4010c2:	bf00      	nop
  4010c4:	00400f65 	.word	0x00400f65

004010c8 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4010c8:	b108      	cbz	r0, 4010ce <memory_2_ram+0x6>
  4010ca:	2001      	movs	r0, #1
  4010cc:	4770      	bx	lr
{
  4010ce:	b508      	push	{r3, lr}
  4010d0:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4010d2:	4611      	mov	r1, r2
  4010d4:	4b01      	ldr	r3, [pc, #4]	; (4010dc <memory_2_ram+0x14>)
  4010d6:	4798      	blx	r3
  4010d8:	bd08      	pop	{r3, pc}
  4010da:	bf00      	nop
  4010dc:	00400fb1 	.word	0x00400fb1

004010e0 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  4010e0:	b108      	cbz	r0, 4010e6 <ram_2_memory+0x6>
  4010e2:	2001      	movs	r0, #1
  4010e4:	4770      	bx	lr
{
  4010e6:	b508      	push	{r3, lr}
  4010e8:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  4010ea:	4611      	mov	r1, r2
  4010ec:	4b01      	ldr	r3, [pc, #4]	; (4010f4 <ram_2_memory+0x14>)
  4010ee:	4798      	blx	r3
  4010f0:	bd08      	pop	{r3, pc}
  4010f2:	bf00      	nop
  4010f4:	00401001 	.word	0x00401001

004010f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4010f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4010fc:	b980      	cbnz	r0, 401120 <_read+0x28>
  4010fe:	460c      	mov	r4, r1
  401100:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  401102:	2a00      	cmp	r2, #0
  401104:	dd0f      	ble.n	401126 <_read+0x2e>
  401106:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401108:	4e08      	ldr	r6, [pc, #32]	; (40112c <_read+0x34>)
  40110a:	4d09      	ldr	r5, [pc, #36]	; (401130 <_read+0x38>)
  40110c:	6830      	ldr	r0, [r6, #0]
  40110e:	4621      	mov	r1, r4
  401110:	682b      	ldr	r3, [r5, #0]
  401112:	4798      	blx	r3
		ptr++;
  401114:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  401116:	42bc      	cmp	r4, r7
  401118:	d1f8      	bne.n	40110c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40111a:	4640      	mov	r0, r8
  40111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401120:	f04f 38ff 	mov.w	r8, #4294967295
  401124:	e7f9      	b.n	40111a <_read+0x22>
	for (; len > 0; --len) {
  401126:	4680      	mov	r8, r0
  401128:	e7f7      	b.n	40111a <_read+0x22>
  40112a:	bf00      	nop
  40112c:	20400af8 	.word	0x20400af8
  401130:	20400af0 	.word	0x20400af0

00401134 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401134:	3801      	subs	r0, #1
  401136:	2802      	cmp	r0, #2
  401138:	d815      	bhi.n	401166 <_write+0x32>
{
  40113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40113e:	460e      	mov	r6, r1
  401140:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401142:	b19a      	cbz	r2, 40116c <_write+0x38>
  401144:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401146:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401180 <_write+0x4c>
  40114a:	4f0c      	ldr	r7, [pc, #48]	; (40117c <_write+0x48>)
  40114c:	f8d8 0000 	ldr.w	r0, [r8]
  401150:	f815 1b01 	ldrb.w	r1, [r5], #1
  401154:	683b      	ldr	r3, [r7, #0]
  401156:	4798      	blx	r3
  401158:	2800      	cmp	r0, #0
  40115a:	db0a      	blt.n	401172 <_write+0x3e>
  40115c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40115e:	3c01      	subs	r4, #1
  401160:	d1f4      	bne.n	40114c <_write+0x18>
  401162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401166:	f04f 30ff 	mov.w	r0, #4294967295
  40116a:	4770      	bx	lr
	for (; len != 0; --len) {
  40116c:	4610      	mov	r0, r2
  40116e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401172:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40117a:	bf00      	nop
  40117c:	20400af4 	.word	0x20400af4
  401180:	20400af8 	.word	0x20400af8

00401184 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401186:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40118a:	4bb8      	ldr	r3, [pc, #736]	; (40146c <board_init+0x2e8>)
  40118c:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40118e:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401192:	4fb7      	ldr	r7, [pc, #732]	; (401470 <board_init+0x2ec>)
  401194:	4638      	mov	r0, r7
  401196:	4db7      	ldr	r5, [pc, #732]	; (401474 <board_init+0x2f0>)
  401198:	47a8      	blx	r5
	dw_region_attr =
  40119a:	4eb7      	ldr	r6, [pc, #732]	; (401478 <board_init+0x2f4>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40119c:	ea40 0106 	orr.w	r1, r0, r6
  4011a0:	2011      	movs	r0, #17
  4011a2:	4cb6      	ldr	r4, [pc, #728]	; (40147c <board_init+0x2f8>)
  4011a4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  4011a6:	48b6      	ldr	r0, [pc, #728]	; (401480 <board_init+0x2fc>)
  4011a8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011aa:	49b6      	ldr	r1, [pc, #728]	; (401484 <board_init+0x300>)
  4011ac:	4301      	orrs	r1, r0
  4011ae:	48b6      	ldr	r0, [pc, #728]	; (401488 <board_init+0x304>)
  4011b0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4011b2:	4638      	mov	r0, r7
  4011b4:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011b6:	ea40 0106 	orr.w	r1, r0, r6
  4011ba:	48b4      	ldr	r0, [pc, #720]	; (40148c <board_init+0x308>)
  4011bc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  4011be:	48b4      	ldr	r0, [pc, #720]	; (401490 <board_init+0x30c>)
  4011c0:	47a8      	blx	r5
	dw_region_attr =
  4011c2:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  4011c6:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011ca:	ea40 0106 	orr.w	r1, r0, r6
  4011ce:	48b1      	ldr	r0, [pc, #708]	; (401494 <board_init+0x310>)
  4011d0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4011d2:	48b1      	ldr	r0, [pc, #708]	; (401498 <board_init+0x314>)
  4011d4:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011d6:	ea40 0106 	orr.w	r1, r0, r6
  4011da:	48b0      	ldr	r0, [pc, #704]	; (40149c <board_init+0x318>)
  4011dc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4011de:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4011e2:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  4011e4:	4eae      	ldr	r6, [pc, #696]	; (4014a0 <board_init+0x31c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011e6:	ea40 0106 	orr.w	r1, r0, r6
  4011ea:	48ae      	ldr	r0, [pc, #696]	; (4014a4 <board_init+0x320>)
  4011ec:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  4011ee:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4011f2:	47a8      	blx	r5
	dw_region_attr =
  4011f4:	4fac      	ldr	r7, [pc, #688]	; (4014a8 <board_init+0x324>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011f6:	ea40 0107 	orr.w	r1, r0, r7
  4011fa:	48ac      	ldr	r0, [pc, #688]	; (4014ac <board_init+0x328>)
  4011fc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  4011fe:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401202:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401204:	49aa      	ldr	r1, [pc, #680]	; (4014b0 <board_init+0x32c>)
  401206:	4301      	orrs	r1, r0
  401208:	48aa      	ldr	r0, [pc, #680]	; (4014b4 <board_init+0x330>)
  40120a:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  40120c:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401210:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401212:	ea40 0107 	orr.w	r1, r0, r7
  401216:	48a8      	ldr	r0, [pc, #672]	; (4014b8 <board_init+0x334>)
  401218:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  40121a:	48a8      	ldr	r0, [pc, #672]	; (4014bc <board_init+0x338>)
  40121c:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40121e:	ea40 0106 	orr.w	r1, r0, r6
  401222:	48a7      	ldr	r0, [pc, #668]	; (4014c0 <board_init+0x33c>)
  401224:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401226:	4ca7      	ldr	r4, [pc, #668]	; (4014c4 <board_init+0x340>)
  401228:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40122a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  40122e:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401230:	2005      	movs	r0, #5
  401232:	4ba5      	ldr	r3, [pc, #660]	; (4014c8 <board_init+0x344>)
  401234:	4798      	blx	r3
  __ASM volatile ("dsb");
  401236:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40123a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  40123e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401242:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401246:	2300      	movs	r3, #0
  401248:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40124c:	6963      	ldr	r3, [r4, #20]
  40124e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401252:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  401254:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401258:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40125c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401260:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401264:	f007 0007 	and.w	r0, r7, #7
  401268:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40126a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40126e:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401272:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  401276:	f3bf 8f4f 	dsb	sy
  40127a:	f04f 34ff 	mov.w	r4, #4294967295
  40127e:	fa04 fc00 	lsl.w	ip, r4, r0
  401282:	fa06 f000 	lsl.w	r0, r6, r0
  401286:	fa04 f40e 	lsl.w	r4, r4, lr
  40128a:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40128e:	4d8d      	ldr	r5, [pc, #564]	; (4014c4 <board_init+0x340>)
         int32_t tmpways = ways;
  401290:	463a      	mov	r2, r7
  401292:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  401294:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  401298:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40129c:	3a01      	subs	r2, #1
  40129e:	4423      	add	r3, r4
  4012a0:	f1b2 3fff 	cmp.w	r2, #4294967295
  4012a4:	d1f6      	bne.n	401294 <board_init+0x110>
        } while(sets--);
  4012a6:	3e01      	subs	r6, #1
  4012a8:	4460      	add	r0, ip
  4012aa:	f1b6 3fff 	cmp.w	r6, #4294967295
  4012ae:	d1ef      	bne.n	401290 <board_init+0x10c>
  4012b0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4012b4:	4b83      	ldr	r3, [pc, #524]	; (4014c4 <board_init+0x340>)
  4012b6:	695a      	ldr	r2, [r3, #20]
  4012b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4012bc:	615a      	str	r2, [r3, #20]
  4012be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4012c2:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4012c6:	4a81      	ldr	r2, [pc, #516]	; (4014cc <board_init+0x348>)
  4012c8:	4981      	ldr	r1, [pc, #516]	; (4014d0 <board_init+0x34c>)
  4012ca:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4012cc:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4012d0:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4012d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4012d6:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4012da:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4012de:	f022 0201 	bic.w	r2, r2, #1
  4012e2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4012e6:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4012ea:	f022 0201 	bic.w	r2, r2, #1
  4012ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4012f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4012f6:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4012fa:	200a      	movs	r0, #10
  4012fc:	4c75      	ldr	r4, [pc, #468]	; (4014d4 <board_init+0x350>)
  4012fe:	47a0      	blx	r4
  401300:	200b      	movs	r0, #11
  401302:	47a0      	blx	r4
  401304:	200c      	movs	r0, #12
  401306:	47a0      	blx	r4
  401308:	2010      	movs	r0, #16
  40130a:	47a0      	blx	r4
  40130c:	2011      	movs	r0, #17
  40130e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401310:	4a71      	ldr	r2, [pc, #452]	; (4014d8 <board_init+0x354>)
  401312:	f44f 7380 	mov.w	r3, #256	; 0x100
  401316:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401318:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40131c:	6313      	str	r3, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40131e:	4b6f      	ldr	r3, [pc, #444]	; (4014dc <board_init+0x358>)
  401320:	f44f 6100 	mov.w	r1, #2048	; 0x800
  401324:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401326:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40132a:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40132c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401330:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401332:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  401334:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401338:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40133a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  40133e:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401340:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401342:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  401346:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401348:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40134c:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401350:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401354:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401358:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40135a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40135e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401360:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401362:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401366:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401368:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  40136c:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40136e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401370:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  401374:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401376:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401378:	4859      	ldr	r0, [pc, #356]	; (4014e0 <board_init+0x35c>)
  40137a:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  40137e:	f041 0110 	orr.w	r1, r1, #16
  401382:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  401386:	4957      	ldr	r1, [pc, #348]	; (4014e4 <board_init+0x360>)
  401388:	2010      	movs	r0, #16
  40138a:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40138c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  401390:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  401392:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401394:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401398:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  40139a:	4304      	orrs	r4, r0
  40139c:	670c      	str	r4, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40139e:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  4013a0:	4304      	orrs	r4, r0
  4013a2:	674c      	str	r4, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013a4:	6048      	str	r0, [r1, #4]
		base->PIO_PUDR = mask;
  4013a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013aa:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013ac:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013b0:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013b2:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013b4:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013b8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4013ba:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  4013be:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4013c0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4013c2:	4308      	orrs	r0, r1
  4013c4:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013c6:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4013c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4013cc:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013ce:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013d2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013d4:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013d6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4013da:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4013dc:	4308      	orrs	r0, r1
  4013de:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4013e0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4013e2:	4308      	orrs	r0, r1
  4013e4:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013e6:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4013e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4013ec:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013ee:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013f2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013f4:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013f6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013fa:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4013fc:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  401400:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401402:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401404:	4308      	orrs	r0, r1
  401406:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401408:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40140a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40140e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401410:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401414:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401416:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401418:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40141c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40141e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  401422:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401424:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401426:	4308      	orrs	r0, r1
  401428:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40142a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40142c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  401430:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401432:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401436:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401438:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40143a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40143e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401440:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  401444:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401446:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401448:	4308      	orrs	r0, r1
  40144a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40144c:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40144e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401452:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401454:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401458:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40145a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40145c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401460:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401462:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  401466:	6718      	str	r0, [r3, #112]	; 0x70
  401468:	e03e      	b.n	4014e8 <board_init+0x364>
  40146a:	bf00      	nop
  40146c:	400e1850 	.word	0x400e1850
  401470:	003fffff 	.word	0x003fffff
  401474:	00401b75 	.word	0x00401b75
  401478:	01000001 	.word	0x01000001
  40147c:	00401b69 	.word	0x00401b69
  401480:	001fffff 	.word	0x001fffff
  401484:	06230001 	.word	0x06230001
  401488:	00400012 	.word	0x00400012
  40148c:	20000013 	.word	0x20000013
  401490:	0003ffff 	.word	0x0003ffff
  401494:	20400014 	.word	0x20400014
  401498:	0001ffff 	.word	0x0001ffff
  40149c:	20440015 	.word	0x20440015
  4014a0:	13010001 	.word	0x13010001
  4014a4:	40000016 	.word	0x40000016
  4014a8:	03000001 	.word	0x03000001
  4014ac:	60000017 	.word	0x60000017
  4014b0:	03250001 	.word	0x03250001
  4014b4:	70000018 	.word	0x70000018
  4014b8:	80000019 	.word	0x80000019
  4014bc:	000fffff 	.word	0x000fffff
  4014c0:	a010001a 	.word	0xa010001a
  4014c4:	e000ed00 	.word	0xe000ed00
  4014c8:	00401b5d 	.word	0x00401b5d
  4014cc:	400e0c00 	.word	0x400e0c00
  4014d0:	5a00080c 	.word	0x5a00080c
  4014d4:	00401f19 	.word	0x00401f19
  4014d8:	400e1200 	.word	0x400e1200
  4014dc:	400e0e00 	.word	0x400e0e00
  4014e0:	40088000 	.word	0x40088000
  4014e4:	400e1000 	.word	0x400e1000
		base->PIO_ABCDSR[1] |= mask;
  4014e8:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4014ea:	4308      	orrs	r0, r1
  4014ec:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4014ee:	6059      	str	r1, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4014f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  4014f4:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014f6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  4014fa:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4014fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401500:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401502:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401504:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401508:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40150a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40150e:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401510:	6f53      	ldr	r3, [r2, #116]	; 0x74
  401512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401516:	6753      	str	r3, [r2, #116]	; 0x74
  401518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40151a:	bf00      	nop

0040151c <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  40151c:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  40151e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401522:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401524:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401526:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401528:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  40152a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  40152c:	2680      	movs	r6, #128	; 0x80
  40152e:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  401530:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401532:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401534:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401536:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  401538:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  40153a:	2200      	movs	r2, #0
  40153c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  40153e:	2205      	movs	r2, #5
  401540:	601a      	str	r2, [r3, #0]
}
  401542:	bc70      	pop	{r4, r5, r6}
  401544:	4770      	bx	lr
	...

00401548 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  401548:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  40154a:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  40154e:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  401550:	f411 7f80 	tst.w	r1, #256	; 0x100
  401554:	d004      	beq.n	401560 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  401556:	f411 6f00 	tst.w	r1, #2048	; 0x800
  40155a:	d00e      	beq.n	40157a <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  40155c:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  401560:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  401564:	bf18      	it	ne
  401566:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  40156a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40156e:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  401570:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  401572:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  401574:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  401578:	e00d      	b.n	401596 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  40157a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  40157e:	bf14      	ite	ne
  401580:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  401584:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  401588:	e7ea      	b.n	401560 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  40158a:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  40158e:	d10c      	bne.n	4015aa <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  401590:	f013 0f01 	tst.w	r3, #1
  401594:	d10d      	bne.n	4015b2 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  401596:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  401598:	2a00      	cmp	r2, #0
  40159a:	d0f6      	beq.n	40158a <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  40159c:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  4015a0:	d0f6      	beq.n	401590 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  4015a2:	4b10      	ldr	r3, [pc, #64]	; (4015e4 <hsmci_send_cmd_execute+0x9c>)
  4015a4:	4798      	blx	r3
				return false;
  4015a6:	2000      	movs	r0, #0
  4015a8:	bd08      	pop	{r3, pc}
				hsmci_reset();
  4015aa:	4b0e      	ldr	r3, [pc, #56]	; (4015e4 <hsmci_send_cmd_execute+0x9c>)
  4015ac:	4798      	blx	r3
				return false;
  4015ae:	2000      	movs	r0, #0
  4015b0:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  4015b2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  4015b6:	d103      	bne.n	4015c0 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  4015b8:	2001      	movs	r0, #1
  4015ba:	bd08      	pop	{r3, pc}
	return true;
  4015bc:	2001      	movs	r0, #1
  4015be:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  4015c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4015c6:	f04f 32ff 	mov.w	r2, #4294967295
  4015ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  4015ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
  4015d2:	2b20      	cmp	r3, #32
  4015d4:	d0f2      	beq.n	4015bc <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  4015d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  4015d8:	3a01      	subs	r2, #1
  4015da:	d1f8      	bne.n	4015ce <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  4015dc:	4b01      	ldr	r3, [pc, #4]	; (4015e4 <hsmci_send_cmd_execute+0x9c>)
  4015de:	4798      	blx	r3
			return false;
  4015e0:	2000      	movs	r0, #0
  4015e2:	bd08      	pop	{r3, pc}
  4015e4:	0040151d 	.word	0x0040151d

004015e8 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  4015e8:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  4015ea:	2012      	movs	r0, #18
  4015ec:	4c08      	ldr	r4, [pc, #32]	; (401610 <hsmci_init+0x28>)
  4015ee:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  4015f0:	203a      	movs	r0, #58	; 0x3a
  4015f2:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  4015f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4015f8:	2272      	movs	r2, #114	; 0x72
  4015fa:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  4015fc:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  4015fe:	2211      	movs	r2, #17
  401600:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  401602:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401606:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401608:	2205      	movs	r2, #5
  40160a:	601a      	str	r2, [r3, #0]
  40160c:	bd10      	pop	{r4, pc}
  40160e:	bf00      	nop
  401610:	00401f19 	.word	0x00401f19

00401614 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401614:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401616:	bf0c      	ite	eq
  401618:	2004      	moveq	r0, #4
  40161a:	2000      	movne	r0, #0
  40161c:	4770      	bx	lr

0040161e <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  40161e:	2001      	movs	r0, #1
  401620:	4770      	bx	lr
	...

00401624 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401624:	b37b      	cbz	r3, 401686 <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401626:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40162a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401630:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  401632:	4b2b      	ldr	r3, [pc, #172]	; (4016e0 <hsmci_select_device+0xbc>)
  401634:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  401638:	d337      	bcc.n	4016aa <hsmci_select_device+0x86>
{
  40163a:	b410      	push	{r4}
		div = (mck / speed) - 2;
  40163c:	4829      	ldr	r0, [pc, #164]	; (4016e4 <hsmci_select_device+0xc0>)
  40163e:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  401642:	fb01 0113 	mls	r1, r1, r3, r0
  401646:	bb29      	cbnz	r1, 401694 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  401648:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40164a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40164e:	6848      	ldr	r0, [r1, #4]
  401650:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  401654:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401656:	684c      	ldr	r4, [r1, #4]
  401658:	f3c3 0047 	ubfx	r0, r3, #1, #8
  40165c:	4320      	orrs	r0, r4
  40165e:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  401660:	f013 0f01 	tst.w	r3, #1
  401664:	d018      	beq.n	401698 <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  401666:	684b      	ldr	r3, [r1, #4]
  401668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40166c:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  40166e:	2a04      	cmp	r2, #4
  401670:	d019      	beq.n	4016a6 <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  401672:	2a08      	cmp	r2, #8
  401674:	bf0c      	ite	eq
  401676:	22c0      	moveq	r2, #192	; 0xc0
  401678:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40167a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40167e:	60da      	str	r2, [r3, #12]
}
  401680:	f85d 4b04 	ldr.w	r4, [sp], #4
  401684:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  401686:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40168a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40168c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401690:	6543      	str	r3, [r0, #84]	; 0x54
  401692:	e7ce      	b.n	401632 <hsmci_select_device+0xe>
			div++;
  401694:	3b01      	subs	r3, #1
  401696:	e7d8      	b.n	40164a <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401698:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40169c:	684b      	ldr	r3, [r1, #4]
  40169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4016a2:	604b      	str	r3, [r1, #4]
  4016a4:	e7e3      	b.n	40166e <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4016a6:	2280      	movs	r2, #128	; 0x80
  4016a8:	e7e7      	b.n	40167a <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4016aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016ae:	6859      	ldr	r1, [r3, #4]
  4016b0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  4016b4:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4016b6:	6859      	ldr	r1, [r3, #4]
  4016b8:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4016ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4016be:	684b      	ldr	r3, [r1, #4]
  4016c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4016c4:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  4016c6:	2a04      	cmp	r2, #4
  4016c8:	d007      	beq.n	4016da <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4016ca:	2a08      	cmp	r2, #8
  4016cc:	bf0c      	ite	eq
  4016ce:	22c0      	moveq	r2, #192	; 0xc0
  4016d0:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4016d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016d6:	60da      	str	r2, [r3, #12]
  4016d8:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4016da:	2280      	movs	r2, #128	; 0x80
  4016dc:	e7f9      	b.n	4016d2 <hsmci_select_device+0xae>
  4016de:	bf00      	nop
  4016e0:	08f0d17f 	.word	0x08f0d17f
  4016e4:	08f0d180 	.word	0x08f0d180

004016e8 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  4016e8:	4770      	bx	lr

004016ea <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4016ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016ee:	685a      	ldr	r2, [r3, #4]
  4016f0:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4016f4:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  4016f6:	2200      	movs	r2, #0
  4016f8:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  4016fa:	f44f 6210 	mov.w	r2, #2304	; 0x900
  4016fe:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  401700:	461a      	mov	r2, r3
  401702:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401704:	f013 0f01 	tst.w	r3, #1
  401708:	d0fb      	beq.n	401702 <hsmci_send_clock+0x18>
}
  40170a:	4770      	bx	lr

0040170c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  40170c:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40170e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401712:	685a      	ldr	r2, [r3, #4]
  401714:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401718:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  40171a:	2400      	movs	r4, #0
  40171c:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  40171e:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  401720:	460a      	mov	r2, r1
  401722:	4601      	mov	r1, r0
  401724:	4620      	mov	r0, r4
  401726:	4b01      	ldr	r3, [pc, #4]	; (40172c <hsmci_send_cmd+0x20>)
  401728:	4798      	blx	r3
}
  40172a:	bd10      	pop	{r4, pc}
  40172c:	00401549 	.word	0x00401549

00401730 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  401730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401734:	6a18      	ldr	r0, [r3, #32]
}
  401736:	4770      	bx	lr

00401738 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  401738:	b410      	push	{r4}
  40173a:	1d03      	adds	r3, r0, #4
  40173c:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  40173e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401742:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  401744:	0e11      	lsrs	r1, r2, #24
  401746:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40174a:	0c11      	lsrs	r1, r2, #16
  40174c:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  401750:	0a11      	lsrs	r1, r2, #8
  401752:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  401756:	f803 2c01 	strb.w	r2, [r3, #-1]
  40175a:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  40175c:	4283      	cmp	r3, r0
  40175e:	d1f0      	bne.n	401742 <hsmci_get_response_128+0xa>
		response++;
	}
}
  401760:	f85d 4b04 	ldr.w	r4, [sp], #4
  401764:	4770      	bx	lr
	...

00401768 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  401768:	b570      	push	{r4, r5, r6, lr}
  40176a:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  40176e:	b384      	cbz	r4, 4017d2 <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  401770:	f44f 7580 	mov.w	r5, #256	; 0x100
  401774:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401778:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  40177a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  40177e:	686c      	ldr	r4, [r5, #4]
  401780:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  401784:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  401786:	f012 0f03 	tst.w	r2, #3
  40178a:	d027      	beq.n	4017dc <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40178c:	686c      	ldr	r4, [r5, #4]
  40178e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  401792:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  401794:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  401798:	2c00      	cmp	r4, #0
  40179a:	bf14      	ite	ne
  40179c:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  4017a0:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  4017a4:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  4017a8:	d11f      	bne.n	4017ea <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  4017aa:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  4017ae:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4017b2:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  4017b4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  4017b8:	d12b      	bne.n	401812 <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  4017ba:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  4017be:	d12b      	bne.n	401818 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  4017c0:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  4017c4:	d118      	bne.n	4017f8 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  4017c6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  4017ca:	bf18      	it	ne
  4017cc:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  4017d0:	e012      	b.n	4017f8 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  4017d2:	2500      	movs	r5, #0
  4017d4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4017d8:	6525      	str	r5, [r4, #80]	; 0x50
  4017da:	e7ce      	b.n	40177a <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4017dc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4017e0:	686c      	ldr	r4, [r5, #4]
  4017e2:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  4017e6:	606c      	str	r4, [r5, #4]
  4017e8:	e7d4      	b.n	401794 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  4017ea:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  4017ee:	f3c2 0508 	ubfx	r5, r2, #0, #9
  4017f2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4017f6:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  4017f8:	2600      	movs	r6, #0
  4017fa:	4d09      	ldr	r5, [pc, #36]	; (401820 <hsmci_adtc_start+0xb8>)
  4017fc:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  4017fe:	4d09      	ldr	r5, [pc, #36]	; (401824 <hsmci_adtc_start+0xbc>)
  401800:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  401802:	4a09      	ldr	r2, [pc, #36]	; (401828 <hsmci_adtc_start+0xc0>)
  401804:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401806:	460a      	mov	r2, r1
  401808:	4601      	mov	r1, r0
  40180a:	4620      	mov	r0, r4
  40180c:	4b07      	ldr	r3, [pc, #28]	; (40182c <hsmci_adtc_start+0xc4>)
  40180e:	4798      	blx	r3
}
  401810:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  401812:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  401816:	e7ef      	b.n	4017f8 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  401818:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40181c:	e7ec      	b.n	4017f8 <hsmci_adtc_start+0x90>
  40181e:	bf00      	nop
  401820:	20400a18 	.word	0x20400a18
  401824:	20400a12 	.word	0x20400a12
  401828:	20400a14 	.word	0x20400a14
  40182c:	00401549 	.word	0x00401549

00401830 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  401830:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  401832:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401836:	4a16      	ldr	r2, [pc, #88]	; (401890 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  401838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40183a:	4213      	tst	r3, r2
  40183c:	d11d      	bne.n	40187a <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  40183e:	f013 0f02 	tst.w	r3, #2
  401842:	d0f9      	beq.n	401838 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  401844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40184a:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  40184c:	4a11      	ldr	r2, [pc, #68]	; (401894 <hsmci_read_word+0x64>)
  40184e:	6813      	ldr	r3, [r2, #0]
  401850:	3304      	adds	r3, #4
  401852:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401854:	4a10      	ldr	r2, [pc, #64]	; (401898 <hsmci_read_word+0x68>)
  401856:	8811      	ldrh	r1, [r2, #0]
  401858:	4a10      	ldr	r2, [pc, #64]	; (40189c <hsmci_read_word+0x6c>)
  40185a:	8812      	ldrh	r2, [r2, #0]
  40185c:	fb02 f201 	mul.w	r2, r2, r1
  401860:	4293      	cmp	r3, r2
  401862:	d312      	bcc.n	40188a <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401864:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401868:	4a09      	ldr	r2, [pc, #36]	; (401890 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  40186a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40186c:	4213      	tst	r3, r2
  40186e:	d108      	bne.n	401882 <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401870:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401874:	d0f9      	beq.n	40186a <hsmci_read_word+0x3a>
	return true;
  401876:	2001      	movs	r0, #1
  401878:	bd08      	pop	{r3, pc}
			hsmci_reset();
  40187a:	4b09      	ldr	r3, [pc, #36]	; (4018a0 <hsmci_read_word+0x70>)
  40187c:	4798      	blx	r3
			return false;
  40187e:	2000      	movs	r0, #0
  401880:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401882:	4b07      	ldr	r3, [pc, #28]	; (4018a0 <hsmci_read_word+0x70>)
  401884:	4798      	blx	r3
			return false;
  401886:	2000      	movs	r0, #0
  401888:	bd08      	pop	{r3, pc}
		return true;
  40188a:	2001      	movs	r0, #1
}
  40188c:	bd08      	pop	{r3, pc}
  40188e:	bf00      	nop
  401890:	c0600000 	.word	0xc0600000
  401894:	20400a18 	.word	0x20400a18
  401898:	20400a12 	.word	0x20400a12
  40189c:	20400a14 	.word	0x20400a14
  4018a0:	0040151d 	.word	0x0040151d

004018a4 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  4018a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4018a8:	b088      	sub	sp, #32
  4018aa:	4604      	mov	r4, r0
  4018ac:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  4018ae:	2220      	movs	r2, #32
  4018b0:	2100      	movs	r1, #0
  4018b2:	4668      	mov	r0, sp
  4018b4:	4b30      	ldr	r3, [pc, #192]	; (401978 <hsmci_start_read_blocks+0xd4>)
  4018b6:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4018b8:	2201      	movs	r2, #1
  4018ba:	4b30      	ldr	r3, [pc, #192]	; (40197c <hsmci_start_read_blocks+0xd8>)
  4018bc:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  4018be:	4b30      	ldr	r3, [pc, #192]	; (401980 <hsmci_start_read_blocks+0xdc>)
  4018c0:	881b      	ldrh	r3, [r3, #0]
  4018c2:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)dest & 3) {
  4018c6:	f014 0f03 	tst.w	r4, #3
  4018ca:	d14a      	bne.n	401962 <hsmci_start_read_blocks+0xbe>
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4018cc:	4b2d      	ldr	r3, [pc, #180]	; (401984 <hsmci_start_read_blocks+0xe0>)
  4018ce:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF1
						| XDMAC_CC_DIF_AHB_IF0
						| XDMAC_CC_SAM_FIXED_AM
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  4018d0:	08ab      	lsrs	r3, r5, #2
  4018d2:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4018d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4018d8:	6853      	ldr	r3, [r2, #4]
  4018da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4018de:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  4018e0:	4b29      	ldr	r3, [pc, #164]	; (401988 <hsmci_start_read_blocks+0xe4>)
  4018e2:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  4018e4:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  4018e6:	466a      	mov	r2, sp
  4018e8:	2100      	movs	r1, #0
  4018ea:	4824      	ldr	r0, [pc, #144]	; (40197c <hsmci_start_read_blocks+0xd8>)
  4018ec:	4b27      	ldr	r3, [pc, #156]	; (40198c <hsmci_start_read_blocks+0xe8>)
  4018ee:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4018f0:	4b27      	ldr	r3, [pc, #156]	; (401990 <hsmci_start_read_blocks+0xec>)
  4018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4018f6:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4018fa:	f003 0007 	and.w	r0, r3, #7
  4018fe:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401900:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401904:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401908:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  40190c:	f3bf 8f4f 	dsb	sy
  401910:	f04f 34ff 	mov.w	r4, #4294967295
  401914:	fa04 f800 	lsl.w	r8, r4, r0
  401918:	fa07 f000 	lsl.w	r0, r7, r0
  40191c:	fa04 f40c 	lsl.w	r4, r4, ip
  401920:	fa0e fc0c 	lsl.w	ip, lr, ip

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  401924:	4e1a      	ldr	r6, [pc, #104]	; (401990 <hsmci_start_read_blocks+0xec>)
         int32_t tmpways = ways;
  401926:	4672      	mov	r2, lr
  401928:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  40192a:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40192e:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  401932:	3a01      	subs	r2, #1
  401934:	4423      	add	r3, r4
  401936:	f1b2 3fff 	cmp.w	r2, #4294967295
  40193a:	d1f6      	bne.n	40192a <hsmci_start_read_blocks+0x86>
        } while(sets--);
  40193c:	3f01      	subs	r7, #1
  40193e:	4440      	add	r0, r8
  401940:	f1b7 3fff 	cmp.w	r7, #4294967295
  401944:	d1ef      	bne.n	401926 <hsmci_start_read_blocks+0x82>
  401946:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40194a:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40194e:	2001      	movs	r0, #1
  401950:	4b0a      	ldr	r3, [pc, #40]	; (40197c <hsmci_start_read_blocks+0xd8>)
  401952:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  401954:	4a0f      	ldr	r2, [pc, #60]	; (401994 <hsmci_start_read_blocks+0xf0>)
  401956:	6813      	ldr	r3, [r2, #0]
  401958:	442b      	add	r3, r5
  40195a:	6013      	str	r3, [r2, #0]
	return true;
}
  40195c:	b008      	add	sp, #32
  40195e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401962:	4b0d      	ldr	r3, [pc, #52]	; (401998 <hsmci_start_read_blocks+0xf4>)
  401964:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  401966:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40196c:	6853      	ldr	r3, [r2, #4]
  40196e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401972:	6053      	str	r3, [r2, #4]
  401974:	e7b4      	b.n	4018e0 <hsmci_start_read_blocks+0x3c>
  401976:	bf00      	nop
  401978:	0040492d 	.word	0x0040492d
  40197c:	40078000 	.word	0x40078000
  401980:	20400a12 	.word	0x20400a12
  401984:	00043001 	.word	0x00043001
  401988:	40000200 	.word	0x40000200
  40198c:	0040239f 	.word	0x0040239f
  401990:	e000ed00 	.word	0xe000ed00
  401994:	20400a18 	.word	0x20400a18
  401998:	00042001 	.word	0x00042001

0040199c <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  40199c:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40199e:	4b12      	ldr	r3, [pc, #72]	; (4019e8 <hsmci_wait_end_of_read_blocks+0x4c>)
  4019a0:	881b      	ldrh	r3, [r3, #0]
  4019a2:	4a12      	ldr	r2, [pc, #72]	; (4019ec <hsmci_wait_end_of_read_blocks+0x50>)
  4019a4:	8812      	ldrh	r2, [r2, #0]
  4019a6:	fb02 f203 	mul.w	r2, r2, r3
  4019aa:	4b11      	ldr	r3, [pc, #68]	; (4019f0 <hsmci_wait_end_of_read_blocks+0x54>)
  4019ac:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  4019ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4019b2:	4910      	ldr	r1, [pc, #64]	; (4019f4 <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4019b4:	4e10      	ldr	r6, [pc, #64]	; (4019f8 <hsmci_wait_end_of_read_blocks+0x5c>)
  4019b6:	e009      	b.n	4019cc <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  4019b8:	4b10      	ldr	r3, [pc, #64]	; (4019fc <hsmci_wait_end_of_read_blocks+0x60>)
  4019ba:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4019bc:	2201      	movs	r2, #1
  4019be:	4b0e      	ldr	r3, [pc, #56]	; (4019f8 <hsmci_wait_end_of_read_blocks+0x5c>)
  4019c0:	621a      	str	r2, [r3, #32]
			return false;
  4019c2:	2000      	movs	r0, #0
  4019c4:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4019c6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4019ca:	d10a      	bne.n	4019e2 <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  4019cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4019ce:	420b      	tst	r3, r1
  4019d0:	d1f2      	bne.n	4019b8 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4019d2:	42a2      	cmp	r2, r4
  4019d4:	d9f7      	bls.n	4019c6 <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4019d6:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  4019d8:	f015 0f01 	tst.w	r5, #1
  4019dc:	d0f3      	beq.n	4019c6 <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  4019de:	2001      	movs	r0, #1
	return true;
}
  4019e0:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  4019e2:	2001      	movs	r0, #1
  4019e4:	bd70      	pop	{r4, r5, r6, pc}
  4019e6:	bf00      	nop
  4019e8:	20400a12 	.word	0x20400a12
  4019ec:	20400a14 	.word	0x20400a14
  4019f0:	20400a18 	.word	0x20400a18
  4019f4:	c0600000 	.word	0xc0600000
  4019f8:	40078000 	.word	0x40078000
  4019fc:	0040151d 	.word	0x0040151d

00401a00 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  401a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a04:	b088      	sub	sp, #32
  401a06:	4604      	mov	r4, r0
  401a08:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  401a0a:	2220      	movs	r2, #32
  401a0c:	2100      	movs	r1, #0
  401a0e:	4668      	mov	r0, sp
  401a10:	4b30      	ldr	r3, [pc, #192]	; (401ad4 <hsmci_start_write_blocks+0xd4>)
  401a12:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401a14:	2201      	movs	r2, #1
  401a16:	4b30      	ldr	r3, [pc, #192]	; (401ad8 <hsmci_start_write_blocks+0xd8>)
  401a18:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  401a1a:	4b30      	ldr	r3, [pc, #192]	; (401adc <hsmci_start_write_blocks+0xdc>)
  401a1c:	881b      	ldrh	r3, [r3, #0]
  401a1e:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)src & 3) {
  401a22:	f014 0f03 	tst.w	r4, #3
  401a26:	d14a      	bne.n	401abe <hsmci_start_write_blocks+0xbe>
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401a28:	4b2d      	ldr	r3, [pc, #180]	; (401ae0 <hsmci_start_write_blocks+0xe0>)
  401a2a:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF0
						| XDMAC_CC_DIF_AHB_IF1
						| XDMAC_CC_SAM_INCREMENTED_AM
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  401a2c:	08ab      	lsrs	r3, r5, #2
  401a2e:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401a34:	6853      	ldr	r3, [r2, #4]
  401a36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401a3a:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)src;
  401a3c:	9401      	str	r4, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  401a3e:	4b29      	ldr	r3, [pc, #164]	; (401ae4 <hsmci_start_write_blocks+0xe4>)
  401a40:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401a42:	466a      	mov	r2, sp
  401a44:	2100      	movs	r1, #0
  401a46:	4824      	ldr	r0, [pc, #144]	; (401ad8 <hsmci_start_write_blocks+0xd8>)
  401a48:	4b27      	ldr	r3, [pc, #156]	; (401ae8 <hsmci_start_write_blocks+0xe8>)
  401a4a:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  401a4c:	4b27      	ldr	r3, [pc, #156]	; (401aec <hsmci_start_write_blocks+0xec>)
  401a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401a52:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401a56:	f003 0007 	and.w	r0, r3, #7
  401a5a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401a5c:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401a60:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401a64:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  401a68:	f3bf 8f4f 	dsb	sy
  401a6c:	f04f 34ff 	mov.w	r4, #4294967295
  401a70:	fa04 f800 	lsl.w	r8, r4, r0
  401a74:	fa07 f000 	lsl.w	r0, r7, r0
  401a78:	fa04 f40c 	lsl.w	r4, r4, ip
  401a7c:	fa0e fc0c 	lsl.w	ip, lr, ip
              SCB->DCCISW = sw;
  401a80:	4e1a      	ldr	r6, [pc, #104]	; (401aec <hsmci_start_write_blocks+0xec>)
         int32_t tmpways = ways;
  401a82:	4672      	mov	r2, lr
  401a84:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  401a86:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  401a8a:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  401a8e:	3a01      	subs	r2, #1
  401a90:	4423      	add	r3, r4
  401a92:	f1b2 3fff 	cmp.w	r2, #4294967295
  401a96:	d1f6      	bne.n	401a86 <hsmci_start_write_blocks+0x86>
        } while(sets--);
  401a98:	3f01      	subs	r7, #1
  401a9a:	4440      	add	r0, r8
  401a9c:	f1b7 3fff 	cmp.w	r7, #4294967295
  401aa0:	d1ef      	bne.n	401a82 <hsmci_start_write_blocks+0x82>
  401aa2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401aa6:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401aaa:	2001      	movs	r0, #1
  401aac:	4b0a      	ldr	r3, [pc, #40]	; (401ad8 <hsmci_start_write_blocks+0xd8>)
  401aae:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  401ab0:	4a0f      	ldr	r2, [pc, #60]	; (401af0 <hsmci_start_write_blocks+0xf0>)
  401ab2:	6813      	ldr	r3, [r2, #0]
  401ab4:	442b      	add	r3, r5
  401ab6:	6013      	str	r3, [r2, #0]
	return true;
}
  401ab8:	b008      	add	sp, #32
  401aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401abe:	4b0d      	ldr	r3, [pc, #52]	; (401af4 <hsmci_start_write_blocks+0xf4>)
  401ac0:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  401ac2:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401ac8:	6853      	ldr	r3, [r2, #4]
  401aca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401ace:	6053      	str	r3, [r2, #4]
  401ad0:	e7b4      	b.n	401a3c <hsmci_start_write_blocks+0x3c>
  401ad2:	bf00      	nop
  401ad4:	0040492d 	.word	0x0040492d
  401ad8:	40078000 	.word	0x40078000
  401adc:	20400a12 	.word	0x20400a12
  401ae0:	00015011 	.word	0x00015011
  401ae4:	40000200 	.word	0x40000200
  401ae8:	0040239f 	.word	0x0040239f
  401aec:	e000ed00 	.word	0xe000ed00
  401af0:	20400a18 	.word	0x20400a18
  401af4:	00014011 	.word	0x00014011

00401af8 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  401af8:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401afa:	4b12      	ldr	r3, [pc, #72]	; (401b44 <hsmci_wait_end_of_write_blocks+0x4c>)
  401afc:	881b      	ldrh	r3, [r3, #0]
  401afe:	4a12      	ldr	r2, [pc, #72]	; (401b48 <hsmci_wait_end_of_write_blocks+0x50>)
  401b00:	8812      	ldrh	r2, [r2, #0]
  401b02:	fb02 f203 	mul.w	r2, r2, r3
  401b06:	4b11      	ldr	r3, [pc, #68]	; (401b4c <hsmci_wait_end_of_write_blocks+0x54>)
  401b08:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  401b0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401b0e:	4910      	ldr	r1, [pc, #64]	; (401b50 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401b10:	4e10      	ldr	r6, [pc, #64]	; (401b54 <hsmci_wait_end_of_write_blocks+0x5c>)
  401b12:	e009      	b.n	401b28 <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  401b14:	4b10      	ldr	r3, [pc, #64]	; (401b58 <hsmci_wait_end_of_write_blocks+0x60>)
  401b16:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401b18:	2201      	movs	r2, #1
  401b1a:	4b0e      	ldr	r3, [pc, #56]	; (401b54 <hsmci_wait_end_of_write_blocks+0x5c>)
  401b1c:	621a      	str	r2, [r3, #32]
			return false;
  401b1e:	2000      	movs	r0, #0
  401b20:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401b22:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401b26:	d10a      	bne.n	401b3e <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  401b28:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401b2a:	420b      	tst	r3, r1
  401b2c:	d1f2      	bne.n	401b14 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401b2e:	42a2      	cmp	r2, r4
  401b30:	d9f7      	bls.n	401b22 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401b32:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401b34:	f015 0f01 	tst.w	r5, #1
  401b38:	d0f3      	beq.n	401b22 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  401b3a:	2001      	movs	r0, #1

	return true;
}
  401b3c:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  401b3e:	2001      	movs	r0, #1
  401b40:	bd70      	pop	{r4, r5, r6, pc}
  401b42:	bf00      	nop
  401b44:	20400a12 	.word	0x20400a12
  401b48:	20400a14 	.word	0x20400a14
  401b4c:	20400a18 	.word	0x20400a18
  401b50:	c0600000 	.word	0xc0600000
  401b54:	40078000 	.word	0x40078000
  401b58:	0040151d 	.word	0x0040151d

00401b5c <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401b5c:	4b01      	ldr	r3, [pc, #4]	; (401b64 <mpu_enable+0x8>)
  401b5e:	6058      	str	r0, [r3, #4]
  401b60:	4770      	bx	lr
  401b62:	bf00      	nop
  401b64:	e000ed90 	.word	0xe000ed90

00401b68 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401b68:	4b01      	ldr	r3, [pc, #4]	; (401b70 <mpu_set_region+0x8>)
  401b6a:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401b6c:	6119      	str	r1, [r3, #16]
  401b6e:	4770      	bx	lr
  401b70:	e000ed90 	.word	0xe000ed90

00401b74 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401b74:	2820      	cmp	r0, #32
  401b76:	d909      	bls.n	401b8c <mpu_cal_mpu_region_size+0x18>
  401b78:	2304      	movs	r3, #4
  401b7a:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  401b7c:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  401b7e:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401b80:	4290      	cmp	r0, r2
  401b82:	d901      	bls.n	401b88 <mpu_cal_mpu_region_size+0x14>
  401b84:	2b1e      	cmp	r3, #30
  401b86:	d9f9      	bls.n	401b7c <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  401b88:	0058      	lsls	r0, r3, #1
  401b8a:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  401b8c:	2304      	movs	r3, #4
  401b8e:	e7fb      	b.n	401b88 <mpu_cal_mpu_region_size+0x14>

00401b90 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401b90:	6301      	str	r1, [r0, #48]	; 0x30
  401b92:	4770      	bx	lr

00401b94 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401b94:	6341      	str	r1, [r0, #52]	; 0x34
  401b96:	4770      	bx	lr

00401b98 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401b98:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401b9a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401b9e:	d03a      	beq.n	401c16 <pio_set_peripheral+0x7e>
  401ba0:	d813      	bhi.n	401bca <pio_set_peripheral+0x32>
  401ba2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401ba6:	d025      	beq.n	401bf4 <pio_set_peripheral+0x5c>
  401ba8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401bac:	d10a      	bne.n	401bc4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bae:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401bb0:	4313      	orrs	r3, r2
  401bb2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401bb4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401bb6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401bb8:	400b      	ands	r3, r1
  401bba:	ea23 0302 	bic.w	r3, r3, r2
  401bbe:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401bc0:	6042      	str	r2, [r0, #4]
  401bc2:	4770      	bx	lr
	switch (ul_type) {
  401bc4:	2900      	cmp	r1, #0
  401bc6:	d1fb      	bne.n	401bc0 <pio_set_peripheral+0x28>
  401bc8:	4770      	bx	lr
  401bca:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401bce:	d021      	beq.n	401c14 <pio_set_peripheral+0x7c>
  401bd0:	d809      	bhi.n	401be6 <pio_set_peripheral+0x4e>
  401bd2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401bd6:	d1f3      	bne.n	401bc0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bd8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401bda:	4313      	orrs	r3, r2
  401bdc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401bde:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401be0:	4313      	orrs	r3, r2
  401be2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401be4:	e7ec      	b.n	401bc0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401be6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401bea:	d013      	beq.n	401c14 <pio_set_peripheral+0x7c>
  401bec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401bf0:	d010      	beq.n	401c14 <pio_set_peripheral+0x7c>
  401bf2:	e7e5      	b.n	401bc0 <pio_set_peripheral+0x28>
{
  401bf4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bf6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401bf8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401bfa:	43d3      	mvns	r3, r2
  401bfc:	4021      	ands	r1, r4
  401bfe:	461c      	mov	r4, r3
  401c00:	4019      	ands	r1, r3
  401c02:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c04:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c06:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401c08:	400b      	ands	r3, r1
  401c0a:	4023      	ands	r3, r4
  401c0c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401c0e:	6042      	str	r2, [r0, #4]
}
  401c10:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c14:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c16:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c18:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401c1a:	400b      	ands	r3, r1
  401c1c:	ea23 0302 	bic.w	r3, r3, r2
  401c20:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401c22:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c24:	4313      	orrs	r3, r2
  401c26:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c28:	e7ca      	b.n	401bc0 <pio_set_peripheral+0x28>

00401c2a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401c2a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c2c:	f012 0f01 	tst.w	r2, #1
  401c30:	d10d      	bne.n	401c4e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401c32:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c34:	f012 0f0a 	tst.w	r2, #10
  401c38:	d00b      	beq.n	401c52 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401c3a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401c3c:	f012 0f02 	tst.w	r2, #2
  401c40:	d109      	bne.n	401c56 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401c42:	f012 0f08 	tst.w	r2, #8
  401c46:	d008      	beq.n	401c5a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401c48:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401c4c:	e005      	b.n	401c5a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401c4e:	6641      	str	r1, [r0, #100]	; 0x64
  401c50:	e7f0      	b.n	401c34 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401c52:	6241      	str	r1, [r0, #36]	; 0x24
  401c54:	e7f2      	b.n	401c3c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401c56:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401c5a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401c5c:	6001      	str	r1, [r0, #0]
  401c5e:	4770      	bx	lr

00401c60 <pio_set_output>:
{
  401c60:	b410      	push	{r4}
  401c62:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401c64:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401c66:	b94c      	cbnz	r4, 401c7c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401c68:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401c6a:	b14b      	cbz	r3, 401c80 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401c6c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401c6e:	b94a      	cbnz	r2, 401c84 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401c70:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401c72:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401c74:	6001      	str	r1, [r0, #0]
}
  401c76:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c7a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401c7c:	6641      	str	r1, [r0, #100]	; 0x64
  401c7e:	e7f4      	b.n	401c6a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401c80:	6541      	str	r1, [r0, #84]	; 0x54
  401c82:	e7f4      	b.n	401c6e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401c84:	6301      	str	r1, [r0, #48]	; 0x30
  401c86:	e7f4      	b.n	401c72 <pio_set_output+0x12>

00401c88 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  401c88:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401c8a:	420b      	tst	r3, r1
}
  401c8c:	bf14      	ite	ne
  401c8e:	2001      	movne	r0, #1
  401c90:	2000      	moveq	r0, #0
  401c92:	4770      	bx	lr

00401c94 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  401c94:	f012 0f10 	tst.w	r2, #16
  401c98:	d012      	beq.n	401cc0 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  401c9a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401c9e:	f012 0f20 	tst.w	r2, #32
  401ca2:	d007      	beq.n	401cb4 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  401ca4:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  401ca8:	f012 0f40 	tst.w	r2, #64	; 0x40
  401cac:	d005      	beq.n	401cba <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  401cae:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  401cb2:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  401cb4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  401cb8:	e7f6      	b.n	401ca8 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  401cba:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  401cbe:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401cc0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  401cc4:	4770      	bx	lr

00401cc6 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  401cc6:	6401      	str	r1, [r0, #64]	; 0x40
  401cc8:	4770      	bx	lr

00401cca <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401cca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401ccc:	4770      	bx	lr

00401cce <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401cce:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401cd0:	4770      	bx	lr
	...

00401cd4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401cd8:	4604      	mov	r4, r0
  401cda:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401cdc:	4b0e      	ldr	r3, [pc, #56]	; (401d18 <pio_handler_process+0x44>)
  401cde:	4798      	blx	r3
  401ce0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401ce2:	4620      	mov	r0, r4
  401ce4:	4b0d      	ldr	r3, [pc, #52]	; (401d1c <pio_handler_process+0x48>)
  401ce6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401ce8:	4005      	ands	r5, r0
  401cea:	d013      	beq.n	401d14 <pio_handler_process+0x40>
  401cec:	4c0c      	ldr	r4, [pc, #48]	; (401d20 <pio_handler_process+0x4c>)
  401cee:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401cf2:	e003      	b.n	401cfc <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401cf4:	42b4      	cmp	r4, r6
  401cf6:	d00d      	beq.n	401d14 <pio_handler_process+0x40>
  401cf8:	3410      	adds	r4, #16
		while (status != 0) {
  401cfa:	b15d      	cbz	r5, 401d14 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401cfc:	6820      	ldr	r0, [r4, #0]
  401cfe:	4540      	cmp	r0, r8
  401d00:	d1f8      	bne.n	401cf4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401d02:	6861      	ldr	r1, [r4, #4]
  401d04:	4229      	tst	r1, r5
  401d06:	d0f5      	beq.n	401cf4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401d08:	68e3      	ldr	r3, [r4, #12]
  401d0a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401d0c:	6863      	ldr	r3, [r4, #4]
  401d0e:	ea25 0503 	bic.w	r5, r5, r3
  401d12:	e7ef      	b.n	401cf4 <pio_handler_process+0x20>
  401d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401d18:	00401ccb 	.word	0x00401ccb
  401d1c:	00401ccf 	.word	0x00401ccf
  401d20:	20400a1c 	.word	0x20400a1c

00401d24 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401d26:	4c18      	ldr	r4, [pc, #96]	; (401d88 <pio_handler_set+0x64>)
  401d28:	6826      	ldr	r6, [r4, #0]
  401d2a:	2e06      	cmp	r6, #6
  401d2c:	d82a      	bhi.n	401d84 <pio_handler_set+0x60>
  401d2e:	f04f 0c00 	mov.w	ip, #0
  401d32:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401d34:	4f15      	ldr	r7, [pc, #84]	; (401d8c <pio_handler_set+0x68>)
  401d36:	e004      	b.n	401d42 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401d38:	3401      	adds	r4, #1
  401d3a:	b2e4      	uxtb	r4, r4
  401d3c:	46a4      	mov	ip, r4
  401d3e:	42a6      	cmp	r6, r4
  401d40:	d309      	bcc.n	401d56 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  401d42:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401d44:	0125      	lsls	r5, r4, #4
  401d46:	597d      	ldr	r5, [r7, r5]
  401d48:	428d      	cmp	r5, r1
  401d4a:	d1f5      	bne.n	401d38 <pio_handler_set+0x14>
  401d4c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  401d50:	686d      	ldr	r5, [r5, #4]
  401d52:	4295      	cmp	r5, r2
  401d54:	d1f0      	bne.n	401d38 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401d56:	4d0d      	ldr	r5, [pc, #52]	; (401d8c <pio_handler_set+0x68>)
  401d58:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401d5c:	eb05 040e 	add.w	r4, r5, lr
  401d60:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401d64:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401d66:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401d68:	9906      	ldr	r1, [sp, #24]
  401d6a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401d6c:	3601      	adds	r6, #1
  401d6e:	4566      	cmp	r6, ip
  401d70:	d005      	beq.n	401d7e <pio_handler_set+0x5a>
  401d72:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401d74:	461a      	mov	r2, r3
  401d76:	4b06      	ldr	r3, [pc, #24]	; (401d90 <pio_handler_set+0x6c>)
  401d78:	4798      	blx	r3

	return 0;
  401d7a:	2000      	movs	r0, #0
  401d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  401d7e:	4902      	ldr	r1, [pc, #8]	; (401d88 <pio_handler_set+0x64>)
  401d80:	600e      	str	r6, [r1, #0]
  401d82:	e7f6      	b.n	401d72 <pio_handler_set+0x4e>
		return 1;
  401d84:	2001      	movs	r0, #1
}
  401d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d88:	20400a8c 	.word	0x20400a8c
  401d8c:	20400a1c 	.word	0x20400a1c
  401d90:	00401c95 	.word	0x00401c95

00401d94 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401d94:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401d96:	210a      	movs	r1, #10
  401d98:	4801      	ldr	r0, [pc, #4]	; (401da0 <PIOA_Handler+0xc>)
  401d9a:	4b02      	ldr	r3, [pc, #8]	; (401da4 <PIOA_Handler+0x10>)
  401d9c:	4798      	blx	r3
  401d9e:	bd08      	pop	{r3, pc}
  401da0:	400e0e00 	.word	0x400e0e00
  401da4:	00401cd5 	.word	0x00401cd5

00401da8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401da8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401daa:	210b      	movs	r1, #11
  401dac:	4801      	ldr	r0, [pc, #4]	; (401db4 <PIOB_Handler+0xc>)
  401dae:	4b02      	ldr	r3, [pc, #8]	; (401db8 <PIOB_Handler+0x10>)
  401db0:	4798      	blx	r3
  401db2:	bd08      	pop	{r3, pc}
  401db4:	400e1000 	.word	0x400e1000
  401db8:	00401cd5 	.word	0x00401cd5

00401dbc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401dbc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401dbe:	210c      	movs	r1, #12
  401dc0:	4801      	ldr	r0, [pc, #4]	; (401dc8 <PIOC_Handler+0xc>)
  401dc2:	4b02      	ldr	r3, [pc, #8]	; (401dcc <PIOC_Handler+0x10>)
  401dc4:	4798      	blx	r3
  401dc6:	bd08      	pop	{r3, pc}
  401dc8:	400e1200 	.word	0x400e1200
  401dcc:	00401cd5 	.word	0x00401cd5

00401dd0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401dd0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401dd2:	2110      	movs	r1, #16
  401dd4:	4801      	ldr	r0, [pc, #4]	; (401ddc <PIOD_Handler+0xc>)
  401dd6:	4b02      	ldr	r3, [pc, #8]	; (401de0 <PIOD_Handler+0x10>)
  401dd8:	4798      	blx	r3
  401dda:	bd08      	pop	{r3, pc}
  401ddc:	400e1400 	.word	0x400e1400
  401de0:	00401cd5 	.word	0x00401cd5

00401de4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401de4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401de6:	2111      	movs	r1, #17
  401de8:	4801      	ldr	r0, [pc, #4]	; (401df0 <PIOE_Handler+0xc>)
  401dea:	4b02      	ldr	r3, [pc, #8]	; (401df4 <PIOE_Handler+0x10>)
  401dec:	4798      	blx	r3
  401dee:	bd08      	pop	{r3, pc}
  401df0:	400e1600 	.word	0x400e1600
  401df4:	00401cd5 	.word	0x00401cd5

00401df8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401df8:	2803      	cmp	r0, #3
  401dfa:	d011      	beq.n	401e20 <pmc_mck_set_division+0x28>
  401dfc:	2804      	cmp	r0, #4
  401dfe:	d012      	beq.n	401e26 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401e00:	2802      	cmp	r0, #2
  401e02:	bf0c      	ite	eq
  401e04:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401e08:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401e0a:	4a08      	ldr	r2, [pc, #32]	; (401e2c <pmc_mck_set_division+0x34>)
  401e0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401e12:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401e14:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401e16:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e18:	f013 0f08 	tst.w	r3, #8
  401e1c:	d0fb      	beq.n	401e16 <pmc_mck_set_division+0x1e>
}
  401e1e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401e20:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401e24:	e7f1      	b.n	401e0a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401e26:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401e2a:	e7ee      	b.n	401e0a <pmc_mck_set_division+0x12>
  401e2c:	400e0600 	.word	0x400e0600

00401e30 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401e30:	4a17      	ldr	r2, [pc, #92]	; (401e90 <pmc_switch_mck_to_pllack+0x60>)
  401e32:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401e38:	4318      	orrs	r0, r3
  401e3a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e3c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e3e:	f013 0f08 	tst.w	r3, #8
  401e42:	d10a      	bne.n	401e5a <pmc_switch_mck_to_pllack+0x2a>
  401e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401e48:	4911      	ldr	r1, [pc, #68]	; (401e90 <pmc_switch_mck_to_pllack+0x60>)
  401e4a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401e4c:	f012 0f08 	tst.w	r2, #8
  401e50:	d103      	bne.n	401e5a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e52:	3b01      	subs	r3, #1
  401e54:	d1f9      	bne.n	401e4a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401e56:	2001      	movs	r0, #1
  401e58:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401e5a:	4a0d      	ldr	r2, [pc, #52]	; (401e90 <pmc_switch_mck_to_pllack+0x60>)
  401e5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e5e:	f023 0303 	bic.w	r3, r3, #3
  401e62:	f043 0302 	orr.w	r3, r3, #2
  401e66:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e68:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e6a:	f013 0f08 	tst.w	r3, #8
  401e6e:	d10a      	bne.n	401e86 <pmc_switch_mck_to_pllack+0x56>
  401e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401e74:	4906      	ldr	r1, [pc, #24]	; (401e90 <pmc_switch_mck_to_pllack+0x60>)
  401e76:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401e78:	f012 0f08 	tst.w	r2, #8
  401e7c:	d105      	bne.n	401e8a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e7e:	3b01      	subs	r3, #1
  401e80:	d1f9      	bne.n	401e76 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401e82:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401e84:	4770      	bx	lr
	return 0;
  401e86:	2000      	movs	r0, #0
  401e88:	4770      	bx	lr
  401e8a:	2000      	movs	r0, #0
  401e8c:	4770      	bx	lr
  401e8e:	bf00      	nop
  401e90:	400e0600 	.word	0x400e0600

00401e94 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401e94:	b9a0      	cbnz	r0, 401ec0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401e96:	480e      	ldr	r0, [pc, #56]	; (401ed0 <pmc_switch_mainck_to_xtal+0x3c>)
  401e98:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401e9a:	0209      	lsls	r1, r1, #8
  401e9c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401e9e:	4a0d      	ldr	r2, [pc, #52]	; (401ed4 <pmc_switch_mainck_to_xtal+0x40>)
  401ea0:	401a      	ands	r2, r3
  401ea2:	4b0d      	ldr	r3, [pc, #52]	; (401ed8 <pmc_switch_mainck_to_xtal+0x44>)
  401ea4:	4313      	orrs	r3, r2
  401ea6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ea8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401eaa:	4602      	mov	r2, r0
  401eac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401eae:	f013 0f01 	tst.w	r3, #1
  401eb2:	d0fb      	beq.n	401eac <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401eb4:	4a06      	ldr	r2, [pc, #24]	; (401ed0 <pmc_switch_mainck_to_xtal+0x3c>)
  401eb6:	6a11      	ldr	r1, [r2, #32]
  401eb8:	4b08      	ldr	r3, [pc, #32]	; (401edc <pmc_switch_mainck_to_xtal+0x48>)
  401eba:	430b      	orrs	r3, r1
  401ebc:	6213      	str	r3, [r2, #32]
  401ebe:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ec0:	4903      	ldr	r1, [pc, #12]	; (401ed0 <pmc_switch_mainck_to_xtal+0x3c>)
  401ec2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401ec4:	4a06      	ldr	r2, [pc, #24]	; (401ee0 <pmc_switch_mainck_to_xtal+0x4c>)
  401ec6:	401a      	ands	r2, r3
  401ec8:	4b06      	ldr	r3, [pc, #24]	; (401ee4 <pmc_switch_mainck_to_xtal+0x50>)
  401eca:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ecc:	620b      	str	r3, [r1, #32]
  401ece:	4770      	bx	lr
  401ed0:	400e0600 	.word	0x400e0600
  401ed4:	ffc8fffc 	.word	0xffc8fffc
  401ed8:	00370001 	.word	0x00370001
  401edc:	01370000 	.word	0x01370000
  401ee0:	fec8fffc 	.word	0xfec8fffc
  401ee4:	01370002 	.word	0x01370002

00401ee8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401ee8:	4b02      	ldr	r3, [pc, #8]	; (401ef4 <pmc_osc_is_ready_mainck+0xc>)
  401eea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401eec:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401ef0:	4770      	bx	lr
  401ef2:	bf00      	nop
  401ef4:	400e0600 	.word	0x400e0600

00401ef8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401ef8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401efc:	4b01      	ldr	r3, [pc, #4]	; (401f04 <pmc_disable_pllack+0xc>)
  401efe:	629a      	str	r2, [r3, #40]	; 0x28
  401f00:	4770      	bx	lr
  401f02:	bf00      	nop
  401f04:	400e0600 	.word	0x400e0600

00401f08 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401f08:	4b02      	ldr	r3, [pc, #8]	; (401f14 <pmc_is_locked_pllack+0xc>)
  401f0a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f0c:	f000 0002 	and.w	r0, r0, #2
  401f10:	4770      	bx	lr
  401f12:	bf00      	nop
  401f14:	400e0600 	.word	0x400e0600

00401f18 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401f18:	283f      	cmp	r0, #63	; 0x3f
  401f1a:	d81e      	bhi.n	401f5a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401f1c:	281f      	cmp	r0, #31
  401f1e:	d80c      	bhi.n	401f3a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401f20:	4b11      	ldr	r3, [pc, #68]	; (401f68 <pmc_enable_periph_clk+0x50>)
  401f22:	699a      	ldr	r2, [r3, #24]
  401f24:	2301      	movs	r3, #1
  401f26:	4083      	lsls	r3, r0
  401f28:	4393      	bics	r3, r2
  401f2a:	d018      	beq.n	401f5e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401f2c:	2301      	movs	r3, #1
  401f2e:	fa03 f000 	lsl.w	r0, r3, r0
  401f32:	4b0d      	ldr	r3, [pc, #52]	; (401f68 <pmc_enable_periph_clk+0x50>)
  401f34:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401f36:	2000      	movs	r0, #0
  401f38:	4770      	bx	lr
		ul_id -= 32;
  401f3a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401f3c:	4b0a      	ldr	r3, [pc, #40]	; (401f68 <pmc_enable_periph_clk+0x50>)
  401f3e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401f42:	2301      	movs	r3, #1
  401f44:	4083      	lsls	r3, r0
  401f46:	4393      	bics	r3, r2
  401f48:	d00b      	beq.n	401f62 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401f4a:	2301      	movs	r3, #1
  401f4c:	fa03 f000 	lsl.w	r0, r3, r0
  401f50:	4b05      	ldr	r3, [pc, #20]	; (401f68 <pmc_enable_periph_clk+0x50>)
  401f52:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401f56:	2000      	movs	r0, #0
  401f58:	4770      	bx	lr
		return 1;
  401f5a:	2001      	movs	r0, #1
  401f5c:	4770      	bx	lr
	return 0;
  401f5e:	2000      	movs	r0, #0
  401f60:	4770      	bx	lr
  401f62:	2000      	movs	r0, #0
}
  401f64:	4770      	bx	lr
  401f66:	bf00      	nop
  401f68:	400e0600 	.word	0x400e0600

00401f6c <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401f6c:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401f6e:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401f70:	6884      	ldr	r4, [r0, #8]
  401f72:	42a5      	cmp	r5, r4
  401f74:	d003      	beq.n	401f7e <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  401f76:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401f78:	6884      	ldr	r4, [r0, #8]
  401f7a:	42ac      	cmp	r4, r5
  401f7c:	d1fb      	bne.n	401f76 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  401f7e:	b161      	cbz	r1, 401f9a <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401f80:	f3c4 5001 	ubfx	r0, r4, #20, #2
  401f84:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401f88:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401f8c:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401f90:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  401f94:	bf18      	it	ne
  401f96:	300c      	addne	r0, #12
  401f98:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  401f9a:	b142      	cbz	r2, 401fae <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  401f9c:	f3c4 3102 	ubfx	r1, r4, #12, #3
  401fa0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401fa4:	f3c4 2003 	ubfx	r0, r4, #8, #4
  401fa8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401fac:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  401fae:	b143      	cbz	r3, 401fc2 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401fb0:	f3c4 1202 	ubfx	r2, r4, #4, #3
  401fb4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401fb8:	f004 040f 	and.w	r4, r4, #15
  401fbc:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  401fc0:	601c      	str	r4, [r3, #0]
	}
}
  401fc2:	bc30      	pop	{r4, r5}
  401fc4:	4770      	bx	lr

00401fc6 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  401fc6:	b4f0      	push	{r4, r5, r6, r7}
  401fc8:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  401fca:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401fcc:	68c4      	ldr	r4, [r0, #12]
  401fce:	42a5      	cmp	r5, r4
  401fd0:	d003      	beq.n	401fda <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  401fd2:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401fd4:	68c4      	ldr	r4, [r0, #12]
  401fd6:	42ac      	cmp	r4, r5
  401fd8:	d1fb      	bne.n	401fd2 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  401fda:	b199      	cbz	r1, 402004 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401fdc:	f3c4 3003 	ubfx	r0, r4, #12, #4
  401fe0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401fe4:	f3c4 2703 	ubfx	r7, r4, #8, #4
  401fe8:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401fec:	f3c4 1002 	ubfx	r0, r4, #4, #3
  401ff0:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401ff4:	f004 000f 	and.w	r0, r4, #15
  401ff8:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401ffc:	2564      	movs	r5, #100	; 0x64
  401ffe:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  402002:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  402004:	b142      	cbz	r2, 402018 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402006:	f3c4 5000 	ubfx	r0, r4, #20, #1
  40200a:	0081      	lsls	r1, r0, #2
  40200c:	4408      	add	r0, r1
  40200e:	f3c4 4103 	ubfx	r1, r4, #16, #4
  402012:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  402016:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  402018:	b143      	cbz	r3, 40202c <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40201a:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40201e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402022:	f3c4 6103 	ubfx	r1, r4, #24, #4
  402026:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  40202a:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  40202c:	b116      	cbz	r6, 402034 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  40202e:	f3c4 5442 	ubfx	r4, r4, #21, #3
  402032:	6034      	str	r4, [r6, #0]
	}
}
  402034:	bcf0      	pop	{r4, r5, r6, r7}
  402036:	4770      	bx	lr

00402038 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  402038:	4b28      	ldr	r3, [pc, #160]	; (4020dc <twihs_set_speed+0xa4>)
  40203a:	4299      	cmp	r1, r3
  40203c:	d84b      	bhi.n	4020d6 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40203e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  402042:	4299      	cmp	r1, r3
  402044:	d92d      	bls.n	4020a2 <twihs_set_speed+0x6a>
{
  402046:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402048:	4c25      	ldr	r4, [pc, #148]	; (4020e0 <twihs_set_speed+0xa8>)
  40204a:	fba4 3402 	umull	r3, r4, r4, r2
  40204e:	0ba4      	lsrs	r4, r4, #14
  402050:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402052:	4b24      	ldr	r3, [pc, #144]	; (4020e4 <twihs_set_speed+0xac>)
  402054:	440b      	add	r3, r1
  402056:	009b      	lsls	r3, r3, #2
  402058:	fbb2 f2f3 	udiv	r2, r2, r3
  40205c:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40205e:	2cff      	cmp	r4, #255	; 0xff
  402060:	d91d      	bls.n	40209e <twihs_set_speed+0x66>
  402062:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  402064:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  402066:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402068:	2cff      	cmp	r4, #255	; 0xff
  40206a:	d901      	bls.n	402070 <twihs_set_speed+0x38>
  40206c:	2906      	cmp	r1, #6
  40206e:	d9f9      	bls.n	402064 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402070:	2aff      	cmp	r2, #255	; 0xff
  402072:	d907      	bls.n	402084 <twihs_set_speed+0x4c>
  402074:	2906      	cmp	r1, #6
  402076:	d805      	bhi.n	402084 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  402078:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  40207a:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40207c:	2aff      	cmp	r2, #255	; 0xff
  40207e:	d901      	bls.n	402084 <twihs_set_speed+0x4c>
  402080:	2906      	cmp	r1, #6
  402082:	d9f9      	bls.n	402078 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  402084:	0213      	lsls	r3, r2, #8
  402086:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  402088:	0409      	lsls	r1, r1, #16
  40208a:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40208e:	430b      	orrs	r3, r1
  402090:	b2e4      	uxtb	r4, r4
  402092:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  402094:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  402096:	2000      	movs	r0, #0
}
  402098:	f85d 4b04 	ldr.w	r4, [sp], #4
  40209c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40209e:	2100      	movs	r1, #0
  4020a0:	e7e6      	b.n	402070 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4020a2:	0049      	lsls	r1, r1, #1
  4020a4:	fbb2 f2f1 	udiv	r2, r2, r1
  4020a8:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4020aa:	2aff      	cmp	r2, #255	; 0xff
  4020ac:	d911      	bls.n	4020d2 <twihs_set_speed+0x9a>
  4020ae:	2300      	movs	r3, #0
			ckdiv++;
  4020b0:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4020b2:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4020b4:	2aff      	cmp	r2, #255	; 0xff
  4020b6:	d901      	bls.n	4020bc <twihs_set_speed+0x84>
  4020b8:	2b06      	cmp	r3, #6
  4020ba:	d9f9      	bls.n	4020b0 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4020bc:	0211      	lsls	r1, r2, #8
  4020be:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  4020c0:	041b      	lsls	r3, r3, #16
  4020c2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4020c6:	430b      	orrs	r3, r1
  4020c8:	b2d2      	uxtb	r2, r2
  4020ca:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  4020cc:	6102      	str	r2, [r0, #16]
	return PASS;
  4020ce:	2000      	movs	r0, #0
  4020d0:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4020d2:	2300      	movs	r3, #0
  4020d4:	e7f2      	b.n	4020bc <twihs_set_speed+0x84>
		return FAIL;
  4020d6:	2001      	movs	r0, #1
  4020d8:	4770      	bx	lr
  4020da:	bf00      	nop
  4020dc:	00061a80 	.word	0x00061a80
  4020e0:	057619f1 	.word	0x057619f1
  4020e4:	3ffd1200 	.word	0x3ffd1200

004020e8 <twihs_master_init>:
{
  4020e8:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  4020ea:	f04f 32ff 	mov.w	r2, #4294967295
  4020ee:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  4020f0:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4020f2:	2280      	movs	r2, #128	; 0x80
  4020f4:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  4020f6:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4020f8:	2208      	movs	r2, #8
  4020fa:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4020fc:	2220      	movs	r2, #32
  4020fe:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402100:	2204      	movs	r2, #4
  402102:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  402104:	680a      	ldr	r2, [r1, #0]
  402106:	6849      	ldr	r1, [r1, #4]
  402108:	4b03      	ldr	r3, [pc, #12]	; (402118 <twihs_master_init+0x30>)
  40210a:	4798      	blx	r3
}
  40210c:	2801      	cmp	r0, #1
  40210e:	bf14      	ite	ne
  402110:	2000      	movne	r0, #0
  402112:	2001      	moveq	r0, #1
  402114:	bd08      	pop	{r3, pc}
  402116:	bf00      	nop
  402118:	00402039 	.word	0x00402039

0040211c <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  40211c:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  40211e:	2a00      	cmp	r2, #0
  402120:	d04c      	beq.n	4021bc <twihs_master_read+0xa0>
{
  402122:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  402124:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  402126:	2600      	movs	r6, #0
  402128:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40212a:	684b      	ldr	r3, [r1, #4]
  40212c:	021b      	lsls	r3, r3, #8
  40212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  402132:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402136:	7c0d      	ldrb	r5, [r1, #16]
  402138:	042d      	lsls	r5, r5, #16
  40213a:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  40213e:	432b      	orrs	r3, r5
  402140:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  402142:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402144:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  402146:	b15d      	cbz	r5, 402160 <twihs_master_read+0x44>
	val = addr[0];
  402148:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  40214a:	2d01      	cmp	r5, #1
  40214c:	dd02      	ble.n	402154 <twihs_master_read+0x38>
		val |= addr[1];
  40214e:	784e      	ldrb	r6, [r1, #1]
  402150:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  402154:	2d02      	cmp	r5, #2
  402156:	dd04      	ble.n	402162 <twihs_master_read+0x46>
		val |= addr[2];
  402158:	7889      	ldrb	r1, [r1, #2]
  40215a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  40215e:	e000      	b.n	402162 <twihs_master_read+0x46>
		return 0;
  402160:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402162:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  402164:	2301      	movs	r3, #1
  402166:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402168:	2502      	movs	r5, #2
  40216a:	e012      	b.n	402192 <twihs_master_read+0x76>
  40216c:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40216e:	f013 0f02 	tst.w	r3, #2
  402172:	d01b      	beq.n	4021ac <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  402174:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402176:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402178:	6a03      	ldr	r3, [r0, #32]
  40217a:	f013 0f01 	tst.w	r3, #1
  40217e:	d0fb      	beq.n	402178 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  402180:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  402182:	2000      	movs	r0, #0
}
  402184:	bc70      	pop	{r4, r5, r6}
  402186:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  402188:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40218a:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  40218e:	3a01      	subs	r2, #1
  402190:	d0f2      	beq.n	402178 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  402192:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402194:	f413 7f80 	tst.w	r3, #256	; 0x100
  402198:	d114      	bne.n	4021c4 <twihs_master_read+0xa8>
  40219a:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  40219e:	2a01      	cmp	r2, #1
  4021a0:	d0e4      	beq.n	40216c <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  4021a2:	f013 0f02 	tst.w	r3, #2
  4021a6:	d1ef      	bne.n	402188 <twihs_master_read+0x6c>
	while (cnt > 0) {
  4021a8:	2a00      	cmp	r2, #0
  4021aa:	d0e5      	beq.n	402178 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4021ac:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4021ae:	f413 7f80 	tst.w	r3, #256	; 0x100
  4021b2:	d105      	bne.n	4021c0 <twihs_master_read+0xa4>
		if (!timeout--) {
  4021b4:	3901      	subs	r1, #1
  4021b6:	d1f2      	bne.n	40219e <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  4021b8:	2009      	movs	r0, #9
  4021ba:	e7e3      	b.n	402184 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  4021bc:	2001      	movs	r0, #1
  4021be:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4021c0:	2005      	movs	r0, #5
  4021c2:	e7df      	b.n	402184 <twihs_master_read+0x68>
  4021c4:	2005      	movs	r0, #5
  4021c6:	e7dd      	b.n	402184 <twihs_master_read+0x68>

004021c8 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  4021c8:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  4021ca:	2b00      	cmp	r3, #0
  4021cc:	d043      	beq.n	402256 <twihs_master_write+0x8e>
{
  4021ce:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4021d0:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4021d2:	2600      	movs	r6, #0
  4021d4:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4021d6:	7c0a      	ldrb	r2, [r1, #16]
  4021d8:	0412      	lsls	r2, r2, #16
  4021da:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4021de:	684d      	ldr	r5, [r1, #4]
  4021e0:	022d      	lsls	r5, r5, #8
  4021e2:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4021e6:	432a      	orrs	r2, r5
  4021e8:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4021ea:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4021ec:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4021ee:	b15d      	cbz	r5, 402208 <twihs_master_write+0x40>
	val = addr[0];
  4021f0:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4021f2:	2d01      	cmp	r5, #1
  4021f4:	dd02      	ble.n	4021fc <twihs_master_write+0x34>
		val |= addr[1];
  4021f6:	784e      	ldrb	r6, [r1, #1]
  4021f8:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  4021fc:	2d02      	cmp	r5, #2
  4021fe:	dd04      	ble.n	40220a <twihs_master_write+0x42>
		val |= addr[2];
  402200:	7889      	ldrb	r1, [r1, #2]
  402202:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  402206:	e000      	b.n	40220a <twihs_master_write+0x42>
		return 0;
  402208:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40220a:	60c2      	str	r2, [r0, #12]
  40220c:	e004      	b.n	402218 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  40220e:	f814 2b01 	ldrb.w	r2, [r4], #1
  402212:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  402214:	3b01      	subs	r3, #1
  402216:	d00f      	beq.n	402238 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  402218:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40221a:	f412 7f80 	tst.w	r2, #256	; 0x100
  40221e:	d11e      	bne.n	40225e <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  402220:	f012 0f04 	tst.w	r2, #4
  402224:	d1f3      	bne.n	40220e <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  402226:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402228:	f412 7f80 	tst.w	r2, #256	; 0x100
  40222c:	d115      	bne.n	40225a <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  40222e:	f012 0f04 	tst.w	r2, #4
  402232:	d1ec      	bne.n	40220e <twihs_master_write+0x46>
	while (cnt > 0) {
  402234:	2b00      	cmp	r3, #0
  402236:	d1f6      	bne.n	402226 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  402238:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40223a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40223e:	d111      	bne.n	402264 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  402240:	f013 0f04 	tst.w	r3, #4
  402244:	d0f8      	beq.n	402238 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402246:	2302      	movs	r3, #2
  402248:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40224a:	6a03      	ldr	r3, [r0, #32]
  40224c:	f013 0f01 	tst.w	r3, #1
  402250:	d0fb      	beq.n	40224a <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  402252:	2000      	movs	r0, #0
  402254:	e004      	b.n	402260 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  402256:	2001      	movs	r0, #1
  402258:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40225a:	2005      	movs	r0, #5
  40225c:	e000      	b.n	402260 <twihs_master_write+0x98>
  40225e:	2005      	movs	r0, #5
}
  402260:	bc70      	pop	{r4, r5, r6}
  402262:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  402264:	2005      	movs	r0, #5
  402266:	e7fb      	b.n	402260 <twihs_master_write+0x98>

00402268 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402268:	6943      	ldr	r3, [r0, #20]
  40226a:	f013 0f02 	tst.w	r3, #2
  40226e:	d002      	beq.n	402276 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402270:	61c1      	str	r1, [r0, #28]
	return 0;
  402272:	2000      	movs	r0, #0
  402274:	4770      	bx	lr
		return 1;
  402276:	2001      	movs	r0, #1
}
  402278:	4770      	bx	lr

0040227a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40227a:	6943      	ldr	r3, [r0, #20]
  40227c:	f013 0f01 	tst.w	r3, #1
  402280:	d003      	beq.n	40228a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402282:	6983      	ldr	r3, [r0, #24]
  402284:	700b      	strb	r3, [r1, #0]
	return 0;
  402286:	2000      	movs	r0, #0
  402288:	4770      	bx	lr
		return 1;
  40228a:	2001      	movs	r0, #1
}
  40228c:	4770      	bx	lr

0040228e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40228e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402290:	010b      	lsls	r3, r1, #4
  402292:	4293      	cmp	r3, r2
  402294:	d914      	bls.n	4022c0 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402296:	00c9      	lsls	r1, r1, #3
  402298:	084b      	lsrs	r3, r1, #1
  40229a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40229e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4022a2:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4022a4:	1e5c      	subs	r4, r3, #1
  4022a6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4022aa:	428c      	cmp	r4, r1
  4022ac:	d901      	bls.n	4022b2 <usart_set_async_baudrate+0x24>
		return 1;
  4022ae:	2001      	movs	r0, #1
  4022b0:	e017      	b.n	4022e2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4022b2:	6841      	ldr	r1, [r0, #4]
  4022b4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4022b8:	6041      	str	r1, [r0, #4]
  4022ba:	e00c      	b.n	4022d6 <usart_set_async_baudrate+0x48>
		return 1;
  4022bc:	2001      	movs	r0, #1
  4022be:	e010      	b.n	4022e2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4022c0:	0859      	lsrs	r1, r3, #1
  4022c2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4022c6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4022ca:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4022cc:	1e5c      	subs	r4, r3, #1
  4022ce:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4022d2:	428c      	cmp	r4, r1
  4022d4:	d8f2      	bhi.n	4022bc <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4022d6:	0412      	lsls	r2, r2, #16
  4022d8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4022dc:	431a      	orrs	r2, r3
  4022de:	6202      	str	r2, [r0, #32]

	return 0;
  4022e0:	2000      	movs	r0, #0
}
  4022e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4022e6:	4770      	bx	lr

004022e8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4022e8:	4b08      	ldr	r3, [pc, #32]	; (40230c <usart_reset+0x24>)
  4022ea:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4022ee:	2300      	movs	r3, #0
  4022f0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4022f2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4022f4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4022f6:	2388      	movs	r3, #136	; 0x88
  4022f8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4022fa:	2324      	movs	r3, #36	; 0x24
  4022fc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4022fe:	f44f 7380 	mov.w	r3, #256	; 0x100
  402302:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  402304:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402308:	6003      	str	r3, [r0, #0]
  40230a:	4770      	bx	lr
  40230c:	55534100 	.word	0x55534100

00402310 <usart_init_rs232>:
{
  402310:	b570      	push	{r4, r5, r6, lr}
  402312:	4605      	mov	r5, r0
  402314:	460c      	mov	r4, r1
  402316:	4616      	mov	r6, r2
	usart_reset(p_usart);
  402318:	4b0f      	ldr	r3, [pc, #60]	; (402358 <usart_init_rs232+0x48>)
  40231a:	4798      	blx	r3
	ul_reg_val = 0;
  40231c:	2200      	movs	r2, #0
  40231e:	4b0f      	ldr	r3, [pc, #60]	; (40235c <usart_init_rs232+0x4c>)
  402320:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  402322:	b1a4      	cbz	r4, 40234e <usart_init_rs232+0x3e>
  402324:	4632      	mov	r2, r6
  402326:	6821      	ldr	r1, [r4, #0]
  402328:	4628      	mov	r0, r5
  40232a:	4b0d      	ldr	r3, [pc, #52]	; (402360 <usart_init_rs232+0x50>)
  40232c:	4798      	blx	r3
  40232e:	4602      	mov	r2, r0
  402330:	b978      	cbnz	r0, 402352 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402332:	6863      	ldr	r3, [r4, #4]
  402334:	68a1      	ldr	r1, [r4, #8]
  402336:	430b      	orrs	r3, r1
  402338:	6921      	ldr	r1, [r4, #16]
  40233a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40233c:	68e1      	ldr	r1, [r4, #12]
  40233e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402340:	4906      	ldr	r1, [pc, #24]	; (40235c <usart_init_rs232+0x4c>)
  402342:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  402344:	6869      	ldr	r1, [r5, #4]
  402346:	430b      	orrs	r3, r1
  402348:	606b      	str	r3, [r5, #4]
}
  40234a:	4610      	mov	r0, r2
  40234c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40234e:	2201      	movs	r2, #1
  402350:	e7fb      	b.n	40234a <usart_init_rs232+0x3a>
  402352:	2201      	movs	r2, #1
  402354:	e7f9      	b.n	40234a <usart_init_rs232+0x3a>
  402356:	bf00      	nop
  402358:	004022e9 	.word	0x004022e9
  40235c:	20400a90 	.word	0x20400a90
  402360:	0040228f 	.word	0x0040228f

00402364 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402364:	2340      	movs	r3, #64	; 0x40
  402366:	6003      	str	r3, [r0, #0]
  402368:	4770      	bx	lr

0040236a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40236a:	2310      	movs	r3, #16
  40236c:	6003      	str	r3, [r0, #0]
  40236e:	4770      	bx	lr

00402370 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402370:	6943      	ldr	r3, [r0, #20]
  402372:	f013 0f02 	tst.w	r3, #2
  402376:	d004      	beq.n	402382 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  402378:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40237c:	61c1      	str	r1, [r0, #28]
	return 0;
  40237e:	2000      	movs	r0, #0
  402380:	4770      	bx	lr
		return 1;
  402382:	2001      	movs	r0, #1
}
  402384:	4770      	bx	lr

00402386 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402386:	6943      	ldr	r3, [r0, #20]
  402388:	f013 0f01 	tst.w	r3, #1
  40238c:	d005      	beq.n	40239a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40238e:	6983      	ldr	r3, [r0, #24]
  402390:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402394:	600b      	str	r3, [r1, #0]
	return 0;
  402396:	2000      	movs	r0, #0
  402398:	4770      	bx	lr
		return 1;
  40239a:	2001      	movs	r0, #1
}
  40239c:	4770      	bx	lr

0040239e <xdmac_configure_transfer>:
  40239e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4023a2:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4023a4:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  4023a6:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  4023a8:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4023aa:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4023ac:	6813      	ldr	r3, [r2, #0]
  4023ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4023b2:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4023b4:	6913      	ldr	r3, [r2, #16]
  4023b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4023ba:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4023bc:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4023be:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4023c0:	6993      	ldr	r3, [r2, #24]
  4023c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4023c6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4023ca:	69d3      	ldr	r3, [r2, #28]
  4023cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4023d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4023d4:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4023d6:	678b      	str	r3, [r1, #120]	; 0x78
  4023d8:	4770      	bx	lr

004023da <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4023da:	e7fe      	b.n	4023da <Dummy_Handler>

004023dc <Reset_Handler>:
{
  4023dc:	b500      	push	{lr}
  4023de:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4023e0:	4b25      	ldr	r3, [pc, #148]	; (402478 <Reset_Handler+0x9c>)
  4023e2:	4a26      	ldr	r2, [pc, #152]	; (40247c <Reset_Handler+0xa0>)
  4023e4:	429a      	cmp	r2, r3
  4023e6:	d010      	beq.n	40240a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4023e8:	4b25      	ldr	r3, [pc, #148]	; (402480 <Reset_Handler+0xa4>)
  4023ea:	4a23      	ldr	r2, [pc, #140]	; (402478 <Reset_Handler+0x9c>)
  4023ec:	429a      	cmp	r2, r3
  4023ee:	d20c      	bcs.n	40240a <Reset_Handler+0x2e>
  4023f0:	3b01      	subs	r3, #1
  4023f2:	1a9b      	subs	r3, r3, r2
  4023f4:	f023 0303 	bic.w	r3, r3, #3
  4023f8:	3304      	adds	r3, #4
  4023fa:	4413      	add	r3, r2
  4023fc:	491f      	ldr	r1, [pc, #124]	; (40247c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4023fe:	f851 0b04 	ldr.w	r0, [r1], #4
  402402:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  402406:	429a      	cmp	r2, r3
  402408:	d1f9      	bne.n	4023fe <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40240a:	4b1e      	ldr	r3, [pc, #120]	; (402484 <Reset_Handler+0xa8>)
  40240c:	4a1e      	ldr	r2, [pc, #120]	; (402488 <Reset_Handler+0xac>)
  40240e:	429a      	cmp	r2, r3
  402410:	d20a      	bcs.n	402428 <Reset_Handler+0x4c>
  402412:	3b01      	subs	r3, #1
  402414:	1a9b      	subs	r3, r3, r2
  402416:	f023 0303 	bic.w	r3, r3, #3
  40241a:	3304      	adds	r3, #4
  40241c:	4413      	add	r3, r2
                *pDest++ = 0;
  40241e:	2100      	movs	r1, #0
  402420:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402424:	4293      	cmp	r3, r2
  402426:	d1fb      	bne.n	402420 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402428:	4a18      	ldr	r2, [pc, #96]	; (40248c <Reset_Handler+0xb0>)
  40242a:	4b19      	ldr	r3, [pc, #100]	; (402490 <Reset_Handler+0xb4>)
  40242c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402430:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402432:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402436:	fab3 f383 	clz	r3, r3
  40243a:	095b      	lsrs	r3, r3, #5
  40243c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40243e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402440:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402444:	2200      	movs	r2, #0
  402446:	4b13      	ldr	r3, [pc, #76]	; (402494 <Reset_Handler+0xb8>)
  402448:	701a      	strb	r2, [r3, #0]
	return flags;
  40244a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40244c:	4a12      	ldr	r2, [pc, #72]	; (402498 <Reset_Handler+0xbc>)
  40244e:	6813      	ldr	r3, [r2, #0]
  402450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402454:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402456:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40245a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40245e:	b129      	cbz	r1, 40246c <Reset_Handler+0x90>
		cpu_irq_enable();
  402460:	2201      	movs	r2, #1
  402462:	4b0c      	ldr	r3, [pc, #48]	; (402494 <Reset_Handler+0xb8>)
  402464:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402466:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40246a:	b662      	cpsie	i
        __libc_init_array();
  40246c:	4b0b      	ldr	r3, [pc, #44]	; (40249c <Reset_Handler+0xc0>)
  40246e:	4798      	blx	r3
        main();
  402470:	4b0b      	ldr	r3, [pc, #44]	; (4024a0 <Reset_Handler+0xc4>)
  402472:	4798      	blx	r3
  402474:	e7fe      	b.n	402474 <Reset_Handler+0x98>
  402476:	bf00      	nop
  402478:	20400000 	.word	0x20400000
  40247c:	0040827c 	.word	0x0040827c
  402480:	204009e8 	.word	0x204009e8
  402484:	20400b24 	.word	0x20400b24
  402488:	204009e8 	.word	0x204009e8
  40248c:	e000ed00 	.word	0xe000ed00
  402490:	00400000 	.word	0x00400000
  402494:	20400030 	.word	0x20400030
  402498:	e000ed88 	.word	0xe000ed88
  40249c:	004048b5 	.word	0x004048b5
  4024a0:	004044f5 	.word	0x004044f5

004024a4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4024a4:	4b3b      	ldr	r3, [pc, #236]	; (402594 <SystemCoreClockUpdate+0xf0>)
  4024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024a8:	f003 0303 	and.w	r3, r3, #3
  4024ac:	2b01      	cmp	r3, #1
  4024ae:	d01d      	beq.n	4024ec <SystemCoreClockUpdate+0x48>
  4024b0:	b183      	cbz	r3, 4024d4 <SystemCoreClockUpdate+0x30>
  4024b2:	2b02      	cmp	r3, #2
  4024b4:	d036      	beq.n	402524 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4024b6:	4b37      	ldr	r3, [pc, #220]	; (402594 <SystemCoreClockUpdate+0xf0>)
  4024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024be:	2b70      	cmp	r3, #112	; 0x70
  4024c0:	d05f      	beq.n	402582 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4024c2:	4b34      	ldr	r3, [pc, #208]	; (402594 <SystemCoreClockUpdate+0xf0>)
  4024c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4024c6:	4934      	ldr	r1, [pc, #208]	; (402598 <SystemCoreClockUpdate+0xf4>)
  4024c8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4024cc:	680b      	ldr	r3, [r1, #0]
  4024ce:	40d3      	lsrs	r3, r2
  4024d0:	600b      	str	r3, [r1, #0]
  4024d2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4024d4:	4b31      	ldr	r3, [pc, #196]	; (40259c <SystemCoreClockUpdate+0xf8>)
  4024d6:	695b      	ldr	r3, [r3, #20]
  4024d8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4024dc:	bf14      	ite	ne
  4024de:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4024e2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4024e6:	4b2c      	ldr	r3, [pc, #176]	; (402598 <SystemCoreClockUpdate+0xf4>)
  4024e8:	601a      	str	r2, [r3, #0]
  4024ea:	e7e4      	b.n	4024b6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4024ec:	4b29      	ldr	r3, [pc, #164]	; (402594 <SystemCoreClockUpdate+0xf0>)
  4024ee:	6a1b      	ldr	r3, [r3, #32]
  4024f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4024f4:	d003      	beq.n	4024fe <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4024f6:	4a2a      	ldr	r2, [pc, #168]	; (4025a0 <SystemCoreClockUpdate+0xfc>)
  4024f8:	4b27      	ldr	r3, [pc, #156]	; (402598 <SystemCoreClockUpdate+0xf4>)
  4024fa:	601a      	str	r2, [r3, #0]
  4024fc:	e7db      	b.n	4024b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4024fe:	4a29      	ldr	r2, [pc, #164]	; (4025a4 <SystemCoreClockUpdate+0x100>)
  402500:	4b25      	ldr	r3, [pc, #148]	; (402598 <SystemCoreClockUpdate+0xf4>)
  402502:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402504:	4b23      	ldr	r3, [pc, #140]	; (402594 <SystemCoreClockUpdate+0xf0>)
  402506:	6a1b      	ldr	r3, [r3, #32]
  402508:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40250c:	2b10      	cmp	r3, #16
  40250e:	d005      	beq.n	40251c <SystemCoreClockUpdate+0x78>
  402510:	2b20      	cmp	r3, #32
  402512:	d1d0      	bne.n	4024b6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402514:	4a22      	ldr	r2, [pc, #136]	; (4025a0 <SystemCoreClockUpdate+0xfc>)
  402516:	4b20      	ldr	r3, [pc, #128]	; (402598 <SystemCoreClockUpdate+0xf4>)
  402518:	601a      	str	r2, [r3, #0]
          break;
  40251a:	e7cc      	b.n	4024b6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40251c:	4a22      	ldr	r2, [pc, #136]	; (4025a8 <SystemCoreClockUpdate+0x104>)
  40251e:	4b1e      	ldr	r3, [pc, #120]	; (402598 <SystemCoreClockUpdate+0xf4>)
  402520:	601a      	str	r2, [r3, #0]
          break;
  402522:	e7c8      	b.n	4024b6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402524:	4b1b      	ldr	r3, [pc, #108]	; (402594 <SystemCoreClockUpdate+0xf0>)
  402526:	6a1b      	ldr	r3, [r3, #32]
  402528:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40252c:	d016      	beq.n	40255c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40252e:	4a1c      	ldr	r2, [pc, #112]	; (4025a0 <SystemCoreClockUpdate+0xfc>)
  402530:	4b19      	ldr	r3, [pc, #100]	; (402598 <SystemCoreClockUpdate+0xf4>)
  402532:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402534:	4b17      	ldr	r3, [pc, #92]	; (402594 <SystemCoreClockUpdate+0xf0>)
  402536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402538:	f003 0303 	and.w	r3, r3, #3
  40253c:	2b02      	cmp	r3, #2
  40253e:	d1ba      	bne.n	4024b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402540:	4a14      	ldr	r2, [pc, #80]	; (402594 <SystemCoreClockUpdate+0xf0>)
  402542:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402544:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402546:	4814      	ldr	r0, [pc, #80]	; (402598 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402548:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40254c:	6803      	ldr	r3, [r0, #0]
  40254e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402552:	b2d2      	uxtb	r2, r2
  402554:	fbb3 f3f2 	udiv	r3, r3, r2
  402558:	6003      	str	r3, [r0, #0]
  40255a:	e7ac      	b.n	4024b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40255c:	4a11      	ldr	r2, [pc, #68]	; (4025a4 <SystemCoreClockUpdate+0x100>)
  40255e:	4b0e      	ldr	r3, [pc, #56]	; (402598 <SystemCoreClockUpdate+0xf4>)
  402560:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402562:	4b0c      	ldr	r3, [pc, #48]	; (402594 <SystemCoreClockUpdate+0xf0>)
  402564:	6a1b      	ldr	r3, [r3, #32]
  402566:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40256a:	2b10      	cmp	r3, #16
  40256c:	d005      	beq.n	40257a <SystemCoreClockUpdate+0xd6>
  40256e:	2b20      	cmp	r3, #32
  402570:	d1e0      	bne.n	402534 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  402572:	4a0b      	ldr	r2, [pc, #44]	; (4025a0 <SystemCoreClockUpdate+0xfc>)
  402574:	4b08      	ldr	r3, [pc, #32]	; (402598 <SystemCoreClockUpdate+0xf4>)
  402576:	601a      	str	r2, [r3, #0]
          break;
  402578:	e7dc      	b.n	402534 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40257a:	4a0b      	ldr	r2, [pc, #44]	; (4025a8 <SystemCoreClockUpdate+0x104>)
  40257c:	4b06      	ldr	r3, [pc, #24]	; (402598 <SystemCoreClockUpdate+0xf4>)
  40257e:	601a      	str	r2, [r3, #0]
          break;
  402580:	e7d8      	b.n	402534 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  402582:	4a05      	ldr	r2, [pc, #20]	; (402598 <SystemCoreClockUpdate+0xf4>)
  402584:	6813      	ldr	r3, [r2, #0]
  402586:	4909      	ldr	r1, [pc, #36]	; (4025ac <SystemCoreClockUpdate+0x108>)
  402588:	fba1 1303 	umull	r1, r3, r1, r3
  40258c:	085b      	lsrs	r3, r3, #1
  40258e:	6013      	str	r3, [r2, #0]
  402590:	4770      	bx	lr
  402592:	bf00      	nop
  402594:	400e0600 	.word	0x400e0600
  402598:	20400034 	.word	0x20400034
  40259c:	400e1810 	.word	0x400e1810
  4025a0:	00b71b00 	.word	0x00b71b00
  4025a4:	003d0900 	.word	0x003d0900
  4025a8:	007a1200 	.word	0x007a1200
  4025ac:	aaaaaaab 	.word	0xaaaaaaab

004025b0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4025b0:	4b16      	ldr	r3, [pc, #88]	; (40260c <system_init_flash+0x5c>)
  4025b2:	4298      	cmp	r0, r3
  4025b4:	d913      	bls.n	4025de <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4025b6:	4b16      	ldr	r3, [pc, #88]	; (402610 <system_init_flash+0x60>)
  4025b8:	4298      	cmp	r0, r3
  4025ba:	d915      	bls.n	4025e8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4025bc:	4b15      	ldr	r3, [pc, #84]	; (402614 <system_init_flash+0x64>)
  4025be:	4298      	cmp	r0, r3
  4025c0:	d916      	bls.n	4025f0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4025c2:	4b15      	ldr	r3, [pc, #84]	; (402618 <system_init_flash+0x68>)
  4025c4:	4298      	cmp	r0, r3
  4025c6:	d917      	bls.n	4025f8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4025c8:	4b14      	ldr	r3, [pc, #80]	; (40261c <system_init_flash+0x6c>)
  4025ca:	4298      	cmp	r0, r3
  4025cc:	d918      	bls.n	402600 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4025ce:	4b14      	ldr	r3, [pc, #80]	; (402620 <system_init_flash+0x70>)
  4025d0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4025d2:	bf94      	ite	ls
  4025d4:	4a13      	ldrls	r2, [pc, #76]	; (402624 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4025d6:	4a14      	ldrhi	r2, [pc, #80]	; (402628 <system_init_flash+0x78>)
  4025d8:	4b14      	ldr	r3, [pc, #80]	; (40262c <system_init_flash+0x7c>)
  4025da:	601a      	str	r2, [r3, #0]
  4025dc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4025de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4025e2:	4b12      	ldr	r3, [pc, #72]	; (40262c <system_init_flash+0x7c>)
  4025e4:	601a      	str	r2, [r3, #0]
  4025e6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4025e8:	4a11      	ldr	r2, [pc, #68]	; (402630 <system_init_flash+0x80>)
  4025ea:	4b10      	ldr	r3, [pc, #64]	; (40262c <system_init_flash+0x7c>)
  4025ec:	601a      	str	r2, [r3, #0]
  4025ee:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4025f0:	4a10      	ldr	r2, [pc, #64]	; (402634 <system_init_flash+0x84>)
  4025f2:	4b0e      	ldr	r3, [pc, #56]	; (40262c <system_init_flash+0x7c>)
  4025f4:	601a      	str	r2, [r3, #0]
  4025f6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4025f8:	4a0f      	ldr	r2, [pc, #60]	; (402638 <system_init_flash+0x88>)
  4025fa:	4b0c      	ldr	r3, [pc, #48]	; (40262c <system_init_flash+0x7c>)
  4025fc:	601a      	str	r2, [r3, #0]
  4025fe:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402600:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402604:	4b09      	ldr	r3, [pc, #36]	; (40262c <system_init_flash+0x7c>)
  402606:	601a      	str	r2, [r3, #0]
  402608:	4770      	bx	lr
  40260a:	bf00      	nop
  40260c:	015ef3bf 	.word	0x015ef3bf
  402610:	02bde77f 	.word	0x02bde77f
  402614:	041cdb3f 	.word	0x041cdb3f
  402618:	057bceff 	.word	0x057bceff
  40261c:	06dac2bf 	.word	0x06dac2bf
  402620:	0839b67f 	.word	0x0839b67f
  402624:	04000500 	.word	0x04000500
  402628:	04000600 	.word	0x04000600
  40262c:	400e0c00 	.word	0x400e0c00
  402630:	04000100 	.word	0x04000100
  402634:	04000200 	.word	0x04000200
  402638:	04000300 	.word	0x04000300

0040263c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40263c:	4b0a      	ldr	r3, [pc, #40]	; (402668 <_sbrk+0x2c>)
  40263e:	681b      	ldr	r3, [r3, #0]
  402640:	b153      	cbz	r3, 402658 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402642:	4b09      	ldr	r3, [pc, #36]	; (402668 <_sbrk+0x2c>)
  402644:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402646:	181a      	adds	r2, r3, r0
  402648:	4908      	ldr	r1, [pc, #32]	; (40266c <_sbrk+0x30>)
  40264a:	4291      	cmp	r1, r2
  40264c:	db08      	blt.n	402660 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40264e:	4610      	mov	r0, r2
  402650:	4a05      	ldr	r2, [pc, #20]	; (402668 <_sbrk+0x2c>)
  402652:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402654:	4618      	mov	r0, r3
  402656:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402658:	4a05      	ldr	r2, [pc, #20]	; (402670 <_sbrk+0x34>)
  40265a:	4b03      	ldr	r3, [pc, #12]	; (402668 <_sbrk+0x2c>)
  40265c:	601a      	str	r2, [r3, #0]
  40265e:	e7f0      	b.n	402642 <_sbrk+0x6>
		return (caddr_t) -1;	
  402660:	f04f 30ff 	mov.w	r0, #4294967295
}
  402664:	4770      	bx	lr
  402666:	bf00      	nop
  402668:	20400a94 	.word	0x20400a94
  40266c:	2045fffc 	.word	0x2045fffc
  402670:	20402d28 	.word	0x20402d28

00402674 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402674:	f04f 30ff 	mov.w	r0, #4294967295
  402678:	4770      	bx	lr

0040267a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40267a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40267e:	604b      	str	r3, [r1, #4]

	return 0;
}
  402680:	2000      	movs	r0, #0
  402682:	4770      	bx	lr

00402684 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402684:	2001      	movs	r0, #1
  402686:	4770      	bx	lr

00402688 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402688:	2000      	movs	r0, #0
  40268a:	4770      	bx	lr

0040268c <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  40268c:	2801      	cmp	r0, #1
  40268e:	d901      	bls.n	402694 <disk_initialize+0x8>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  402690:	2001      	movs	r0, #1
  402692:	4770      	bx	lr
{
  402694:	b510      	push	{r4, lr}
  402696:	4604      	mov	r4, r0
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  402698:	4b0a      	ldr	r3, [pc, #40]	; (4026c4 <disk_initialize+0x38>)
  40269a:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  40269c:	2803      	cmp	r0, #3
  40269e:	d106      	bne.n	4026ae <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
  4026a0:	4620      	mov	r0, r4
  4026a2:	4b08      	ldr	r3, [pc, #32]	; (4026c4 <disk_initialize+0x38>)
  4026a4:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  4026a6:	2803      	cmp	r0, #3
  4026a8:	d101      	bne.n	4026ae <disk_initialize+0x22>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  4026aa:	2001      	movs	r0, #1
  4026ac:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  4026ae:	b938      	cbnz	r0, 4026c0 <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  4026b0:	4620      	mov	r0, r4
  4026b2:	4b05      	ldr	r3, [pc, #20]	; (4026c8 <disk_initialize+0x3c>)
  4026b4:	4798      	blx	r3
  4026b6:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  4026b8:	bf14      	ite	ne
  4026ba:	2004      	movne	r0, #4
  4026bc:	2000      	moveq	r0, #0
  4026be:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  4026c0:	2001      	movs	r0, #1
}
  4026c2:	bd10      	pop	{r4, pc}
  4026c4:	00401085 	.word	0x00401085
  4026c8:	004010b5 	.word	0x004010b5

004026cc <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  4026cc:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  4026ce:	4b05      	ldr	r3, [pc, #20]	; (4026e4 <disk_status+0x18>)
  4026d0:	4798      	blx	r3
  4026d2:	b120      	cbz	r0, 4026de <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  4026d4:	2802      	cmp	r0, #2
  4026d6:	bf0c      	ite	eq
  4026d8:	2003      	moveq	r0, #3
  4026da:	2001      	movne	r0, #1
  4026dc:	bd08      	pop	{r3, pc}
		return 0;
  4026de:	2000      	movs	r0, #0
	}
}
  4026e0:	bd08      	pop	{r3, pc}
  4026e2:	bf00      	nop
  4026e4:	00401085 	.word	0x00401085

004026e8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  4026e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026ec:	b083      	sub	sp, #12
  4026ee:	4680      	mov	r8, r0
  4026f0:	460d      	mov	r5, r1
  4026f2:	4614      	mov	r4, r2
  4026f4:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4026f6:	4b15      	ldr	r3, [pc, #84]	; (40274c <disk_read+0x64>)
  4026f8:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4026fa:	b918      	cbnz	r0, 402704 <disk_read+0x1c>
		return RES_ERROR;
  4026fc:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  4026fe:	b003      	add	sp, #12
  402700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402704:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  402706:	a901      	add	r1, sp, #4
  402708:	4640      	mov	r0, r8
  40270a:	4b11      	ldr	r3, [pc, #68]	; (402750 <disk_read+0x68>)
  40270c:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40270e:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  402710:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  402714:	9b01      	ldr	r3, [sp, #4]
  402716:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  40271a:	429a      	cmp	r2, r3
  40271c:	d901      	bls.n	402722 <disk_read+0x3a>
		return RES_PARERR;
  40271e:	2004      	movs	r0, #4
  402720:	e7ed      	b.n	4026fe <disk_read+0x16>
	for (i = 0; i < count; i++) {
  402722:	46ba      	mov	sl, r7
  402724:	b177      	cbz	r7, 402744 <disk_read+0x5c>
  402726:	0276      	lsls	r6, r6, #9
  402728:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  40272a:	f8df b028 	ldr.w	fp, [pc, #40]	; 402754 <disk_read+0x6c>
  40272e:	462a      	mov	r2, r5
  402730:	4621      	mov	r1, r4
  402732:	4640      	mov	r0, r8
  402734:	47d8      	blx	fp
  402736:	b938      	cbnz	r0, 402748 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  402738:	3701      	adds	r7, #1
  40273a:	444c      	add	r4, r9
  40273c:	4435      	add	r5, r6
  40273e:	4557      	cmp	r7, sl
  402740:	d1f5      	bne.n	40272e <disk_read+0x46>
  402742:	e7dc      	b.n	4026fe <disk_read+0x16>
	return RES_OK;
  402744:	2000      	movs	r0, #0
  402746:	e7da      	b.n	4026fe <disk_read+0x16>
			return RES_ERROR;
  402748:	2001      	movs	r0, #1
  40274a:	e7d8      	b.n	4026fe <disk_read+0x16>
  40274c:	004010ad 	.word	0x004010ad
  402750:	00401099 	.word	0x00401099
  402754:	004010c9 	.word	0x004010c9

00402758 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  402758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40275c:	b083      	sub	sp, #12
  40275e:	4680      	mov	r8, r0
  402760:	460d      	mov	r5, r1
  402762:	4614      	mov	r4, r2
  402764:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  402766:	4b15      	ldr	r3, [pc, #84]	; (4027bc <disk_write+0x64>)
  402768:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  40276a:	b918      	cbnz	r0, 402774 <disk_write+0x1c>
		return RES_ERROR;
  40276c:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  40276e:	b003      	add	sp, #12
  402770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402774:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  402776:	a901      	add	r1, sp, #4
  402778:	4640      	mov	r0, r8
  40277a:	4b11      	ldr	r3, [pc, #68]	; (4027c0 <disk_write+0x68>)
  40277c:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40277e:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  402780:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  402784:	9b01      	ldr	r3, [sp, #4]
  402786:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  40278a:	429a      	cmp	r2, r3
  40278c:	d901      	bls.n	402792 <disk_write+0x3a>
		return RES_PARERR;
  40278e:	2004      	movs	r0, #4
  402790:	e7ed      	b.n	40276e <disk_write+0x16>
	for (i = 0; i < count; i++) {
  402792:	46ba      	mov	sl, r7
  402794:	b177      	cbz	r7, 4027b4 <disk_write+0x5c>
  402796:	0276      	lsls	r6, r6, #9
  402798:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  40279a:	f8df b028 	ldr.w	fp, [pc, #40]	; 4027c4 <disk_write+0x6c>
  40279e:	462a      	mov	r2, r5
  4027a0:	4621      	mov	r1, r4
  4027a2:	4640      	mov	r0, r8
  4027a4:	47d8      	blx	fp
  4027a6:	b938      	cbnz	r0, 4027b8 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  4027a8:	3701      	adds	r7, #1
  4027aa:	444c      	add	r4, r9
  4027ac:	4435      	add	r5, r6
  4027ae:	4557      	cmp	r7, sl
  4027b0:	d1f5      	bne.n	40279e <disk_write+0x46>
  4027b2:	e7dc      	b.n	40276e <disk_write+0x16>
	return RES_OK;
  4027b4:	2000      	movs	r0, #0
  4027b6:	e7da      	b.n	40276e <disk_write+0x16>
			return RES_ERROR;
  4027b8:	2001      	movs	r0, #1
  4027ba:	e7d8      	b.n	40276e <disk_write+0x16>
  4027bc:	004010ad 	.word	0x004010ad
  4027c0:	00401099 	.word	0x00401099
  4027c4:	004010e1 	.word	0x004010e1

004027c8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  4027c8:	b510      	push	{r4, lr}
  4027ca:	b082      	sub	sp, #8
  4027cc:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  4027ce:	2903      	cmp	r1, #3
  4027d0:	d825      	bhi.n	40281e <disk_ioctl+0x56>
  4027d2:	e8df f001 	tbb	[pc, r1]
  4027d6:	071d      	.short	0x071d
  4027d8:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  4027da:	2301      	movs	r3, #1
  4027dc:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  4027de:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  4027e0:	b002      	add	sp, #8
  4027e2:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  4027e4:	a901      	add	r1, sp, #4
  4027e6:	4b11      	ldr	r3, [pc, #68]	; (40282c <disk_ioctl+0x64>)
  4027e8:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  4027ea:	9b01      	ldr	r3, [sp, #4]
  4027ec:	3301      	adds	r3, #1
  4027ee:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  4027f0:	2000      	movs	r0, #0
	break;
  4027f2:	e7f5      	b.n	4027e0 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  4027f4:	4b0e      	ldr	r3, [pc, #56]	; (402830 <disk_ioctl+0x68>)
  4027f6:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  4027f8:	2808      	cmp	r0, #8
  4027fa:	d812      	bhi.n	402822 <disk_ioctl+0x5a>
  4027fc:	f44f 738b 	mov.w	r3, #278	; 0x116
  402800:	fa23 f000 	lsr.w	r0, r3, r0
				(uc_sector_size != SECTOR_SIZE_2048) &&
  402804:	f010 0f01 	tst.w	r0, #1
  402808:	d00d      	beq.n	402826 <disk_ioctl+0x5e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  40280a:	2000      	movs	r0, #0
  40280c:	7020      	strb	r0, [r4, #0]
	break;
  40280e:	e7e7      	b.n	4027e0 <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  402810:	4b08      	ldr	r3, [pc, #32]	; (402834 <disk_ioctl+0x6c>)
  402812:	4798      	blx	r3
  402814:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  402816:	bf0c      	ite	eq
  402818:	2000      	moveq	r0, #0
  40281a:	2003      	movne	r0, #3
  40281c:	e7e0      	b.n	4027e0 <disk_ioctl+0x18>
		res = RES_PARERR;
  40281e:	2004      	movs	r0, #4
  402820:	e7de      	b.n	4027e0 <disk_ioctl+0x18>
			return RES_ERROR;
  402822:	2001      	movs	r0, #1
  402824:	e7dc      	b.n	4027e0 <disk_ioctl+0x18>
  402826:	2001      	movs	r0, #1
  402828:	e7da      	b.n	4027e0 <disk_ioctl+0x18>
  40282a:	bf00      	nop
  40282c:	00401099 	.word	0x00401099
  402830:	004010ad 	.word	0x004010ad
  402834:	00401085 	.word	0x00401085

00402838 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  402838:	b530      	push	{r4, r5, lr}
  40283a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  40283c:	4c11      	ldr	r4, [pc, #68]	; (402884 <get_fattime+0x4c>)
  40283e:	ab07      	add	r3, sp, #28
  402840:	aa08      	add	r2, sp, #32
  402842:	a909      	add	r1, sp, #36	; 0x24
  402844:	4620      	mov	r0, r4
  402846:	4d10      	ldr	r5, [pc, #64]	; (402888 <get_fattime+0x50>)
  402848:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  40284a:	ab03      	add	r3, sp, #12
  40284c:	9300      	str	r3, [sp, #0]
  40284e:	ab04      	add	r3, sp, #16
  402850:	aa05      	add	r2, sp, #20
  402852:	a906      	add	r1, sp, #24
  402854:	4620      	mov	r0, r4
  402856:	4c0d      	ldr	r4, [pc, #52]	; (40288c <get_fattime+0x54>)
  402858:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  40285a:	9b04      	ldr	r3, [sp, #16]
  40285c:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  40285e:	9805      	ldr	r0, [sp, #20]
  402860:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  402864:	9809      	ldr	r0, [sp, #36]	; 0x24
  402866:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  40286a:	9808      	ldr	r0, [sp, #32]
  40286c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  402870:	9807      	ldr	r0, [sp, #28]
  402872:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  402876:	9806      	ldr	r0, [sp, #24]
  402878:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  40287c:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  402880:	b00b      	add	sp, #44	; 0x2c
  402882:	bd30      	pop	{r4, r5, pc}
  402884:	400e1860 	.word	0x400e1860
  402888:	00401f6d 	.word	0x00401f6d
  40288c:	00401fc7 	.word	0x00401fc7

00402890 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  402890:	b13a      	cbz	r2, 4028a2 <mem_cpy+0x12>
  402892:	3801      	subs	r0, #1
  402894:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  402896:	f811 3b01 	ldrb.w	r3, [r1], #1
  40289a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  40289e:	4291      	cmp	r1, r2
  4028a0:	d1f9      	bne.n	402896 <mem_cpy+0x6>
  4028a2:	4770      	bx	lr

004028a4 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  4028a4:	b122      	cbz	r2, 4028b0 <mem_set+0xc>
  4028a6:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  4028a8:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  4028ac:	4282      	cmp	r2, r0
  4028ae:	d1fb      	bne.n	4028a8 <mem_set+0x4>
  4028b0:	4770      	bx	lr

004028b2 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  4028b2:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4028b4:	6983      	ldr	r3, [r0, #24]
  4028b6:	3b02      	subs	r3, #2
  4028b8:	4299      	cmp	r1, r3
  4028ba:	d204      	bcs.n	4028c6 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  4028bc:	7883      	ldrb	r3, [r0, #2]
  4028be:	6a80      	ldr	r0, [r0, #40]	; 0x28
  4028c0:	fb01 0003 	mla	r0, r1, r3, r0
  4028c4:	4770      	bx	lr
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4028c6:	2000      	movs	r0, #0
}
  4028c8:	4770      	bx	lr

004028ca <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  4028ca:	4602      	mov	r2, r0
  4028cc:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  4028d0:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  4028d2:	01c3      	lsls	r3, r0, #7
  4028d4:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  4028d8:	f812 0b01 	ldrb.w	r0, [r2], #1
  4028dc:	fa50 f383 	uxtab	r3, r0, r3
  4028e0:	b2d8      	uxtb	r0, r3
  4028e2:	428a      	cmp	r2, r1
  4028e4:	d1f5      	bne.n	4028d2 <sum_sfn+0x8>
	return sum;
}
  4028e6:	4770      	bx	lr

004028e8 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  4028e8:	b198      	cbz	r0, 402912 <validate+0x2a>
{
  4028ea:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  4028ec:	7802      	ldrb	r2, [r0, #0]
  4028ee:	b90a      	cbnz	r2, 4028f4 <validate+0xc>
		return FR_INVALID_OBJECT;
  4028f0:	2009      	movs	r0, #9
  4028f2:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  4028f4:	88c2      	ldrh	r2, [r0, #6]
  4028f6:	428a      	cmp	r2, r1
  4028f8:	d001      	beq.n	4028fe <validate+0x16>
		return FR_INVALID_OBJECT;
  4028fa:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  4028fc:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  4028fe:	7840      	ldrb	r0, [r0, #1]
  402900:	4b05      	ldr	r3, [pc, #20]	; (402918 <validate+0x30>)
  402902:	4798      	blx	r3
  402904:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  402908:	2800      	cmp	r0, #0
  40290a:	bf14      	ite	ne
  40290c:	2003      	movne	r0, #3
  40290e:	2000      	moveq	r0, #0
  402910:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  402912:	2009      	movs	r0, #9
  402914:	4770      	bx	lr
  402916:	bf00      	nop
  402918:	004026cd 	.word	0x004026cd

0040291c <check_fs>:
{
  40291c:	b538      	push	{r3, r4, r5, lr}
  40291e:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  402920:	2301      	movs	r3, #1
  402922:	460a      	mov	r2, r1
  402924:	f100 0130 	add.w	r1, r0, #48	; 0x30
  402928:	7840      	ldrb	r0, [r0, #1]
  40292a:	4d1d      	ldr	r5, [pc, #116]	; (4029a0 <check_fs+0x84>)
  40292c:	47a8      	blx	r5
  40292e:	b108      	cbz	r0, 402934 <check_fs+0x18>
		return 3;
  402930:	2003      	movs	r0, #3
  402932:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  402934:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  402938:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  40293c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402940:	b21b      	sxth	r3, r3
  402942:	4a18      	ldr	r2, [pc, #96]	; (4029a4 <check_fs+0x88>)
  402944:	4293      	cmp	r3, r2
  402946:	d001      	beq.n	40294c <check_fs+0x30>
		return 2;
  402948:	2002      	movs	r0, #2
  40294a:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  40294c:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  402950:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  402954:	041b      	lsls	r3, r3, #16
  402956:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40295a:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  40295e:	4313      	orrs	r3, r2
  402960:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  402964:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402968:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40296c:	4a0e      	ldr	r2, [pc, #56]	; (4029a8 <check_fs+0x8c>)
  40296e:	4293      	cmp	r3, r2
  402970:	d013      	beq.n	40299a <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  402972:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  402976:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  40297a:	0400      	lsls	r0, r0, #16
  40297c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  402980:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  402984:	4318      	orrs	r0, r3
  402986:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  40298a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40298e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  402992:	1a80      	subs	r0, r0, r2
  402994:	bf18      	it	ne
  402996:	2001      	movne	r0, #1
  402998:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  40299a:	2000      	movs	r0, #0
}
  40299c:	bd38      	pop	{r3, r4, r5, pc}
  40299e:	bf00      	nop
  4029a0:	004026e9 	.word	0x004026e9
  4029a4:	ffffaa55 	.word	0xffffaa55
  4029a8:	00544146 	.word	0x00544146

004029ac <chk_mounted>:
{
  4029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  4029ae:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  4029b0:	781c      	ldrb	r4, [r3, #0]
  4029b2:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  4029b4:	2c09      	cmp	r4, #9
  4029b6:	d80a      	bhi.n	4029ce <chk_mounted+0x22>
  4029b8:	785d      	ldrb	r5, [r3, #1]
  4029ba:	2d3a      	cmp	r5, #58	; 0x3a
  4029bc:	d001      	beq.n	4029c2 <chk_mounted+0x16>
  4029be:	2400      	movs	r4, #0
  4029c0:	e006      	b.n	4029d0 <chk_mounted+0x24>
		p += 2; *path = p;				/* Return pointer to the path name */
  4029c2:	3302      	adds	r3, #2
  4029c4:	6003      	str	r3, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  4029c6:	2c07      	cmp	r4, #7
  4029c8:	d902      	bls.n	4029d0 <chk_mounted+0x24>
		return FR_INVALID_DRIVE;
  4029ca:	200b      	movs	r0, #11
  4029cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4029ce:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  4029d0:	4bae      	ldr	r3, [pc, #696]	; (402c8c <chk_mounted+0x2e0>)
  4029d2:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  4029d6:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  4029d8:	2d00      	cmp	r5, #0
  4029da:	f000 813e 	beq.w	402c5a <chk_mounted+0x2ae>
  4029de:	4616      	mov	r6, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  4029e0:	782b      	ldrb	r3, [r5, #0]
  4029e2:	b17b      	cbz	r3, 402a04 <chk_mounted+0x58>
		stat = disk_status(fs->drv);
  4029e4:	7868      	ldrb	r0, [r5, #1]
  4029e6:	4baa      	ldr	r3, [pc, #680]	; (402c90 <chk_mounted+0x2e4>)
  4029e8:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  4029ea:	f010 0f01 	tst.w	r0, #1
  4029ee:	d109      	bne.n	402a04 <chk_mounted+0x58>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  4029f0:	2e00      	cmp	r6, #0
  4029f2:	f000 8134 	beq.w	402c5e <chk_mounted+0x2b2>
  4029f6:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  4029fa:	2800      	cmp	r0, #0
  4029fc:	bf0c      	ite	eq
  4029fe:	2000      	moveq	r0, #0
  402a00:	200a      	movne	r0, #10
  402a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  402a04:	2300      	movs	r3, #0
  402a06:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  402a08:	b2e0      	uxtb	r0, r4
  402a0a:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  402a0c:	4ba1      	ldr	r3, [pc, #644]	; (402c94 <chk_mounted+0x2e8>)
  402a0e:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  402a10:	f010 0f01 	tst.w	r0, #1
  402a14:	d001      	beq.n	402a1a <chk_mounted+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  402a16:	2003      	movs	r0, #3
  402a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  402a1a:	b126      	cbz	r6, 402a26 <chk_mounted+0x7a>
  402a1c:	f010 0f04 	tst.w	r0, #4
  402a20:	d001      	beq.n	402a26 <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
  402a22:	200a      	movs	r0, #10
  402a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  402a26:	2100      	movs	r1, #0
  402a28:	4628      	mov	r0, r5
  402a2a:	4b9b      	ldr	r3, [pc, #620]	; (402c98 <chk_mounted+0x2ec>)
  402a2c:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  402a2e:	2801      	cmp	r0, #1
  402a30:	d006      	beq.n	402a40 <chk_mounted+0x94>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  402a32:	2400      	movs	r4, #0
	if (fmt == 3) return FR_DISK_ERR;
  402a34:	2803      	cmp	r0, #3
  402a36:	f000 8114 	beq.w	402c62 <chk_mounted+0x2b6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402a3a:	b1c8      	cbz	r0, 402a70 <chk_mounted+0xc4>
  402a3c:	200d      	movs	r0, #13
  402a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  402a40:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  402a44:	b90b      	cbnz	r3, 402a4a <chk_mounted+0x9e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402a46:	200d      	movs	r0, #13
  402a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  402a4a:	f895 31f9 	ldrb.w	r3, [r5, #505]	; 0x1f9
  402a4e:	f895 41f8 	ldrb.w	r4, [r5, #504]	; 0x1f8
  402a52:	0424      	lsls	r4, r4, #16
  402a54:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  402a58:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  402a5c:	431c      	orrs	r4, r3
  402a5e:	f895 31f7 	ldrb.w	r3, [r5, #503]	; 0x1f7
  402a62:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  402a66:	4621      	mov	r1, r4
  402a68:	4628      	mov	r0, r5
  402a6a:	4b8b      	ldr	r3, [pc, #556]	; (402c98 <chk_mounted+0x2ec>)
  402a6c:	4798      	blx	r3
  402a6e:	e7e1      	b.n	402a34 <chk_mounted+0x88>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  402a70:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  402a74:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  402a78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402a7c:	b21b      	sxth	r3, r3
  402a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402a82:	d001      	beq.n	402a88 <chk_mounted+0xdc>
		return FR_NO_FILESYSTEM;
  402a84:	200d      	movs	r0, #13
  402a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  402a88:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
  402a8c:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  402a90:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  402a94:	d10d      	bne.n	402ab2 <chk_mounted+0x106>
  402a96:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
  402a9a:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
  402a9e:	0412      	lsls	r2, r2, #16
  402aa0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  402aa4:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
  402aa8:	431a      	orrs	r2, r3
  402aaa:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
  402aae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  402ab2:	61ea      	str	r2, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  402ab4:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  402ab8:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  402abc:	f10e 33ff 	add.w	r3, lr, #4294967295
  402ac0:	b2db      	uxtb	r3, r3
  402ac2:	2b01      	cmp	r3, #1
  402ac4:	d901      	bls.n	402aca <chk_mounted+0x11e>
  402ac6:	200d      	movs	r0, #13
  402ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  402aca:	f895 603d 	ldrb.w	r6, [r5, #61]	; 0x3d
  402ace:	70ae      	strb	r6, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  402ad0:	2e00      	cmp	r6, #0
  402ad2:	f000 80c8 	beq.w	402c66 <chk_mounted+0x2ba>
  402ad6:	1e73      	subs	r3, r6, #1
  402ad8:	4233      	tst	r3, r6
  402ada:	d001      	beq.n	402ae0 <chk_mounted+0x134>
  402adc:	200d      	movs	r0, #13
  402ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  402ae0:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  402ae4:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
  402ae8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  402aec:	8129      	strh	r1, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402aee:	f011 0f0f 	tst.w	r1, #15
  402af2:	f040 80ba 	bne.w	402c6a <chk_mounted+0x2be>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  402af6:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  402afa:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  402afe:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  402b02:	d10d      	bne.n	402b20 <chk_mounted+0x174>
  402b04:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
  402b08:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
  402b0c:	041b      	lsls	r3, r3, #16
  402b0e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  402b12:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
  402b16:	4303      	orrs	r3, r0
  402b18:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  402b1c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  402b20:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
  402b24:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  402b28:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  402b2c:	f000 809f 	beq.w	402c6e <chk_mounted+0x2c2>
	fasize *= b;										/* Number of sectors for FAT area */
  402b30:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  402b34:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  402b38:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  402b3a:	4283      	cmp	r3, r0
  402b3c:	f0c0 8099 	bcc.w	402c72 <chk_mounted+0x2c6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  402b40:	1a1b      	subs	r3, r3, r0
  402b42:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402b46:	2b00      	cmp	r3, #0
  402b48:	f000 8095 	beq.w	402c76 <chk_mounted+0x2ca>
	fmt = FS_FAT12;
  402b4c:	f640 76f5 	movw	r6, #4085	; 0xff5
  402b50:	42b3      	cmp	r3, r6
  402b52:	bf8c      	ite	hi
  402b54:	2602      	movhi	r6, #2
  402b56:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  402b58:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  402b5c:	4563      	cmp	r3, ip
  402b5e:	f200 80a5 	bhi.w	402cac <chk_mounted+0x300>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402b62:	3302      	adds	r3, #2
  402b64:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402b66:	4420      	add	r0, r4
  402b68:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402b6a:	443c      	add	r4, r7
  402b6c:	622c      	str	r4, [r5, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  402b6e:	2900      	cmp	r1, #0
  402b70:	f000 8089 	beq.w	402c86 <chk_mounted+0x2da>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  402b74:	4474      	add	r4, lr
  402b76:	626c      	str	r4, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  402b78:	2e02      	cmp	r6, #2
  402b7a:	d10b      	bne.n	402b94 <chk_mounted+0x1e8>
  402b7c:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402b7e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  402b82:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  402b86:	d37c      	bcc.n	402c82 <chk_mounted+0x2d6>
	fs->free_clust = 0xFFFFFFFF;
  402b88:	f04f 33ff 	mov.w	r3, #4294967295
  402b8c:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  402b8e:	2300      	movs	r3, #0
  402b90:	60eb      	str	r3, [r5, #12]
  402b92:	e051      	b.n	402c38 <chk_mounted+0x28c>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  402b94:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402b98:	f003 0301 	and.w	r3, r3, #1
  402b9c:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  402ba0:	e7ed      	b.n	402b7e <chk_mounted+0x1d2>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  402ba2:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  402ba6:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  402baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  402bae:	b21b      	sxth	r3, r3
  402bb0:	4a3a      	ldr	r2, [pc, #232]	; (402c9c <chk_mounted+0x2f0>)
  402bb2:	4293      	cmp	r3, r2
  402bb4:	d14b      	bne.n	402c4e <chk_mounted+0x2a2>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402bb6:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  402bba:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  402bbe:	041b      	lsls	r3, r3, #16
  402bc0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402bc4:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
  402bc8:	4313      	orrs	r3, r2
  402bca:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  402bce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  402bd2:	4a33      	ldr	r2, [pc, #204]	; (402ca0 <chk_mounted+0x2f4>)
  402bd4:	4293      	cmp	r3, r2
  402bd6:	d13c      	bne.n	402c52 <chk_mounted+0x2a6>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  402bd8:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  402bdc:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  402be0:	041b      	lsls	r3, r3, #16
  402be2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402be6:	f895 2214 	ldrb.w	r2, [r5, #532]	; 0x214
  402bea:	4313      	orrs	r3, r2
  402bec:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  402bf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402bf4:	4a2b      	ldr	r2, [pc, #172]	; (402ca4 <chk_mounted+0x2f8>)
  402bf6:	4293      	cmp	r3, r2
  402bf8:	d12d      	bne.n	402c56 <chk_mounted+0x2aa>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  402bfa:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  402bfe:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  402c02:	041b      	lsls	r3, r3, #16
  402c04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402c08:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  402c0c:	4313      	orrs	r3, r2
  402c0e:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  402c12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402c16:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  402c18:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  402c1c:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  402c20:	041b      	lsls	r3, r3, #16
  402c22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402c26:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  402c2a:	4313      	orrs	r3, r2
  402c2c:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  402c30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402c34:	612b      	str	r3, [r5, #16]
  402c36:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  402c38:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  402c3a:	4a1b      	ldr	r2, [pc, #108]	; (402ca8 <chk_mounted+0x2fc>)
  402c3c:	8813      	ldrh	r3, [r2, #0]
  402c3e:	3301      	adds	r3, #1
  402c40:	b29b      	uxth	r3, r3
  402c42:	8013      	strh	r3, [r2, #0]
  402c44:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  402c46:	2000      	movs	r0, #0
  402c48:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  402c4a:	7128      	strb	r0, [r5, #4]
	return FR_OK;
  402c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c4e:	2603      	movs	r6, #3
  402c50:	e7f2      	b.n	402c38 <chk_mounted+0x28c>
  402c52:	2603      	movs	r6, #3
  402c54:	e7f0      	b.n	402c38 <chk_mounted+0x28c>
  402c56:	2603      	movs	r6, #3
  402c58:	e7ee      	b.n	402c38 <chk_mounted+0x28c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402c5a:	200c      	movs	r0, #12
  402c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  402c5e:	2000      	movs	r0, #0
  402c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  402c62:	2001      	movs	r0, #1
  402c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  402c66:	200d      	movs	r0, #13
  402c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402c6a:	200d      	movs	r0, #13
  402c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  402c6e:	200d      	movs	r0, #13
  402c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  402c72:	200d      	movs	r0, #13
  402c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402c76:	200d      	movs	r0, #13
  402c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  402c7a:	200d      	movs	r0, #13
  402c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402c7e:	200d      	movs	r0, #13
  402c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  402c82:	200d      	movs	r0, #13
  402c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  402c86:	200d      	movs	r0, #13
  402c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c8a:	bf00      	nop
  402c8c:	20400a98 	.word	0x20400a98
  402c90:	004026cd 	.word	0x004026cd
  402c94:	0040268d 	.word	0x0040268d
  402c98:	0040291d 	.word	0x0040291d
  402c9c:	ffffaa55 	.word	0xffffaa55
  402ca0:	41615252 	.word	0x41615252
  402ca4:	61417272 	.word	0x61417272
  402ca8:	20400ab8 	.word	0x20400ab8
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402cac:	3302      	adds	r3, #2
  402cae:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402cb0:	4420      	add	r0, r4
  402cb2:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402cb4:	4427      	add	r7, r4
  402cb6:	622f      	str	r7, [r5, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402cb8:	2900      	cmp	r1, #0
  402cba:	d1e0      	bne.n	402c7e <chk_mounted+0x2d2>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  402cbc:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  402cc0:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
  402cc4:	0409      	lsls	r1, r1, #16
  402cc6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  402cca:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
  402cce:	4301      	orrs	r1, r0
  402cd0:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  402cd4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  402cd8:	6269      	str	r1, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  402cda:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402cdc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  402ce0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  402ce4:	d3c9      	bcc.n	402c7a <chk_mounted+0x2ce>
	fs->free_clust = 0xFFFFFFFF;
  402ce6:	f04f 33ff 	mov.w	r3, #4294967295
  402cea:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  402cec:	2300      	movs	r3, #0
  402cee:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
  402cf0:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  402cf2:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
  402cf6:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
  402cfa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  402cfe:	4422      	add	r2, r4
  402d00:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  402d02:	2301      	movs	r3, #1
  402d04:	f105 0130 	add.w	r1, r5, #48	; 0x30
  402d08:	7868      	ldrb	r0, [r5, #1]
  402d0a:	4c03      	ldr	r4, [pc, #12]	; (402d18 <chk_mounted+0x36c>)
  402d0c:	47a0      	blx	r4
  402d0e:	2800      	cmp	r0, #0
  402d10:	f43f af47 	beq.w	402ba2 <chk_mounted+0x1f6>
  402d14:	2603      	movs	r6, #3
  402d16:	e78f      	b.n	402c38 <chk_mounted+0x28c>
  402d18:	004026e9 	.word	0x004026e9

00402d1c <move_window>:
{
  402d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  402d20:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  402d22:	428f      	cmp	r7, r1
  402d24:	d035      	beq.n	402d92 <move_window+0x76>
  402d26:	460e      	mov	r6, r1
  402d28:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  402d2a:	7903      	ldrb	r3, [r0, #4]
  402d2c:	b91b      	cbnz	r3, 402d36 <move_window+0x1a>
		if (sector) {
  402d2e:	bb2e      	cbnz	r6, 402d7c <move_window+0x60>
	return FR_OK;
  402d30:	2000      	movs	r0, #0
  402d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  402d36:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402d3a:	2301      	movs	r3, #1
  402d3c:	463a      	mov	r2, r7
  402d3e:	4641      	mov	r1, r8
  402d40:	7840      	ldrb	r0, [r0, #1]
  402d42:	4d18      	ldr	r5, [pc, #96]	; (402da4 <move_window+0x88>)
  402d44:	47a8      	blx	r5
  402d46:	bb38      	cbnz	r0, 402d98 <move_window+0x7c>
			fs->wflag = 0;
  402d48:	2300      	movs	r3, #0
  402d4a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  402d4c:	6a23      	ldr	r3, [r4, #32]
  402d4e:	69e2      	ldr	r2, [r4, #28]
  402d50:	4413      	add	r3, r2
  402d52:	429f      	cmp	r7, r3
  402d54:	d2eb      	bcs.n	402d2e <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402d56:	78e5      	ldrb	r5, [r4, #3]
  402d58:	2d01      	cmp	r5, #1
  402d5a:	d9e8      	bls.n	402d2e <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  402d5c:	f04f 0a01 	mov.w	sl, #1
  402d60:	f8df 9040 	ldr.w	r9, [pc, #64]	; 402da4 <move_window+0x88>
					wsect += fs->fsize;
  402d64:	69e3      	ldr	r3, [r4, #28]
  402d66:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  402d68:	4653      	mov	r3, sl
  402d6a:	463a      	mov	r2, r7
  402d6c:	4641      	mov	r1, r8
  402d6e:	7860      	ldrb	r0, [r4, #1]
  402d70:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402d72:	3d01      	subs	r5, #1
  402d74:	b2ed      	uxtb	r5, r5
  402d76:	2d01      	cmp	r5, #1
  402d78:	d1f4      	bne.n	402d64 <move_window+0x48>
  402d7a:	e7d8      	b.n	402d2e <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  402d7c:	2301      	movs	r3, #1
  402d7e:	4632      	mov	r2, r6
  402d80:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402d84:	7860      	ldrb	r0, [r4, #1]
  402d86:	4d08      	ldr	r5, [pc, #32]	; (402da8 <move_window+0x8c>)
  402d88:	47a8      	blx	r5
  402d8a:	b940      	cbnz	r0, 402d9e <move_window+0x82>
			fs->winsect = sector;
  402d8c:	62e6      	str	r6, [r4, #44]	; 0x2c
  402d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  402d92:	2000      	movs	r0, #0
  402d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  402d98:	2001      	movs	r0, #1
  402d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  402d9e:	2001      	movs	r0, #1
}
  402da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402da4:	00402759 	.word	0x00402759
  402da8:	004026e9 	.word	0x004026e9

00402dac <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402dac:	2901      	cmp	r1, #1
  402dae:	d96a      	bls.n	402e86 <get_fat+0xda>
{
  402db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402db2:	6983      	ldr	r3, [r0, #24]
  402db4:	4299      	cmp	r1, r3
  402db6:	d268      	bcs.n	402e8a <get_fat+0xde>
  402db8:	460c      	mov	r4, r1
  402dba:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  402dbc:	7803      	ldrb	r3, [r0, #0]
  402dbe:	2b02      	cmp	r3, #2
  402dc0:	d02f      	beq.n	402e22 <get_fat+0x76>
  402dc2:	2b03      	cmp	r3, #3
  402dc4:	d041      	beq.n	402e4a <get_fat+0x9e>
  402dc6:	2b01      	cmp	r3, #1
  402dc8:	d002      	beq.n	402dd0 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402dca:	f04f 30ff 	mov.w	r0, #4294967295
  402dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  402dd0:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402dd4:	6a01      	ldr	r1, [r0, #32]
  402dd6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402dda:	4b2d      	ldr	r3, [pc, #180]	; (402e90 <get_fat+0xe4>)
  402ddc:	4798      	blx	r3
  402dde:	b110      	cbz	r0, 402de6 <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402de0:	f04f 30ff 	mov.w	r0, #4294967295
  402de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  402de6:	f3c7 0308 	ubfx	r3, r7, #0, #9
  402dea:	4433      	add	r3, r6
  402dec:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  402df0:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402df2:	6a31      	ldr	r1, [r6, #32]
  402df4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402df8:	4630      	mov	r0, r6
  402dfa:	4b25      	ldr	r3, [pc, #148]	; (402e90 <get_fat+0xe4>)
  402dfc:	4798      	blx	r3
  402dfe:	b110      	cbz	r0, 402e06 <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402e00:	f04f 30ff 	mov.w	r0, #4294967295
  402e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  402e06:	f3c7 0708 	ubfx	r7, r7, #0, #9
  402e0a:	19f0      	adds	r0, r6, r7
  402e0c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402e10:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  402e14:	f014 0f01 	tst.w	r4, #1
  402e18:	bf14      	ite	ne
  402e1a:	0900      	lsrne	r0, r0, #4
  402e1c:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  402e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  402e22:	6a01      	ldr	r1, [r0, #32]
  402e24:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402e28:	4b19      	ldr	r3, [pc, #100]	; (402e90 <get_fat+0xe4>)
  402e2a:	4798      	blx	r3
  402e2c:	b110      	cbz	r0, 402e34 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402e2e:	f04f 30ff 	mov.w	r0, #4294967295
  402e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  402e34:	0060      	lsls	r0, r4, #1
  402e36:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  402e3a:	4430      	add	r0, r6
  402e3c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  402e40:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402e44:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  402e4a:	6a01      	ldr	r1, [r0, #32]
  402e4c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402e50:	4b0f      	ldr	r3, [pc, #60]	; (402e90 <get_fat+0xe4>)
  402e52:	4798      	blx	r3
  402e54:	b110      	cbz	r0, 402e5c <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402e56:	f04f 30ff 	mov.w	r0, #4294967295
}
  402e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  402e5c:	00a0      	lsls	r0, r4, #2
  402e5e:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  402e62:	f100 0230 	add.w	r2, r0, #48	; 0x30
  402e66:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  402e68:	78d1      	ldrb	r1, [r2, #3]
  402e6a:	7893      	ldrb	r3, [r2, #2]
  402e6c:	041b      	lsls	r3, r3, #16
  402e6e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  402e72:	4430      	add	r0, r6
  402e74:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402e78:	4318      	orrs	r0, r3
  402e7a:	7853      	ldrb	r3, [r2, #1]
  402e7c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402e80:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  402e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  402e86:	2001      	movs	r0, #1
  402e88:	4770      	bx	lr
  402e8a:	2001      	movs	r0, #1
  402e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e8e:	bf00      	nop
  402e90:	00402d1d 	.word	0x00402d1d

00402e94 <dir_sdi>:
{
  402e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e96:	4605      	mov	r5, r0
  402e98:	460c      	mov	r4, r1
	dj->index = idx;
  402e9a:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  402e9c:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  402e9e:	2901      	cmp	r1, #1
  402ea0:	d03d      	beq.n	402f1e <dir_sdi+0x8a>
  402ea2:	6803      	ldr	r3, [r0, #0]
  402ea4:	699a      	ldr	r2, [r3, #24]
  402ea6:	4291      	cmp	r1, r2
  402ea8:	d301      	bcc.n	402eae <dir_sdi+0x1a>
		return FR_INT_ERR;
  402eaa:	2002      	movs	r0, #2
  402eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  402eae:	b961      	cbnz	r1, 402eca <dir_sdi+0x36>
  402eb0:	781a      	ldrb	r2, [r3, #0]
  402eb2:	2a03      	cmp	r2, #3
  402eb4:	d006      	beq.n	402ec4 <dir_sdi+0x30>
		dj->clust = clst;
  402eb6:	2200      	movs	r2, #0
  402eb8:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  402eba:	891a      	ldrh	r2, [r3, #8]
  402ebc:	42a2      	cmp	r2, r4
  402ebe:	d821      	bhi.n	402f04 <dir_sdi+0x70>
			return FR_INT_ERR;
  402ec0:	2002      	movs	r0, #2
  402ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  402ec4:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  402ec6:	2900      	cmp	r1, #0
  402ec8:	d0f5      	beq.n	402eb6 <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  402eca:	789e      	ldrb	r6, [r3, #2]
  402ecc:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  402ece:	42b4      	cmp	r4, r6
  402ed0:	d310      	bcc.n	402ef4 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  402ed2:	4f17      	ldr	r7, [pc, #92]	; (402f30 <dir_sdi+0x9c>)
  402ed4:	6828      	ldr	r0, [r5, #0]
  402ed6:	47b8      	blx	r7
  402ed8:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402eda:	f1b0 3fff 	cmp.w	r0, #4294967295
  402ede:	d020      	beq.n	402f22 <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  402ee0:	2801      	cmp	r0, #1
  402ee2:	d920      	bls.n	402f26 <dir_sdi+0x92>
  402ee4:	682b      	ldr	r3, [r5, #0]
  402ee6:	699b      	ldr	r3, [r3, #24]
  402ee8:	4298      	cmp	r0, r3
  402eea:	d21e      	bcs.n	402f2a <dir_sdi+0x96>
			idx -= ic;
  402eec:	1ba4      	subs	r4, r4, r6
  402eee:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  402ef0:	42a6      	cmp	r6, r4
  402ef2:	d9ef      	bls.n	402ed4 <dir_sdi+0x40>
		dj->clust = clst;
  402ef4:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402ef6:	6828      	ldr	r0, [r5, #0]
  402ef8:	4b0e      	ldr	r3, [pc, #56]	; (402f34 <dir_sdi+0xa0>)
  402efa:	4798      	blx	r3
  402efc:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  402f00:	6128      	str	r0, [r5, #16]
  402f02:	e003      	b.n	402f0c <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402f06:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  402f0a:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  402f0c:	682b      	ldr	r3, [r5, #0]
  402f0e:	3330      	adds	r3, #48	; 0x30
  402f10:	f004 040f 	and.w	r4, r4, #15
  402f14:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  402f18:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  402f1a:	2000      	movs	r0, #0
  402f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  402f1e:	2002      	movs	r0, #2
  402f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402f22:	2001      	movs	r0, #1
  402f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  402f26:	2002      	movs	r0, #2
  402f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f2a:	2002      	movs	r0, #2
}
  402f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f2e:	bf00      	nop
  402f30:	00402dad 	.word	0x00402dad
  402f34:	004028b3 	.word	0x004028b3

00402f38 <put_fat>:
{
  402f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402f3c:	2901      	cmp	r1, #1
  402f3e:	f240 808f 	bls.w	403060 <put_fat+0x128>
  402f42:	6983      	ldr	r3, [r0, #24]
  402f44:	4299      	cmp	r1, r3
  402f46:	d301      	bcc.n	402f4c <put_fat+0x14>
		res = FR_INT_ERR;
  402f48:	2702      	movs	r7, #2
	return res;
  402f4a:	e08a      	b.n	403062 <put_fat+0x12a>
  402f4c:	4615      	mov	r5, r2
  402f4e:	460c      	mov	r4, r1
  402f50:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  402f52:	7803      	ldrb	r3, [r0, #0]
  402f54:	2b02      	cmp	r3, #2
  402f56:	d04e      	beq.n	402ff6 <put_fat+0xbe>
  402f58:	2b03      	cmp	r3, #3
  402f5a:	d05f      	beq.n	40301c <put_fat+0xe4>
  402f5c:	2b01      	cmp	r3, #1
  402f5e:	d003      	beq.n	402f68 <put_fat+0x30>
			res = FR_INT_ERR;
  402f60:	2702      	movs	r7, #2
		fs->wflag = 1;
  402f62:	2301      	movs	r3, #1
  402f64:	7133      	strb	r3, [r6, #4]
  402f66:	e07c      	b.n	403062 <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  402f68:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402f6c:	6a01      	ldr	r1, [r0, #32]
  402f6e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402f72:	4b3d      	ldr	r3, [pc, #244]	; (403068 <put_fat+0x130>)
  402f74:	4798      	blx	r3
			if (res != FR_OK) break;
  402f76:	4607      	mov	r7, r0
  402f78:	2800      	cmp	r0, #0
  402f7a:	d1f2      	bne.n	402f62 <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  402f7c:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402f80:	f014 0f01 	tst.w	r4, #1
  402f84:	d01c      	beq.n	402fc0 <put_fat+0x88>
  402f86:	4433      	add	r3, r6
  402f88:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  402f8c:	f002 020f 	and.w	r2, r2, #15
  402f90:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  402f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  402f98:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402f9c:	2301      	movs	r3, #1
  402f9e:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402fa0:	6a31      	ldr	r1, [r6, #32]
  402fa2:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402fa6:	4630      	mov	r0, r6
  402fa8:	4b2f      	ldr	r3, [pc, #188]	; (403068 <put_fat+0x130>)
  402faa:	4798      	blx	r3
			if (res != FR_OK) break;
  402fac:	2800      	cmp	r0, #0
  402fae:	d153      	bne.n	403058 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  402fb0:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402fb4:	f3c5 1207 	ubfx	r2, r5, #4, #8
  402fb8:	44b0      	add	r8, r6
  402fba:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  402fbe:	e7d0      	b.n	402f62 <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402fc0:	4433      	add	r3, r6
  402fc2:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  402fc6:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402fca:	2301      	movs	r3, #1
  402fcc:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402fce:	6a31      	ldr	r1, [r6, #32]
  402fd0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402fd4:	4630      	mov	r0, r6
  402fd6:	4b24      	ldr	r3, [pc, #144]	; (403068 <put_fat+0x130>)
  402fd8:	4798      	blx	r3
			if (res != FR_OK) break;
  402fda:	2800      	cmp	r0, #0
  402fdc:	d13e      	bne.n	40305c <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  402fde:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402fe2:	eb06 0308 	add.w	r3, r6, r8
  402fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402fea:	f023 030f 	bic.w	r3, r3, #15
  402fee:	f3c5 2203 	ubfx	r2, r5, #8, #4
  402ff2:	431a      	orrs	r2, r3
  402ff4:	e7e0      	b.n	402fb8 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  402ff6:	6a01      	ldr	r1, [r0, #32]
  402ff8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402ffc:	4b1a      	ldr	r3, [pc, #104]	; (403068 <put_fat+0x130>)
  402ffe:	4798      	blx	r3
			if (res != FR_OK) break;
  403000:	4607      	mov	r7, r0
  403002:	2800      	cmp	r0, #0
  403004:	d1ad      	bne.n	402f62 <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  403006:	0063      	lsls	r3, r4, #1
  403008:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  40300c:	4433      	add	r3, r6
  40300e:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  403012:	f3c5 2207 	ubfx	r2, r5, #8, #8
  403016:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  40301a:	e7a2      	b.n	402f62 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  40301c:	6a01      	ldr	r1, [r0, #32]
  40301e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  403022:	4b11      	ldr	r3, [pc, #68]	; (403068 <put_fat+0x130>)
  403024:	4798      	blx	r3
			if (res != FR_OK) break;
  403026:	4607      	mov	r7, r0
  403028:	2800      	cmp	r0, #0
  40302a:	d19a      	bne.n	402f62 <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  40302c:	00a1      	lsls	r1, r4, #2
  40302e:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  403032:	f101 0330 	add.w	r3, r1, #48	; 0x30
  403036:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  403038:	78da      	ldrb	r2, [r3, #3]
  40303a:	0612      	lsls	r2, r2, #24
  40303c:	4431      	add	r1, r6
  40303e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  403042:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  403044:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  403048:	f3c2 2107 	ubfx	r1, r2, #8, #8
  40304c:	7059      	strb	r1, [r3, #1]
  40304e:	0c11      	lsrs	r1, r2, #16
  403050:	7099      	strb	r1, [r3, #2]
  403052:	0e12      	lsrs	r2, r2, #24
  403054:	70da      	strb	r2, [r3, #3]
			break;
  403056:	e784      	b.n	402f62 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  403058:	4607      	mov	r7, r0
  40305a:	e782      	b.n	402f62 <put_fat+0x2a>
  40305c:	4607      	mov	r7, r0
  40305e:	e780      	b.n	402f62 <put_fat+0x2a>
		res = FR_INT_ERR;
  403060:	2702      	movs	r7, #2
}
  403062:	4638      	mov	r0, r7
  403064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403068:	00402d1d 	.word	0x00402d1d

0040306c <create_chain>:
{
  40306c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403070:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  403072:	4688      	mov	r8, r1
  403074:	b941      	cbnz	r1, 403088 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  403076:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  403078:	b186      	cbz	r6, 40309c <create_chain+0x30>
  40307a:	6983      	ldr	r3, [r0, #24]
  40307c:	429e      	cmp	r6, r3
  40307e:	bf28      	it	cs
  403080:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  403082:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  403084:	4f27      	ldr	r7, [pc, #156]	; (403124 <create_chain+0xb8>)
  403086:	e017      	b.n	4030b8 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  403088:	4b26      	ldr	r3, [pc, #152]	; (403124 <create_chain+0xb8>)
  40308a:	4798      	blx	r3
  40308c:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40308e:	2801      	cmp	r0, #1
  403090:	d93e      	bls.n	403110 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  403092:	69aa      	ldr	r2, [r5, #24]
  403094:	4290      	cmp	r0, r2
  403096:	d340      	bcc.n	40311a <create_chain+0xae>
		scl = clst;
  403098:	4646      	mov	r6, r8
  40309a:	e7f2      	b.n	403082 <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  40309c:	2601      	movs	r6, #1
  40309e:	e7f0      	b.n	403082 <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4030a0:	4621      	mov	r1, r4
  4030a2:	4628      	mov	r0, r5
  4030a4:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  4030a6:	4603      	mov	r3, r0
  4030a8:	b170      	cbz	r0, 4030c8 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  4030aa:	f1b0 3fff 	cmp.w	r0, #4294967295
  4030ae:	d034      	beq.n	40311a <create_chain+0xae>
  4030b0:	2801      	cmp	r0, #1
  4030b2:	d032      	beq.n	40311a <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4030b4:	42b4      	cmp	r4, r6
  4030b6:	d02f      	beq.n	403118 <create_chain+0xac>
		ncl++;							/* Next cluster */
  4030b8:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  4030ba:	69ab      	ldr	r3, [r5, #24]
  4030bc:	429c      	cmp	r4, r3
  4030be:	d3ef      	bcc.n	4030a0 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  4030c0:	2e01      	cmp	r6, #1
  4030c2:	d927      	bls.n	403114 <create_chain+0xa8>
			ncl = 2;
  4030c4:	2402      	movs	r4, #2
  4030c6:	e7eb      	b.n	4030a0 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  4030c8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  4030cc:	4621      	mov	r1, r4
  4030ce:	4628      	mov	r0, r5
  4030d0:	4b15      	ldr	r3, [pc, #84]	; (403128 <create_chain+0xbc>)
  4030d2:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  4030d4:	4603      	mov	r3, r0
  4030d6:	b910      	cbnz	r0, 4030de <create_chain+0x72>
  4030d8:	f1b8 0f00 	cmp.w	r8, #0
  4030dc:	d10b      	bne.n	4030f6 <create_chain+0x8a>
	if (res == FR_OK) {
  4030de:	b98b      	cbnz	r3, 403104 <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
  4030e0:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  4030e2:	692b      	ldr	r3, [r5, #16]
  4030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4030e8:	d01a      	beq.n	403120 <create_chain+0xb4>
			fs->free_clust--;
  4030ea:	3b01      	subs	r3, #1
  4030ec:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  4030ee:	2301      	movs	r3, #1
  4030f0:	716b      	strb	r3, [r5, #5]
  4030f2:	4623      	mov	r3, r4
  4030f4:	e011      	b.n	40311a <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  4030f6:	4622      	mov	r2, r4
  4030f8:	4641      	mov	r1, r8
  4030fa:	4628      	mov	r0, r5
  4030fc:	4b0a      	ldr	r3, [pc, #40]	; (403128 <create_chain+0xbc>)
  4030fe:	4798      	blx	r3
  403100:	4603      	mov	r3, r0
  403102:	e7ec      	b.n	4030de <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  403104:	2b01      	cmp	r3, #1
  403106:	bf0c      	ite	eq
  403108:	f04f 33ff 	moveq.w	r3, #4294967295
  40310c:	2301      	movne	r3, #1
  40310e:	e004      	b.n	40311a <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  403110:	2301      	movs	r3, #1
  403112:	e002      	b.n	40311a <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  403114:	2300      	movs	r3, #0
  403116:	e000      	b.n	40311a <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  403118:	2300      	movs	r3, #0
}
  40311a:	4618      	mov	r0, r3
  40311c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403120:	4623      	mov	r3, r4
  403122:	e7fa      	b.n	40311a <create_chain+0xae>
  403124:	00402dad 	.word	0x00402dad
  403128:	00402f39 	.word	0x00402f39

0040312c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  40312c:	2901      	cmp	r1, #1
  40312e:	d92e      	bls.n	40318e <remove_chain+0x62>
{
  403130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403134:	4604      	mov	r4, r0
  403136:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  403138:	6983      	ldr	r3, [r0, #24]
  40313a:	4299      	cmp	r1, r3
  40313c:	d303      	bcc.n	403146 <remove_chain+0x1a>
		res = FR_INT_ERR;
  40313e:	2202      	movs	r2, #2
}
  403140:	4610      	mov	r0, r2
  403142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  403146:	4f16      	ldr	r7, [pc, #88]	; (4031a0 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  403148:	f04f 0900 	mov.w	r9, #0
  40314c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4031a4 <remove_chain+0x78>
  403150:	e003      	b.n	40315a <remove_chain+0x2e>
  403152:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  403154:	69a3      	ldr	r3, [r4, #24]
  403156:	42ab      	cmp	r3, r5
  403158:	d9f2      	bls.n	403140 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40315a:	4631      	mov	r1, r6
  40315c:	4620      	mov	r0, r4
  40315e:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  403160:	4605      	mov	r5, r0
  403162:	b1b8      	cbz	r0, 403194 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  403164:	2801      	cmp	r0, #1
  403166:	d017      	beq.n	403198 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  403168:	f1b0 3fff 	cmp.w	r0, #4294967295
  40316c:	d016      	beq.n	40319c <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40316e:	464a      	mov	r2, r9
  403170:	4631      	mov	r1, r6
  403172:	4620      	mov	r0, r4
  403174:	47c0      	blx	r8
			if (res != FR_OK) break;
  403176:	4602      	mov	r2, r0
  403178:	2800      	cmp	r0, #0
  40317a:	d1e1      	bne.n	403140 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  40317c:	6923      	ldr	r3, [r4, #16]
  40317e:	f1b3 3fff 	cmp.w	r3, #4294967295
  403182:	d0e6      	beq.n	403152 <remove_chain+0x26>
				fs->free_clust++;
  403184:	3301      	adds	r3, #1
  403186:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  403188:	2301      	movs	r3, #1
  40318a:	7163      	strb	r3, [r4, #5]
  40318c:	e7e1      	b.n	403152 <remove_chain+0x26>
		res = FR_INT_ERR;
  40318e:	2202      	movs	r2, #2
}
  403190:	4610      	mov	r0, r2
  403192:	4770      	bx	lr
  403194:	2200      	movs	r2, #0
  403196:	e7d3      	b.n	403140 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  403198:	2202      	movs	r2, #2
  40319a:	e7d1      	b.n	403140 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  40319c:	2201      	movs	r2, #1
  40319e:	e7cf      	b.n	403140 <remove_chain+0x14>
  4031a0:	00402dad 	.word	0x00402dad
  4031a4:	00402f39 	.word	0x00402f39

004031a8 <dir_next>:
{
  4031a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  4031ac:	88c4      	ldrh	r4, [r0, #6]
  4031ae:	3401      	adds	r4, #1
  4031b0:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4031b2:	b914      	cbnz	r4, 4031ba <dir_next+0x12>
		return FR_NO_FILE;
  4031b4:	2004      	movs	r0, #4
  4031b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4031ba:	6903      	ldr	r3, [r0, #16]
  4031bc:	b913      	cbnz	r3, 4031c4 <dir_next+0x1c>
		return FR_NO_FILE;
  4031be:	2004      	movs	r0, #4
  4031c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031c4:	460e      	mov	r6, r1
  4031c6:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  4031c8:	f014 070f 	ands.w	r7, r4, #15
  4031cc:	d110      	bne.n	4031f0 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  4031ce:	3301      	adds	r3, #1
  4031d0:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  4031d2:	68c1      	ldr	r1, [r0, #12]
  4031d4:	b931      	cbnz	r1, 4031e4 <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  4031d6:	6803      	ldr	r3, [r0, #0]
  4031d8:	891b      	ldrh	r3, [r3, #8]
  4031da:	42a3      	cmp	r3, r4
  4031dc:	d808      	bhi.n	4031f0 <dir_next+0x48>
				return FR_NO_FILE;
  4031de:	2004      	movs	r0, #4
  4031e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  4031e4:	6800      	ldr	r0, [r0, #0]
  4031e6:	7883      	ldrb	r3, [r0, #2]
  4031e8:	3b01      	subs	r3, #1
  4031ea:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  4031ee:	d008      	beq.n	403202 <dir_next+0x5a>
	dj->index = i;
  4031f0:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  4031f2:	682b      	ldr	r3, [r5, #0]
  4031f4:	3330      	adds	r3, #48	; 0x30
  4031f6:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  4031fa:	616b      	str	r3, [r5, #20]
	return FR_OK;
  4031fc:	2000      	movs	r0, #0
  4031fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  403202:	4b32      	ldr	r3, [pc, #200]	; (4032cc <dir_next+0x124>)
  403204:	4798      	blx	r3
  403206:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  403208:	2801      	cmp	r0, #1
  40320a:	d94d      	bls.n	4032a8 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40320c:	f1b0 3fff 	cmp.w	r0, #4294967295
  403210:	d04d      	beq.n	4032ae <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  403212:	6828      	ldr	r0, [r5, #0]
  403214:	6983      	ldr	r3, [r0, #24]
  403216:	4598      	cmp	r8, r3
  403218:	d33e      	bcc.n	403298 <dir_next+0xf0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  40321a:	b916      	cbnz	r6, 403222 <dir_next+0x7a>
  40321c:	2004      	movs	r0, #4
  40321e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  403222:	68e9      	ldr	r1, [r5, #12]
  403224:	4b2a      	ldr	r3, [pc, #168]	; (4032d0 <dir_next+0x128>)
  403226:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  403228:	4680      	mov	r8, r0
  40322a:	b910      	cbnz	r0, 403232 <dir_next+0x8a>
  40322c:	2007      	movs	r0, #7
  40322e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  403232:	2801      	cmp	r0, #1
  403234:	d03e      	beq.n	4032b4 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  403236:	f1b0 3fff 	cmp.w	r0, #4294967295
  40323a:	d03e      	beq.n	4032ba <dir_next+0x112>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  40323c:	2100      	movs	r1, #0
  40323e:	6828      	ldr	r0, [r5, #0]
  403240:	4b24      	ldr	r3, [pc, #144]	; (4032d4 <dir_next+0x12c>)
  403242:	4798      	blx	r3
  403244:	2800      	cmp	r0, #0
  403246:	d13b      	bne.n	4032c0 <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  403248:	6828      	ldr	r0, [r5, #0]
  40324a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40324e:	2100      	movs	r1, #0
  403250:	3030      	adds	r0, #48	; 0x30
  403252:	4b21      	ldr	r3, [pc, #132]	; (4032d8 <dir_next+0x130>)
  403254:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  403256:	682e      	ldr	r6, [r5, #0]
  403258:	4641      	mov	r1, r8
  40325a:	4630      	mov	r0, r6
  40325c:	4b1f      	ldr	r3, [pc, #124]	; (4032dc <dir_next+0x134>)
  40325e:	4798      	blx	r3
  403260:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  403262:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  403264:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  403268:	46b2      	mov	sl, r6
  40326a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 4032d4 <dir_next+0x12c>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40326e:	682b      	ldr	r3, [r5, #0]
  403270:	7899      	ldrb	r1, [r3, #2]
  403272:	b2f2      	uxtb	r2, r6
  403274:	4291      	cmp	r1, r2
  403276:	d90b      	bls.n	403290 <dir_next+0xe8>
						dj->fs->wflag = 1;
  403278:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40327c:	4651      	mov	r1, sl
  40327e:	6828      	ldr	r0, [r5, #0]
  403280:	47c8      	blx	r9
  403282:	3601      	adds	r6, #1
  403284:	b9f8      	cbnz	r0, 4032c6 <dir_next+0x11e>
						dj->fs->winsect++;
  403286:	682a      	ldr	r2, [r5, #0]
  403288:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  40328a:	3301      	adds	r3, #1
  40328c:	62d3      	str	r3, [r2, #44]	; 0x2c
  40328e:	e7ee      	b.n	40326e <dir_next+0xc6>
					dj->fs->winsect -= c;						/* Rewind window address */
  403290:	4616      	mov	r6, r2
  403292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  403294:	1b96      	subs	r6, r2, r6
  403296:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  403298:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  40329c:	4641      	mov	r1, r8
  40329e:	6828      	ldr	r0, [r5, #0]
  4032a0:	4b0e      	ldr	r3, [pc, #56]	; (4032dc <dir_next+0x134>)
  4032a2:	4798      	blx	r3
  4032a4:	6128      	str	r0, [r5, #16]
  4032a6:	e7a3      	b.n	4031f0 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  4032a8:	2002      	movs	r0, #2
  4032aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4032ae:	2001      	movs	r0, #1
  4032b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4032b4:	2002      	movs	r0, #2
  4032b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4032ba:	2001      	movs	r0, #1
  4032bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4032c0:	2001      	movs	r0, #1
  4032c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4032c6:	2001      	movs	r0, #1
}
  4032c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032cc:	00402dad 	.word	0x00402dad
  4032d0:	0040306d 	.word	0x0040306d
  4032d4:	00402d1d 	.word	0x00402d1d
  4032d8:	004028a5 	.word	0x004028a5
  4032dc:	004028b3 	.word	0x004028b3

004032e0 <dir_find>:
{
  4032e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032e4:	b085      	sub	sp, #20
  4032e6:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  4032e8:	2100      	movs	r1, #0
  4032ea:	4b61      	ldr	r3, [pc, #388]	; (403470 <dir_find+0x190>)
  4032ec:	4798      	blx	r3
	if (res != FR_OK) return res;
  4032ee:	4680      	mov	r8, r0
  4032f0:	bb08      	cbnz	r0, 403336 <dir_find+0x56>
  4032f2:	f04f 0bff 	mov.w	fp, #255	; 0xff
  4032f6:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  4032f8:	4f5e      	ldr	r7, [pc, #376]	; (403474 <dir_find+0x194>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4032fa:	46da      	mov	sl, fp
  4032fc:	e094      	b.n	403428 <dir_find+0x148>
			if (a == AM_LFN) {			/* An LFN entry is found */
  4032fe:	2a0f      	cmp	r2, #15
  403300:	d01d      	beq.n	40333e <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  403302:	f1b9 0f00 	cmp.w	r9, #0
  403306:	d104      	bne.n	403312 <dir_find+0x32>
  403308:	4620      	mov	r0, r4
  40330a:	4b5b      	ldr	r3, [pc, #364]	; (403478 <dir_find+0x198>)
  40330c:	4798      	blx	r3
  40330e:	4582      	cmp	sl, r0
  403310:	d011      	beq.n	403336 <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  403312:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403316:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  403318:	69ab      	ldr	r3, [r5, #24]
  40331a:	7ada      	ldrb	r2, [r3, #11]
  40331c:	f012 0f01 	tst.w	r2, #1
  403320:	d179      	bne.n	403416 <dir_find+0x136>
  403322:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  403326:	f814 1b01 	ldrb.w	r1, [r4], #1
  40332a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40332e:	4291      	cmp	r1, r2
  403330:	d16b      	bne.n	40340a <dir_find+0x12a>
  403332:	4284      	cmp	r4, r0
  403334:	d1f7      	bne.n	403326 <dir_find+0x46>
}
  403336:	4640      	mov	r0, r8
  403338:	b005      	add	sp, #20
  40333a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  40333e:	f8d5 801c 	ldr.w	r8, [r5, #28]
  403342:	f1b8 0f00 	cmp.w	r8, #0
  403346:	d068      	beq.n	40341a <dir_find+0x13a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  403348:	f016 0f40 	tst.w	r6, #64	; 0x40
  40334c:	d00c      	beq.n	403368 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  40334e:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  403352:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  403356:	88eb      	ldrh	r3, [r5, #6]
  403358:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40335a:	f894 b00d 	ldrb.w	fp, [r4, #13]
  40335e:	45d3      	cmp	fp, sl
  403360:	d007      	beq.n	403372 <dir_find+0x92>
  403362:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403366:	e058      	b.n	40341a <dir_find+0x13a>
  403368:	45b1      	cmp	r9, r6
  40336a:	d0f6      	beq.n	40335a <dir_find+0x7a>
  40336c:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403370:	e053      	b.n	40341a <dir_find+0x13a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  403372:	f894 a000 	ldrb.w	sl, [r4]
  403376:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  40337a:	f10a 3aff 	add.w	sl, sl, #4294967295
  40337e:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  403382:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  403386:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 403484 <dir_find+0x1a4>
  40338a:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  40338e:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  403390:	9603      	str	r6, [sp, #12]
  403392:	f8cd b004 	str.w	fp, [sp, #4]
  403396:	461e      	mov	r6, r3
  403398:	9502      	str	r5, [sp, #8]
  40339a:	e00f      	b.n	4033bc <dir_find+0xdc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40339c:	4618      	mov	r0, r3
  40339e:	4b37      	ldr	r3, [pc, #220]	; (40347c <dir_find+0x19c>)
  4033a0:	4798      	blx	r3
  4033a2:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  4033a4:	2efe      	cmp	r6, #254	; 0xfe
  4033a6:	d85a      	bhi.n	40345e <dir_find+0x17e>
  4033a8:	1c75      	adds	r5, r6, #1
  4033aa:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  4033ae:	4b33      	ldr	r3, [pc, #204]	; (40347c <dir_find+0x19c>)
  4033b0:	4798      	blx	r3
  4033b2:	4583      	cmp	fp, r0
  4033b4:	d157      	bne.n	403466 <dir_find+0x186>
  4033b6:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  4033b8:	45d1      	cmp	r9, sl
  4033ba:	d013      	beq.n	4033e4 <dir_find+0x104>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4033bc:	f819 2b01 	ldrb.w	r2, [r9], #1
  4033c0:	18a3      	adds	r3, r4, r2
  4033c2:	7859      	ldrb	r1, [r3, #1]
  4033c4:	5ca3      	ldrb	r3, [r4, r2]
  4033c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  4033ca:	2800      	cmp	r0, #0
  4033cc:	d1e6      	bne.n	40339c <dir_find+0xbc>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4033ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4033d2:	4293      	cmp	r3, r2
  4033d4:	d0f0      	beq.n	4033b8 <dir_find+0xd8>
  4033d6:	f8dd b004 	ldr.w	fp, [sp, #4]
  4033da:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4033dc:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4033de:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4033e2:	e01a      	b.n	40341a <dir_find+0x13a>
  4033e4:	f8dd b004 	ldr.w	fp, [sp, #4]
  4033e8:	4632      	mov	r2, r6
  4033ea:	9e03      	ldr	r6, [sp, #12]
  4033ec:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  4033ee:	7823      	ldrb	r3, [r4, #0]
  4033f0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4033f4:	d004      	beq.n	403400 <dir_find+0x120>
  4033f6:	b118      	cbz	r0, 403400 <dir_find+0x120>
  4033f8:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  4033fc:	2b00      	cmp	r3, #0
  4033fe:	d1ed      	bne.n	4033dc <dir_find+0xfc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  403400:	3e01      	subs	r6, #1
  403402:	fa5f f986 	uxtb.w	r9, r6
  403406:	46da      	mov	sl, fp
  403408:	e007      	b.n	40341a <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40340a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40340e:	e004      	b.n	40341a <dir_find+0x13a>
			ord = 0xFF;
  403410:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403414:	e001      	b.n	40341a <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  403416:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  40341a:	2100      	movs	r1, #0
  40341c:	4628      	mov	r0, r5
  40341e:	4b18      	ldr	r3, [pc, #96]	; (403480 <dir_find+0x1a0>)
  403420:	4798      	blx	r3
	} while (res == FR_OK);
  403422:	4680      	mov	r8, r0
  403424:	2800      	cmp	r0, #0
  403426:	d186      	bne.n	403336 <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  403428:	6929      	ldr	r1, [r5, #16]
  40342a:	6828      	ldr	r0, [r5, #0]
  40342c:	47b8      	blx	r7
		if (res != FR_OK) break;
  40342e:	4680      	mov	r8, r0
  403430:	2800      	cmp	r0, #0
  403432:	d180      	bne.n	403336 <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  403434:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  403436:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  403438:	b176      	cbz	r6, 403458 <dir_find+0x178>
		a = dir[DIR_Attr] & AM_MASK;
  40343a:	7ae3      	ldrb	r3, [r4, #11]
  40343c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  403440:	2ee5      	cmp	r6, #229	; 0xe5
  403442:	d0e5      	beq.n	403410 <dir_find+0x130>
  403444:	f013 0f08 	tst.w	r3, #8
  403448:	f43f af59 	beq.w	4032fe <dir_find+0x1e>
  40344c:	2a0f      	cmp	r2, #15
  40344e:	f43f af56 	beq.w	4032fe <dir_find+0x1e>
			ord = 0xFF;
  403452:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403456:	e7e0      	b.n	40341a <dir_find+0x13a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  403458:	f04f 0804 	mov.w	r8, #4
  40345c:	e76b      	b.n	403336 <dir_find+0x56>
  40345e:	f8dd b004 	ldr.w	fp, [sp, #4]
  403462:	9d02      	ldr	r5, [sp, #8]
  403464:	e7ba      	b.n	4033dc <dir_find+0xfc>
  403466:	f8dd b004 	ldr.w	fp, [sp, #4]
  40346a:	9d02      	ldr	r5, [sp, #8]
  40346c:	e7b6      	b.n	4033dc <dir_find+0xfc>
  40346e:	bf00      	nop
  403470:	00402e95 	.word	0x00402e95
  403474:	00402d1d 	.word	0x00402d1d
  403478:	004028cb 	.word	0x004028cb
  40347c:	00404069 	.word	0x00404069
  403480:	004031a9 	.word	0x004031a9
  403484:	004078e4 	.word	0x004078e4

00403488 <dir_register>:
{
  403488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40348c:	b089      	sub	sp, #36	; 0x24
  40348e:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  403490:	6985      	ldr	r5, [r0, #24]
  403492:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  403496:	220c      	movs	r2, #12
  403498:	4629      	mov	r1, r5
  40349a:	a805      	add	r0, sp, #20
  40349c:	4ba8      	ldr	r3, [pc, #672]	; (403740 <dir_register+0x2b8>)
  40349e:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  4034a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4034a4:	f013 0f01 	tst.w	r3, #1
  4034a8:	d079      	beq.n	40359e <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  4034aa:	2300      	movs	r3, #0
  4034ac:	72eb      	strb	r3, [r5, #11]
  4034ae:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  4034b0:	220b      	movs	r2, #11
  4034b2:	a905      	add	r1, sp, #20
  4034b4:	4628      	mov	r0, r5
  4034b6:	4ba2      	ldr	r3, [pc, #648]	; (403740 <dir_register+0x2b8>)
  4034b8:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  4034ba:	2701      	movs	r7, #1
  4034bc:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4034be:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  4034c2:	f8df 929c 	ldr.w	r9, [pc, #668]	; 403760 <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  4034c6:	f8df a278 	ldr.w	sl, [pc, #632]	; 403740 <dir_register+0x2b8>
  4034ca:	e032      	b.n	403532 <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  4034cc:	463b      	mov	r3, r7
  4034ce:	e030      	b.n	403532 <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4034d0:	4613      	mov	r3, r2
  4034d2:	e002      	b.n	4034da <dir_register+0x52>
  4034d4:	2300      	movs	r3, #0
  4034d6:	e000      	b.n	4034da <dir_register+0x52>
  4034d8:	4613      	mov	r3, r2
  4034da:	442b      	add	r3, r5
  4034dc:	e005      	b.n	4034ea <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4034de:	4641      	mov	r1, r8
  4034e0:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  4034e4:	1b59      	subs	r1, r3, r5
  4034e6:	2907      	cmp	r1, #7
  4034e8:	d807      	bhi.n	4034fa <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4034ea:	2a07      	cmp	r2, #7
  4034ec:	d8f7      	bhi.n	4034de <dir_register+0x56>
  4034ee:	a908      	add	r1, sp, #32
  4034f0:	4411      	add	r1, r2
  4034f2:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  4034f6:	3201      	adds	r2, #1
  4034f8:	e7f2      	b.n	4034e0 <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  4034fa:	4620      	mov	r0, r4
  4034fc:	47c8      	blx	r9
			if (res != FR_OK) break;
  4034fe:	4606      	mov	r6, r0
  403500:	2800      	cmp	r0, #0
  403502:	d13e      	bne.n	403582 <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  403504:	3701      	adds	r7, #1
  403506:	b2bf      	uxth	r7, r7
  403508:	2f64      	cmp	r7, #100	; 0x64
  40350a:	d038      	beq.n	40357e <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  40350c:	220b      	movs	r2, #11
  40350e:	a905      	add	r1, sp, #20
  403510:	4628      	mov	r0, r5
  403512:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  403514:	2f05      	cmp	r7, #5
  403516:	d9d9      	bls.n	4034cc <dir_register+0x44>
  403518:	463b      	mov	r3, r7
  40351a:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  40351c:	03da      	lsls	r2, r3, #15
  40351e:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  403522:	f831 2b02 	ldrh.w	r2, [r1], #2
  403526:	fa12 f383 	uxtah	r3, r2, r3
  40352a:	b29b      	uxth	r3, r3
  40352c:	880a      	ldrh	r2, [r1, #0]
  40352e:	2a00      	cmp	r2, #0
  403530:	d1f4      	bne.n	40351c <dir_register+0x94>
  403532:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  403536:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  403538:	f003 000f 	and.w	r0, r3, #15
  40353c:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  403540:	2939      	cmp	r1, #57	; 0x39
  403542:	bf88      	it	hi
  403544:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  403548:	3a01      	subs	r2, #1
  40354a:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  40354e:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  403552:	2b00      	cmp	r3, #0
  403554:	d1f0      	bne.n	403538 <dir_register+0xb0>
	ns[i] = '~';
  403556:	217e      	movs	r1, #126	; 0x7e
  403558:	ab08      	add	r3, sp, #32
  40355a:	4413      	add	r3, r2
  40355c:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  403560:	2a00      	cmp	r2, #0
  403562:	d0b5      	beq.n	4034d0 <dir_register+0x48>
  403564:	782b      	ldrb	r3, [r5, #0]
  403566:	2b20      	cmp	r3, #32
  403568:	d0b4      	beq.n	4034d4 <dir_register+0x4c>
  40356a:	4629      	mov	r1, r5
  40356c:	2300      	movs	r3, #0
  40356e:	3301      	adds	r3, #1
  403570:	429a      	cmp	r2, r3
  403572:	d0b1      	beq.n	4034d8 <dir_register+0x50>
  403574:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  403578:	2820      	cmp	r0, #32
  40357a:	d1f8      	bne.n	40356e <dir_register+0xe6>
  40357c:	e7ad      	b.n	4034da <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40357e:	2607      	movs	r6, #7
  403580:	e004      	b.n	40358c <dir_register+0x104>
  403582:	2f64      	cmp	r7, #100	; 0x64
  403584:	f000 80ac 	beq.w	4036e0 <dir_register+0x258>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  403588:	2804      	cmp	r0, #4
  40358a:	d003      	beq.n	403594 <dir_register+0x10c>
}
  40358c:	4630      	mov	r0, r6
  40358e:	b009      	add	sp, #36	; 0x24
  403590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  403594:	f89d 301f 	ldrb.w	r3, [sp, #31]
  403598:	72eb      	strb	r3, [r5, #11]
  40359a:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  40359e:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4035a2:	f013 0f02 	tst.w	r3, #2
  4035a6:	d014      	beq.n	4035d2 <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  4035a8:	f8bb 3000 	ldrh.w	r3, [fp]
  4035ac:	b17b      	cbz	r3, 4035ce <dir_register+0x146>
  4035ae:	2300      	movs	r3, #0
  4035b0:	3301      	adds	r3, #1
  4035b2:	b29b      	uxth	r3, r3
  4035b4:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  4035b8:	2a00      	cmp	r2, #0
  4035ba:	d1f9      	bne.n	4035b0 <dir_register+0x128>
		ne = (ne + 25) / 13;
  4035bc:	3319      	adds	r3, #25
  4035be:	4f61      	ldr	r7, [pc, #388]	; (403744 <dir_register+0x2bc>)
  4035c0:	fb87 2703 	smull	r2, r7, r7, r3
  4035c4:	17db      	asrs	r3, r3, #31
  4035c6:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  4035ca:	b2bf      	uxth	r7, r7
  4035cc:	e002      	b.n	4035d4 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  4035ce:	2300      	movs	r3, #0
  4035d0:	e7f4      	b.n	4035bc <dir_register+0x134>
		ne = 1;
  4035d2:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  4035d4:	2100      	movs	r1, #0
  4035d6:	4620      	mov	r0, r4
  4035d8:	4b5b      	ldr	r3, [pc, #364]	; (403748 <dir_register+0x2c0>)
  4035da:	4798      	blx	r3
	if (res != FR_OK) return res;
  4035dc:	4606      	mov	r6, r0
  4035de:	2800      	cmp	r0, #0
  4035e0:	d1d4      	bne.n	40358c <dir_register+0x104>
  4035e2:	f04f 0a00 	mov.w	sl, #0
  4035e6:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  4035e8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 403750 <dir_register+0x2c8>
			n = 0;					/* Not a blank entry. Restart to search */
  4035ec:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4035ee:	f8df 915c 	ldr.w	r9, [pc, #348]	; 40374c <dir_register+0x2c4>
  4035f2:	e00a      	b.n	40360a <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  4035f4:	1c6b      	adds	r3, r5, #1
  4035f6:	b29b      	uxth	r3, r3
  4035f8:	429f      	cmp	r7, r3
  4035fa:	d073      	beq.n	4036e4 <dir_register+0x25c>
  4035fc:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4035fe:	2101      	movs	r1, #1
  403600:	4620      	mov	r0, r4
  403602:	47c8      	blx	r9
	} while (res == FR_OK);
  403604:	4606      	mov	r6, r0
  403606:	2800      	cmp	r0, #0
  403608:	d1c0      	bne.n	40358c <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  40360a:	6921      	ldr	r1, [r4, #16]
  40360c:	6820      	ldr	r0, [r4, #0]
  40360e:	47c0      	blx	r8
		if (res != FR_OK) break;
  403610:	4606      	mov	r6, r0
  403612:	2800      	cmp	r0, #0
  403614:	d1ba      	bne.n	40358c <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  403616:	6963      	ldr	r3, [r4, #20]
  403618:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  40361a:	2be5      	cmp	r3, #229	; 0xe5
  40361c:	d000      	beq.n	403620 <dir_register+0x198>
  40361e:	b923      	cbnz	r3, 40362a <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  403620:	2d00      	cmp	r5, #0
  403622:	d1e7      	bne.n	4035f4 <dir_register+0x16c>
  403624:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  403628:	e7e4      	b.n	4035f4 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  40362a:	465d      	mov	r5, fp
  40362c:	e7e7      	b.n	4035fe <dir_register+0x176>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40362e:	4671      	mov	r1, lr
  403630:	e070      	b.n	403714 <dir_register+0x28c>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  403632:	f64f 72ff 	movw	r2, #65535	; 0xffff
  403636:	4293      	cmp	r3, r2
  403638:	d002      	beq.n	403640 <dir_register+0x1b8>
  40363a:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  40363e:	b90b      	cbnz	r3, 403644 <dir_register+0x1bc>
  403640:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  403644:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  403648:	6823      	ldr	r3, [r4, #0]
  40364a:	2201      	movs	r2, #1
  40364c:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  40364e:	4639      	mov	r1, r7
  403650:	4620      	mov	r0, r4
  403652:	4b3e      	ldr	r3, [pc, #248]	; (40374c <dir_register+0x2c4>)
  403654:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  403656:	4606      	mov	r6, r0
  403658:	2800      	cmp	r0, #0
  40365a:	d197      	bne.n	40358c <dir_register+0x104>
  40365c:	3d01      	subs	r5, #1
  40365e:	b2ad      	uxth	r5, r5
  403660:	b315      	cbz	r5, 4036a8 <dir_register+0x220>
				res = move_window(dj->fs, dj->sect);
  403662:	6921      	ldr	r1, [r4, #16]
  403664:	6820      	ldr	r0, [r4, #0]
  403666:	4b3a      	ldr	r3, [pc, #232]	; (403750 <dir_register+0x2c8>)
  403668:	4798      	blx	r3
				if (res != FR_OK) break;
  40366a:	4606      	mov	r6, r0
  40366c:	2800      	cmp	r0, #0
  40366e:	d18d      	bne.n	40358c <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  403670:	f8d4 901c 	ldr.w	r9, [r4, #28]
  403674:	6960      	ldr	r0, [r4, #20]
  403676:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  40367a:	f89d 3000 	ldrb.w	r3, [sp]
  40367e:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  403680:	230f      	movs	r3, #15
  403682:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  403684:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  403686:	7687      	strb	r7, [r0, #26]
  403688:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  40368a:	f10b 31ff 	add.w	r1, fp, #4294967295
  40368e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  403692:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  403696:	4a2f      	ldr	r2, [pc, #188]	; (403754 <dir_register+0x2cc>)
  403698:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  40369c:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40369e:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4036a2:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4036a6:	e038      	b.n	40371a <dir_register+0x292>
		res = move_window(dj->fs, dj->sect);
  4036a8:	6921      	ldr	r1, [r4, #16]
  4036aa:	6820      	ldr	r0, [r4, #0]
  4036ac:	4b28      	ldr	r3, [pc, #160]	; (403750 <dir_register+0x2c8>)
  4036ae:	4798      	blx	r3
		if (res == FR_OK) {
  4036b0:	4606      	mov	r6, r0
  4036b2:	2800      	cmp	r0, #0
  4036b4:	f47f af6a 	bne.w	40358c <dir_register+0x104>
			dir = dj->dir;
  4036b8:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  4036ba:	2220      	movs	r2, #32
  4036bc:	2100      	movs	r1, #0
  4036be:	4628      	mov	r0, r5
  4036c0:	4b25      	ldr	r3, [pc, #148]	; (403758 <dir_register+0x2d0>)
  4036c2:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  4036c4:	220b      	movs	r2, #11
  4036c6:	69a1      	ldr	r1, [r4, #24]
  4036c8:	4628      	mov	r0, r5
  4036ca:	4b1d      	ldr	r3, [pc, #116]	; (403740 <dir_register+0x2b8>)
  4036cc:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  4036ce:	69a3      	ldr	r3, [r4, #24]
  4036d0:	7adb      	ldrb	r3, [r3, #11]
  4036d2:	f003 0318 	and.w	r3, r3, #24
  4036d6:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  4036d8:	6823      	ldr	r3, [r4, #0]
  4036da:	2201      	movs	r2, #1
  4036dc:	711a      	strb	r2, [r3, #4]
  4036de:	e755      	b.n	40358c <dir_register+0x104>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  4036e0:	2607      	movs	r6, #7
  4036e2:	e753      	b.n	40358c <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  4036e4:	2b01      	cmp	r3, #1
  4036e6:	d9df      	bls.n	4036a8 <dir_register+0x220>
		res = dir_sdi(dj, is);
  4036e8:	4651      	mov	r1, sl
  4036ea:	4620      	mov	r0, r4
  4036ec:	4b16      	ldr	r3, [pc, #88]	; (403748 <dir_register+0x2c0>)
  4036ee:	4798      	blx	r3
		if (res == FR_OK) {
  4036f0:	4606      	mov	r6, r0
  4036f2:	2800      	cmp	r0, #0
  4036f4:	f47f af4a 	bne.w	40358c <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  4036f8:	69a0      	ldr	r0, [r4, #24]
  4036fa:	4b18      	ldr	r3, [pc, #96]	; (40375c <dir_register+0x2d4>)
  4036fc:	4798      	blx	r3
  4036fe:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  403700:	2700      	movs	r7, #0
	s = wc = 0;
  403702:	9701      	str	r7, [sp, #4]
  403704:	e7ad      	b.n	403662 <dir_register+0x1da>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  403706:	f892 e000 	ldrb.w	lr, [r2]
  40370a:	f800 a00e 	strb.w	sl, [r0, lr]
  40370e:	4486      	add	lr, r0
  403710:	f88e a001 	strb.w	sl, [lr, #1]
  403714:	3201      	adds	r2, #1
	} while (++s < 13);
  403716:	4542      	cmp	r2, r8
  403718:	d08b      	beq.n	403632 <dir_register+0x1aa>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40371a:	42b3      	cmp	r3, r6
  40371c:	d0f3      	beq.n	403706 <dir_register+0x27e>
  40371e:	f101 0e01 	add.w	lr, r1, #1
  403722:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  403726:	7811      	ldrb	r1, [r2, #0]
  403728:	5443      	strb	r3, [r0, r1]
  40372a:	4401      	add	r1, r0
  40372c:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  403730:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  403734:	2b00      	cmp	r3, #0
  403736:	f47f af7a 	bne.w	40362e <dir_register+0x1a6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40373a:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  40373c:	4633      	mov	r3, r6
  40373e:	e7e9      	b.n	403714 <dir_register+0x28c>
  403740:	00402891 	.word	0x00402891
  403744:	4ec4ec4f 	.word	0x4ec4ec4f
  403748:	00402e95 	.word	0x00402e95
  40374c:	004031a9 	.word	0x004031a9
  403750:	00402d1d 	.word	0x00402d1d
  403754:	004078e4 	.word	0x004078e4
  403758:	004028a5 	.word	0x004028a5
  40375c:	004028cb 	.word	0x004028cb
  403760:	004032e1 	.word	0x004032e1

00403764 <sync>:
{
  403764:	b570      	push	{r4, r5, r6, lr}
  403766:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  403768:	2100      	movs	r1, #0
  40376a:	4b2d      	ldr	r3, [pc, #180]	; (403820 <sync+0xbc>)
  40376c:	4798      	blx	r3
	if (res == FR_OK) {
  40376e:	4603      	mov	r3, r0
  403770:	b950      	cbnz	r0, 403788 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  403772:	7823      	ldrb	r3, [r4, #0]
  403774:	2b03      	cmp	r3, #3
  403776:	d009      	beq.n	40378c <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  403778:	2200      	movs	r2, #0
  40377a:	4611      	mov	r1, r2
  40377c:	7860      	ldrb	r0, [r4, #1]
  40377e:	4b29      	ldr	r3, [pc, #164]	; (403824 <sync+0xc0>)
  403780:	4798      	blx	r3
	res = move_window(fs, 0);
  403782:	1c03      	adds	r3, r0, #0
  403784:	bf18      	it	ne
  403786:	2301      	movne	r3, #1
}
  403788:	4618      	mov	r0, r3
  40378a:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  40378c:	7963      	ldrb	r3, [r4, #5]
  40378e:	2b00      	cmp	r3, #0
  403790:	d0f2      	beq.n	403778 <sync+0x14>
			fs->winsect = 0;
  403792:	2600      	movs	r6, #0
  403794:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  403796:	f104 0530 	add.w	r5, r4, #48	; 0x30
  40379a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40379e:	4631      	mov	r1, r6
  4037a0:	4628      	mov	r0, r5
  4037a2:	4b21      	ldr	r3, [pc, #132]	; (403828 <sync+0xc4>)
  4037a4:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  4037a6:	2355      	movs	r3, #85	; 0x55
  4037a8:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  4037ac:	23aa      	movs	r3, #170	; 0xaa
  4037ae:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  4037b2:	2352      	movs	r3, #82	; 0x52
  4037b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  4037b8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  4037bc:	2361      	movs	r3, #97	; 0x61
  4037be:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  4037c2:	2241      	movs	r2, #65	; 0x41
  4037c4:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  4037c8:	2172      	movs	r1, #114	; 0x72
  4037ca:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  4037ce:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  4037d2:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  4037d6:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  4037da:	6923      	ldr	r3, [r4, #16]
  4037dc:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  4037e0:	f3c3 2207 	ubfx	r2, r3, #8, #8
  4037e4:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  4037e8:	0c1a      	lsrs	r2, r3, #16
  4037ea:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  4037ee:	0e1b      	lsrs	r3, r3, #24
  4037f0:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  4037f4:	68e3      	ldr	r3, [r4, #12]
  4037f6:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  4037fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
  4037fe:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  403802:	0c1a      	lsrs	r2, r3, #16
  403804:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  403808:	0e1b      	lsrs	r3, r3, #24
  40380a:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  40380e:	2301      	movs	r3, #1
  403810:	6962      	ldr	r2, [r4, #20]
  403812:	4629      	mov	r1, r5
  403814:	7860      	ldrb	r0, [r4, #1]
  403816:	4d05      	ldr	r5, [pc, #20]	; (40382c <sync+0xc8>)
  403818:	47a8      	blx	r5
			fs->fsi_flag = 0;
  40381a:	7166      	strb	r6, [r4, #5]
  40381c:	e7ac      	b.n	403778 <sync+0x14>
  40381e:	bf00      	nop
  403820:	00402d1d 	.word	0x00402d1d
  403824:	004027c9 	.word	0x004027c9
  403828:	004028a5 	.word	0x004028a5
  40382c:	00402759 	.word	0x00402759

00403830 <follow_path>:
{
  403830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403834:	b083      	sub	sp, #12
  403836:	4682      	mov	sl, r0
  403838:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  40383a:	780b      	ldrb	r3, [r1, #0]
  40383c:	2b2f      	cmp	r3, #47	; 0x2f
  40383e:	d00a      	beq.n	403856 <follow_path+0x26>
  403840:	2b5c      	cmp	r3, #92	; 0x5c
  403842:	d008      	beq.n	403856 <follow_path+0x26>
	dj->sclust = 0;						/* Start from the root dir */
  403844:	2300      	movs	r3, #0
  403846:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  40384a:	782b      	ldrb	r3, [r5, #0]
  40384c:	2b1f      	cmp	r3, #31
  40384e:	d904      	bls.n	40385a <follow_path+0x2a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403850:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 403b50 <follow_path+0x320>
  403854:	e130      	b.n	403ab8 <follow_path+0x288>
		path++;
  403856:	3501      	adds	r5, #1
  403858:	e7f4      	b.n	403844 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  40385a:	2100      	movs	r1, #0
  40385c:	4650      	mov	r0, sl
  40385e:	4bb6      	ldr	r3, [pc, #728]	; (403b38 <follow_path+0x308>)
  403860:	4798      	blx	r3
  403862:	4603      	mov	r3, r0
		dj->dir = 0;
  403864:	2200      	movs	r2, #0
  403866:	f8ca 2014 	str.w	r2, [sl, #20]
  40386a:	e15a      	b.n	403b22 <follow_path+0x2f2>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  40386c:	2b00      	cmp	r3, #0
  40386e:	f040 8152 	bne.w	403b16 <follow_path+0x2e6>
		lfn[di++] = w;					/* Store the Unicode char */
  403872:	f827 2f02 	strh.w	r2, [r7, #2]!
		w = p[si++];					/* Get a character */
  403876:	1c63      	adds	r3, r4, #1
  403878:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  40387c:	282f      	cmp	r0, #47	; 0x2f
  40387e:	bf18      	it	ne
  403880:	281f      	cmpne	r0, #31
  403882:	d91b      	bls.n	4038bc <follow_path+0x8c>
  403884:	285c      	cmp	r0, #92	; 0x5c
  403886:	d019      	beq.n	4038bc <follow_path+0x8c>
		if (di >= _MAX_LFN)				/* Reject too long name */
  403888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40388c:	f000 8143 	beq.w	403b16 <follow_path+0x2e6>
		w = p[si++];					/* Get a character */
  403890:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403892:	4641      	mov	r1, r8
  403894:	47d8      	blx	fp
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  403896:	4602      	mov	r2, r0
  403898:	2800      	cmp	r0, #0
  40389a:	f000 813c 	beq.w	403b16 <follow_path+0x2e6>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  40389e:	287f      	cmp	r0, #127	; 0x7f
  4038a0:	d8e7      	bhi.n	403872 <follow_path+0x42>
	while (*str && *str != chr) str++;
  4038a2:	2822      	cmp	r0, #34	; 0x22
  4038a4:	f000 813c 	beq.w	403b20 <follow_path+0x2f0>
  4038a8:	232a      	movs	r3, #42	; 0x2a
  4038aa:	49a4      	ldr	r1, [pc, #656]	; (403b3c <follow_path+0x30c>)
  4038ac:	b298      	uxth	r0, r3
  4038ae:	4290      	cmp	r0, r2
  4038b0:	d0dc      	beq.n	40386c <follow_path+0x3c>
  4038b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4038b6:	2b00      	cmp	r3, #0
  4038b8:	d1f8      	bne.n	4038ac <follow_path+0x7c>
  4038ba:	e7da      	b.n	403872 <follow_path+0x42>
	*path = &p[si];						/* Return pointer to the next segment */
  4038bc:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4038be:	2820      	cmp	r0, #32
  4038c0:	bf34      	ite	cc
  4038c2:	2604      	movcc	r6, #4
  4038c4:	2600      	movcs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  4038c6:	2c00      	cmp	r4, #0
  4038c8:	f000 812a 	beq.w	403b20 <follow_path+0x2f0>
		w = lfn[di-1];
  4038cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4038d0:	4423      	add	r3, r4
  4038d2:	eb09 0243 	add.w	r2, r9, r3, lsl #1
  4038d6:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  4038da:	2b20      	cmp	r3, #32
  4038dc:	d001      	beq.n	4038e2 <follow_path+0xb2>
  4038de:	2b2e      	cmp	r3, #46	; 0x2e
  4038e0:	d108      	bne.n	4038f4 <follow_path+0xc4>
	while (di) {						/* Strip trailing spaces and dots */
  4038e2:	3c01      	subs	r4, #1
  4038e4:	f000 811c 	beq.w	403b20 <follow_path+0x2f0>
		w = lfn[di-1];
  4038e8:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  4038ec:	2b20      	cmp	r3, #32
  4038ee:	d0f8      	beq.n	4038e2 <follow_path+0xb2>
  4038f0:	2b2e      	cmp	r3, #46	; 0x2e
  4038f2:	d0f6      	beq.n	4038e2 <follow_path+0xb2>
	lfn[di] = 0;						/* LFN is created */
  4038f4:	0067      	lsls	r7, r4, #1
  4038f6:	2300      	movs	r3, #0
  4038f8:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
	mem_set(dj->fn, ' ', 11);
  4038fc:	220b      	movs	r2, #11
  4038fe:	2120      	movs	r1, #32
  403900:	f8da 0018 	ldr.w	r0, [sl, #24]
  403904:	4b8e      	ldr	r3, [pc, #568]	; (403b40 <follow_path+0x310>)
  403906:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  403908:	f8b9 3000 	ldrh.w	r3, [r9]
  40390c:	2b20      	cmp	r3, #32
  40390e:	d001      	beq.n	403914 <follow_path+0xe4>
  403910:	2b2e      	cmp	r3, #46	; 0x2e
  403912:	d11f      	bne.n	403954 <follow_path+0x124>
  403914:	4649      	mov	r1, r9
  403916:	2300      	movs	r3, #0
  403918:	3301      	adds	r3, #1
  40391a:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  40391e:	2a20      	cmp	r2, #32
  403920:	d0fa      	beq.n	403918 <follow_path+0xe8>
  403922:	2a2e      	cmp	r2, #46	; 0x2e
  403924:	d0f8      	beq.n	403918 <follow_path+0xe8>
	if (si) cf |= NS_LOSS | NS_LFN;
  403926:	b10b      	cbz	r3, 40392c <follow_path+0xfc>
  403928:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  40392c:	3f02      	subs	r7, #2
  40392e:	eb09 0207 	add.w	r2, r9, r7
  403932:	f839 1007 	ldrh.w	r1, [r9, r7]
  403936:	292e      	cmp	r1, #46	; 0x2e
  403938:	d005      	beq.n	403946 <follow_path+0x116>
  40393a:	3c01      	subs	r4, #1
  40393c:	d003      	beq.n	403946 <follow_path+0x116>
  40393e:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  403942:	292e      	cmp	r1, #46	; 0x2e
  403944:	d1f9      	bne.n	40393a <follow_path+0x10a>
		dj->fn[i++] = (BYTE)w;
  403946:	2208      	movs	r2, #8
  403948:	9200      	str	r2, [sp, #0]
  40394a:	f04f 0800 	mov.w	r8, #0
  40394e:	f8cd 8004 	str.w	r8, [sp, #4]
  403952:	e004      	b.n	40395e <follow_path+0x12e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  403954:	2300      	movs	r3, #0
  403956:	e7e9      	b.n	40392c <follow_path+0xfc>
			cf |= NS_LOSS | NS_LFN; continue;
  403958:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  40395c:	463b      	mov	r3, r7
  40395e:	1c5f      	adds	r7, r3, #1
  403960:	f839 0013 	ldrh.w	r0, [r9, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  403964:	2800      	cmp	r0, #0
  403966:	d066      	beq.n	403a36 <follow_path+0x206>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  403968:	2820      	cmp	r0, #32
  40396a:	d0f5      	beq.n	403958 <follow_path+0x128>
  40396c:	282e      	cmp	r0, #46	; 0x2e
  40396e:	d101      	bne.n	403974 <follow_path+0x144>
  403970:	42a7      	cmp	r7, r4
  403972:	d1f1      	bne.n	403958 <follow_path+0x128>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  403974:	9b00      	ldr	r3, [sp, #0]
  403976:	4598      	cmp	r8, r3
  403978:	d218      	bcs.n	4039ac <follow_path+0x17c>
  40397a:	42a7      	cmp	r7, r4
  40397c:	d016      	beq.n	4039ac <follow_path+0x17c>
		if (w >= 0x80) {				/* Non ASCII char */
  40397e:	287f      	cmp	r0, #127	; 0x7f
  403980:	d831      	bhi.n	4039e6 <follow_path+0x1b6>
	while (*str && *str != chr) str++;
  403982:	282b      	cmp	r0, #43	; 0x2b
  403984:	d03d      	beq.n	403a02 <follow_path+0x1d2>
  403986:	232c      	movs	r3, #44	; 0x2c
  403988:	496e      	ldr	r1, [pc, #440]	; (403b44 <follow_path+0x314>)
  40398a:	b29a      	uxth	r2, r3
  40398c:	4282      	cmp	r2, r0
  40398e:	d043      	beq.n	403a18 <follow_path+0x1e8>
  403990:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  403994:	2b00      	cmp	r3, #0
  403996:	d1f8      	bne.n	40398a <follow_path+0x15a>
				if (IsUpper(w)) {		/* ASCII large capital */
  403998:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  40399c:	b29b      	uxth	r3, r3
  40399e:	2b19      	cmp	r3, #25
  4039a0:	d83d      	bhi.n	403a1e <follow_path+0x1ee>
					b |= 2;
  4039a2:	9b01      	ldr	r3, [sp, #4]
  4039a4:	f043 0302 	orr.w	r3, r3, #2
  4039a8:	9301      	str	r3, [sp, #4]
  4039aa:	e02d      	b.n	403a08 <follow_path+0x1d8>
			if (ni == 11) {				/* Long extension */
  4039ac:	9b00      	ldr	r3, [sp, #0]
  4039ae:	2b0b      	cmp	r3, #11
  4039b0:	d00f      	beq.n	4039d2 <follow_path+0x1a2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  4039b2:	42a7      	cmp	r7, r4
  4039b4:	bf18      	it	ne
  4039b6:	f046 0603 	orrne.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  4039ba:	42a7      	cmp	r7, r4
  4039bc:	d83b      	bhi.n	403a36 <follow_path+0x206>
			b <<= 2; continue;
  4039be:	9b01      	ldr	r3, [sp, #4]
  4039c0:	009b      	lsls	r3, r3, #2
  4039c2:	b2db      	uxtb	r3, r3
  4039c4:	9301      	str	r3, [sp, #4]
  4039c6:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
  4039c8:	220b      	movs	r2, #11
  4039ca:	9200      	str	r2, [sp, #0]
  4039cc:	f04f 0808 	mov.w	r8, #8
  4039d0:	e7c5      	b.n	40395e <follow_path+0x12e>
				cf |= NS_LOSS | NS_LFN; break;
  4039d2:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  4039d6:	f8da 3018 	ldr.w	r3, [sl, #24]
  4039da:	781a      	ldrb	r2, [r3, #0]
  4039dc:	2ae5      	cmp	r2, #229	; 0xe5
  4039de:	d132      	bne.n	403a46 <follow_path+0x216>
  4039e0:	2205      	movs	r2, #5
  4039e2:	701a      	strb	r2, [r3, #0]
  4039e4:	e02c      	b.n	403a40 <follow_path+0x210>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  4039e6:	2100      	movs	r1, #0
  4039e8:	47d8      	blx	fp
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  4039ea:	4603      	mov	r3, r0
  4039ec:	2800      	cmp	r0, #0
  4039ee:	f000 809f 	beq.w	403b30 <follow_path+0x300>
  4039f2:	4a55      	ldr	r2, [pc, #340]	; (403b48 <follow_path+0x318>)
  4039f4:	4413      	add	r3, r2
  4039f6:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  4039fa:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  4039fe:	2800      	cmp	r0, #0
  403a00:	d1bf      	bne.n	403982 <follow_path+0x152>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  403a02:	f046 0603 	orr.w	r6, r6, #3
  403a06:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  403a08:	f8da 3018 	ldr.w	r3, [sl, #24]
  403a0c:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  403a10:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  403a12:	f108 0801 	add.w	r8, r8, #1
  403a16:	e7a2      	b.n	40395e <follow_path+0x12e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  403a18:	2b00      	cmp	r3, #0
  403a1a:	d1f2      	bne.n	403a02 <follow_path+0x1d2>
  403a1c:	e7bc      	b.n	403998 <follow_path+0x168>
					if (IsLower(w)) {	/* ASCII small capital */
  403a1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  403a22:	b29b      	uxth	r3, r3
  403a24:	2b19      	cmp	r3, #25
  403a26:	d8ef      	bhi.n	403a08 <follow_path+0x1d8>
						b |= 1; w -= 0x20;
  403a28:	9b01      	ldr	r3, [sp, #4]
  403a2a:	f043 0301 	orr.w	r3, r3, #1
  403a2e:	9301      	str	r3, [sp, #4]
  403a30:	3820      	subs	r0, #32
  403a32:	b280      	uxth	r0, r0
  403a34:	e7e8      	b.n	403a08 <follow_path+0x1d8>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  403a36:	f8da 3018 	ldr.w	r3, [sl, #24]
  403a3a:	781a      	ldrb	r2, [r3, #0]
  403a3c:	2ae5      	cmp	r2, #229	; 0xe5
  403a3e:	d0cf      	beq.n	4039e0 <follow_path+0x1b0>
	if (ni == 8) b <<= 2;
  403a40:	9b00      	ldr	r3, [sp, #0]
  403a42:	2b08      	cmp	r3, #8
  403a44:	d052      	beq.n	403aec <follow_path+0x2bc>
  403a46:	9a01      	ldr	r2, [sp, #4]
  403a48:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  403a4c:	2b0c      	cmp	r3, #12
  403a4e:	d054      	beq.n	403afa <follow_path+0x2ca>
  403a50:	f002 0203 	and.w	r2, r2, #3
  403a54:	2a03      	cmp	r2, #3
  403a56:	d050      	beq.n	403afa <follow_path+0x2ca>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  403a58:	f016 0f02 	tst.w	r6, #2
  403a5c:	d10b      	bne.n	403a76 <follow_path+0x246>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  403a5e:	9a01      	ldr	r2, [sp, #4]
  403a60:	f002 0903 	and.w	r9, r2, #3
  403a64:	f1b9 0f01 	cmp.w	r9, #1
  403a68:	bf08      	it	eq
  403a6a:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  403a6e:	2b04      	cmp	r3, #4
  403a70:	bf08      	it	eq
  403a72:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  403a76:	f8da 3018 	ldr.w	r3, [sl, #24]
  403a7a:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  403a7c:	4650      	mov	r0, sl
  403a7e:	4b33      	ldr	r3, [pc, #204]	; (403b4c <follow_path+0x31c>)
  403a80:	4798      	blx	r3
			ns = *(dj->fn+NS);
  403a82:	f8da 3018 	ldr.w	r3, [sl, #24]
  403a86:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  403a88:	4603      	mov	r3, r0
  403a8a:	2800      	cmp	r0, #0
  403a8c:	d138      	bne.n	403b00 <follow_path+0x2d0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  403a8e:	f012 0f04 	tst.w	r2, #4
  403a92:	d146      	bne.n	403b22 <follow_path+0x2f2>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  403a94:	f8da 3014 	ldr.w	r3, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  403a98:	7ada      	ldrb	r2, [r3, #11]
  403a9a:	f012 0f10 	tst.w	r2, #16
  403a9e:	d038      	beq.n	403b12 <follow_path+0x2e2>
			dj->sclust = LD_CLUST(dir);
  403aa0:	7d59      	ldrb	r1, [r3, #21]
  403aa2:	7d1a      	ldrb	r2, [r3, #20]
  403aa4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403aa8:	7ed9      	ldrb	r1, [r3, #27]
  403aaa:	7e9b      	ldrb	r3, [r3, #26]
  403aac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403ab4:	f8ca 3008 	str.w	r3, [sl, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  403ab8:	782b      	ldrb	r3, [r5, #0]
  403aba:	2b2f      	cmp	r3, #47	; 0x2f
  403abc:	d001      	beq.n	403ac2 <follow_path+0x292>
  403abe:	2b5c      	cmp	r3, #92	; 0x5c
  403ac0:	d105      	bne.n	403ace <follow_path+0x29e>
  403ac2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  403ac6:	2b2f      	cmp	r3, #47	; 0x2f
  403ac8:	d0fb      	beq.n	403ac2 <follow_path+0x292>
  403aca:	2b5c      	cmp	r3, #92	; 0x5c
  403acc:	d0f9      	beq.n	403ac2 <follow_path+0x292>
	lfn = dj->lfn;
  403ace:	f8da 901c 	ldr.w	r9, [sl, #28]
		w = p[si++];					/* Get a character */
  403ad2:	7828      	ldrb	r0, [r5, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  403ad4:	282f      	cmp	r0, #47	; 0x2f
  403ad6:	bf18      	it	ne
  403ad8:	281f      	cmpne	r0, #31
  403ada:	d91e      	bls.n	403b1a <follow_path+0x2ea>
  403adc:	285c      	cmp	r0, #92	; 0x5c
  403ade:	d01c      	beq.n	403b1a <follow_path+0x2ea>
  403ae0:	f1a9 0702 	sub.w	r7, r9, #2
  403ae4:	462e      	mov	r6, r5
  403ae6:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403ae8:	46a0      	mov	r8, r4
  403aea:	e6d2      	b.n	403892 <follow_path+0x62>
	if (ni == 8) b <<= 2;
  403aec:	9b01      	ldr	r3, [sp, #4]
  403aee:	ea4f 0983 	mov.w	r9, r3, lsl #2
  403af2:	fa5f f389 	uxtb.w	r3, r9
  403af6:	9301      	str	r3, [sp, #4]
  403af8:	e7a5      	b.n	403a46 <follow_path+0x216>
		cf |= NS_LFN;
  403afa:	f046 0602 	orr.w	r6, r6, #2
  403afe:	e7ab      	b.n	403a58 <follow_path+0x228>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  403b00:	2804      	cmp	r0, #4
  403b02:	d10e      	bne.n	403b22 <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  403b04:	f002 0204 	and.w	r2, r2, #4
  403b08:	2a00      	cmp	r2, #0
  403b0a:	bf14      	ite	ne
  403b0c:	4603      	movne	r3, r0
  403b0e:	2305      	moveq	r3, #5
  403b10:	e007      	b.n	403b22 <follow_path+0x2f2>
				res = FR_NO_PATH; break;
  403b12:	2305      	movs	r3, #5
  403b14:	e005      	b.n	403b22 <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  403b16:	2306      	movs	r3, #6
	return res;
  403b18:	e003      	b.n	403b22 <follow_path+0x2f2>
	*path = &p[si];						/* Return pointer to the next segment */
  403b1a:	3501      	adds	r5, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403b1c:	281f      	cmp	r0, #31
  403b1e:	d804      	bhi.n	403b2a <follow_path+0x2fa>
  403b20:	2306      	movs	r3, #6
}
  403b22:	4618      	mov	r0, r3
  403b24:	b003      	add	sp, #12
  403b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	si = di = 0;
  403b2a:	2400      	movs	r4, #0
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403b2c:	4626      	mov	r6, r4
  403b2e:	e6ca      	b.n	4038c6 <follow_path+0x96>
			cf |= NS_LFN;				/* Force create LFN entry */
  403b30:	f046 0602 	orr.w	r6, r6, #2
  403b34:	e765      	b.n	403a02 <follow_path+0x1d2>
  403b36:	bf00      	nop
  403b38:	00402e95 	.word	0x00402e95
  403b3c:	00407975 	.word	0x00407975
  403b40:	004028a5 	.word	0x004028a5
  403b44:	00407981 	.word	0x00407981
  403b48:	004078f4 	.word	0x004078f4
  403b4c:	004032e1 	.word	0x004032e1
  403b50:	00404029 	.word	0x00404029

00403b54 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  403b54:	2807      	cmp	r0, #7
  403b56:	d901      	bls.n	403b5c <f_mount+0x8>
		return FR_INVALID_DRIVE;
  403b58:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  403b5a:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  403b5c:	4b06      	ldr	r3, [pc, #24]	; (403b78 <f_mount+0x24>)
  403b5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  403b62:	b10b      	cbz	r3, 403b68 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  403b64:	2200      	movs	r2, #0
  403b66:	701a      	strb	r2, [r3, #0]
	if (fs) {
  403b68:	b109      	cbz	r1, 403b6e <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  403b6a:	2300      	movs	r3, #0
  403b6c:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  403b6e:	4b02      	ldr	r3, [pc, #8]	; (403b78 <f_mount+0x24>)
  403b70:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  403b74:	2000      	movs	r0, #0
  403b76:	4770      	bx	lr
  403b78:	20400a98 	.word	0x20400a98

00403b7c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  403b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b80:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  403b84:	4605      	mov	r5, r0
  403b86:	9101      	str	r1, [sp, #4]
  403b88:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  403b8a:	2300      	movs	r3, #0
  403b8c:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  403b8e:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  403b92:	f002 021e 	and.w	r2, r2, #30
  403b96:	a985      	add	r1, sp, #532	; 0x214
  403b98:	a801      	add	r0, sp, #4
  403b9a:	4b58      	ldr	r3, [pc, #352]	; (403cfc <f_open+0x180>)
  403b9c:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  403b9e:	ab82      	add	r3, sp, #520	; 0x208
  403ba0:	938b      	str	r3, [sp, #556]	; 0x22c
  403ba2:	ab02      	add	r3, sp, #8
  403ba4:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  403ba6:	b168      	cbz	r0, 403bc4 <f_open+0x48>
  403ba8:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  403baa:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403bac:	f016 0f1c 	tst.w	r6, #28
  403bb0:	d158      	bne.n	403c64 <f_open+0xe8>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  403bb2:	2b00      	cmp	r3, #0
  403bb4:	f040 8096 	bne.w	403ce4 <f_open+0x168>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  403bb8:	7ae3      	ldrb	r3, [r4, #11]
  403bba:	f013 0f10 	tst.w	r3, #16
  403bbe:	d062      	beq.n	403c86 <f_open+0x10a>
				res = FR_NO_FILE;
  403bc0:	2304      	movs	r3, #4
  403bc2:	e08f      	b.n	403ce4 <f_open+0x168>
		res = follow_path(&dj, path);	/* Follow the file path */
  403bc4:	9901      	ldr	r1, [sp, #4]
  403bc6:	a885      	add	r0, sp, #532	; 0x214
  403bc8:	4b4d      	ldr	r3, [pc, #308]	; (403d00 <f_open+0x184>)
  403bca:	4798      	blx	r3
  403bcc:	4603      	mov	r3, r0
	dir = dj.dir;
  403bce:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (!dir)	/* Current dir itself */
  403bd0:	b934      	cbnz	r4, 403be0 <f_open+0x64>
  403bd2:	b928      	cbnz	r0, 403be0 <f_open+0x64>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403bd4:	f016 0f1c 	tst.w	r6, #28
  403bd8:	f040 8089 	bne.w	403cee <f_open+0x172>
			res = FR_INVALID_NAME;
  403bdc:	2306      	movs	r3, #6
  403bde:	e046      	b.n	403c6e <f_open+0xf2>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403be0:	f016 0f1c 	tst.w	r6, #28
  403be4:	d0e5      	beq.n	403bb2 <f_open+0x36>
		if (res != FR_OK) {					/* No file, create new */
  403be6:	2b00      	cmp	r3, #0
  403be8:	d13c      	bne.n	403c64 <f_open+0xe8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  403bea:	7ae3      	ldrb	r3, [r4, #11]
  403bec:	f013 0f11 	tst.w	r3, #17
  403bf0:	d17f      	bne.n	403cf2 <f_open+0x176>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  403bf2:	f016 0f04 	tst.w	r6, #4
  403bf6:	d17e      	bne.n	403cf6 <f_open+0x17a>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  403bf8:	f017 0f08 	tst.w	r7, #8
  403bfc:	d050      	beq.n	403ca0 <f_open+0x124>
			dw = get_fattime();					/* Created time */
  403bfe:	4b41      	ldr	r3, [pc, #260]	; (403d04 <f_open+0x188>)
  403c00:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  403c02:	73a0      	strb	r0, [r4, #14]
  403c04:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403c08:	73e3      	strb	r3, [r4, #15]
  403c0a:	0c03      	lsrs	r3, r0, #16
  403c0c:	7423      	strb	r3, [r4, #16]
  403c0e:	0e00      	lsrs	r0, r0, #24
  403c10:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  403c12:	2300      	movs	r3, #0
  403c14:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  403c16:	7723      	strb	r3, [r4, #28]
  403c18:	7763      	strb	r3, [r4, #29]
  403c1a:	77a3      	strb	r3, [r4, #30]
  403c1c:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  403c1e:	7d62      	ldrb	r2, [r4, #21]
  403c20:	7d26      	ldrb	r6, [r4, #20]
  403c22:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  403c26:	7ee1      	ldrb	r1, [r4, #27]
  403c28:	7ea2      	ldrb	r2, [r4, #26]
  403c2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  403c2e:	76a3      	strb	r3, [r4, #26]
  403c30:	76e3      	strb	r3, [r4, #27]
  403c32:	7523      	strb	r3, [r4, #20]
  403c34:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  403c36:	9885      	ldr	r0, [sp, #532]	; 0x214
  403c38:	2301      	movs	r3, #1
  403c3a:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  403c3c:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  403c40:	d02c      	beq.n	403c9c <f_open+0x120>
				dw = dj.fs->winsect;
  403c42:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  403c46:	4631      	mov	r1, r6
  403c48:	4b2f      	ldr	r3, [pc, #188]	; (403d08 <f_open+0x18c>)
  403c4a:	4798      	blx	r3
				if (res == FR_OK) {
  403c4c:	4603      	mov	r3, r0
  403c4e:	2800      	cmp	r0, #0
  403c50:	d148      	bne.n	403ce4 <f_open+0x168>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  403c52:	9885      	ldr	r0, [sp, #532]	; 0x214
  403c54:	3e01      	subs	r6, #1
  403c56:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  403c58:	4641      	mov	r1, r8
  403c5a:	4b2c      	ldr	r3, [pc, #176]	; (403d0c <f_open+0x190>)
  403c5c:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  403c5e:	4603      	mov	r3, r0
  403c60:	b1e0      	cbz	r0, 403c9c <f_open+0x120>
  403c62:	e03f      	b.n	403ce4 <f_open+0x168>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  403c64:	2b04      	cmp	r3, #4
  403c66:	d004      	beq.n	403c72 <f_open+0xf6>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  403c68:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  403c6c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  403c6e:	b1db      	cbz	r3, 403ca8 <f_open+0x12c>
  403c70:	e038      	b.n	403ce4 <f_open+0x168>
				res = dir_register(&dj);
  403c72:	a885      	add	r0, sp, #532	; 0x214
  403c74:	4b26      	ldr	r3, [pc, #152]	; (403d10 <f_open+0x194>)
  403c76:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  403c78:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  403c7c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  403c7e:	4603      	mov	r3, r0
  403c80:	2800      	cmp	r0, #0
  403c82:	d0b9      	beq.n	403bf8 <f_open+0x7c>
  403c84:	e02e      	b.n	403ce4 <f_open+0x168>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  403c86:	f016 0f02 	tst.w	r6, #2
  403c8a:	d004      	beq.n	403c96 <f_open+0x11a>
  403c8c:	f013 0f01 	tst.w	r3, #1
  403c90:	d001      	beq.n	403c96 <f_open+0x11a>
					res = FR_DENIED;
  403c92:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  403c94:	e026      	b.n	403ce4 <f_open+0x168>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  403c96:	f016 0f08 	tst.w	r6, #8
  403c9a:	d001      	beq.n	403ca0 <f_open+0x124>
			mode |= FA__WRITTEN;
  403c9c:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  403ca0:	9b85      	ldr	r3, [sp, #532]	; 0x214
  403ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403ca4:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  403ca6:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  403ca8:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  403caa:	7d62      	ldrb	r2, [r4, #21]
  403cac:	7d23      	ldrb	r3, [r4, #20]
  403cae:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  403cb2:	7ee1      	ldrb	r1, [r4, #27]
  403cb4:	7ea3      	ldrb	r3, [r4, #26]
  403cb6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403cbe:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  403cc0:	7fe2      	ldrb	r2, [r4, #31]
  403cc2:	7fa3      	ldrb	r3, [r4, #30]
  403cc4:	041b      	lsls	r3, r3, #16
  403cc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  403cca:	7f22      	ldrb	r2, [r4, #28]
  403ccc:	4313      	orrs	r3, r2
  403cce:	7f62      	ldrb	r2, [r4, #29]
  403cd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403cd4:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  403cd6:	2300      	movs	r3, #0
  403cd8:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  403cda:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  403cdc:	9a85      	ldr	r2, [sp, #532]	; 0x214
  403cde:	602a      	str	r2, [r5, #0]
  403ce0:	88d2      	ldrh	r2, [r2, #6]
  403ce2:	80aa      	strh	r2, [r5, #4]
}
  403ce4:	4618      	mov	r0, r3
  403ce6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  403cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_INVALID_NAME;
  403cee:	2306      	movs	r3, #6
  403cf0:	e7ba      	b.n	403c68 <f_open+0xec>
				res = FR_DENIED;
  403cf2:	2307      	movs	r3, #7
  403cf4:	e7f6      	b.n	403ce4 <f_open+0x168>
					res = FR_EXIST;
  403cf6:	2308      	movs	r3, #8
  403cf8:	e7f4      	b.n	403ce4 <f_open+0x168>
  403cfa:	bf00      	nop
  403cfc:	004029ad 	.word	0x004029ad
  403d00:	00403831 	.word	0x00403831
  403d04:	00402839 	.word	0x00402839
  403d08:	0040312d 	.word	0x0040312d
  403d0c:	00402d1d 	.word	0x00402d1d
  403d10:	00403489 	.word	0x00403489

00403d14 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  403d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d18:	b083      	sub	sp, #12
  403d1a:	4604      	mov	r4, r0
  403d1c:	4689      	mov	r9, r1
  403d1e:	4616      	mov	r6, r2
  403d20:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  403d22:	2300      	movs	r3, #0
  403d24:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  403d28:	8881      	ldrh	r1, [r0, #4]
  403d2a:	6800      	ldr	r0, [r0, #0]
  403d2c:	4b75      	ldr	r3, [pc, #468]	; (403f04 <f_write+0x1f0>)
  403d2e:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  403d30:	9001      	str	r0, [sp, #4]
  403d32:	2800      	cmp	r0, #0
  403d34:	f040 80e2 	bne.w	403efc <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  403d38:	79a3      	ldrb	r3, [r4, #6]
  403d3a:	f013 0f80 	tst.w	r3, #128	; 0x80
  403d3e:	f040 80db 	bne.w	403ef8 <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  403d42:	f013 0f02 	tst.w	r3, #2
  403d46:	d102      	bne.n	403d4e <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  403d48:	2307      	movs	r3, #7
  403d4a:	9301      	str	r3, [sp, #4]
  403d4c:	e0d6      	b.n	403efc <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  403d4e:	68e3      	ldr	r3, [r4, #12]
  403d50:	42f3      	cmn	r3, r6
  403d52:	d20e      	bcs.n	403d72 <f_write+0x5e>

	for ( ;  btw;							/* Repeat until all data written */
  403d54:	2e00      	cmp	r6, #0
  403d56:	d174      	bne.n	403e42 <f_write+0x12e>
  403d58:	e00b      	b.n	403d72 <f_write+0x5e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  403d5a:	2100      	movs	r1, #0
  403d5c:	4b6a      	ldr	r3, [pc, #424]	; (403f08 <f_write+0x1f4>)
  403d5e:	4798      	blx	r3
  403d60:	4603      	mov	r3, r0
  403d62:	6120      	str	r0, [r4, #16]
  403d64:	e003      	b.n	403d6e <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  403d66:	6961      	ldr	r1, [r4, #20]
  403d68:	4b67      	ldr	r3, [pc, #412]	; (403f08 <f_write+0x1f4>)
  403d6a:	4798      	blx	r3
  403d6c:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  403d6e:	2b00      	cmp	r3, #0
  403d70:	d17a      	bne.n	403e68 <f_write+0x154>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  403d72:	68a3      	ldr	r3, [r4, #8]
  403d74:	68e2      	ldr	r2, [r4, #12]
  403d76:	4293      	cmp	r3, r2
  403d78:	bf88      	it	hi
  403d7a:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  403d7c:	79a3      	ldrb	r3, [r4, #6]
  403d7e:	f043 0320 	orr.w	r3, r3, #32
  403d82:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  403d84:	e0ba      	b.n	403efc <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  403d86:	79a3      	ldrb	r3, [r4, #6]
  403d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403d8c:	71a3      	strb	r3, [r4, #6]
  403d8e:	2302      	movs	r3, #2
  403d90:	9301      	str	r3, [sp, #4]
  403d92:	e0b3      	b.n	403efc <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  403d94:	79a3      	ldrb	r3, [r4, #6]
  403d96:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403d9a:	71a3      	strb	r3, [r4, #6]
  403d9c:	2301      	movs	r3, #1
  403d9e:	9301      	str	r3, [sp, #4]
  403da0:	e0ac      	b.n	403efc <f_write+0x1e8>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  403da2:	2100      	movs	r1, #0
  403da4:	4b59      	ldr	r3, [pc, #356]	; (403f0c <f_write+0x1f8>)
  403da6:	4798      	blx	r3
  403da8:	2800      	cmp	r0, #0
  403daa:	d068      	beq.n	403e7e <f_write+0x16a>
				ABORT(fp->fs, FR_DISK_ERR);
  403dac:	79a3      	ldrb	r3, [r4, #6]
  403dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403db2:	71a3      	strb	r3, [r4, #6]
  403db4:	2301      	movs	r3, #1
  403db6:	9301      	str	r3, [sp, #4]
  403db8:	e0a0      	b.n	403efc <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  403dba:	79a3      	ldrb	r3, [r4, #6]
  403dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403dc0:	71a3      	strb	r3, [r4, #6]
  403dc2:	2302      	movs	r3, #2
  403dc4:	9301      	str	r3, [sp, #4]
  403dc6:	e099      	b.n	403efc <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  403dc8:	79a3      	ldrb	r3, [r4, #6]
  403dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403dce:	71a3      	strb	r3, [r4, #6]
  403dd0:	2301      	movs	r3, #1
  403dd2:	9301      	str	r3, [sp, #4]
  403dd4:	e092      	b.n	403efc <f_write+0x1e8>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
  403dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
  403dda:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  403dde:	3030      	adds	r0, #48	; 0x30
  403de0:	4b4b      	ldr	r3, [pc, #300]	; (403f10 <f_write+0x1fc>)
  403de2:	4798      	blx	r3
					fp->fs->wflag = 0;
  403de4:	6823      	ldr	r3, [r4, #0]
  403de6:	2200      	movs	r2, #0
  403de8:	711a      	strb	r2, [r3, #4]
  403dea:	e06c      	b.n	403ec6 <f_write+0x1b2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
  403dec:	68a2      	ldr	r2, [r4, #8]
  403dee:	68e3      	ldr	r3, [r4, #12]
  403df0:	429a      	cmp	r2, r3
  403df2:	d26b      	bcs.n	403ecc <f_write+0x1b8>
			fp->dsect = sect;
  403df4:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  403df6:	68a5      	ldr	r5, [r4, #8]
  403df8:	f3c5 0508 	ubfx	r5, r5, #0, #9
  403dfc:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  403e00:	42b5      	cmp	r5, r6
  403e02:	bf28      	it	cs
  403e04:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  403e06:	69a1      	ldr	r1, [r4, #24]
  403e08:	6820      	ldr	r0, [r4, #0]
  403e0a:	4b40      	ldr	r3, [pc, #256]	; (403f0c <f_write+0x1f8>)
  403e0c:	4798      	blx	r3
  403e0e:	2800      	cmp	r0, #0
  403e10:	d16b      	bne.n	403eea <f_write+0x1d6>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  403e12:	68a0      	ldr	r0, [r4, #8]
  403e14:	f3c0 0008 	ubfx	r0, r0, #0, #9
  403e18:	3030      	adds	r0, #48	; 0x30
  403e1a:	6823      	ldr	r3, [r4, #0]
  403e1c:	462a      	mov	r2, r5
  403e1e:	4649      	mov	r1, r9
  403e20:	4418      	add	r0, r3
  403e22:	4b3b      	ldr	r3, [pc, #236]	; (403f10 <f_write+0x1fc>)
  403e24:	4798      	blx	r3
		fp->fs->wflag = 1;
  403e26:	6823      	ldr	r3, [r4, #0]
  403e28:	2201      	movs	r2, #1
  403e2a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  403e2c:	44a9      	add	r9, r5
  403e2e:	68a3      	ldr	r3, [r4, #8]
  403e30:	442b      	add	r3, r5
  403e32:	60a3      	str	r3, [r4, #8]
  403e34:	f8d8 3000 	ldr.w	r3, [r8]
  403e38:	442b      	add	r3, r5
  403e3a:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  403e3e:	1b76      	subs	r6, r6, r5
  403e40:	d097      	beq.n	403d72 <f_write+0x5e>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  403e42:	68a2      	ldr	r2, [r4, #8]
  403e44:	f3c2 0308 	ubfx	r3, r2, #0, #9
  403e48:	2b00      	cmp	r3, #0
  403e4a:	d1d4      	bne.n	403df6 <f_write+0xe2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  403e4c:	6820      	ldr	r0, [r4, #0]
  403e4e:	7883      	ldrb	r3, [r0, #2]
  403e50:	3b01      	subs	r3, #1
  403e52:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  403e56:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  403e5a:	d10b      	bne.n	403e74 <f_write+0x160>
				if (fp->fptr == 0) {		/* On the top of the file? */
  403e5c:	2a00      	cmp	r2, #0
  403e5e:	d182      	bne.n	403d66 <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  403e60:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  403e62:	2b00      	cmp	r3, #0
  403e64:	f43f af79 	beq.w	403d5a <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  403e68:	2b01      	cmp	r3, #1
  403e6a:	d08c      	beq.n	403d86 <f_write+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  403e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
  403e70:	d090      	beq.n	403d94 <f_write+0x80>
				fp->clust = clst;			/* Update current cluster */
  403e72:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  403e74:	6820      	ldr	r0, [r4, #0]
  403e76:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  403e78:	69a3      	ldr	r3, [r4, #24]
  403e7a:	429a      	cmp	r2, r3
  403e7c:	d091      	beq.n	403da2 <f_write+0x8e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  403e7e:	f8d4 a000 	ldr.w	sl, [r4]
  403e82:	6961      	ldr	r1, [r4, #20]
  403e84:	4650      	mov	r0, sl
  403e86:	4b23      	ldr	r3, [pc, #140]	; (403f14 <f_write+0x200>)
  403e88:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  403e8a:	4605      	mov	r5, r0
  403e8c:	2800      	cmp	r0, #0
  403e8e:	d094      	beq.n	403dba <f_write+0xa6>
			sect += csect;
  403e90:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  403e92:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  403e96:	d0a9      	beq.n	403dec <f_write+0xd8>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  403e98:	f89a 3002 	ldrb.w	r3, [sl, #2]
  403e9c:	eb07 020b 	add.w	r2, r7, fp
  403ea0:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  403ea2:	bf88      	it	hi
  403ea4:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  403ea8:	fa5f f38b 	uxtb.w	r3, fp
  403eac:	462a      	mov	r2, r5
  403eae:	4649      	mov	r1, r9
  403eb0:	f89a 0001 	ldrb.w	r0, [sl, #1]
  403eb4:	4f18      	ldr	r7, [pc, #96]	; (403f18 <f_write+0x204>)
  403eb6:	47b8      	blx	r7
  403eb8:	2800      	cmp	r0, #0
  403eba:	d185      	bne.n	403dc8 <f_write+0xb4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
  403ebc:	6820      	ldr	r0, [r4, #0]
  403ebe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  403ec0:	1b49      	subs	r1, r1, r5
  403ec2:	458b      	cmp	fp, r1
  403ec4:	d887      	bhi.n	403dd6 <f_write+0xc2>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  403ec6:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  403eca:	e7af      	b.n	403e2c <f_write+0x118>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  403ecc:	2100      	movs	r1, #0
  403ece:	4650      	mov	r0, sl
  403ed0:	4b0e      	ldr	r3, [pc, #56]	; (403f0c <f_write+0x1f8>)
  403ed2:	4798      	blx	r3
  403ed4:	b910      	cbnz	r0, 403edc <f_write+0x1c8>
				fp->fs->winsect = sect;
  403ed6:	6823      	ldr	r3, [r4, #0]
  403ed8:	62dd      	str	r5, [r3, #44]	; 0x2c
  403eda:	e78b      	b.n	403df4 <f_write+0xe0>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  403edc:	79a3      	ldrb	r3, [r4, #6]
  403ede:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403ee2:	71a3      	strb	r3, [r4, #6]
  403ee4:	2301      	movs	r3, #1
  403ee6:	9301      	str	r3, [sp, #4]
  403ee8:	e008      	b.n	403efc <f_write+0x1e8>
			ABORT(fp->fs, FR_DISK_ERR);
  403eea:	79a3      	ldrb	r3, [r4, #6]
  403eec:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403ef0:	71a3      	strb	r3, [r4, #6]
  403ef2:	2301      	movs	r3, #1
  403ef4:	9301      	str	r3, [sp, #4]
  403ef6:	e001      	b.n	403efc <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  403ef8:	2302      	movs	r3, #2
  403efa:	9301      	str	r3, [sp, #4]
}
  403efc:	9801      	ldr	r0, [sp, #4]
  403efe:	b003      	add	sp, #12
  403f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f04:	004028e9 	.word	0x004028e9
  403f08:	0040306d 	.word	0x0040306d
  403f0c:	00402d1d 	.word	0x00402d1d
  403f10:	00402891 	.word	0x00402891
  403f14:	004028b3 	.word	0x004028b3
  403f18:	00402759 	.word	0x00402759

00403f1c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  403f1c:	b538      	push	{r3, r4, r5, lr}
  403f1e:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  403f20:	8881      	ldrh	r1, [r0, #4]
  403f22:	6800      	ldr	r0, [r0, #0]
  403f24:	4b1f      	ldr	r3, [pc, #124]	; (403fa4 <f_sync+0x88>)
  403f26:	4798      	blx	r3
	if (res == FR_OK) {
  403f28:	4603      	mov	r3, r0
  403f2a:	b918      	cbnz	r0, 403f34 <f_sync+0x18>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  403f2c:	79a2      	ldrb	r2, [r4, #6]
  403f2e:	f012 0f20 	tst.w	r2, #32
  403f32:	d101      	bne.n	403f38 <f_sync+0x1c>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  403f34:	4618      	mov	r0, r3
  403f36:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
  403f38:	69e1      	ldr	r1, [r4, #28]
  403f3a:	6820      	ldr	r0, [r4, #0]
  403f3c:	4b1a      	ldr	r3, [pc, #104]	; (403fa8 <f_sync+0x8c>)
  403f3e:	4798      	blx	r3
			if (res == FR_OK) {
  403f40:	4603      	mov	r3, r0
  403f42:	2800      	cmp	r0, #0
  403f44:	d1f6      	bne.n	403f34 <f_sync+0x18>
				dir = fp->dir_ptr;
  403f46:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  403f48:	7aeb      	ldrb	r3, [r5, #11]
  403f4a:	f043 0320 	orr.w	r3, r3, #32
  403f4e:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  403f50:	68e3      	ldr	r3, [r4, #12]
  403f52:	772b      	strb	r3, [r5, #28]
  403f54:	89a3      	ldrh	r3, [r4, #12]
  403f56:	0a1b      	lsrs	r3, r3, #8
  403f58:	776b      	strb	r3, [r5, #29]
  403f5a:	89e3      	ldrh	r3, [r4, #14]
  403f5c:	77ab      	strb	r3, [r5, #30]
  403f5e:	7be3      	ldrb	r3, [r4, #15]
  403f60:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  403f62:	6923      	ldr	r3, [r4, #16]
  403f64:	76ab      	strb	r3, [r5, #26]
  403f66:	8a23      	ldrh	r3, [r4, #16]
  403f68:	0a1b      	lsrs	r3, r3, #8
  403f6a:	76eb      	strb	r3, [r5, #27]
  403f6c:	8a63      	ldrh	r3, [r4, #18]
  403f6e:	752b      	strb	r3, [r5, #20]
  403f70:	8a63      	ldrh	r3, [r4, #18]
  403f72:	0a1b      	lsrs	r3, r3, #8
  403f74:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  403f76:	4b0d      	ldr	r3, [pc, #52]	; (403fac <f_sync+0x90>)
  403f78:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  403f7a:	75a8      	strb	r0, [r5, #22]
  403f7c:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403f80:	75eb      	strb	r3, [r5, #23]
  403f82:	0c03      	lsrs	r3, r0, #16
  403f84:	762b      	strb	r3, [r5, #24]
  403f86:	0e00      	lsrs	r0, r0, #24
  403f88:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  403f8a:	79a3      	ldrb	r3, [r4, #6]
  403f8c:	f023 0320 	bic.w	r3, r3, #32
  403f90:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  403f92:	6823      	ldr	r3, [r4, #0]
  403f94:	2201      	movs	r2, #1
  403f96:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  403f98:	6820      	ldr	r0, [r4, #0]
  403f9a:	4b05      	ldr	r3, [pc, #20]	; (403fb0 <f_sync+0x94>)
  403f9c:	4798      	blx	r3
  403f9e:	4603      	mov	r3, r0
  403fa0:	e7c8      	b.n	403f34 <f_sync+0x18>
  403fa2:	bf00      	nop
  403fa4:	004028e9 	.word	0x004028e9
  403fa8:	00402d1d 	.word	0x00402d1d
  403fac:	00402839 	.word	0x00402839
  403fb0:	00403765 	.word	0x00403765

00403fb4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  403fb4:	b510      	push	{r4, lr}
  403fb6:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  403fb8:	4b03      	ldr	r3, [pc, #12]	; (403fc8 <f_close+0x14>)
  403fba:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  403fbc:	4603      	mov	r3, r0
  403fbe:	b908      	cbnz	r0, 403fc4 <f_close+0x10>
  403fc0:	2200      	movs	r2, #0
  403fc2:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  403fc4:	4618      	mov	r0, r3
  403fc6:	bd10      	pop	{r4, pc}
  403fc8:	00403f1d 	.word	0x00403f1d

00403fcc <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  403fcc:	b510      	push	{r4, lr}
  403fce:	b082      	sub	sp, #8
  403fd0:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  403fd2:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  403fd6:	ab01      	add	r3, sp, #4
  403fd8:	2201      	movs	r2, #1
  403fda:	4669      	mov	r1, sp
  403fdc:	4620      	mov	r0, r4
  403fde:	4c05      	ldr	r4, [pc, #20]	; (403ff4 <f_putc+0x28>)
  403fe0:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  403fe2:	9b01      	ldr	r3, [sp, #4]
  403fe4:	2b01      	cmp	r3, #1
}
  403fe6:	bf0c      	ite	eq
  403fe8:	2001      	moveq	r0, #1
  403fea:	f04f 30ff 	movne.w	r0, #4294967295
  403fee:	b002      	add	sp, #8
  403ff0:	bd10      	pop	{r4, pc}
  403ff2:	bf00      	nop
  403ff4:	00403d15 	.word	0x00403d15

00403ff8 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  403ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  403ffa:	7803      	ldrb	r3, [r0, #0]
  403ffc:	b17b      	cbz	r3, 40401e <f_puts+0x26>
  403ffe:	460e      	mov	r6, r1
  404000:	4605      	mov	r5, r0
  404002:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  404004:	4f07      	ldr	r7, [pc, #28]	; (404024 <f_puts+0x2c>)
  404006:	4631      	mov	r1, r6
  404008:	4618      	mov	r0, r3
  40400a:	47b8      	blx	r7
  40400c:	f1b0 3fff 	cmp.w	r0, #4294967295
  404010:	d006      	beq.n	404020 <f_puts+0x28>
  404012:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  404014:	f814 3b01 	ldrb.w	r3, [r4], #1
  404018:	2b00      	cmp	r3, #0
  40401a:	d1f4      	bne.n	404006 <f_puts+0xe>
  40401c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40401e:	2000      	movs	r0, #0
	}
	return n;
}
  404020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404022:	bf00      	nop
  404024:	00403fcd 	.word	0x00403fcd

00404028 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  404028:	287f      	cmp	r0, #127	; 0x7f
  40402a:	d919      	bls.n	404060 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  40402c:	b971      	cbnz	r1, 40404c <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  40402e:	28c7      	cmp	r0, #199	; 0xc7
  404030:	d013      	beq.n	40405a <ff_convert+0x32>
  404032:	4a0c      	ldr	r2, [pc, #48]	; (404064 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  404034:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  404036:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  40403a:	4281      	cmp	r1, r0
  40403c:	d003      	beq.n	404046 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  40403e:	3301      	adds	r3, #1
  404040:	b29b      	uxth	r3, r3
  404042:	2b80      	cmp	r3, #128	; 0x80
  404044:	d1f7      	bne.n	404036 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  404046:	3380      	adds	r3, #128	; 0x80
  404048:	b2d8      	uxtb	r0, r3
  40404a:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40404c:	28ff      	cmp	r0, #255	; 0xff
  40404e:	d806      	bhi.n	40405e <ff_convert+0x36>
  404050:	3880      	subs	r0, #128	; 0x80
  404052:	4b04      	ldr	r3, [pc, #16]	; (404064 <ff_convert+0x3c>)
  404054:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  404058:	4770      	bx	lr
				if (src == Tbl[c]) break;
  40405a:	2300      	movs	r3, #0
  40405c:	e7f3      	b.n	404046 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40405e:	2000      	movs	r0, #0
		}
	}

	return c;
}
  404060:	4770      	bx	lr
  404062:	bf00      	nop
  404064:	00407988 	.word	0x00407988

00404068 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  404068:	2861      	cmp	r0, #97	; 0x61
  40406a:	d00e      	beq.n	40408a <ff_wtoupper+0x22>
  40406c:	4908      	ldr	r1, [pc, #32]	; (404090 <ff_wtoupper+0x28>)
  40406e:	2200      	movs	r2, #0
  404070:	3201      	adds	r2, #1
  404072:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  404076:	4283      	cmp	r3, r0
  404078:	d001      	beq.n	40407e <ff_wtoupper+0x16>
  40407a:	2b00      	cmp	r3, #0
  40407c:	d1f8      	bne.n	404070 <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40407e:	b11b      	cbz	r3, 404088 <ff_wtoupper+0x20>
  404080:	4b04      	ldr	r3, [pc, #16]	; (404094 <ff_wtoupper+0x2c>)
  404082:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  404086:	4770      	bx	lr
  404088:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  40408a:	2200      	movs	r2, #0
  40408c:	e7f8      	b.n	404080 <ff_wtoupper+0x18>
  40408e:	bf00      	nop
  404090:	00407a88 	.word	0x00407a88
  404094:	00407c68 	.word	0x00407c68

00404098 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404098:	b5f0      	push	{r4, r5, r6, r7, lr}
  40409a:	b083      	sub	sp, #12
  40409c:	4605      	mov	r5, r0
  40409e:	460c      	mov	r4, r1
	uint32_t val = 0;
  4040a0:	2300      	movs	r3, #0
  4040a2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4040a4:	4b2a      	ldr	r3, [pc, #168]	; (404150 <usart_serial_getchar+0xb8>)
  4040a6:	4298      	cmp	r0, r3
  4040a8:	d013      	beq.n	4040d2 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4040aa:	4b2a      	ldr	r3, [pc, #168]	; (404154 <usart_serial_getchar+0xbc>)
  4040ac:	4298      	cmp	r0, r3
  4040ae:	d018      	beq.n	4040e2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4040b0:	4b29      	ldr	r3, [pc, #164]	; (404158 <usart_serial_getchar+0xc0>)
  4040b2:	4298      	cmp	r0, r3
  4040b4:	d01d      	beq.n	4040f2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4040b6:	4b29      	ldr	r3, [pc, #164]	; (40415c <usart_serial_getchar+0xc4>)
  4040b8:	429d      	cmp	r5, r3
  4040ba:	d022      	beq.n	404102 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4040bc:	4b28      	ldr	r3, [pc, #160]	; (404160 <usart_serial_getchar+0xc8>)
  4040be:	429d      	cmp	r5, r3
  4040c0:	d027      	beq.n	404112 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4040c2:	4b28      	ldr	r3, [pc, #160]	; (404164 <usart_serial_getchar+0xcc>)
  4040c4:	429d      	cmp	r5, r3
  4040c6:	d02e      	beq.n	404126 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4040c8:	4b27      	ldr	r3, [pc, #156]	; (404168 <usart_serial_getchar+0xd0>)
  4040ca:	429d      	cmp	r5, r3
  4040cc:	d035      	beq.n	40413a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4040ce:	b003      	add	sp, #12
  4040d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4040d2:	461f      	mov	r7, r3
  4040d4:	4e25      	ldr	r6, [pc, #148]	; (40416c <usart_serial_getchar+0xd4>)
  4040d6:	4621      	mov	r1, r4
  4040d8:	4638      	mov	r0, r7
  4040da:	47b0      	blx	r6
  4040dc:	2800      	cmp	r0, #0
  4040de:	d1fa      	bne.n	4040d6 <usart_serial_getchar+0x3e>
  4040e0:	e7e9      	b.n	4040b6 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4040e2:	461f      	mov	r7, r3
  4040e4:	4e21      	ldr	r6, [pc, #132]	; (40416c <usart_serial_getchar+0xd4>)
  4040e6:	4621      	mov	r1, r4
  4040e8:	4638      	mov	r0, r7
  4040ea:	47b0      	blx	r6
  4040ec:	2800      	cmp	r0, #0
  4040ee:	d1fa      	bne.n	4040e6 <usart_serial_getchar+0x4e>
  4040f0:	e7e4      	b.n	4040bc <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4040f2:	461f      	mov	r7, r3
  4040f4:	4e1d      	ldr	r6, [pc, #116]	; (40416c <usart_serial_getchar+0xd4>)
  4040f6:	4621      	mov	r1, r4
  4040f8:	4638      	mov	r0, r7
  4040fa:	47b0      	blx	r6
  4040fc:	2800      	cmp	r0, #0
  4040fe:	d1fa      	bne.n	4040f6 <usart_serial_getchar+0x5e>
  404100:	e7df      	b.n	4040c2 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  404102:	461f      	mov	r7, r3
  404104:	4e19      	ldr	r6, [pc, #100]	; (40416c <usart_serial_getchar+0xd4>)
  404106:	4621      	mov	r1, r4
  404108:	4638      	mov	r0, r7
  40410a:	47b0      	blx	r6
  40410c:	2800      	cmp	r0, #0
  40410e:	d1fa      	bne.n	404106 <usart_serial_getchar+0x6e>
  404110:	e7da      	b.n	4040c8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  404112:	461e      	mov	r6, r3
  404114:	4d16      	ldr	r5, [pc, #88]	; (404170 <usart_serial_getchar+0xd8>)
  404116:	a901      	add	r1, sp, #4
  404118:	4630      	mov	r0, r6
  40411a:	47a8      	blx	r5
  40411c:	2800      	cmp	r0, #0
  40411e:	d1fa      	bne.n	404116 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  404120:	9b01      	ldr	r3, [sp, #4]
  404122:	7023      	strb	r3, [r4, #0]
  404124:	e7d3      	b.n	4040ce <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  404126:	461e      	mov	r6, r3
  404128:	4d11      	ldr	r5, [pc, #68]	; (404170 <usart_serial_getchar+0xd8>)
  40412a:	a901      	add	r1, sp, #4
  40412c:	4630      	mov	r0, r6
  40412e:	47a8      	blx	r5
  404130:	2800      	cmp	r0, #0
  404132:	d1fa      	bne.n	40412a <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  404134:	9b01      	ldr	r3, [sp, #4]
  404136:	7023      	strb	r3, [r4, #0]
  404138:	e7c9      	b.n	4040ce <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40413a:	461e      	mov	r6, r3
  40413c:	4d0c      	ldr	r5, [pc, #48]	; (404170 <usart_serial_getchar+0xd8>)
  40413e:	a901      	add	r1, sp, #4
  404140:	4630      	mov	r0, r6
  404142:	47a8      	blx	r5
  404144:	2800      	cmp	r0, #0
  404146:	d1fa      	bne.n	40413e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  404148:	9b01      	ldr	r3, [sp, #4]
  40414a:	7023      	strb	r3, [r4, #0]
}
  40414c:	e7bf      	b.n	4040ce <usart_serial_getchar+0x36>
  40414e:	bf00      	nop
  404150:	400e0800 	.word	0x400e0800
  404154:	400e0a00 	.word	0x400e0a00
  404158:	400e1a00 	.word	0x400e1a00
  40415c:	400e1c00 	.word	0x400e1c00
  404160:	40024000 	.word	0x40024000
  404164:	40028000 	.word	0x40028000
  404168:	4002c000 	.word	0x4002c000
  40416c:	0040227b 	.word	0x0040227b
  404170:	00402387 	.word	0x00402387

00404174 <usart_serial_putchar>:
{
  404174:	b570      	push	{r4, r5, r6, lr}
  404176:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  404178:	4b2a      	ldr	r3, [pc, #168]	; (404224 <usart_serial_putchar+0xb0>)
  40417a:	4298      	cmp	r0, r3
  40417c:	d013      	beq.n	4041a6 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40417e:	4b2a      	ldr	r3, [pc, #168]	; (404228 <usart_serial_putchar+0xb4>)
  404180:	4298      	cmp	r0, r3
  404182:	d019      	beq.n	4041b8 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  404184:	4b29      	ldr	r3, [pc, #164]	; (40422c <usart_serial_putchar+0xb8>)
  404186:	4298      	cmp	r0, r3
  404188:	d01f      	beq.n	4041ca <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40418a:	4b29      	ldr	r3, [pc, #164]	; (404230 <usart_serial_putchar+0xbc>)
  40418c:	4298      	cmp	r0, r3
  40418e:	d025      	beq.n	4041dc <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  404190:	4b28      	ldr	r3, [pc, #160]	; (404234 <usart_serial_putchar+0xc0>)
  404192:	4298      	cmp	r0, r3
  404194:	d02b      	beq.n	4041ee <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  404196:	4b28      	ldr	r3, [pc, #160]	; (404238 <usart_serial_putchar+0xc4>)
  404198:	4298      	cmp	r0, r3
  40419a:	d031      	beq.n	404200 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  40419c:	4b27      	ldr	r3, [pc, #156]	; (40423c <usart_serial_putchar+0xc8>)
  40419e:	4298      	cmp	r0, r3
  4041a0:	d037      	beq.n	404212 <usart_serial_putchar+0x9e>
	return 0;
  4041a2:	2000      	movs	r0, #0
}
  4041a4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4041a6:	461e      	mov	r6, r3
  4041a8:	4d25      	ldr	r5, [pc, #148]	; (404240 <usart_serial_putchar+0xcc>)
  4041aa:	4621      	mov	r1, r4
  4041ac:	4630      	mov	r0, r6
  4041ae:	47a8      	blx	r5
  4041b0:	2800      	cmp	r0, #0
  4041b2:	d1fa      	bne.n	4041aa <usart_serial_putchar+0x36>
		return 1;
  4041b4:	2001      	movs	r0, #1
  4041b6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4041b8:	461e      	mov	r6, r3
  4041ba:	4d21      	ldr	r5, [pc, #132]	; (404240 <usart_serial_putchar+0xcc>)
  4041bc:	4621      	mov	r1, r4
  4041be:	4630      	mov	r0, r6
  4041c0:	47a8      	blx	r5
  4041c2:	2800      	cmp	r0, #0
  4041c4:	d1fa      	bne.n	4041bc <usart_serial_putchar+0x48>
		return 1;
  4041c6:	2001      	movs	r0, #1
  4041c8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4041ca:	461e      	mov	r6, r3
  4041cc:	4d1c      	ldr	r5, [pc, #112]	; (404240 <usart_serial_putchar+0xcc>)
  4041ce:	4621      	mov	r1, r4
  4041d0:	4630      	mov	r0, r6
  4041d2:	47a8      	blx	r5
  4041d4:	2800      	cmp	r0, #0
  4041d6:	d1fa      	bne.n	4041ce <usart_serial_putchar+0x5a>
		return 1;
  4041d8:	2001      	movs	r0, #1
  4041da:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4041dc:	461e      	mov	r6, r3
  4041de:	4d18      	ldr	r5, [pc, #96]	; (404240 <usart_serial_putchar+0xcc>)
  4041e0:	4621      	mov	r1, r4
  4041e2:	4630      	mov	r0, r6
  4041e4:	47a8      	blx	r5
  4041e6:	2800      	cmp	r0, #0
  4041e8:	d1fa      	bne.n	4041e0 <usart_serial_putchar+0x6c>
		return 1;
  4041ea:	2001      	movs	r0, #1
  4041ec:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4041ee:	461e      	mov	r6, r3
  4041f0:	4d14      	ldr	r5, [pc, #80]	; (404244 <usart_serial_putchar+0xd0>)
  4041f2:	4621      	mov	r1, r4
  4041f4:	4630      	mov	r0, r6
  4041f6:	47a8      	blx	r5
  4041f8:	2800      	cmp	r0, #0
  4041fa:	d1fa      	bne.n	4041f2 <usart_serial_putchar+0x7e>
		return 1;
  4041fc:	2001      	movs	r0, #1
  4041fe:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404200:	461e      	mov	r6, r3
  404202:	4d10      	ldr	r5, [pc, #64]	; (404244 <usart_serial_putchar+0xd0>)
  404204:	4621      	mov	r1, r4
  404206:	4630      	mov	r0, r6
  404208:	47a8      	blx	r5
  40420a:	2800      	cmp	r0, #0
  40420c:	d1fa      	bne.n	404204 <usart_serial_putchar+0x90>
		return 1;
  40420e:	2001      	movs	r0, #1
  404210:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404212:	461e      	mov	r6, r3
  404214:	4d0b      	ldr	r5, [pc, #44]	; (404244 <usart_serial_putchar+0xd0>)
  404216:	4621      	mov	r1, r4
  404218:	4630      	mov	r0, r6
  40421a:	47a8      	blx	r5
  40421c:	2800      	cmp	r0, #0
  40421e:	d1fa      	bne.n	404216 <usart_serial_putchar+0xa2>
		return 1;
  404220:	2001      	movs	r0, #1
  404222:	bd70      	pop	{r4, r5, r6, pc}
  404224:	400e0800 	.word	0x400e0800
  404228:	400e0a00 	.word	0x400e0a00
  40422c:	400e1a00 	.word	0x400e1a00
  404230:	400e1c00 	.word	0x400e1c00
  404234:	40024000 	.word	0x40024000
  404238:	40028000 	.word	0x40028000
  40423c:	4002c000 	.word	0x4002c000
  404240:	00402269 	.word	0x00402269
  404244:	00402371 	.word	0x00402371

00404248 <pin_toggle>:
/************************************************************************/

/** 
 *  Toggle pin controlado pelo PIO (out)
 */
void pin_toggle(Pio *pio, uint32_t mask){
  404248:	b538      	push	{r3, r4, r5, lr}
  40424a:	4604      	mov	r4, r0
  40424c:	460d      	mov	r5, r1
   if(pio_get_output_data_status(pio, mask))
  40424e:	4b06      	ldr	r3, [pc, #24]	; (404268 <pin_toggle+0x20>)
  404250:	4798      	blx	r3
  404252:	b920      	cbnz	r0, 40425e <pin_toggle+0x16>
    pio_clear(pio, mask);
   else
    pio_set(pio,mask);
  404254:	4629      	mov	r1, r5
  404256:	4620      	mov	r0, r4
  404258:	4b04      	ldr	r3, [pc, #16]	; (40426c <pin_toggle+0x24>)
  40425a:	4798      	blx	r3
  40425c:	bd38      	pop	{r3, r4, r5, pc}
    pio_clear(pio, mask);
  40425e:	4629      	mov	r1, r5
  404260:	4620      	mov	r0, r4
  404262:	4b03      	ldr	r3, [pc, #12]	; (404270 <pin_toggle+0x28>)
  404264:	4798      	blx	r3
  404266:	bd38      	pop	{r3, r4, r5, pc}
  404268:	00401c89 	.word	0x00401c89
  40426c:	00401b91 	.word	0x00401b91
  404270:	00401b95 	.word	0x00401b95

00404274 <Button1_Handler>:
{
  404274:	b510      	push	{r4, lr}
  pin_toggle(PIOD, (1<<28));
  404276:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40427a:	4804      	ldr	r0, [pc, #16]	; (40428c <Button1_Handler+0x18>)
  40427c:	4c04      	ldr	r4, [pc, #16]	; (404290 <Button1_Handler+0x1c>)
  40427e:	47a0      	blx	r4
  pin_toggle(LED_PIO, LED_PIN_MASK);
  404280:	f44f 7180 	mov.w	r1, #256	; 0x100
  404284:	4803      	ldr	r0, [pc, #12]	; (404294 <Button1_Handler+0x20>)
  404286:	47a0      	blx	r4
  404288:	bd10      	pop	{r4, pc}
  40428a:	bf00      	nop
  40428c:	400e1400 	.word	0x400e1400
  404290:	00404249 	.word	0x00404249
  404294:	400e1200 	.word	0x400e1200

00404298 <BUT_init>:
}

/**
 * @Brief Inicializa o pino do BUT
 */
void BUT_init(void){
  404298:	b510      	push	{r4, lr}
  40429a:	b082      	sub	sp, #8
    /* config. pino botao em modo de entrada */
    pmc_enable_periph_clk(BUT_PIO_ID);
  40429c:	200a      	movs	r0, #10
  40429e:	4b10      	ldr	r3, [pc, #64]	; (4042e0 <BUT_init+0x48>)
  4042a0:	4798      	blx	r3
    pio_set_input(BUT_PIO, BUT_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4042a2:	4c10      	ldr	r4, [pc, #64]	; (4042e4 <BUT_init+0x4c>)
  4042a4:	2209      	movs	r2, #9
  4042a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4042aa:	4620      	mov	r0, r4
  4042ac:	4b0e      	ldr	r3, [pc, #56]	; (4042e8 <BUT_init+0x50>)
  4042ae:	4798      	blx	r3
    
    /* config. interrupcao em borda de descida no botao do kit */
    /* indica funcao (but_Handler) a ser chamada quando houver uma interrup??o */
    pio_enable_interrupt(BUT_PIO, BUT_PIN_MASK);
  4042b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4042b4:	4620      	mov	r0, r4
  4042b6:	4b0d      	ldr	r3, [pc, #52]	; (4042ec <BUT_init+0x54>)
  4042b8:	4798      	blx	r3
    pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIN_MASK, PIO_IT_FALL_EDGE, Button1_Handler);
  4042ba:	4b0d      	ldr	r3, [pc, #52]	; (4042f0 <BUT_init+0x58>)
  4042bc:	9300      	str	r3, [sp, #0]
  4042be:	2350      	movs	r3, #80	; 0x50
  4042c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4042c4:	210a      	movs	r1, #10
  4042c6:	4620      	mov	r0, r4
  4042c8:	4c0a      	ldr	r4, [pc, #40]	; (4042f4 <BUT_init+0x5c>)
  4042ca:	47a0      	blx	r4
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4042cc:	4b0a      	ldr	r3, [pc, #40]	; (4042f8 <BUT_init+0x60>)
  4042ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4042d2:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4042d4:	2220      	movs	r2, #32
  4042d6:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    
    /* habilita interrup?c?o do PIO que controla o botao */
    /* e configura sua prioridade                        */
    NVIC_EnableIRQ(BUT_PIO_ID);
    NVIC_SetPriority(BUT_PIO_ID, 1);
};
  4042da:	b002      	add	sp, #8
  4042dc:	bd10      	pop	{r4, pc}
  4042de:	bf00      	nop
  4042e0:	00401f19 	.word	0x00401f19
  4042e4:	400e0e00 	.word	0x400e0e00
  4042e8:	00401c2b 	.word	0x00401c2b
  4042ec:	00401cc7 	.word	0x00401cc7
  4042f0:	00404275 	.word	0x00404275
  4042f4:	00401d25 	.word	0x00401d25
  4042f8:	e000e100 	.word	0xe000e100

004042fc <LED_init>:

/**
 * @Brief Inicializa o pino do LED
 */
void LED_init(int estado){
  4042fc:	b510      	push	{r4, lr}
  4042fe:	b082      	sub	sp, #8
  404300:	4604      	mov	r4, r0
    pmc_enable_periph_clk(LED_PIO_ID);
  404302:	200c      	movs	r0, #12
  404304:	4b05      	ldr	r3, [pc, #20]	; (40431c <LED_init+0x20>)
  404306:	4798      	blx	r3
    pio_set_output(LED_PIO, LED_PIN_MASK, estado, 0, 0 );
  404308:	2300      	movs	r3, #0
  40430a:	9300      	str	r3, [sp, #0]
  40430c:	4622      	mov	r2, r4
  40430e:	f44f 7180 	mov.w	r1, #256	; 0x100
  404312:	4803      	ldr	r0, [pc, #12]	; (404320 <LED_init+0x24>)
  404314:	4c03      	ldr	r4, [pc, #12]	; (404324 <LED_init+0x28>)
  404316:	47a0      	blx	r4
};
  404318:	b002      	add	sp, #8
  40431a:	bd10      	pop	{r4, pc}
  40431c:	00401f19 	.word	0x00401f19
  404320:	400e1200 	.word	0x400e1200
  404324:	00401c61 	.word	0x00401c61

00404328 <bme280_i2c_bus_init>:
/************************************************************************/ 
/*	
 *  \Brief: The function is used as I2C bus init
 */
void bme280_i2c_bus_init(void)
{
  404328:	b500      	push	{lr}
  40432a:	b085      	sub	sp, #20
	twihs_options_t bno055_option;
	pmc_enable_periph_clk(TWIHS_MCU6050_ID);
  40432c:	2013      	movs	r0, #19
  40432e:	4b07      	ldr	r3, [pc, #28]	; (40434c <bme280_i2c_bus_init+0x24>)
  404330:	4798      	blx	r3

	/* Configure the options of TWI driver */
	bno055_option.master_clk = sysclk_get_cpu_hz();
  404332:	4b07      	ldr	r3, [pc, #28]	; (404350 <bme280_i2c_bus_init+0x28>)
  404334:	9301      	str	r3, [sp, #4]
	bno055_option.speed      = 10000;
  404336:	f242 7310 	movw	r3, #10000	; 0x2710
  40433a:	9302      	str	r3, [sp, #8]
	twihs_master_init(TWIHS_MCU6050, &bno055_option);
  40433c:	a901      	add	r1, sp, #4
  40433e:	4805      	ldr	r0, [pc, #20]	; (404354 <bme280_i2c_bus_init+0x2c>)
  404340:	4b05      	ldr	r3, [pc, #20]	; (404358 <bme280_i2c_bus_init+0x30>)
  404342:	4798      	blx	r3
}
  404344:	b005      	add	sp, #20
  404346:	f85d fb04 	ldr.w	pc, [sp], #4
  40434a:	bf00      	nop
  40434c:	00401f19 	.word	0x00401f19
  404350:	11e1a300 	.word	0x11e1a300
  404354:	40018000 	.word	0x40018000
  404358:	004020e9 	.word	0x004020e9

0040435c <bme280_i2c_read_reg>:

uint8_t bme280_i2c_read_reg(uint CHIP_ADDRESS, uint reg_address, char *value){
  40435c:	b510      	push	{r4, lr}
  40435e:	b086      	sub	sp, #24
  404360:	4614      	mov	r4, r2
  	uint i = 1;
    
  	  twihs_packet_t p_packet;
  	  p_packet.chip         = CHIP_ADDRESS;//BME280_ADDRESS;
  404362:	f88d 0014 	strb.w	r0, [sp, #20]
  	  p_packet.addr_length  = 0;
  404366:	2300      	movs	r3, #0
  404368:	9302      	str	r3, [sp, #8]

  	  char data = reg_address; //BME280_CHIP_ID_REG;
  40436a:	ab06      	add	r3, sp, #24
  40436c:	f803 1d15 	strb.w	r1, [r3, #-21]!
  	  p_packet.buffer       = &data;
  404370:	9303      	str	r3, [sp, #12]
  	  p_packet.length       = 1;
  404372:	2301      	movs	r3, #1
  404374:	9304      	str	r3, [sp, #16]
  	
  	  if(twihs_master_write(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  404376:	a901      	add	r1, sp, #4
  404378:	4809      	ldr	r0, [pc, #36]	; (4043a0 <bme280_i2c_read_reg+0x44>)
  40437a:	4b0a      	ldr	r3, [pc, #40]	; (4043a4 <bme280_i2c_read_reg+0x48>)
  40437c:	4798      	blx	r3
  40437e:	b110      	cbz	r0, 404386 <bme280_i2c_read_reg+0x2a>
  	    return 1;
  404380:	2001      	movs	r0, #1

  	  if(twihs_master_read(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  	    return 1;
        
    return 0;  
}
  404382:	b006      	add	sp, #24
  404384:	bd10      	pop	{r4, pc}
  	  p_packet.addr_length  = 0;
  404386:	2300      	movs	r3, #0
  404388:	9302      	str	r3, [sp, #8]
  	  p_packet.length       = 1;
  40438a:	2301      	movs	r3, #1
  40438c:	9304      	str	r3, [sp, #16]
      p_packet.buffer       = value;
  40438e:	9403      	str	r4, [sp, #12]
  	  if(twihs_master_read(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  404390:	a901      	add	r1, sp, #4
  404392:	4803      	ldr	r0, [pc, #12]	; (4043a0 <bme280_i2c_read_reg+0x44>)
  404394:	4b04      	ldr	r3, [pc, #16]	; (4043a8 <bme280_i2c_read_reg+0x4c>)
  404396:	4798      	blx	r3
  	    return 1;
  404398:	3000      	adds	r0, #0
  40439a:	bf18      	it	ne
  40439c:	2001      	movne	r0, #1
  40439e:	e7f0      	b.n	404382 <bme280_i2c_read_reg+0x26>
  4043a0:	40018000 	.word	0x40018000
  4043a4:	004021c9 	.word	0x004021c9
  4043a8:	0040211d 	.word	0x0040211d

004043ac <bme280_i2c_config_temp>:

int8_t bme280_i2c_config_temp(void){
  4043ac:	b500      	push	{lr}
  4043ae:	b087      	sub	sp, #28
  	int32_t ierror = 0x00;
  	
  	twihs_packet_t p_packet;
  	p_packet.chip         = BME280_ADDRESS;//BME280_ADDRESS;
  4043b0:	2377      	movs	r3, #119	; 0x77
  4043b2:	f88d 3014 	strb.w	r3, [sp, #20]
    p_packet.addr[0]      = BME280_CTRL_MEAS_REG;
  4043b6:	23f4      	movs	r3, #244	; 0xf4
  4043b8:	f88d 3004 	strb.w	r3, [sp, #4]
  	p_packet.addr_length  = 1;
  4043bc:	2201      	movs	r2, #1
  4043be:	9202      	str	r2, [sp, #8]

  	char data = 0b00100111; //BME280_CHIP_ID_REG;
  4043c0:	ab06      	add	r3, sp, #24
  4043c2:	2127      	movs	r1, #39	; 0x27
  4043c4:	f803 1d15 	strb.w	r1, [r3, #-21]!
  	p_packet.buffer       = &data;
  4043c8:	9303      	str	r3, [sp, #12]
  	p_packet.length       = 1;
  4043ca:	9204      	str	r2, [sp, #16]
  	
  	if(twihs_master_write(TWIHS_MCU6050, &p_packet) != TWIHS_SUCCESS)
  4043cc:	a901      	add	r1, sp, #4
  4043ce:	4804      	ldr	r0, [pc, #16]	; (4043e0 <bme280_i2c_config_temp+0x34>)
  4043d0:	4b04      	ldr	r3, [pc, #16]	; (4043e4 <bme280_i2c_config_temp+0x38>)
  4043d2:	4798      	blx	r3
  4043d4:	b100      	cbz	r0, 4043d8 <bme280_i2c_config_temp+0x2c>
  	return 1;
  4043d6:	2001      	movs	r0, #1
}
  4043d8:	b007      	add	sp, #28
  4043da:	f85d fb04 	ldr.w	pc, [sp], #4
  4043de:	bf00      	nop
  4043e0:	40018000 	.word	0x40018000
  4043e4:	004021c9 	.word	0x004021c9

004043e8 <bme280_i2c_read_temp>:

int8_t bme280_i2c_read_temp(uint *temp)
{
  4043e8:	b530      	push	{r4, r5, lr}
  4043ea:	b083      	sub	sp, #12
  4043ec:	4605      	mov	r5, r0
	int32_t ierror = 0x00;
  char tmp[3];
  
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_MSB_REG, &tmp[2]);
  4043ee:	f10d 0206 	add.w	r2, sp, #6
  4043f2:	21fa      	movs	r1, #250	; 0xfa
  4043f4:	2077      	movs	r0, #119	; 0x77
  4043f6:	4c0d      	ldr	r4, [pc, #52]	; (40442c <bme280_i2c_read_temp+0x44>)
  4043f8:	47a0      	blx	r4
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_MSB_REG, &tmp[2]);
  4043fa:	f10d 0206 	add.w	r2, sp, #6
  4043fe:	21fa      	movs	r1, #250	; 0xfa
  404400:	2077      	movs	r0, #119	; 0x77
  404402:	47a0      	blx	r4
  
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_LSB_REG, &tmp[1]);
  404404:	f10d 0205 	add.w	r2, sp, #5
  404408:	21fb      	movs	r1, #251	; 0xfb
  40440a:	2077      	movs	r0, #119	; 0x77
  40440c:	47a0      	blx	r4
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_TEMPERATURE_LSB_REG, &tmp[1]);
  40440e:	f10d 0205 	add.w	r2, sp, #5
  404412:	21fb      	movs	r1, #251	; 0xfb
  404414:	2077      	movs	r0, #119	; 0x77
  404416:	47a0      	blx	r4

  *temp = tmp[2] << 8 | tmp[1];
  404418:	f89d 2006 	ldrb.w	r2, [sp, #6]
  40441c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  404420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404424:	602b      	str	r3, [r5, #0]
	return 0;
}
  404426:	2000      	movs	r0, #0
  404428:	b003      	add	sp, #12
  40442a:	bd30      	pop	{r4, r5, pc}
  40442c:	0040435d 	.word	0x0040435d

00404430 <bme280_i2c_read_humd>:

int8_t bme280_i2c_read_humd(uint *humd)
{
  404430:	b530      	push	{r4, r5, lr}
  404432:	b083      	sub	sp, #12
  404434:	4605      	mov	r5, r0
	int32_t ierror = 0x00;
	char hum[3];
	
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_MSB_REG, &hum[2]);
  404436:	f10d 0206 	add.w	r2, sp, #6
  40443a:	21fd      	movs	r1, #253	; 0xfd
  40443c:	2077      	movs	r0, #119	; 0x77
  40443e:	4c0d      	ldr	r4, [pc, #52]	; (404474 <bme280_i2c_read_humd+0x44>)
  404440:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_MSB_REG, &hum[2]);
  404442:	f10d 0206 	add.w	r2, sp, #6
  404446:	21fd      	movs	r1, #253	; 0xfd
  404448:	2077      	movs	r0, #119	; 0x77
  40444a:	47a0      	blx	r4
	
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_LSB_REG, &hum[1]);
  40444c:	f10d 0205 	add.w	r2, sp, #5
  404450:	21fe      	movs	r1, #254	; 0xfe
  404452:	2077      	movs	r0, #119	; 0x77
  404454:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_HUMIDITY_LSB_REG, &hum[1]);
  404456:	f10d 0205 	add.w	r2, sp, #5
  40445a:	21fe      	movs	r1, #254	; 0xfe
  40445c:	2077      	movs	r0, #119	; 0x77
  40445e:	47a0      	blx	r4

	*humd = hum[2] << 8 | hum[1];
  404460:	f89d 2006 	ldrb.w	r2, [sp, #6]
  404464:	f89d 3005 	ldrb.w	r3, [sp, #5]
  404468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40446c:	602b      	str	r3, [r5, #0]
	return 0;
}
  40446e:	2000      	movs	r0, #0
  404470:	b003      	add	sp, #12
  404472:	bd30      	pop	{r4, r5, pc}
  404474:	0040435d 	.word	0x0040435d

00404478 <bme280_i2c_read_prss>:

int8_t bme280_i2c_read_prss(uint *prss)
{
  404478:	b530      	push	{r4, r5, lr}
  40447a:	b083      	sub	sp, #12
  40447c:	4605      	mov	r5, r0
	int32_t ierror = 0x00;
	char prs[3];
	
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_MSB_REG, &prs[2]);
  40447e:	f10d 0206 	add.w	r2, sp, #6
  404482:	21f7      	movs	r1, #247	; 0xf7
  404484:	2077      	movs	r0, #119	; 0x77
  404486:	4c0d      	ldr	r4, [pc, #52]	; (4044bc <bme280_i2c_read_prss+0x44>)
  404488:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_MSB_REG, &prs[2]);
  40448a:	f10d 0206 	add.w	r2, sp, #6
  40448e:	21f7      	movs	r1, #247	; 0xf7
  404490:	2077      	movs	r0, #119	; 0x77
  404492:	47a0      	blx	r4
	
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_LSB_REG, &prs[1]);
  404494:	f10d 0205 	add.w	r2, sp, #5
  404498:	21f8      	movs	r1, #248	; 0xf8
  40449a:	2077      	movs	r0, #119	; 0x77
  40449c:	47a0      	blx	r4
	bme280_i2c_read_reg(BME280_ADDRESS, BME280_PRESSURE_LSB_REG, &prs[1]);
  40449e:	f10d 0205 	add.w	r2, sp, #5
  4044a2:	21f8      	movs	r1, #248	; 0xf8
  4044a4:	2077      	movs	r0, #119	; 0x77
  4044a6:	47a0      	blx	r4

	*prss = prs[2] << 8 | prs[1];
  4044a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
  4044ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4044b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4044b4:	602b      	str	r3, [r5, #0]
	return 0;
}
  4044b6:	2000      	movs	r0, #0
  4044b8:	b003      	add	sp, #12
  4044ba:	bd30      	pop	{r4, r5, pc}
  4044bc:	0040435d 	.word	0x0040435d

004044c0 <bme280_validate_id>:

uint8_t bme280_validate_id(void){
  4044c0:	b510      	push	{r4, lr}
  4044c2:	b082      	sub	sp, #8
  char id;
  bme280_i2c_read_reg(BME280_ADDRESS, BME280_CHIP_ID_REG, &id );
  4044c4:	f10d 0207 	add.w	r2, sp, #7
  4044c8:	21d0      	movs	r1, #208	; 0xd0
  4044ca:	2077      	movs	r0, #119	; 0x77
  4044cc:	4c08      	ldr	r4, [pc, #32]	; (4044f0 <bme280_validate_id+0x30>)
  4044ce:	47a0      	blx	r4
  if (bme280_i2c_read_reg(BME280_ADDRESS, BME280_CHIP_ID_REG, &id )) 
  4044d0:	f10d 0207 	add.w	r2, sp, #7
  4044d4:	21d0      	movs	r1, #208	; 0xd0
  4044d6:	2077      	movs	r0, #119	; 0x77
  4044d8:	47a0      	blx	r4
  4044da:	b930      	cbnz	r0, 4044ea <bme280_validate_id+0x2a>
    return 1;
  if (id != 0x60)
  4044dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4044e0:	3860      	subs	r0, #96	; 0x60
  4044e2:	bf18      	it	ne
  4044e4:	2001      	movne	r0, #1
    return 1;
  return 0; 
}
  4044e6:	b002      	add	sp, #8
  4044e8:	bd10      	pop	{r4, pc}
  4044ea:	2001      	movs	r0, #1
  4044ec:	e7fb      	b.n	4044e6 <bme280_validate_id+0x26>
  4044ee:	bf00      	nop
  4044f0:	0040435d 	.word	0x0040435d

004044f4 <main>:

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  4044f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044f8:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
  uint8_t bufferTX[100];
  
  uint8_t rtn;

  /* Initialize the SAM system */
  sysclk_init();
  4044fc:	4b98      	ldr	r3, [pc, #608]	; (404760 <main+0x26c>)
  4044fe:	4798      	blx	r3
  board_init();
  404500:	4b98      	ldr	r3, [pc, #608]	; (404764 <main+0x270>)
  404502:	4798      	blx	r3
   
  /* Disable the watchdog */
  WDT->WDT_MR = WDT_MR_WDDIS;
  404504:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404508:	4b97      	ldr	r3, [pc, #604]	; (404768 <main+0x274>)
  40450a:	605a      	str	r2, [r3, #4]
  40450c:	200b      	movs	r0, #11
  40450e:	4e97      	ldr	r6, [pc, #604]	; (40476c <main+0x278>)
  404510:	47b0      	blx	r6
  404512:	200a      	movs	r0, #10
  404514:	47b0      	blx	r6
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  404516:	2210      	movs	r2, #16
  404518:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40451c:	4894      	ldr	r0, [pc, #592]	; (404770 <main+0x27c>)
  40451e:	4c95      	ldr	r4, [pc, #596]	; (404774 <main+0x280>)
  404520:	47a0      	blx	r4
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  404522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  404526:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40452a:	4893      	ldr	r0, [pc, #588]	; (404778 <main+0x284>)
  40452c:	47a0      	blx	r4
 	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40452e:	4a93      	ldr	r2, [pc, #588]	; (40477c <main+0x288>)
  404530:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  404534:	f043 0310 	orr.w	r3, r3, #16
  404538:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  40453c:	200e      	movs	r0, #14
  40453e:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404540:	f8df b300 	ldr.w	fp, [pc, #768]	; 404844 <main+0x350>
  404544:	4d8e      	ldr	r5, [pc, #568]	; (404780 <main+0x28c>)
  404546:	f8cb 5000 	str.w	r5, [fp]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40454a:	4b8e      	ldr	r3, [pc, #568]	; (404784 <main+0x290>)
  40454c:	4a8e      	ldr	r2, [pc, #568]	; (404788 <main+0x294>)
  40454e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404550:	4b8e      	ldr	r3, [pc, #568]	; (40478c <main+0x298>)
  404552:	4a8f      	ldr	r2, [pc, #572]	; (404790 <main+0x29c>)
  404554:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  404556:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40455a:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  40455c:	23c0      	movs	r3, #192	; 0xc0
  40455e:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  404560:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404564:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  404566:	2400      	movs	r4, #0
  404568:	9404      	str	r4, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40456a:	9405      	str	r4, [sp, #20]
  40456c:	200e      	movs	r0, #14
  40456e:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  404570:	4a88      	ldr	r2, [pc, #544]	; (404794 <main+0x2a0>)
  404572:	a901      	add	r1, sp, #4
  404574:	4628      	mov	r0, r5
  404576:	4b88      	ldr	r3, [pc, #544]	; (404798 <main+0x2a4>)
  404578:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40457a:	4628      	mov	r0, r5
  40457c:	4b87      	ldr	r3, [pc, #540]	; (40479c <main+0x2a8>)
  40457e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404580:	4628      	mov	r0, r5
  404582:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 404848 <main+0x354>
  404586:	47d0      	blx	sl
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404588:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 40484c <main+0x358>
  40458c:	f8d9 3000 	ldr.w	r3, [r9]
  404590:	4621      	mov	r1, r4
  404592:	6898      	ldr	r0, [r3, #8]
  404594:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 404850 <main+0x35c>
  404598:	47c0      	blx	r8
	setbuf(stdin, NULL);
  40459a:	f8d9 3000 	ldr.w	r3, [r9]
  40459e:	4621      	mov	r1, r4
  4045a0:	6858      	ldr	r0, [r3, #4]
  4045a2:	47c0      	blx	r8
  
  /* Inicializa com serial com PC*/
  configure_console();
  printf("Demo do sensor BME280, sem calibracao! \n");
  4045a4:	487e      	ldr	r0, [pc, #504]	; (4047a0 <main+0x2ac>)
  4045a6:	4f7f      	ldr	r7, [pc, #508]	; (4047a4 <main+0x2b0>)
  4045a8:	47b8      	blx	r7
  
  /* Configura Leds */
  LED_init(1);
  4045aa:	2001      	movs	r0, #1
  4045ac:	4b7e      	ldr	r3, [pc, #504]	; (4047a8 <main+0x2b4>)
  4045ae:	4798      	blx	r3
  
  /* Configura os bot?es */
  BUT_init();  
  4045b0:	4b7e      	ldr	r3, [pc, #504]	; (4047ac <main+0x2b8>)
  4045b2:	4798      	blx	r3
  
  /* Inicializa funcao de delay */
  delay_init( sysclk_get_cpu_hz());
  
  /* sd-card */
   char test_file_name[] = "0:sd_mmc_test.txt";
  4045b4:	f50d 7e1f 	add.w	lr, sp, #636	; 0x27c
  4045b8:	f8df c298 	ldr.w	ip, [pc, #664]	; 404854 <main+0x360>
  4045bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4045c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4045c4:	f8dc 3000 	ldr.w	r3, [ip]
  4045c8:	f8ae 3000 	strh.w	r3, [lr]
	   .paritytype = CONF_TEST_PARITY,
	   .stopbits   = CONF_TEST_STOPBITS,
   };
  
   irq_initialize_vectors();
   cpu_irq_enable();
  4045cc:	2201      	movs	r2, #1
  4045ce:	4b78      	ldr	r3, [pc, #480]	; (4047b0 <main+0x2bc>)
  4045d0:	701a      	strb	r2, [r3, #0]
  4045d2:	f3bf 8f5f 	dmb	sy
  4045d6:	b662      	cpsie	i
	stdio_base = (void *)usart;
  4045d8:	f8cb 5000 	str.w	r5, [fp]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4045dc:	4b69      	ldr	r3, [pc, #420]	; (404784 <main+0x290>)
  4045de:	4a6a      	ldr	r2, [pc, #424]	; (404788 <main+0x294>)
  4045e0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4045e2:	4b6a      	ldr	r3, [pc, #424]	; (40478c <main+0x298>)
  4045e4:	4a6a      	ldr	r2, [pc, #424]	; (404790 <main+0x29c>)
  4045e6:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4045e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4045ec:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  4045ee:	23c0      	movs	r3, #192	; 0xc0
  4045f0:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  4045f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4045f6:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  4045f8:	9404      	str	r4, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4045fa:	9405      	str	r4, [sp, #20]
  4045fc:	200e      	movs	r0, #14
  4045fe:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  404600:	4a64      	ldr	r2, [pc, #400]	; (404794 <main+0x2a0>)
  404602:	a901      	add	r1, sp, #4
  404604:	4628      	mov	r0, r5
  404606:	4b64      	ldr	r3, [pc, #400]	; (404798 <main+0x2a4>)
  404608:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40460a:	4628      	mov	r0, r5
  40460c:	4b63      	ldr	r3, [pc, #396]	; (40479c <main+0x2a8>)
  40460e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404610:	4628      	mov	r0, r5
  404612:	47d0      	blx	sl
	setbuf(stdout, NULL);
  404614:	f8d9 3000 	ldr.w	r3, [r9]
  404618:	4621      	mov	r1, r4
  40461a:	6898      	ldr	r0, [r3, #8]
  40461c:	47c0      	blx	r8
	setbuf(stdin, NULL);
  40461e:	f8d9 3000 	ldr.w	r3, [r9]
  404622:	4621      	mov	r1, r4
  404624:	6858      	ldr	r0, [r3, #4]
  404626:	47c0      	blx	r8

   stdio_serial_init(CONF_TEST_USART, &usart_serial_options);

   /* Initialize SD MMC stack */
   sd_mmc_init();
  404628:	4b62      	ldr	r3, [pc, #392]	; (4047b4 <main+0x2c0>)
  40462a:	4798      	blx	r3

   printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  40462c:	4862      	ldr	r0, [pc, #392]	; (4047b8 <main+0x2c4>)
  40462e:	47b8      	blx	r7
   printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  404630:	4a62      	ldr	r2, [pc, #392]	; (4047bc <main+0x2c8>)
  404632:	4963      	ldr	r1, [pc, #396]	; (4047c0 <main+0x2cc>)
  404634:	4863      	ldr	r0, [pc, #396]	; (4047c4 <main+0x2d0>)
  404636:	47b8      	blx	r7
  /************************************************************************/
  /* MPU                                                                  */
  /************************************************************************/
  
  /* Inicializa i2c */
  printf("Inicializando bus i2c \n");
  404638:	4863      	ldr	r0, [pc, #396]	; (4047c8 <main+0x2d4>)
  40463a:	47b8      	blx	r7
  bme280_i2c_bus_init();
  40463c:	4b63      	ldr	r3, [pc, #396]	; (4047cc <main+0x2d8>)
  40463e:	4798      	blx	r3
  delay_ms(10);
  404640:	4863      	ldr	r0, [pc, #396]	; (4047d0 <main+0x2dc>)
  404642:	4b64      	ldr	r3, [pc, #400]	; (4047d4 <main+0x2e0>)
  404644:	4798      	blx	r3
  
  /* verificando presenca do chip */
  while(bme280_validate_id()){
  404646:	4e64      	ldr	r6, [pc, #400]	; (4047d8 <main+0x2e4>)
    printf("Chip nao encontrado\n");
  404648:	4d64      	ldr	r5, [pc, #400]	; (4047dc <main+0x2e8>)
    delay_ms(200);
  40464a:	4c65      	ldr	r4, [pc, #404]	; (4047e0 <main+0x2ec>)
  while(bme280_validate_id()){
  40464c:	47b0      	blx	r6
  40464e:	b960      	cbnz	r0, 40466a <main+0x176>
  }    
   
  printf("Chip encontrado, inicializando temperatura \n");
  404650:	4864      	ldr	r0, [pc, #400]	; (4047e4 <main+0x2f0>)
  404652:	4b54      	ldr	r3, [pc, #336]	; (4047a4 <main+0x2b0>)
  404654:	4798      	blx	r3
  bme280_i2c_config_temp();
  404656:	4b64      	ldr	r3, [pc, #400]	; (4047e8 <main+0x2f4>)
  404658:	4798      	blx	r3
    
	uint temp;
	uint humd;
	uint prss;
	while (1) {
		if (bme280_i2c_read_temp(&temp)){
  40465a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 404858 <main+0x364>
			printf("erro readinG temperature \n");
		}else{
			printf("Temperatura: %d \n", temp/100);
  40465e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 40485c <main+0x368>
  404662:	4f50      	ldr	r7, [pc, #320]	; (4047a4 <main+0x2b0>)
		if (bme280_i2c_read_prss(&prss)){
			printf("erro press");
		}else{
			printf("pressao: %d \n", prss/100);
		}
		pin_toggle(LED_PIO, LED_PIN_MASK);
  404664:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 404860 <main+0x36c>
  404668:	e053      	b.n	404712 <main+0x21e>
    printf("Chip nao encontrado\n");
  40466a:	4628      	mov	r0, r5
  40466c:	4b4d      	ldr	r3, [pc, #308]	; (4047a4 <main+0x2b0>)
  40466e:	4798      	blx	r3
    delay_ms(200);
  404670:	4620      	mov	r0, r4
  404672:	4b58      	ldr	r3, [pc, #352]	; (4047d4 <main+0x2e0>)
  404674:	4798      	blx	r3
  404676:	e7e9      	b.n	40464c <main+0x158>
			printf("Temperatura: %d \n", temp/100);
  404678:	9909      	ldr	r1, [sp, #36]	; 0x24
  40467a:	fba9 3101 	umull	r3, r1, r9, r1
  40467e:	0949      	lsrs	r1, r1, #5
  404680:	485a      	ldr	r0, [pc, #360]	; (4047ec <main+0x2f8>)
  404682:	47b8      	blx	r7
  404684:	e04b      	b.n	40471e <main+0x22a>
			printf("Humidade: %d \n", humd/100);
  404686:	9908      	ldr	r1, [sp, #32]
  404688:	fba9 3101 	umull	r3, r1, r9, r1
  40468c:	0949      	lsrs	r1, r1, #5
  40468e:	4858      	ldr	r0, [pc, #352]	; (4047f0 <main+0x2fc>)
  404690:	47b8      	blx	r7
  404692:	e04b      	b.n	40472c <main+0x238>
			printf("pressao: %d \n", prss/100);
  404694:	9907      	ldr	r1, [sp, #28]
  404696:	fba9 3101 	umull	r3, r1, r9, r1
  40469a:	0949      	lsrs	r1, r1, #5
  40469c:	4855      	ldr	r0, [pc, #340]	; (4047f4 <main+0x300>)
  40469e:	47b8      	blx	r7
  4046a0:	e04b      	b.n	40473a <main+0x246>

		/* Wait card present and ready */
		do {
			status = sd_mmc_test_unit_ready(0);
			if (CTRL_FAIL == status) {
				printf("Card install FAIL\n\r");
  4046a2:	4640      	mov	r0, r8
  4046a4:	47b8      	blx	r7
				printf("Please unplug and re-plug the card.\n\r");
  4046a6:	4854      	ldr	r0, [pc, #336]	; (4047f8 <main+0x304>)
  4046a8:	47b8      	blx	r7
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  4046aa:	2500      	movs	r5, #0
  4046ac:	4c53      	ldr	r4, [pc, #332]	; (4047fc <main+0x308>)
  4046ae:	4628      	mov	r0, r5
  4046b0:	47a0      	blx	r4
  4046b2:	2802      	cmp	r0, #2
  4046b4:	d1fb      	bne.n	4046ae <main+0x1ba>
			status = sd_mmc_test_unit_ready(0);
  4046b6:	2000      	movs	r0, #0
  4046b8:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
  4046ba:	2801      	cmp	r0, #1
  4046bc:	d0f1      	beq.n	4046a2 <main+0x1ae>
				}
			}
		} while (CTRL_GOOD != status);
  4046be:	2800      	cmp	r0, #0
  4046c0:	d1f9      	bne.n	4046b6 <main+0x1c2>

		printf("Mount disk (f_mount)...\r\n");
  4046c2:	484f      	ldr	r0, [pc, #316]	; (404800 <main+0x30c>)
  4046c4:	47b8      	blx	r7
		memset(&fs, 0, sizeof(FATFS));
  4046c6:	f44f 720c 	mov.w	r2, #560	; 0x230
  4046ca:	2100      	movs	r1, #0
  4046cc:	a813      	add	r0, sp, #76	; 0x4c
  4046ce:	4b4d      	ldr	r3, [pc, #308]	; (404804 <main+0x310>)
  4046d0:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  4046d2:	a913      	add	r1, sp, #76	; 0x4c
  4046d4:	2000      	movs	r0, #0
  4046d6:	4b4c      	ldr	r3, [pc, #304]	; (404808 <main+0x314>)
  4046d8:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
  4046da:	280b      	cmp	r0, #11
  4046dc:	d03b      	beq.n	404756 <main+0x262>
			printf("[FAIL] res %d\r\n", res);
			goto main_end_of_test;
		}
		printf("[OK]\r\n");
  4046de:	484b      	ldr	r0, [pc, #300]	; (40480c <main+0x318>)
  4046e0:	47b8      	blx	r7

		printf("Create a file (f_open)...\r\n");
  4046e2:	484b      	ldr	r0, [pc, #300]	; (404810 <main+0x31c>)
  4046e4:	47b8      	blx	r7
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  4046e6:	a9a4      	add	r1, sp, #656	; 0x290
  4046e8:	2330      	movs	r3, #48	; 0x30
  4046ea:	f801 3d14 	strb.w	r3, [r1, #-20]!
		res = f_open(&file_object,
  4046ee:	220a      	movs	r2, #10
  4046f0:	a80a      	add	r0, sp, #40	; 0x28
  4046f2:	4b48      	ldr	r3, [pc, #288]	; (404814 <main+0x320>)
  4046f4:	4798      	blx	r3
		(char const *)test_file_name,
		FA_CREATE_ALWAYS | FA_WRITE);
		if (res != FR_OK) {
  4046f6:	4601      	mov	r1, r0
  4046f8:	2800      	cmp	r0, #0
  4046fa:	f000 80b5 	beq.w	404868 <main+0x374>
			printf("[FAIL] res %d\r\n", res);
  4046fe:	4846      	ldr	r0, [pc, #280]	; (404818 <main+0x324>)
  404700:	47b8      	blx	r7
		printf("[OK]\r\n");
		f_close(&file_object);
		printf("Test is successful.\n\r");

		main_end_of_test:
		printf("Please unplug the card.\n\r");
  404702:	4846      	ldr	r0, [pc, #280]	; (40481c <main+0x328>)
  404704:	47b8      	blx	r7
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  404706:	2500      	movs	r5, #0
  404708:	4c3c      	ldr	r4, [pc, #240]	; (4047fc <main+0x308>)
  40470a:	4628      	mov	r0, r5
  40470c:	47a0      	blx	r4
  40470e:	2802      	cmp	r0, #2
  404710:	d1fb      	bne.n	40470a <main+0x216>
		if (bme280_i2c_read_temp(&temp)){
  404712:	a809      	add	r0, sp, #36	; 0x24
  404714:	47d8      	blx	fp
  404716:	2800      	cmp	r0, #0
  404718:	d0ae      	beq.n	404678 <main+0x184>
			printf("erro readinG temperature \n");
  40471a:	4841      	ldr	r0, [pc, #260]	; (404820 <main+0x32c>)
  40471c:	47b8      	blx	r7
		if (bme280_i2c_read_humd(&humd)){
  40471e:	a808      	add	r0, sp, #32
  404720:	4b40      	ldr	r3, [pc, #256]	; (404824 <main+0x330>)
  404722:	4798      	blx	r3
  404724:	2800      	cmp	r0, #0
  404726:	d0ae      	beq.n	404686 <main+0x192>
			printf("erro humidade");
  404728:	483f      	ldr	r0, [pc, #252]	; (404828 <main+0x334>)
  40472a:	47b8      	blx	r7
		if (bme280_i2c_read_prss(&prss)){
  40472c:	a807      	add	r0, sp, #28
  40472e:	4b3f      	ldr	r3, [pc, #252]	; (40482c <main+0x338>)
  404730:	4798      	blx	r3
  404732:	2800      	cmp	r0, #0
  404734:	d0ae      	beq.n	404694 <main+0x1a0>
			printf("erro press");
  404736:	483e      	ldr	r0, [pc, #248]	; (404830 <main+0x33c>)
  404738:	47b8      	blx	r7
		pin_toggle(LED_PIO, LED_PIN_MASK);
  40473a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40473e:	4650      	mov	r0, sl
  404740:	4b3c      	ldr	r3, [pc, #240]	; (404834 <main+0x340>)
  404742:	4798      	blx	r3
		delay_ms(1000);
  404744:	483c      	ldr	r0, [pc, #240]	; (404838 <main+0x344>)
  404746:	4b23      	ldr	r3, [pc, #140]	; (4047d4 <main+0x2e0>)
  404748:	4798      	blx	r3
		printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  40474a:	483c      	ldr	r0, [pc, #240]	; (40483c <main+0x348>)
  40474c:	47b8      	blx	r7
			status = sd_mmc_test_unit_ready(0);
  40474e:	4e3c      	ldr	r6, [pc, #240]	; (404840 <main+0x34c>)
				printf("Card install FAIL\n\r");
  404750:	f8df 8110 	ldr.w	r8, [pc, #272]	; 404864 <main+0x370>
  404754:	e7af      	b.n	4046b6 <main+0x1c2>
			printf("[FAIL] res %d\r\n", res);
  404756:	210b      	movs	r1, #11
  404758:	482f      	ldr	r0, [pc, #188]	; (404818 <main+0x324>)
  40475a:	47b8      	blx	r7
			goto main_end_of_test;
  40475c:	e7d1      	b.n	404702 <main+0x20e>
  40475e:	bf00      	nop
  404760:	00401015 	.word	0x00401015
  404764:	00401185 	.word	0x00401185
  404768:	400e1850 	.word	0x400e1850
  40476c:	00401f19 	.word	0x00401f19
  404770:	400e1000 	.word	0x400e1000
  404774:	00401b99 	.word	0x00401b99
  404778:	400e0e00 	.word	0x400e0e00
  40477c:	40088000 	.word	0x40088000
  404780:	40028000 	.word	0x40028000
  404784:	20400af4 	.word	0x20400af4
  404788:	00404175 	.word	0x00404175
  40478c:	20400af0 	.word	0x20400af0
  404790:	00404099 	.word	0x00404099
  404794:	08f0d180 	.word	0x08f0d180
  404798:	00402311 	.word	0x00402311
  40479c:	00402365 	.word	0x00402365
  4047a0:	00407e48 	.word	0x00407e48
  4047a4:	00404905 	.word	0x00404905
  4047a8:	004042fd 	.word	0x004042fd
  4047ac:	00404299 	.word	0x00404299
  4047b0:	20400030 	.word	0x20400030
  4047b4:	0040035d 	.word	0x0040035d
  4047b8:	00407e74 	.word	0x00407e74
  4047bc:	00407ea4 	.word	0x00407ea4
  4047c0:	00407eb0 	.word	0x00407eb0
  4047c4:	00407ebc 	.word	0x00407ebc
  4047c8:	00407ed4 	.word	0x00407ed4
  4047cc:	00404329 	.word	0x00404329
  4047d0:	0007b784 	.word	0x0007b784
  4047d4:	20400001 	.word	0x20400001
  4047d8:	004044c1 	.word	0x004044c1
  4047dc:	00407eec 	.word	0x00407eec
  4047e0:	009a5649 	.word	0x009a5649
  4047e4:	00407f04 	.word	0x00407f04
  4047e8:	004043ad 	.word	0x004043ad
  4047ec:	00407f50 	.word	0x00407f50
  4047f0:	00407f74 	.word	0x00407f74
  4047f4:	00407f90 	.word	0x00407f90
  4047f8:	00407fe4 	.word	0x00407fe4
  4047fc:	00400389 	.word	0x00400389
  404800:	0040800c 	.word	0x0040800c
  404804:	0040492d 	.word	0x0040492d
  404808:	00403b55 	.word	0x00403b55
  40480c:	00408038 	.word	0x00408038
  404810:	00408040 	.word	0x00408040
  404814:	00403b7d 	.word	0x00403b7d
  404818:	00408028 	.word	0x00408028
  40481c:	004080b8 	.word	0x004080b8
  404820:	00407f34 	.word	0x00407f34
  404824:	00404431 	.word	0x00404431
  404828:	00407f64 	.word	0x00407f64
  40482c:	00404479 	.word	0x00404479
  404830:	00407f84 	.word	0x00407f84
  404834:	00404249 	.word	0x00404249
  404838:	0303af6b 	.word	0x0303af6b
  40483c:	00407fa0 	.word	0x00407fa0
  404840:	00400ed5 	.word	0x00400ed5
  404844:	20400af8 	.word	0x20400af8
  404848:	0040236b 	.word	0x0040236b
  40484c:	20400038 	.word	0x20400038
  404850:	004049c9 	.word	0x004049c9
  404854:	004080d4 	.word	0x004080d4
  404858:	004043e9 	.word	0x004043e9
  40485c:	51eb851f 	.word	0x51eb851f
  404860:	400e1200 	.word	0x400e1200
  404864:	00407fd0 	.word	0x00407fd0
		printf("[OK]\r\n");
  404868:	480b      	ldr	r0, [pc, #44]	; (404898 <main+0x3a4>)
  40486a:	47b8      	blx	r7
		printf("Write to test file (f_puts)...\r\n");
  40486c:	480b      	ldr	r0, [pc, #44]	; (40489c <main+0x3a8>)
  40486e:	47b8      	blx	r7
		if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
  404870:	a90a      	add	r1, sp, #40	; 0x28
  404872:	480b      	ldr	r0, [pc, #44]	; (4048a0 <main+0x3ac>)
  404874:	4b0b      	ldr	r3, [pc, #44]	; (4048a4 <main+0x3b0>)
  404876:	4798      	blx	r3
  404878:	b928      	cbnz	r0, 404886 <main+0x392>
			f_close(&file_object);
  40487a:	a80a      	add	r0, sp, #40	; 0x28
  40487c:	4b0a      	ldr	r3, [pc, #40]	; (4048a8 <main+0x3b4>)
  40487e:	4798      	blx	r3
			printf("[FAIL]\r\n");
  404880:	480a      	ldr	r0, [pc, #40]	; (4048ac <main+0x3b8>)
  404882:	47b8      	blx	r7
			goto main_end_of_test;
  404884:	e73d      	b.n	404702 <main+0x20e>
		printf("[OK]\r\n");
  404886:	4804      	ldr	r0, [pc, #16]	; (404898 <main+0x3a4>)
  404888:	47b8      	blx	r7
		f_close(&file_object);
  40488a:	a80a      	add	r0, sp, #40	; 0x28
  40488c:	4b06      	ldr	r3, [pc, #24]	; (4048a8 <main+0x3b4>)
  40488e:	4798      	blx	r3
		printf("Test is successful.\n\r");
  404890:	4807      	ldr	r0, [pc, #28]	; (4048b0 <main+0x3bc>)
  404892:	47b8      	blx	r7
  404894:	e735      	b.n	404702 <main+0x20e>
  404896:	bf00      	nop
  404898:	00408038 	.word	0x00408038
  40489c:	0040805c 	.word	0x0040805c
  4048a0:	00408080 	.word	0x00408080
  4048a4:	00403ff9 	.word	0x00403ff9
  4048a8:	00403fb5 	.word	0x00403fb5
  4048ac:	00408094 	.word	0x00408094
  4048b0:	004080a0 	.word	0x004080a0

004048b4 <__libc_init_array>:
  4048b4:	b570      	push	{r4, r5, r6, lr}
  4048b6:	4e0f      	ldr	r6, [pc, #60]	; (4048f4 <__libc_init_array+0x40>)
  4048b8:	4d0f      	ldr	r5, [pc, #60]	; (4048f8 <__libc_init_array+0x44>)
  4048ba:	1b76      	subs	r6, r6, r5
  4048bc:	10b6      	asrs	r6, r6, #2
  4048be:	bf18      	it	ne
  4048c0:	2400      	movne	r4, #0
  4048c2:	d005      	beq.n	4048d0 <__libc_init_array+0x1c>
  4048c4:	3401      	adds	r4, #1
  4048c6:	f855 3b04 	ldr.w	r3, [r5], #4
  4048ca:	4798      	blx	r3
  4048cc:	42a6      	cmp	r6, r4
  4048ce:	d1f9      	bne.n	4048c4 <__libc_init_array+0x10>
  4048d0:	4e0a      	ldr	r6, [pc, #40]	; (4048fc <__libc_init_array+0x48>)
  4048d2:	4d0b      	ldr	r5, [pc, #44]	; (404900 <__libc_init_array+0x4c>)
  4048d4:	1b76      	subs	r6, r6, r5
  4048d6:	f003 fcbb 	bl	408250 <_init>
  4048da:	10b6      	asrs	r6, r6, #2
  4048dc:	bf18      	it	ne
  4048de:	2400      	movne	r4, #0
  4048e0:	d006      	beq.n	4048f0 <__libc_init_array+0x3c>
  4048e2:	3401      	adds	r4, #1
  4048e4:	f855 3b04 	ldr.w	r3, [r5], #4
  4048e8:	4798      	blx	r3
  4048ea:	42a6      	cmp	r6, r4
  4048ec:	d1f9      	bne.n	4048e2 <__libc_init_array+0x2e>
  4048ee:	bd70      	pop	{r4, r5, r6, pc}
  4048f0:	bd70      	pop	{r4, r5, r6, pc}
  4048f2:	bf00      	nop
  4048f4:	0040825c 	.word	0x0040825c
  4048f8:	0040825c 	.word	0x0040825c
  4048fc:	00408264 	.word	0x00408264
  404900:	0040825c 	.word	0x0040825c

00404904 <iprintf>:
  404904:	b40f      	push	{r0, r1, r2, r3}
  404906:	b500      	push	{lr}
  404908:	4907      	ldr	r1, [pc, #28]	; (404928 <iprintf+0x24>)
  40490a:	b083      	sub	sp, #12
  40490c:	ab04      	add	r3, sp, #16
  40490e:	6808      	ldr	r0, [r1, #0]
  404910:	f853 2b04 	ldr.w	r2, [r3], #4
  404914:	6881      	ldr	r1, [r0, #8]
  404916:	9301      	str	r3, [sp, #4]
  404918:	f000 f966 	bl	404be8 <_vfiprintf_r>
  40491c:	b003      	add	sp, #12
  40491e:	f85d eb04 	ldr.w	lr, [sp], #4
  404922:	b004      	add	sp, #16
  404924:	4770      	bx	lr
  404926:	bf00      	nop
  404928:	20400038 	.word	0x20400038

0040492c <memset>:
  40492c:	b470      	push	{r4, r5, r6}
  40492e:	0786      	lsls	r6, r0, #30
  404930:	d046      	beq.n	4049c0 <memset+0x94>
  404932:	1e54      	subs	r4, r2, #1
  404934:	2a00      	cmp	r2, #0
  404936:	d041      	beq.n	4049bc <memset+0x90>
  404938:	b2ca      	uxtb	r2, r1
  40493a:	4603      	mov	r3, r0
  40493c:	e002      	b.n	404944 <memset+0x18>
  40493e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404942:	d33b      	bcc.n	4049bc <memset+0x90>
  404944:	f803 2b01 	strb.w	r2, [r3], #1
  404948:	079d      	lsls	r5, r3, #30
  40494a:	d1f8      	bne.n	40493e <memset+0x12>
  40494c:	2c03      	cmp	r4, #3
  40494e:	d92e      	bls.n	4049ae <memset+0x82>
  404950:	b2cd      	uxtb	r5, r1
  404952:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404956:	2c0f      	cmp	r4, #15
  404958:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40495c:	d919      	bls.n	404992 <memset+0x66>
  40495e:	f103 0210 	add.w	r2, r3, #16
  404962:	4626      	mov	r6, r4
  404964:	3e10      	subs	r6, #16
  404966:	2e0f      	cmp	r6, #15
  404968:	f842 5c10 	str.w	r5, [r2, #-16]
  40496c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404970:	f842 5c08 	str.w	r5, [r2, #-8]
  404974:	f842 5c04 	str.w	r5, [r2, #-4]
  404978:	f102 0210 	add.w	r2, r2, #16
  40497c:	d8f2      	bhi.n	404964 <memset+0x38>
  40497e:	f1a4 0210 	sub.w	r2, r4, #16
  404982:	f022 020f 	bic.w	r2, r2, #15
  404986:	f004 040f 	and.w	r4, r4, #15
  40498a:	3210      	adds	r2, #16
  40498c:	2c03      	cmp	r4, #3
  40498e:	4413      	add	r3, r2
  404990:	d90d      	bls.n	4049ae <memset+0x82>
  404992:	461e      	mov	r6, r3
  404994:	4622      	mov	r2, r4
  404996:	3a04      	subs	r2, #4
  404998:	2a03      	cmp	r2, #3
  40499a:	f846 5b04 	str.w	r5, [r6], #4
  40499e:	d8fa      	bhi.n	404996 <memset+0x6a>
  4049a0:	1f22      	subs	r2, r4, #4
  4049a2:	f022 0203 	bic.w	r2, r2, #3
  4049a6:	3204      	adds	r2, #4
  4049a8:	4413      	add	r3, r2
  4049aa:	f004 0403 	and.w	r4, r4, #3
  4049ae:	b12c      	cbz	r4, 4049bc <memset+0x90>
  4049b0:	b2c9      	uxtb	r1, r1
  4049b2:	441c      	add	r4, r3
  4049b4:	f803 1b01 	strb.w	r1, [r3], #1
  4049b8:	429c      	cmp	r4, r3
  4049ba:	d1fb      	bne.n	4049b4 <memset+0x88>
  4049bc:	bc70      	pop	{r4, r5, r6}
  4049be:	4770      	bx	lr
  4049c0:	4614      	mov	r4, r2
  4049c2:	4603      	mov	r3, r0
  4049c4:	e7c2      	b.n	40494c <memset+0x20>
  4049c6:	bf00      	nop

004049c8 <setbuf>:
  4049c8:	2900      	cmp	r1, #0
  4049ca:	bf0c      	ite	eq
  4049cc:	2202      	moveq	r2, #2
  4049ce:	2200      	movne	r2, #0
  4049d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4049d4:	f000 b800 	b.w	4049d8 <setvbuf>

004049d8 <setvbuf>:
  4049d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4049dc:	4c61      	ldr	r4, [pc, #388]	; (404b64 <setvbuf+0x18c>)
  4049de:	6825      	ldr	r5, [r4, #0]
  4049e0:	b083      	sub	sp, #12
  4049e2:	4604      	mov	r4, r0
  4049e4:	460f      	mov	r7, r1
  4049e6:	4690      	mov	r8, r2
  4049e8:	461e      	mov	r6, r3
  4049ea:	b115      	cbz	r5, 4049f2 <setvbuf+0x1a>
  4049ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4049ee:	2b00      	cmp	r3, #0
  4049f0:	d064      	beq.n	404abc <setvbuf+0xe4>
  4049f2:	f1b8 0f02 	cmp.w	r8, #2
  4049f6:	d006      	beq.n	404a06 <setvbuf+0x2e>
  4049f8:	f1b8 0f01 	cmp.w	r8, #1
  4049fc:	f200 809f 	bhi.w	404b3e <setvbuf+0x166>
  404a00:	2e00      	cmp	r6, #0
  404a02:	f2c0 809c 	blt.w	404b3e <setvbuf+0x166>
  404a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404a08:	07d8      	lsls	r0, r3, #31
  404a0a:	d534      	bpl.n	404a76 <setvbuf+0x9e>
  404a0c:	4621      	mov	r1, r4
  404a0e:	4628      	mov	r0, r5
  404a10:	f001 f888 	bl	405b24 <_fflush_r>
  404a14:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a16:	b141      	cbz	r1, 404a2a <setvbuf+0x52>
  404a18:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a1c:	4299      	cmp	r1, r3
  404a1e:	d002      	beq.n	404a26 <setvbuf+0x4e>
  404a20:	4628      	mov	r0, r5
  404a22:	f001 f9fd 	bl	405e20 <_free_r>
  404a26:	2300      	movs	r3, #0
  404a28:	6323      	str	r3, [r4, #48]	; 0x30
  404a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a2e:	2200      	movs	r2, #0
  404a30:	61a2      	str	r2, [r4, #24]
  404a32:	6062      	str	r2, [r4, #4]
  404a34:	061a      	lsls	r2, r3, #24
  404a36:	d43a      	bmi.n	404aae <setvbuf+0xd6>
  404a38:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404a3c:	f023 0303 	bic.w	r3, r3, #3
  404a40:	f1b8 0f02 	cmp.w	r8, #2
  404a44:	81a3      	strh	r3, [r4, #12]
  404a46:	d01d      	beq.n	404a84 <setvbuf+0xac>
  404a48:	ab01      	add	r3, sp, #4
  404a4a:	466a      	mov	r2, sp
  404a4c:	4621      	mov	r1, r4
  404a4e:	4628      	mov	r0, r5
  404a50:	f001 fc84 	bl	40635c <__swhatbuf_r>
  404a54:	89a3      	ldrh	r3, [r4, #12]
  404a56:	4318      	orrs	r0, r3
  404a58:	81a0      	strh	r0, [r4, #12]
  404a5a:	2e00      	cmp	r6, #0
  404a5c:	d132      	bne.n	404ac4 <setvbuf+0xec>
  404a5e:	9e00      	ldr	r6, [sp, #0]
  404a60:	4630      	mov	r0, r6
  404a62:	f001 fcf3 	bl	40644c <malloc>
  404a66:	4607      	mov	r7, r0
  404a68:	2800      	cmp	r0, #0
  404a6a:	d06b      	beq.n	404b44 <setvbuf+0x16c>
  404a6c:	89a3      	ldrh	r3, [r4, #12]
  404a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404a72:	81a3      	strh	r3, [r4, #12]
  404a74:	e028      	b.n	404ac8 <setvbuf+0xf0>
  404a76:	89a3      	ldrh	r3, [r4, #12]
  404a78:	0599      	lsls	r1, r3, #22
  404a7a:	d4c7      	bmi.n	404a0c <setvbuf+0x34>
  404a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404a7e:	f001 fc69 	bl	406354 <__retarget_lock_acquire_recursive>
  404a82:	e7c3      	b.n	404a0c <setvbuf+0x34>
  404a84:	2500      	movs	r5, #0
  404a86:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404a88:	2600      	movs	r6, #0
  404a8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404a8e:	f043 0302 	orr.w	r3, r3, #2
  404a92:	2001      	movs	r0, #1
  404a94:	60a6      	str	r6, [r4, #8]
  404a96:	07ce      	lsls	r6, r1, #31
  404a98:	81a3      	strh	r3, [r4, #12]
  404a9a:	6022      	str	r2, [r4, #0]
  404a9c:	6122      	str	r2, [r4, #16]
  404a9e:	6160      	str	r0, [r4, #20]
  404aa0:	d401      	bmi.n	404aa6 <setvbuf+0xce>
  404aa2:	0598      	lsls	r0, r3, #22
  404aa4:	d53e      	bpl.n	404b24 <setvbuf+0x14c>
  404aa6:	4628      	mov	r0, r5
  404aa8:	b003      	add	sp, #12
  404aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404aae:	6921      	ldr	r1, [r4, #16]
  404ab0:	4628      	mov	r0, r5
  404ab2:	f001 f9b5 	bl	405e20 <_free_r>
  404ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404aba:	e7bd      	b.n	404a38 <setvbuf+0x60>
  404abc:	4628      	mov	r0, r5
  404abe:	f001 f889 	bl	405bd4 <__sinit>
  404ac2:	e796      	b.n	4049f2 <setvbuf+0x1a>
  404ac4:	2f00      	cmp	r7, #0
  404ac6:	d0cb      	beq.n	404a60 <setvbuf+0x88>
  404ac8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404aca:	2b00      	cmp	r3, #0
  404acc:	d033      	beq.n	404b36 <setvbuf+0x15e>
  404ace:	9b00      	ldr	r3, [sp, #0]
  404ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404ad4:	6027      	str	r7, [r4, #0]
  404ad6:	429e      	cmp	r6, r3
  404ad8:	bf1c      	itt	ne
  404ada:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404ade:	81a2      	strhne	r2, [r4, #12]
  404ae0:	f1b8 0f01 	cmp.w	r8, #1
  404ae4:	bf04      	itt	eq
  404ae6:	f042 0201 	orreq.w	r2, r2, #1
  404aea:	81a2      	strheq	r2, [r4, #12]
  404aec:	b292      	uxth	r2, r2
  404aee:	f012 0308 	ands.w	r3, r2, #8
  404af2:	6127      	str	r7, [r4, #16]
  404af4:	6166      	str	r6, [r4, #20]
  404af6:	d00e      	beq.n	404b16 <setvbuf+0x13e>
  404af8:	07d1      	lsls	r1, r2, #31
  404afa:	d51a      	bpl.n	404b32 <setvbuf+0x15a>
  404afc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404afe:	4276      	negs	r6, r6
  404b00:	2300      	movs	r3, #0
  404b02:	f015 0501 	ands.w	r5, r5, #1
  404b06:	61a6      	str	r6, [r4, #24]
  404b08:	60a3      	str	r3, [r4, #8]
  404b0a:	d009      	beq.n	404b20 <setvbuf+0x148>
  404b0c:	2500      	movs	r5, #0
  404b0e:	4628      	mov	r0, r5
  404b10:	b003      	add	sp, #12
  404b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b16:	60a3      	str	r3, [r4, #8]
  404b18:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b1a:	f015 0501 	ands.w	r5, r5, #1
  404b1e:	d1f5      	bne.n	404b0c <setvbuf+0x134>
  404b20:	0593      	lsls	r3, r2, #22
  404b22:	d4c0      	bmi.n	404aa6 <setvbuf+0xce>
  404b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b26:	f001 fc17 	bl	406358 <__retarget_lock_release_recursive>
  404b2a:	4628      	mov	r0, r5
  404b2c:	b003      	add	sp, #12
  404b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b32:	60a6      	str	r6, [r4, #8]
  404b34:	e7f0      	b.n	404b18 <setvbuf+0x140>
  404b36:	4628      	mov	r0, r5
  404b38:	f001 f84c 	bl	405bd4 <__sinit>
  404b3c:	e7c7      	b.n	404ace <setvbuf+0xf6>
  404b3e:	f04f 35ff 	mov.w	r5, #4294967295
  404b42:	e7b0      	b.n	404aa6 <setvbuf+0xce>
  404b44:	f8dd 9000 	ldr.w	r9, [sp]
  404b48:	45b1      	cmp	r9, r6
  404b4a:	d004      	beq.n	404b56 <setvbuf+0x17e>
  404b4c:	4648      	mov	r0, r9
  404b4e:	f001 fc7d 	bl	40644c <malloc>
  404b52:	4607      	mov	r7, r0
  404b54:	b920      	cbnz	r0, 404b60 <setvbuf+0x188>
  404b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b5a:	f04f 35ff 	mov.w	r5, #4294967295
  404b5e:	e792      	b.n	404a86 <setvbuf+0xae>
  404b60:	464e      	mov	r6, r9
  404b62:	e783      	b.n	404a6c <setvbuf+0x94>
  404b64:	20400038 	.word	0x20400038

00404b68 <__sprint_r.part.0>:
  404b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b6c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404b6e:	049c      	lsls	r4, r3, #18
  404b70:	4693      	mov	fp, r2
  404b72:	d52f      	bpl.n	404bd4 <__sprint_r.part.0+0x6c>
  404b74:	6893      	ldr	r3, [r2, #8]
  404b76:	6812      	ldr	r2, [r2, #0]
  404b78:	b353      	cbz	r3, 404bd0 <__sprint_r.part.0+0x68>
  404b7a:	460e      	mov	r6, r1
  404b7c:	4607      	mov	r7, r0
  404b7e:	f102 0908 	add.w	r9, r2, #8
  404b82:	e919 0420 	ldmdb	r9, {r5, sl}
  404b86:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404b8a:	d017      	beq.n	404bbc <__sprint_r.part.0+0x54>
  404b8c:	3d04      	subs	r5, #4
  404b8e:	2400      	movs	r4, #0
  404b90:	e001      	b.n	404b96 <__sprint_r.part.0+0x2e>
  404b92:	45a0      	cmp	r8, r4
  404b94:	d010      	beq.n	404bb8 <__sprint_r.part.0+0x50>
  404b96:	4632      	mov	r2, r6
  404b98:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404b9c:	4638      	mov	r0, r7
  404b9e:	f001 f8bb 	bl	405d18 <_fputwc_r>
  404ba2:	1c43      	adds	r3, r0, #1
  404ba4:	f104 0401 	add.w	r4, r4, #1
  404ba8:	d1f3      	bne.n	404b92 <__sprint_r.part.0+0x2a>
  404baa:	2300      	movs	r3, #0
  404bac:	f8cb 3008 	str.w	r3, [fp, #8]
  404bb0:	f8cb 3004 	str.w	r3, [fp, #4]
  404bb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bb8:	f8db 3008 	ldr.w	r3, [fp, #8]
  404bbc:	f02a 0a03 	bic.w	sl, sl, #3
  404bc0:	eba3 030a 	sub.w	r3, r3, sl
  404bc4:	f8cb 3008 	str.w	r3, [fp, #8]
  404bc8:	f109 0908 	add.w	r9, r9, #8
  404bcc:	2b00      	cmp	r3, #0
  404bce:	d1d8      	bne.n	404b82 <__sprint_r.part.0+0x1a>
  404bd0:	2000      	movs	r0, #0
  404bd2:	e7ea      	b.n	404baa <__sprint_r.part.0+0x42>
  404bd4:	f001 fa0a 	bl	405fec <__sfvwrite_r>
  404bd8:	2300      	movs	r3, #0
  404bda:	f8cb 3008 	str.w	r3, [fp, #8]
  404bde:	f8cb 3004 	str.w	r3, [fp, #4]
  404be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404be6:	bf00      	nop

00404be8 <_vfiprintf_r>:
  404be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bec:	b0ad      	sub	sp, #180	; 0xb4
  404bee:	461d      	mov	r5, r3
  404bf0:	468b      	mov	fp, r1
  404bf2:	4690      	mov	r8, r2
  404bf4:	9307      	str	r3, [sp, #28]
  404bf6:	9006      	str	r0, [sp, #24]
  404bf8:	b118      	cbz	r0, 404c02 <_vfiprintf_r+0x1a>
  404bfa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404bfc:	2b00      	cmp	r3, #0
  404bfe:	f000 80f3 	beq.w	404de8 <_vfiprintf_r+0x200>
  404c02:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c06:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404c0a:	07df      	lsls	r7, r3, #31
  404c0c:	b281      	uxth	r1, r0
  404c0e:	d402      	bmi.n	404c16 <_vfiprintf_r+0x2e>
  404c10:	058e      	lsls	r6, r1, #22
  404c12:	f140 80fc 	bpl.w	404e0e <_vfiprintf_r+0x226>
  404c16:	048c      	lsls	r4, r1, #18
  404c18:	d40a      	bmi.n	404c30 <_vfiprintf_r+0x48>
  404c1a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c1e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404c26:	f8ab 100c 	strh.w	r1, [fp, #12]
  404c2a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404c2e:	b289      	uxth	r1, r1
  404c30:	0708      	lsls	r0, r1, #28
  404c32:	f140 80b3 	bpl.w	404d9c <_vfiprintf_r+0x1b4>
  404c36:	f8db 3010 	ldr.w	r3, [fp, #16]
  404c3a:	2b00      	cmp	r3, #0
  404c3c:	f000 80ae 	beq.w	404d9c <_vfiprintf_r+0x1b4>
  404c40:	f001 031a 	and.w	r3, r1, #26
  404c44:	2b0a      	cmp	r3, #10
  404c46:	f000 80b5 	beq.w	404db4 <_vfiprintf_r+0x1cc>
  404c4a:	2300      	movs	r3, #0
  404c4c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404c50:	930b      	str	r3, [sp, #44]	; 0x2c
  404c52:	9311      	str	r3, [sp, #68]	; 0x44
  404c54:	9310      	str	r3, [sp, #64]	; 0x40
  404c56:	9303      	str	r3, [sp, #12]
  404c58:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404c5c:	46ca      	mov	sl, r9
  404c5e:	f8cd b010 	str.w	fp, [sp, #16]
  404c62:	f898 3000 	ldrb.w	r3, [r8]
  404c66:	4644      	mov	r4, r8
  404c68:	b1fb      	cbz	r3, 404caa <_vfiprintf_r+0xc2>
  404c6a:	2b25      	cmp	r3, #37	; 0x25
  404c6c:	d102      	bne.n	404c74 <_vfiprintf_r+0x8c>
  404c6e:	e01c      	b.n	404caa <_vfiprintf_r+0xc2>
  404c70:	2b25      	cmp	r3, #37	; 0x25
  404c72:	d003      	beq.n	404c7c <_vfiprintf_r+0x94>
  404c74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404c78:	2b00      	cmp	r3, #0
  404c7a:	d1f9      	bne.n	404c70 <_vfiprintf_r+0x88>
  404c7c:	eba4 0508 	sub.w	r5, r4, r8
  404c80:	b19d      	cbz	r5, 404caa <_vfiprintf_r+0xc2>
  404c82:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404c84:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c86:	f8ca 8000 	str.w	r8, [sl]
  404c8a:	3301      	adds	r3, #1
  404c8c:	442a      	add	r2, r5
  404c8e:	2b07      	cmp	r3, #7
  404c90:	f8ca 5004 	str.w	r5, [sl, #4]
  404c94:	9211      	str	r2, [sp, #68]	; 0x44
  404c96:	9310      	str	r3, [sp, #64]	; 0x40
  404c98:	dd7a      	ble.n	404d90 <_vfiprintf_r+0x1a8>
  404c9a:	2a00      	cmp	r2, #0
  404c9c:	f040 84b0 	bne.w	405600 <_vfiprintf_r+0xa18>
  404ca0:	9b03      	ldr	r3, [sp, #12]
  404ca2:	9210      	str	r2, [sp, #64]	; 0x40
  404ca4:	442b      	add	r3, r5
  404ca6:	46ca      	mov	sl, r9
  404ca8:	9303      	str	r3, [sp, #12]
  404caa:	7823      	ldrb	r3, [r4, #0]
  404cac:	2b00      	cmp	r3, #0
  404cae:	f000 83e0 	beq.w	405472 <_vfiprintf_r+0x88a>
  404cb2:	2000      	movs	r0, #0
  404cb4:	f04f 0300 	mov.w	r3, #0
  404cb8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404cbc:	f104 0801 	add.w	r8, r4, #1
  404cc0:	7862      	ldrb	r2, [r4, #1]
  404cc2:	4605      	mov	r5, r0
  404cc4:	4606      	mov	r6, r0
  404cc6:	4603      	mov	r3, r0
  404cc8:	f04f 34ff 	mov.w	r4, #4294967295
  404ccc:	f108 0801 	add.w	r8, r8, #1
  404cd0:	f1a2 0120 	sub.w	r1, r2, #32
  404cd4:	2958      	cmp	r1, #88	; 0x58
  404cd6:	f200 82de 	bhi.w	405296 <_vfiprintf_r+0x6ae>
  404cda:	e8df f011 	tbh	[pc, r1, lsl #1]
  404cde:	0221      	.short	0x0221
  404ce0:	02dc02dc 	.word	0x02dc02dc
  404ce4:	02dc0229 	.word	0x02dc0229
  404ce8:	02dc02dc 	.word	0x02dc02dc
  404cec:	02dc02dc 	.word	0x02dc02dc
  404cf0:	028902dc 	.word	0x028902dc
  404cf4:	02dc0295 	.word	0x02dc0295
  404cf8:	02bd00a2 	.word	0x02bd00a2
  404cfc:	019f02dc 	.word	0x019f02dc
  404d00:	01a401a4 	.word	0x01a401a4
  404d04:	01a401a4 	.word	0x01a401a4
  404d08:	01a401a4 	.word	0x01a401a4
  404d0c:	01a401a4 	.word	0x01a401a4
  404d10:	02dc01a4 	.word	0x02dc01a4
  404d14:	02dc02dc 	.word	0x02dc02dc
  404d18:	02dc02dc 	.word	0x02dc02dc
  404d1c:	02dc02dc 	.word	0x02dc02dc
  404d20:	02dc02dc 	.word	0x02dc02dc
  404d24:	01b202dc 	.word	0x01b202dc
  404d28:	02dc02dc 	.word	0x02dc02dc
  404d2c:	02dc02dc 	.word	0x02dc02dc
  404d30:	02dc02dc 	.word	0x02dc02dc
  404d34:	02dc02dc 	.word	0x02dc02dc
  404d38:	02dc02dc 	.word	0x02dc02dc
  404d3c:	02dc0197 	.word	0x02dc0197
  404d40:	02dc02dc 	.word	0x02dc02dc
  404d44:	02dc02dc 	.word	0x02dc02dc
  404d48:	02dc019b 	.word	0x02dc019b
  404d4c:	025302dc 	.word	0x025302dc
  404d50:	02dc02dc 	.word	0x02dc02dc
  404d54:	02dc02dc 	.word	0x02dc02dc
  404d58:	02dc02dc 	.word	0x02dc02dc
  404d5c:	02dc02dc 	.word	0x02dc02dc
  404d60:	02dc02dc 	.word	0x02dc02dc
  404d64:	021b025a 	.word	0x021b025a
  404d68:	02dc02dc 	.word	0x02dc02dc
  404d6c:	026e02dc 	.word	0x026e02dc
  404d70:	02dc021b 	.word	0x02dc021b
  404d74:	027302dc 	.word	0x027302dc
  404d78:	01f502dc 	.word	0x01f502dc
  404d7c:	02090182 	.word	0x02090182
  404d80:	02dc02d7 	.word	0x02dc02d7
  404d84:	02dc029a 	.word	0x02dc029a
  404d88:	02dc00a7 	.word	0x02dc00a7
  404d8c:	022e02dc 	.word	0x022e02dc
  404d90:	f10a 0a08 	add.w	sl, sl, #8
  404d94:	9b03      	ldr	r3, [sp, #12]
  404d96:	442b      	add	r3, r5
  404d98:	9303      	str	r3, [sp, #12]
  404d9a:	e786      	b.n	404caa <_vfiprintf_r+0xc2>
  404d9c:	4659      	mov	r1, fp
  404d9e:	9806      	ldr	r0, [sp, #24]
  404da0:	f000 fdac 	bl	4058fc <__swsetup_r>
  404da4:	bb18      	cbnz	r0, 404dee <_vfiprintf_r+0x206>
  404da6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404daa:	f001 031a 	and.w	r3, r1, #26
  404dae:	2b0a      	cmp	r3, #10
  404db0:	f47f af4b 	bne.w	404c4a <_vfiprintf_r+0x62>
  404db4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404db8:	2b00      	cmp	r3, #0
  404dba:	f6ff af46 	blt.w	404c4a <_vfiprintf_r+0x62>
  404dbe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404dc2:	07db      	lsls	r3, r3, #31
  404dc4:	d405      	bmi.n	404dd2 <_vfiprintf_r+0x1ea>
  404dc6:	058f      	lsls	r7, r1, #22
  404dc8:	d403      	bmi.n	404dd2 <_vfiprintf_r+0x1ea>
  404dca:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404dce:	f001 fac3 	bl	406358 <__retarget_lock_release_recursive>
  404dd2:	462b      	mov	r3, r5
  404dd4:	4642      	mov	r2, r8
  404dd6:	4659      	mov	r1, fp
  404dd8:	9806      	ldr	r0, [sp, #24]
  404dda:	f000 fd4d 	bl	405878 <__sbprintf>
  404dde:	9003      	str	r0, [sp, #12]
  404de0:	9803      	ldr	r0, [sp, #12]
  404de2:	b02d      	add	sp, #180	; 0xb4
  404de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404de8:	f000 fef4 	bl	405bd4 <__sinit>
  404dec:	e709      	b.n	404c02 <_vfiprintf_r+0x1a>
  404dee:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404df2:	07d9      	lsls	r1, r3, #31
  404df4:	d404      	bmi.n	404e00 <_vfiprintf_r+0x218>
  404df6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404dfa:	059a      	lsls	r2, r3, #22
  404dfc:	f140 84aa 	bpl.w	405754 <_vfiprintf_r+0xb6c>
  404e00:	f04f 33ff 	mov.w	r3, #4294967295
  404e04:	9303      	str	r3, [sp, #12]
  404e06:	9803      	ldr	r0, [sp, #12]
  404e08:	b02d      	add	sp, #180	; 0xb4
  404e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e0e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e12:	f001 fa9f 	bl	406354 <__retarget_lock_acquire_recursive>
  404e16:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404e1a:	b281      	uxth	r1, r0
  404e1c:	e6fb      	b.n	404c16 <_vfiprintf_r+0x2e>
  404e1e:	4276      	negs	r6, r6
  404e20:	9207      	str	r2, [sp, #28]
  404e22:	f043 0304 	orr.w	r3, r3, #4
  404e26:	f898 2000 	ldrb.w	r2, [r8]
  404e2a:	e74f      	b.n	404ccc <_vfiprintf_r+0xe4>
  404e2c:	9608      	str	r6, [sp, #32]
  404e2e:	069e      	lsls	r6, r3, #26
  404e30:	f100 8450 	bmi.w	4056d4 <_vfiprintf_r+0xaec>
  404e34:	9907      	ldr	r1, [sp, #28]
  404e36:	06dd      	lsls	r5, r3, #27
  404e38:	460a      	mov	r2, r1
  404e3a:	f100 83ef 	bmi.w	40561c <_vfiprintf_r+0xa34>
  404e3e:	0658      	lsls	r0, r3, #25
  404e40:	f140 83ec 	bpl.w	40561c <_vfiprintf_r+0xa34>
  404e44:	880e      	ldrh	r6, [r1, #0]
  404e46:	3104      	adds	r1, #4
  404e48:	2700      	movs	r7, #0
  404e4a:	2201      	movs	r2, #1
  404e4c:	9107      	str	r1, [sp, #28]
  404e4e:	f04f 0100 	mov.w	r1, #0
  404e52:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404e56:	2500      	movs	r5, #0
  404e58:	1c61      	adds	r1, r4, #1
  404e5a:	f000 8116 	beq.w	40508a <_vfiprintf_r+0x4a2>
  404e5e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404e62:	9102      	str	r1, [sp, #8]
  404e64:	ea56 0107 	orrs.w	r1, r6, r7
  404e68:	f040 8114 	bne.w	405094 <_vfiprintf_r+0x4ac>
  404e6c:	2c00      	cmp	r4, #0
  404e6e:	f040 835c 	bne.w	40552a <_vfiprintf_r+0x942>
  404e72:	2a00      	cmp	r2, #0
  404e74:	f040 83b7 	bne.w	4055e6 <_vfiprintf_r+0x9fe>
  404e78:	f013 0301 	ands.w	r3, r3, #1
  404e7c:	9305      	str	r3, [sp, #20]
  404e7e:	f000 8457 	beq.w	405730 <_vfiprintf_r+0xb48>
  404e82:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404e86:	2330      	movs	r3, #48	; 0x30
  404e88:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404e8c:	9b05      	ldr	r3, [sp, #20]
  404e8e:	42a3      	cmp	r3, r4
  404e90:	bfb8      	it	lt
  404e92:	4623      	movlt	r3, r4
  404e94:	9301      	str	r3, [sp, #4]
  404e96:	b10d      	cbz	r5, 404e9c <_vfiprintf_r+0x2b4>
  404e98:	3301      	adds	r3, #1
  404e9a:	9301      	str	r3, [sp, #4]
  404e9c:	9b02      	ldr	r3, [sp, #8]
  404e9e:	f013 0302 	ands.w	r3, r3, #2
  404ea2:	9309      	str	r3, [sp, #36]	; 0x24
  404ea4:	d002      	beq.n	404eac <_vfiprintf_r+0x2c4>
  404ea6:	9b01      	ldr	r3, [sp, #4]
  404ea8:	3302      	adds	r3, #2
  404eaa:	9301      	str	r3, [sp, #4]
  404eac:	9b02      	ldr	r3, [sp, #8]
  404eae:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404eb2:	930a      	str	r3, [sp, #40]	; 0x28
  404eb4:	f040 8217 	bne.w	4052e6 <_vfiprintf_r+0x6fe>
  404eb8:	9b08      	ldr	r3, [sp, #32]
  404eba:	9a01      	ldr	r2, [sp, #4]
  404ebc:	1a9d      	subs	r5, r3, r2
  404ebe:	2d00      	cmp	r5, #0
  404ec0:	f340 8211 	ble.w	4052e6 <_vfiprintf_r+0x6fe>
  404ec4:	2d10      	cmp	r5, #16
  404ec6:	f340 8490 	ble.w	4057ea <_vfiprintf_r+0xc02>
  404eca:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404ecc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ece:	4ec4      	ldr	r6, [pc, #784]	; (4051e0 <_vfiprintf_r+0x5f8>)
  404ed0:	46d6      	mov	lr, sl
  404ed2:	2710      	movs	r7, #16
  404ed4:	46a2      	mov	sl, r4
  404ed6:	4619      	mov	r1, r3
  404ed8:	9c06      	ldr	r4, [sp, #24]
  404eda:	e007      	b.n	404eec <_vfiprintf_r+0x304>
  404edc:	f101 0c02 	add.w	ip, r1, #2
  404ee0:	f10e 0e08 	add.w	lr, lr, #8
  404ee4:	4601      	mov	r1, r0
  404ee6:	3d10      	subs	r5, #16
  404ee8:	2d10      	cmp	r5, #16
  404eea:	dd11      	ble.n	404f10 <_vfiprintf_r+0x328>
  404eec:	1c48      	adds	r0, r1, #1
  404eee:	3210      	adds	r2, #16
  404ef0:	2807      	cmp	r0, #7
  404ef2:	9211      	str	r2, [sp, #68]	; 0x44
  404ef4:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404ef8:	9010      	str	r0, [sp, #64]	; 0x40
  404efa:	ddef      	ble.n	404edc <_vfiprintf_r+0x2f4>
  404efc:	2a00      	cmp	r2, #0
  404efe:	f040 81e4 	bne.w	4052ca <_vfiprintf_r+0x6e2>
  404f02:	3d10      	subs	r5, #16
  404f04:	2d10      	cmp	r5, #16
  404f06:	4611      	mov	r1, r2
  404f08:	f04f 0c01 	mov.w	ip, #1
  404f0c:	46ce      	mov	lr, r9
  404f0e:	dced      	bgt.n	404eec <_vfiprintf_r+0x304>
  404f10:	4654      	mov	r4, sl
  404f12:	4661      	mov	r1, ip
  404f14:	46f2      	mov	sl, lr
  404f16:	442a      	add	r2, r5
  404f18:	2907      	cmp	r1, #7
  404f1a:	9211      	str	r2, [sp, #68]	; 0x44
  404f1c:	f8ca 6000 	str.w	r6, [sl]
  404f20:	f8ca 5004 	str.w	r5, [sl, #4]
  404f24:	9110      	str	r1, [sp, #64]	; 0x40
  404f26:	f300 82ec 	bgt.w	405502 <_vfiprintf_r+0x91a>
  404f2a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404f2e:	f10a 0a08 	add.w	sl, sl, #8
  404f32:	1c48      	adds	r0, r1, #1
  404f34:	2d00      	cmp	r5, #0
  404f36:	f040 81de 	bne.w	4052f6 <_vfiprintf_r+0x70e>
  404f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f3c:	2b00      	cmp	r3, #0
  404f3e:	f000 81f8 	beq.w	405332 <_vfiprintf_r+0x74a>
  404f42:	3202      	adds	r2, #2
  404f44:	a90e      	add	r1, sp, #56	; 0x38
  404f46:	2302      	movs	r3, #2
  404f48:	2807      	cmp	r0, #7
  404f4a:	9211      	str	r2, [sp, #68]	; 0x44
  404f4c:	9010      	str	r0, [sp, #64]	; 0x40
  404f4e:	e88a 000a 	stmia.w	sl, {r1, r3}
  404f52:	f340 81ea 	ble.w	40532a <_vfiprintf_r+0x742>
  404f56:	2a00      	cmp	r2, #0
  404f58:	f040 838c 	bne.w	405674 <_vfiprintf_r+0xa8c>
  404f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f5e:	2b80      	cmp	r3, #128	; 0x80
  404f60:	f04f 0001 	mov.w	r0, #1
  404f64:	4611      	mov	r1, r2
  404f66:	46ca      	mov	sl, r9
  404f68:	f040 81e7 	bne.w	40533a <_vfiprintf_r+0x752>
  404f6c:	9b08      	ldr	r3, [sp, #32]
  404f6e:	9d01      	ldr	r5, [sp, #4]
  404f70:	1b5e      	subs	r6, r3, r5
  404f72:	2e00      	cmp	r6, #0
  404f74:	f340 81e1 	ble.w	40533a <_vfiprintf_r+0x752>
  404f78:	2e10      	cmp	r6, #16
  404f7a:	4d9a      	ldr	r5, [pc, #616]	; (4051e4 <_vfiprintf_r+0x5fc>)
  404f7c:	f340 8450 	ble.w	405820 <_vfiprintf_r+0xc38>
  404f80:	46d4      	mov	ip, sl
  404f82:	2710      	movs	r7, #16
  404f84:	46a2      	mov	sl, r4
  404f86:	9c06      	ldr	r4, [sp, #24]
  404f88:	e007      	b.n	404f9a <_vfiprintf_r+0x3b2>
  404f8a:	f101 0e02 	add.w	lr, r1, #2
  404f8e:	f10c 0c08 	add.w	ip, ip, #8
  404f92:	4601      	mov	r1, r0
  404f94:	3e10      	subs	r6, #16
  404f96:	2e10      	cmp	r6, #16
  404f98:	dd11      	ble.n	404fbe <_vfiprintf_r+0x3d6>
  404f9a:	1c48      	adds	r0, r1, #1
  404f9c:	3210      	adds	r2, #16
  404f9e:	2807      	cmp	r0, #7
  404fa0:	9211      	str	r2, [sp, #68]	; 0x44
  404fa2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404fa6:	9010      	str	r0, [sp, #64]	; 0x40
  404fa8:	ddef      	ble.n	404f8a <_vfiprintf_r+0x3a2>
  404faa:	2a00      	cmp	r2, #0
  404fac:	f040 829d 	bne.w	4054ea <_vfiprintf_r+0x902>
  404fb0:	3e10      	subs	r6, #16
  404fb2:	2e10      	cmp	r6, #16
  404fb4:	f04f 0e01 	mov.w	lr, #1
  404fb8:	4611      	mov	r1, r2
  404fba:	46cc      	mov	ip, r9
  404fbc:	dced      	bgt.n	404f9a <_vfiprintf_r+0x3b2>
  404fbe:	4654      	mov	r4, sl
  404fc0:	46e2      	mov	sl, ip
  404fc2:	4432      	add	r2, r6
  404fc4:	f1be 0f07 	cmp.w	lr, #7
  404fc8:	9211      	str	r2, [sp, #68]	; 0x44
  404fca:	e88a 0060 	stmia.w	sl, {r5, r6}
  404fce:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404fd2:	f300 8369 	bgt.w	4056a8 <_vfiprintf_r+0xac0>
  404fd6:	f10a 0a08 	add.w	sl, sl, #8
  404fda:	f10e 0001 	add.w	r0, lr, #1
  404fde:	4671      	mov	r1, lr
  404fe0:	e1ab      	b.n	40533a <_vfiprintf_r+0x752>
  404fe2:	9608      	str	r6, [sp, #32]
  404fe4:	f013 0220 	ands.w	r2, r3, #32
  404fe8:	f040 838c 	bne.w	405704 <_vfiprintf_r+0xb1c>
  404fec:	f013 0110 	ands.w	r1, r3, #16
  404ff0:	f040 831a 	bne.w	405628 <_vfiprintf_r+0xa40>
  404ff4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404ff8:	f000 8316 	beq.w	405628 <_vfiprintf_r+0xa40>
  404ffc:	9807      	ldr	r0, [sp, #28]
  404ffe:	460a      	mov	r2, r1
  405000:	4601      	mov	r1, r0
  405002:	3104      	adds	r1, #4
  405004:	8806      	ldrh	r6, [r0, #0]
  405006:	9107      	str	r1, [sp, #28]
  405008:	2700      	movs	r7, #0
  40500a:	e720      	b.n	404e4e <_vfiprintf_r+0x266>
  40500c:	9608      	str	r6, [sp, #32]
  40500e:	f043 0310 	orr.w	r3, r3, #16
  405012:	e7e7      	b.n	404fe4 <_vfiprintf_r+0x3fc>
  405014:	9608      	str	r6, [sp, #32]
  405016:	f043 0310 	orr.w	r3, r3, #16
  40501a:	e708      	b.n	404e2e <_vfiprintf_r+0x246>
  40501c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405020:	f898 2000 	ldrb.w	r2, [r8]
  405024:	e652      	b.n	404ccc <_vfiprintf_r+0xe4>
  405026:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40502a:	2600      	movs	r6, #0
  40502c:	f818 2b01 	ldrb.w	r2, [r8], #1
  405030:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405034:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405038:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40503c:	2909      	cmp	r1, #9
  40503e:	d9f5      	bls.n	40502c <_vfiprintf_r+0x444>
  405040:	e646      	b.n	404cd0 <_vfiprintf_r+0xe8>
  405042:	9608      	str	r6, [sp, #32]
  405044:	2800      	cmp	r0, #0
  405046:	f040 8408 	bne.w	40585a <_vfiprintf_r+0xc72>
  40504a:	f043 0310 	orr.w	r3, r3, #16
  40504e:	069e      	lsls	r6, r3, #26
  405050:	f100 834c 	bmi.w	4056ec <_vfiprintf_r+0xb04>
  405054:	06dd      	lsls	r5, r3, #27
  405056:	f100 82f3 	bmi.w	405640 <_vfiprintf_r+0xa58>
  40505a:	0658      	lsls	r0, r3, #25
  40505c:	f140 82f0 	bpl.w	405640 <_vfiprintf_r+0xa58>
  405060:	9d07      	ldr	r5, [sp, #28]
  405062:	f9b5 6000 	ldrsh.w	r6, [r5]
  405066:	462a      	mov	r2, r5
  405068:	17f7      	asrs	r7, r6, #31
  40506a:	3204      	adds	r2, #4
  40506c:	4630      	mov	r0, r6
  40506e:	4639      	mov	r1, r7
  405070:	9207      	str	r2, [sp, #28]
  405072:	2800      	cmp	r0, #0
  405074:	f171 0200 	sbcs.w	r2, r1, #0
  405078:	f2c0 835d 	blt.w	405736 <_vfiprintf_r+0xb4e>
  40507c:	1c61      	adds	r1, r4, #1
  40507e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405082:	f04f 0201 	mov.w	r2, #1
  405086:	f47f aeea 	bne.w	404e5e <_vfiprintf_r+0x276>
  40508a:	ea56 0107 	orrs.w	r1, r6, r7
  40508e:	f000 824d 	beq.w	40552c <_vfiprintf_r+0x944>
  405092:	9302      	str	r3, [sp, #8]
  405094:	2a01      	cmp	r2, #1
  405096:	f000 828c 	beq.w	4055b2 <_vfiprintf_r+0x9ca>
  40509a:	2a02      	cmp	r2, #2
  40509c:	f040 825c 	bne.w	405558 <_vfiprintf_r+0x970>
  4050a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4050a2:	46cb      	mov	fp, r9
  4050a4:	0933      	lsrs	r3, r6, #4
  4050a6:	f006 010f 	and.w	r1, r6, #15
  4050aa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4050ae:	093a      	lsrs	r2, r7, #4
  4050b0:	461e      	mov	r6, r3
  4050b2:	4617      	mov	r7, r2
  4050b4:	5c43      	ldrb	r3, [r0, r1]
  4050b6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4050ba:	ea56 0307 	orrs.w	r3, r6, r7
  4050be:	d1f1      	bne.n	4050a4 <_vfiprintf_r+0x4bc>
  4050c0:	eba9 030b 	sub.w	r3, r9, fp
  4050c4:	9305      	str	r3, [sp, #20]
  4050c6:	e6e1      	b.n	404e8c <_vfiprintf_r+0x2a4>
  4050c8:	2800      	cmp	r0, #0
  4050ca:	f040 83c0 	bne.w	40584e <_vfiprintf_r+0xc66>
  4050ce:	0699      	lsls	r1, r3, #26
  4050d0:	f100 8367 	bmi.w	4057a2 <_vfiprintf_r+0xbba>
  4050d4:	06da      	lsls	r2, r3, #27
  4050d6:	f100 80f1 	bmi.w	4052bc <_vfiprintf_r+0x6d4>
  4050da:	065b      	lsls	r3, r3, #25
  4050dc:	f140 80ee 	bpl.w	4052bc <_vfiprintf_r+0x6d4>
  4050e0:	9a07      	ldr	r2, [sp, #28]
  4050e2:	6813      	ldr	r3, [r2, #0]
  4050e4:	3204      	adds	r2, #4
  4050e6:	9207      	str	r2, [sp, #28]
  4050e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4050ec:	801a      	strh	r2, [r3, #0]
  4050ee:	e5b8      	b.n	404c62 <_vfiprintf_r+0x7a>
  4050f0:	9807      	ldr	r0, [sp, #28]
  4050f2:	4a3d      	ldr	r2, [pc, #244]	; (4051e8 <_vfiprintf_r+0x600>)
  4050f4:	9608      	str	r6, [sp, #32]
  4050f6:	920b      	str	r2, [sp, #44]	; 0x2c
  4050f8:	6806      	ldr	r6, [r0, #0]
  4050fa:	2278      	movs	r2, #120	; 0x78
  4050fc:	2130      	movs	r1, #48	; 0x30
  4050fe:	3004      	adds	r0, #4
  405100:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405104:	f043 0302 	orr.w	r3, r3, #2
  405108:	9007      	str	r0, [sp, #28]
  40510a:	2700      	movs	r7, #0
  40510c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405110:	2202      	movs	r2, #2
  405112:	e69c      	b.n	404e4e <_vfiprintf_r+0x266>
  405114:	9608      	str	r6, [sp, #32]
  405116:	2800      	cmp	r0, #0
  405118:	d099      	beq.n	40504e <_vfiprintf_r+0x466>
  40511a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40511e:	e796      	b.n	40504e <_vfiprintf_r+0x466>
  405120:	f898 2000 	ldrb.w	r2, [r8]
  405124:	2d00      	cmp	r5, #0
  405126:	f47f add1 	bne.w	404ccc <_vfiprintf_r+0xe4>
  40512a:	2001      	movs	r0, #1
  40512c:	2520      	movs	r5, #32
  40512e:	e5cd      	b.n	404ccc <_vfiprintf_r+0xe4>
  405130:	f043 0301 	orr.w	r3, r3, #1
  405134:	f898 2000 	ldrb.w	r2, [r8]
  405138:	e5c8      	b.n	404ccc <_vfiprintf_r+0xe4>
  40513a:	9608      	str	r6, [sp, #32]
  40513c:	2800      	cmp	r0, #0
  40513e:	f040 8393 	bne.w	405868 <_vfiprintf_r+0xc80>
  405142:	4929      	ldr	r1, [pc, #164]	; (4051e8 <_vfiprintf_r+0x600>)
  405144:	910b      	str	r1, [sp, #44]	; 0x2c
  405146:	069f      	lsls	r7, r3, #26
  405148:	f100 82e8 	bmi.w	40571c <_vfiprintf_r+0xb34>
  40514c:	9807      	ldr	r0, [sp, #28]
  40514e:	06de      	lsls	r6, r3, #27
  405150:	4601      	mov	r1, r0
  405152:	f100 8270 	bmi.w	405636 <_vfiprintf_r+0xa4e>
  405156:	065d      	lsls	r5, r3, #25
  405158:	f140 826d 	bpl.w	405636 <_vfiprintf_r+0xa4e>
  40515c:	3104      	adds	r1, #4
  40515e:	8806      	ldrh	r6, [r0, #0]
  405160:	9107      	str	r1, [sp, #28]
  405162:	2700      	movs	r7, #0
  405164:	07d8      	lsls	r0, r3, #31
  405166:	f140 8222 	bpl.w	4055ae <_vfiprintf_r+0x9c6>
  40516a:	ea56 0107 	orrs.w	r1, r6, r7
  40516e:	f000 821e 	beq.w	4055ae <_vfiprintf_r+0x9c6>
  405172:	2130      	movs	r1, #48	; 0x30
  405174:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405178:	f043 0302 	orr.w	r3, r3, #2
  40517c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405180:	2202      	movs	r2, #2
  405182:	e664      	b.n	404e4e <_vfiprintf_r+0x266>
  405184:	9608      	str	r6, [sp, #32]
  405186:	2800      	cmp	r0, #0
  405188:	f040 836b 	bne.w	405862 <_vfiprintf_r+0xc7a>
  40518c:	4917      	ldr	r1, [pc, #92]	; (4051ec <_vfiprintf_r+0x604>)
  40518e:	910b      	str	r1, [sp, #44]	; 0x2c
  405190:	e7d9      	b.n	405146 <_vfiprintf_r+0x55e>
  405192:	9907      	ldr	r1, [sp, #28]
  405194:	9608      	str	r6, [sp, #32]
  405196:	680a      	ldr	r2, [r1, #0]
  405198:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40519c:	f04f 0000 	mov.w	r0, #0
  4051a0:	460a      	mov	r2, r1
  4051a2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4051a6:	3204      	adds	r2, #4
  4051a8:	2001      	movs	r0, #1
  4051aa:	9001      	str	r0, [sp, #4]
  4051ac:	9207      	str	r2, [sp, #28]
  4051ae:	9005      	str	r0, [sp, #20]
  4051b0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4051b4:	9302      	str	r3, [sp, #8]
  4051b6:	2400      	movs	r4, #0
  4051b8:	e670      	b.n	404e9c <_vfiprintf_r+0x2b4>
  4051ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051be:	f898 2000 	ldrb.w	r2, [r8]
  4051c2:	e583      	b.n	404ccc <_vfiprintf_r+0xe4>
  4051c4:	f898 2000 	ldrb.w	r2, [r8]
  4051c8:	2a6c      	cmp	r2, #108	; 0x6c
  4051ca:	bf03      	ittte	eq
  4051cc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4051d0:	f043 0320 	orreq.w	r3, r3, #32
  4051d4:	f108 0801 	addeq.w	r8, r8, #1
  4051d8:	f043 0310 	orrne.w	r3, r3, #16
  4051dc:	e576      	b.n	404ccc <_vfiprintf_r+0xe4>
  4051de:	bf00      	nop
  4051e0:	0040811c 	.word	0x0040811c
  4051e4:	0040812c 	.word	0x0040812c
  4051e8:	00408100 	.word	0x00408100
  4051ec:	004080ec 	.word	0x004080ec
  4051f0:	9907      	ldr	r1, [sp, #28]
  4051f2:	680e      	ldr	r6, [r1, #0]
  4051f4:	460a      	mov	r2, r1
  4051f6:	2e00      	cmp	r6, #0
  4051f8:	f102 0204 	add.w	r2, r2, #4
  4051fc:	f6ff ae0f 	blt.w	404e1e <_vfiprintf_r+0x236>
  405200:	9207      	str	r2, [sp, #28]
  405202:	f898 2000 	ldrb.w	r2, [r8]
  405206:	e561      	b.n	404ccc <_vfiprintf_r+0xe4>
  405208:	f898 2000 	ldrb.w	r2, [r8]
  40520c:	2001      	movs	r0, #1
  40520e:	252b      	movs	r5, #43	; 0x2b
  405210:	e55c      	b.n	404ccc <_vfiprintf_r+0xe4>
  405212:	9907      	ldr	r1, [sp, #28]
  405214:	9608      	str	r6, [sp, #32]
  405216:	f8d1 b000 	ldr.w	fp, [r1]
  40521a:	f04f 0200 	mov.w	r2, #0
  40521e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405222:	1d0e      	adds	r6, r1, #4
  405224:	f1bb 0f00 	cmp.w	fp, #0
  405228:	f000 82e5 	beq.w	4057f6 <_vfiprintf_r+0xc0e>
  40522c:	1c67      	adds	r7, r4, #1
  40522e:	f000 82c4 	beq.w	4057ba <_vfiprintf_r+0xbd2>
  405232:	4622      	mov	r2, r4
  405234:	2100      	movs	r1, #0
  405236:	4658      	mov	r0, fp
  405238:	9301      	str	r3, [sp, #4]
  40523a:	f001 fbd9 	bl	4069f0 <memchr>
  40523e:	9b01      	ldr	r3, [sp, #4]
  405240:	2800      	cmp	r0, #0
  405242:	f000 82e5 	beq.w	405810 <_vfiprintf_r+0xc28>
  405246:	eba0 020b 	sub.w	r2, r0, fp
  40524a:	9205      	str	r2, [sp, #20]
  40524c:	9607      	str	r6, [sp, #28]
  40524e:	9302      	str	r3, [sp, #8]
  405250:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405254:	2400      	movs	r4, #0
  405256:	e619      	b.n	404e8c <_vfiprintf_r+0x2a4>
  405258:	f898 2000 	ldrb.w	r2, [r8]
  40525c:	2a2a      	cmp	r2, #42	; 0x2a
  40525e:	f108 0701 	add.w	r7, r8, #1
  405262:	f000 82e9 	beq.w	405838 <_vfiprintf_r+0xc50>
  405266:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40526a:	2909      	cmp	r1, #9
  40526c:	46b8      	mov	r8, r7
  40526e:	f04f 0400 	mov.w	r4, #0
  405272:	f63f ad2d 	bhi.w	404cd0 <_vfiprintf_r+0xe8>
  405276:	f818 2b01 	ldrb.w	r2, [r8], #1
  40527a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40527e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405282:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405286:	2909      	cmp	r1, #9
  405288:	d9f5      	bls.n	405276 <_vfiprintf_r+0x68e>
  40528a:	e521      	b.n	404cd0 <_vfiprintf_r+0xe8>
  40528c:	f043 0320 	orr.w	r3, r3, #32
  405290:	f898 2000 	ldrb.w	r2, [r8]
  405294:	e51a      	b.n	404ccc <_vfiprintf_r+0xe4>
  405296:	9608      	str	r6, [sp, #32]
  405298:	2800      	cmp	r0, #0
  40529a:	f040 82db 	bne.w	405854 <_vfiprintf_r+0xc6c>
  40529e:	2a00      	cmp	r2, #0
  4052a0:	f000 80e7 	beq.w	405472 <_vfiprintf_r+0x88a>
  4052a4:	2101      	movs	r1, #1
  4052a6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4052aa:	f04f 0200 	mov.w	r2, #0
  4052ae:	9101      	str	r1, [sp, #4]
  4052b0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4052b4:	9105      	str	r1, [sp, #20]
  4052b6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4052ba:	e77b      	b.n	4051b4 <_vfiprintf_r+0x5cc>
  4052bc:	9a07      	ldr	r2, [sp, #28]
  4052be:	6813      	ldr	r3, [r2, #0]
  4052c0:	3204      	adds	r2, #4
  4052c2:	9207      	str	r2, [sp, #28]
  4052c4:	9a03      	ldr	r2, [sp, #12]
  4052c6:	601a      	str	r2, [r3, #0]
  4052c8:	e4cb      	b.n	404c62 <_vfiprintf_r+0x7a>
  4052ca:	aa0f      	add	r2, sp, #60	; 0x3c
  4052cc:	9904      	ldr	r1, [sp, #16]
  4052ce:	4620      	mov	r0, r4
  4052d0:	f7ff fc4a 	bl	404b68 <__sprint_r.part.0>
  4052d4:	2800      	cmp	r0, #0
  4052d6:	f040 8139 	bne.w	40554c <_vfiprintf_r+0x964>
  4052da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052de:	f101 0c01 	add.w	ip, r1, #1
  4052e2:	46ce      	mov	lr, r9
  4052e4:	e5ff      	b.n	404ee6 <_vfiprintf_r+0x2fe>
  4052e6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052ea:	1c48      	adds	r0, r1, #1
  4052ec:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4052f0:	2d00      	cmp	r5, #0
  4052f2:	f43f ae22 	beq.w	404f3a <_vfiprintf_r+0x352>
  4052f6:	3201      	adds	r2, #1
  4052f8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4052fc:	2101      	movs	r1, #1
  4052fe:	2807      	cmp	r0, #7
  405300:	9211      	str	r2, [sp, #68]	; 0x44
  405302:	9010      	str	r0, [sp, #64]	; 0x40
  405304:	f8ca 5000 	str.w	r5, [sl]
  405308:	f8ca 1004 	str.w	r1, [sl, #4]
  40530c:	f340 8108 	ble.w	405520 <_vfiprintf_r+0x938>
  405310:	2a00      	cmp	r2, #0
  405312:	f040 81bc 	bne.w	40568e <_vfiprintf_r+0xaa6>
  405316:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405318:	2b00      	cmp	r3, #0
  40531a:	f43f ae1f 	beq.w	404f5c <_vfiprintf_r+0x374>
  40531e:	ab0e      	add	r3, sp, #56	; 0x38
  405320:	2202      	movs	r2, #2
  405322:	4608      	mov	r0, r1
  405324:	931c      	str	r3, [sp, #112]	; 0x70
  405326:	921d      	str	r2, [sp, #116]	; 0x74
  405328:	46ca      	mov	sl, r9
  40532a:	4601      	mov	r1, r0
  40532c:	f10a 0a08 	add.w	sl, sl, #8
  405330:	3001      	adds	r0, #1
  405332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405334:	2b80      	cmp	r3, #128	; 0x80
  405336:	f43f ae19 	beq.w	404f6c <_vfiprintf_r+0x384>
  40533a:	9b05      	ldr	r3, [sp, #20]
  40533c:	1ae4      	subs	r4, r4, r3
  40533e:	2c00      	cmp	r4, #0
  405340:	dd2e      	ble.n	4053a0 <_vfiprintf_r+0x7b8>
  405342:	2c10      	cmp	r4, #16
  405344:	4db3      	ldr	r5, [pc, #716]	; (405614 <_vfiprintf_r+0xa2c>)
  405346:	dd1e      	ble.n	405386 <_vfiprintf_r+0x79e>
  405348:	46d6      	mov	lr, sl
  40534a:	2610      	movs	r6, #16
  40534c:	9f06      	ldr	r7, [sp, #24]
  40534e:	f8dd a010 	ldr.w	sl, [sp, #16]
  405352:	e006      	b.n	405362 <_vfiprintf_r+0x77a>
  405354:	1c88      	adds	r0, r1, #2
  405356:	f10e 0e08 	add.w	lr, lr, #8
  40535a:	4619      	mov	r1, r3
  40535c:	3c10      	subs	r4, #16
  40535e:	2c10      	cmp	r4, #16
  405360:	dd10      	ble.n	405384 <_vfiprintf_r+0x79c>
  405362:	1c4b      	adds	r3, r1, #1
  405364:	3210      	adds	r2, #16
  405366:	2b07      	cmp	r3, #7
  405368:	9211      	str	r2, [sp, #68]	; 0x44
  40536a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40536e:	9310      	str	r3, [sp, #64]	; 0x40
  405370:	ddf0      	ble.n	405354 <_vfiprintf_r+0x76c>
  405372:	2a00      	cmp	r2, #0
  405374:	d165      	bne.n	405442 <_vfiprintf_r+0x85a>
  405376:	3c10      	subs	r4, #16
  405378:	2c10      	cmp	r4, #16
  40537a:	f04f 0001 	mov.w	r0, #1
  40537e:	4611      	mov	r1, r2
  405380:	46ce      	mov	lr, r9
  405382:	dcee      	bgt.n	405362 <_vfiprintf_r+0x77a>
  405384:	46f2      	mov	sl, lr
  405386:	4422      	add	r2, r4
  405388:	2807      	cmp	r0, #7
  40538a:	9211      	str	r2, [sp, #68]	; 0x44
  40538c:	f8ca 5000 	str.w	r5, [sl]
  405390:	f8ca 4004 	str.w	r4, [sl, #4]
  405394:	9010      	str	r0, [sp, #64]	; 0x40
  405396:	f300 8085 	bgt.w	4054a4 <_vfiprintf_r+0x8bc>
  40539a:	f10a 0a08 	add.w	sl, sl, #8
  40539e:	3001      	adds	r0, #1
  4053a0:	9905      	ldr	r1, [sp, #20]
  4053a2:	f8ca b000 	str.w	fp, [sl]
  4053a6:	440a      	add	r2, r1
  4053a8:	2807      	cmp	r0, #7
  4053aa:	9211      	str	r2, [sp, #68]	; 0x44
  4053ac:	f8ca 1004 	str.w	r1, [sl, #4]
  4053b0:	9010      	str	r0, [sp, #64]	; 0x40
  4053b2:	f340 8082 	ble.w	4054ba <_vfiprintf_r+0x8d2>
  4053b6:	2a00      	cmp	r2, #0
  4053b8:	f040 8118 	bne.w	4055ec <_vfiprintf_r+0xa04>
  4053bc:	9b02      	ldr	r3, [sp, #8]
  4053be:	9210      	str	r2, [sp, #64]	; 0x40
  4053c0:	0758      	lsls	r0, r3, #29
  4053c2:	d535      	bpl.n	405430 <_vfiprintf_r+0x848>
  4053c4:	9b08      	ldr	r3, [sp, #32]
  4053c6:	9901      	ldr	r1, [sp, #4]
  4053c8:	1a5c      	subs	r4, r3, r1
  4053ca:	2c00      	cmp	r4, #0
  4053cc:	f340 80e7 	ble.w	40559e <_vfiprintf_r+0x9b6>
  4053d0:	46ca      	mov	sl, r9
  4053d2:	2c10      	cmp	r4, #16
  4053d4:	f340 8218 	ble.w	405808 <_vfiprintf_r+0xc20>
  4053d8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4053da:	4e8f      	ldr	r6, [pc, #572]	; (405618 <_vfiprintf_r+0xa30>)
  4053dc:	9f06      	ldr	r7, [sp, #24]
  4053de:	f8dd b010 	ldr.w	fp, [sp, #16]
  4053e2:	2510      	movs	r5, #16
  4053e4:	e006      	b.n	4053f4 <_vfiprintf_r+0x80c>
  4053e6:	1c88      	adds	r0, r1, #2
  4053e8:	f10a 0a08 	add.w	sl, sl, #8
  4053ec:	4619      	mov	r1, r3
  4053ee:	3c10      	subs	r4, #16
  4053f0:	2c10      	cmp	r4, #16
  4053f2:	dd11      	ble.n	405418 <_vfiprintf_r+0x830>
  4053f4:	1c4b      	adds	r3, r1, #1
  4053f6:	3210      	adds	r2, #16
  4053f8:	2b07      	cmp	r3, #7
  4053fa:	9211      	str	r2, [sp, #68]	; 0x44
  4053fc:	f8ca 6000 	str.w	r6, [sl]
  405400:	f8ca 5004 	str.w	r5, [sl, #4]
  405404:	9310      	str	r3, [sp, #64]	; 0x40
  405406:	ddee      	ble.n	4053e6 <_vfiprintf_r+0x7fe>
  405408:	bb42      	cbnz	r2, 40545c <_vfiprintf_r+0x874>
  40540a:	3c10      	subs	r4, #16
  40540c:	2c10      	cmp	r4, #16
  40540e:	f04f 0001 	mov.w	r0, #1
  405412:	4611      	mov	r1, r2
  405414:	46ca      	mov	sl, r9
  405416:	dced      	bgt.n	4053f4 <_vfiprintf_r+0x80c>
  405418:	4422      	add	r2, r4
  40541a:	2807      	cmp	r0, #7
  40541c:	9211      	str	r2, [sp, #68]	; 0x44
  40541e:	f8ca 6000 	str.w	r6, [sl]
  405422:	f8ca 4004 	str.w	r4, [sl, #4]
  405426:	9010      	str	r0, [sp, #64]	; 0x40
  405428:	dd51      	ble.n	4054ce <_vfiprintf_r+0x8e6>
  40542a:	2a00      	cmp	r2, #0
  40542c:	f040 819b 	bne.w	405766 <_vfiprintf_r+0xb7e>
  405430:	9b03      	ldr	r3, [sp, #12]
  405432:	9a08      	ldr	r2, [sp, #32]
  405434:	9901      	ldr	r1, [sp, #4]
  405436:	428a      	cmp	r2, r1
  405438:	bfac      	ite	ge
  40543a:	189b      	addge	r3, r3, r2
  40543c:	185b      	addlt	r3, r3, r1
  40543e:	9303      	str	r3, [sp, #12]
  405440:	e04e      	b.n	4054e0 <_vfiprintf_r+0x8f8>
  405442:	aa0f      	add	r2, sp, #60	; 0x3c
  405444:	4651      	mov	r1, sl
  405446:	4638      	mov	r0, r7
  405448:	f7ff fb8e 	bl	404b68 <__sprint_r.part.0>
  40544c:	2800      	cmp	r0, #0
  40544e:	f040 813f 	bne.w	4056d0 <_vfiprintf_r+0xae8>
  405452:	9910      	ldr	r1, [sp, #64]	; 0x40
  405454:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405456:	1c48      	adds	r0, r1, #1
  405458:	46ce      	mov	lr, r9
  40545a:	e77f      	b.n	40535c <_vfiprintf_r+0x774>
  40545c:	aa0f      	add	r2, sp, #60	; 0x3c
  40545e:	4659      	mov	r1, fp
  405460:	4638      	mov	r0, r7
  405462:	f7ff fb81 	bl	404b68 <__sprint_r.part.0>
  405466:	b960      	cbnz	r0, 405482 <_vfiprintf_r+0x89a>
  405468:	9910      	ldr	r1, [sp, #64]	; 0x40
  40546a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40546c:	1c48      	adds	r0, r1, #1
  40546e:	46ca      	mov	sl, r9
  405470:	e7bd      	b.n	4053ee <_vfiprintf_r+0x806>
  405472:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405474:	f8dd b010 	ldr.w	fp, [sp, #16]
  405478:	2b00      	cmp	r3, #0
  40547a:	f040 81d4 	bne.w	405826 <_vfiprintf_r+0xc3e>
  40547e:	2300      	movs	r3, #0
  405480:	9310      	str	r3, [sp, #64]	; 0x40
  405482:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405486:	f013 0f01 	tst.w	r3, #1
  40548a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40548e:	d102      	bne.n	405496 <_vfiprintf_r+0x8ae>
  405490:	059a      	lsls	r2, r3, #22
  405492:	f140 80de 	bpl.w	405652 <_vfiprintf_r+0xa6a>
  405496:	065b      	lsls	r3, r3, #25
  405498:	f53f acb2 	bmi.w	404e00 <_vfiprintf_r+0x218>
  40549c:	9803      	ldr	r0, [sp, #12]
  40549e:	b02d      	add	sp, #180	; 0xb4
  4054a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054a4:	2a00      	cmp	r2, #0
  4054a6:	f040 8106 	bne.w	4056b6 <_vfiprintf_r+0xace>
  4054aa:	9a05      	ldr	r2, [sp, #20]
  4054ac:	921d      	str	r2, [sp, #116]	; 0x74
  4054ae:	2301      	movs	r3, #1
  4054b0:	9211      	str	r2, [sp, #68]	; 0x44
  4054b2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4054b6:	9310      	str	r3, [sp, #64]	; 0x40
  4054b8:	46ca      	mov	sl, r9
  4054ba:	f10a 0a08 	add.w	sl, sl, #8
  4054be:	9b02      	ldr	r3, [sp, #8]
  4054c0:	0759      	lsls	r1, r3, #29
  4054c2:	d504      	bpl.n	4054ce <_vfiprintf_r+0x8e6>
  4054c4:	9b08      	ldr	r3, [sp, #32]
  4054c6:	9901      	ldr	r1, [sp, #4]
  4054c8:	1a5c      	subs	r4, r3, r1
  4054ca:	2c00      	cmp	r4, #0
  4054cc:	dc81      	bgt.n	4053d2 <_vfiprintf_r+0x7ea>
  4054ce:	9b03      	ldr	r3, [sp, #12]
  4054d0:	9908      	ldr	r1, [sp, #32]
  4054d2:	9801      	ldr	r0, [sp, #4]
  4054d4:	4281      	cmp	r1, r0
  4054d6:	bfac      	ite	ge
  4054d8:	185b      	addge	r3, r3, r1
  4054da:	181b      	addlt	r3, r3, r0
  4054dc:	9303      	str	r3, [sp, #12]
  4054de:	bb72      	cbnz	r2, 40553e <_vfiprintf_r+0x956>
  4054e0:	2300      	movs	r3, #0
  4054e2:	9310      	str	r3, [sp, #64]	; 0x40
  4054e4:	46ca      	mov	sl, r9
  4054e6:	f7ff bbbc 	b.w	404c62 <_vfiprintf_r+0x7a>
  4054ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4054ec:	9904      	ldr	r1, [sp, #16]
  4054ee:	4620      	mov	r0, r4
  4054f0:	f7ff fb3a 	bl	404b68 <__sprint_r.part.0>
  4054f4:	bb50      	cbnz	r0, 40554c <_vfiprintf_r+0x964>
  4054f6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4054f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4054fa:	f101 0e01 	add.w	lr, r1, #1
  4054fe:	46cc      	mov	ip, r9
  405500:	e548      	b.n	404f94 <_vfiprintf_r+0x3ac>
  405502:	2a00      	cmp	r2, #0
  405504:	f040 8140 	bne.w	405788 <_vfiprintf_r+0xba0>
  405508:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40550c:	2900      	cmp	r1, #0
  40550e:	f000 811b 	beq.w	405748 <_vfiprintf_r+0xb60>
  405512:	2201      	movs	r2, #1
  405514:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405518:	4610      	mov	r0, r2
  40551a:	921d      	str	r2, [sp, #116]	; 0x74
  40551c:	911c      	str	r1, [sp, #112]	; 0x70
  40551e:	46ca      	mov	sl, r9
  405520:	4601      	mov	r1, r0
  405522:	f10a 0a08 	add.w	sl, sl, #8
  405526:	3001      	adds	r0, #1
  405528:	e507      	b.n	404f3a <_vfiprintf_r+0x352>
  40552a:	9b02      	ldr	r3, [sp, #8]
  40552c:	2a01      	cmp	r2, #1
  40552e:	f000 8098 	beq.w	405662 <_vfiprintf_r+0xa7a>
  405532:	2a02      	cmp	r2, #2
  405534:	d10d      	bne.n	405552 <_vfiprintf_r+0x96a>
  405536:	9302      	str	r3, [sp, #8]
  405538:	2600      	movs	r6, #0
  40553a:	2700      	movs	r7, #0
  40553c:	e5b0      	b.n	4050a0 <_vfiprintf_r+0x4b8>
  40553e:	aa0f      	add	r2, sp, #60	; 0x3c
  405540:	9904      	ldr	r1, [sp, #16]
  405542:	9806      	ldr	r0, [sp, #24]
  405544:	f7ff fb10 	bl	404b68 <__sprint_r.part.0>
  405548:	2800      	cmp	r0, #0
  40554a:	d0c9      	beq.n	4054e0 <_vfiprintf_r+0x8f8>
  40554c:	f8dd b010 	ldr.w	fp, [sp, #16]
  405550:	e797      	b.n	405482 <_vfiprintf_r+0x89a>
  405552:	9302      	str	r3, [sp, #8]
  405554:	2600      	movs	r6, #0
  405556:	2700      	movs	r7, #0
  405558:	4649      	mov	r1, r9
  40555a:	e000      	b.n	40555e <_vfiprintf_r+0x976>
  40555c:	4659      	mov	r1, fp
  40555e:	08f2      	lsrs	r2, r6, #3
  405560:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405564:	08f8      	lsrs	r0, r7, #3
  405566:	f006 0307 	and.w	r3, r6, #7
  40556a:	4607      	mov	r7, r0
  40556c:	4616      	mov	r6, r2
  40556e:	3330      	adds	r3, #48	; 0x30
  405570:	ea56 0207 	orrs.w	r2, r6, r7
  405574:	f801 3c01 	strb.w	r3, [r1, #-1]
  405578:	f101 3bff 	add.w	fp, r1, #4294967295
  40557c:	d1ee      	bne.n	40555c <_vfiprintf_r+0x974>
  40557e:	9a02      	ldr	r2, [sp, #8]
  405580:	07d6      	lsls	r6, r2, #31
  405582:	f57f ad9d 	bpl.w	4050c0 <_vfiprintf_r+0x4d8>
  405586:	2b30      	cmp	r3, #48	; 0x30
  405588:	f43f ad9a 	beq.w	4050c0 <_vfiprintf_r+0x4d8>
  40558c:	3902      	subs	r1, #2
  40558e:	2330      	movs	r3, #48	; 0x30
  405590:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405594:	eba9 0301 	sub.w	r3, r9, r1
  405598:	9305      	str	r3, [sp, #20]
  40559a:	468b      	mov	fp, r1
  40559c:	e476      	b.n	404e8c <_vfiprintf_r+0x2a4>
  40559e:	9b03      	ldr	r3, [sp, #12]
  4055a0:	9a08      	ldr	r2, [sp, #32]
  4055a2:	428a      	cmp	r2, r1
  4055a4:	bfac      	ite	ge
  4055a6:	189b      	addge	r3, r3, r2
  4055a8:	185b      	addlt	r3, r3, r1
  4055aa:	9303      	str	r3, [sp, #12]
  4055ac:	e798      	b.n	4054e0 <_vfiprintf_r+0x8f8>
  4055ae:	2202      	movs	r2, #2
  4055b0:	e44d      	b.n	404e4e <_vfiprintf_r+0x266>
  4055b2:	2f00      	cmp	r7, #0
  4055b4:	bf08      	it	eq
  4055b6:	2e0a      	cmpeq	r6, #10
  4055b8:	d352      	bcc.n	405660 <_vfiprintf_r+0xa78>
  4055ba:	46cb      	mov	fp, r9
  4055bc:	4630      	mov	r0, r6
  4055be:	4639      	mov	r1, r7
  4055c0:	220a      	movs	r2, #10
  4055c2:	2300      	movs	r3, #0
  4055c4:	f001 ffb8 	bl	407538 <__aeabi_uldivmod>
  4055c8:	3230      	adds	r2, #48	; 0x30
  4055ca:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4055ce:	4630      	mov	r0, r6
  4055d0:	4639      	mov	r1, r7
  4055d2:	2300      	movs	r3, #0
  4055d4:	220a      	movs	r2, #10
  4055d6:	f001 ffaf 	bl	407538 <__aeabi_uldivmod>
  4055da:	4606      	mov	r6, r0
  4055dc:	460f      	mov	r7, r1
  4055de:	ea56 0307 	orrs.w	r3, r6, r7
  4055e2:	d1eb      	bne.n	4055bc <_vfiprintf_r+0x9d4>
  4055e4:	e56c      	b.n	4050c0 <_vfiprintf_r+0x4d8>
  4055e6:	9405      	str	r4, [sp, #20]
  4055e8:	46cb      	mov	fp, r9
  4055ea:	e44f      	b.n	404e8c <_vfiprintf_r+0x2a4>
  4055ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4055ee:	9904      	ldr	r1, [sp, #16]
  4055f0:	9806      	ldr	r0, [sp, #24]
  4055f2:	f7ff fab9 	bl	404b68 <__sprint_r.part.0>
  4055f6:	2800      	cmp	r0, #0
  4055f8:	d1a8      	bne.n	40554c <_vfiprintf_r+0x964>
  4055fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4055fc:	46ca      	mov	sl, r9
  4055fe:	e75e      	b.n	4054be <_vfiprintf_r+0x8d6>
  405600:	aa0f      	add	r2, sp, #60	; 0x3c
  405602:	9904      	ldr	r1, [sp, #16]
  405604:	9806      	ldr	r0, [sp, #24]
  405606:	f7ff faaf 	bl	404b68 <__sprint_r.part.0>
  40560a:	2800      	cmp	r0, #0
  40560c:	d19e      	bne.n	40554c <_vfiprintf_r+0x964>
  40560e:	46ca      	mov	sl, r9
  405610:	f7ff bbc0 	b.w	404d94 <_vfiprintf_r+0x1ac>
  405614:	0040812c 	.word	0x0040812c
  405618:	0040811c 	.word	0x0040811c
  40561c:	3104      	adds	r1, #4
  40561e:	6816      	ldr	r6, [r2, #0]
  405620:	9107      	str	r1, [sp, #28]
  405622:	2201      	movs	r2, #1
  405624:	2700      	movs	r7, #0
  405626:	e412      	b.n	404e4e <_vfiprintf_r+0x266>
  405628:	9807      	ldr	r0, [sp, #28]
  40562a:	4601      	mov	r1, r0
  40562c:	3104      	adds	r1, #4
  40562e:	6806      	ldr	r6, [r0, #0]
  405630:	9107      	str	r1, [sp, #28]
  405632:	2700      	movs	r7, #0
  405634:	e40b      	b.n	404e4e <_vfiprintf_r+0x266>
  405636:	680e      	ldr	r6, [r1, #0]
  405638:	3104      	adds	r1, #4
  40563a:	9107      	str	r1, [sp, #28]
  40563c:	2700      	movs	r7, #0
  40563e:	e591      	b.n	405164 <_vfiprintf_r+0x57c>
  405640:	9907      	ldr	r1, [sp, #28]
  405642:	680e      	ldr	r6, [r1, #0]
  405644:	460a      	mov	r2, r1
  405646:	17f7      	asrs	r7, r6, #31
  405648:	3204      	adds	r2, #4
  40564a:	9207      	str	r2, [sp, #28]
  40564c:	4630      	mov	r0, r6
  40564e:	4639      	mov	r1, r7
  405650:	e50f      	b.n	405072 <_vfiprintf_r+0x48a>
  405652:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405656:	f000 fe7f 	bl	406358 <__retarget_lock_release_recursive>
  40565a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40565e:	e71a      	b.n	405496 <_vfiprintf_r+0x8ae>
  405660:	9b02      	ldr	r3, [sp, #8]
  405662:	9302      	str	r3, [sp, #8]
  405664:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405668:	3630      	adds	r6, #48	; 0x30
  40566a:	2301      	movs	r3, #1
  40566c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405670:	9305      	str	r3, [sp, #20]
  405672:	e40b      	b.n	404e8c <_vfiprintf_r+0x2a4>
  405674:	aa0f      	add	r2, sp, #60	; 0x3c
  405676:	9904      	ldr	r1, [sp, #16]
  405678:	9806      	ldr	r0, [sp, #24]
  40567a:	f7ff fa75 	bl	404b68 <__sprint_r.part.0>
  40567e:	2800      	cmp	r0, #0
  405680:	f47f af64 	bne.w	40554c <_vfiprintf_r+0x964>
  405684:	9910      	ldr	r1, [sp, #64]	; 0x40
  405686:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405688:	1c48      	adds	r0, r1, #1
  40568a:	46ca      	mov	sl, r9
  40568c:	e651      	b.n	405332 <_vfiprintf_r+0x74a>
  40568e:	aa0f      	add	r2, sp, #60	; 0x3c
  405690:	9904      	ldr	r1, [sp, #16]
  405692:	9806      	ldr	r0, [sp, #24]
  405694:	f7ff fa68 	bl	404b68 <__sprint_r.part.0>
  405698:	2800      	cmp	r0, #0
  40569a:	f47f af57 	bne.w	40554c <_vfiprintf_r+0x964>
  40569e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056a2:	1c48      	adds	r0, r1, #1
  4056a4:	46ca      	mov	sl, r9
  4056a6:	e448      	b.n	404f3a <_vfiprintf_r+0x352>
  4056a8:	2a00      	cmp	r2, #0
  4056aa:	f040 8091 	bne.w	4057d0 <_vfiprintf_r+0xbe8>
  4056ae:	2001      	movs	r0, #1
  4056b0:	4611      	mov	r1, r2
  4056b2:	46ca      	mov	sl, r9
  4056b4:	e641      	b.n	40533a <_vfiprintf_r+0x752>
  4056b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4056b8:	9904      	ldr	r1, [sp, #16]
  4056ba:	9806      	ldr	r0, [sp, #24]
  4056bc:	f7ff fa54 	bl	404b68 <__sprint_r.part.0>
  4056c0:	2800      	cmp	r0, #0
  4056c2:	f47f af43 	bne.w	40554c <_vfiprintf_r+0x964>
  4056c6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4056c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056ca:	3001      	adds	r0, #1
  4056cc:	46ca      	mov	sl, r9
  4056ce:	e667      	b.n	4053a0 <_vfiprintf_r+0x7b8>
  4056d0:	46d3      	mov	fp, sl
  4056d2:	e6d6      	b.n	405482 <_vfiprintf_r+0x89a>
  4056d4:	9e07      	ldr	r6, [sp, #28]
  4056d6:	3607      	adds	r6, #7
  4056d8:	f026 0207 	bic.w	r2, r6, #7
  4056dc:	f102 0108 	add.w	r1, r2, #8
  4056e0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4056e4:	9107      	str	r1, [sp, #28]
  4056e6:	2201      	movs	r2, #1
  4056e8:	f7ff bbb1 	b.w	404e4e <_vfiprintf_r+0x266>
  4056ec:	9e07      	ldr	r6, [sp, #28]
  4056ee:	3607      	adds	r6, #7
  4056f0:	f026 0607 	bic.w	r6, r6, #7
  4056f4:	e9d6 0100 	ldrd	r0, r1, [r6]
  4056f8:	f106 0208 	add.w	r2, r6, #8
  4056fc:	9207      	str	r2, [sp, #28]
  4056fe:	4606      	mov	r6, r0
  405700:	460f      	mov	r7, r1
  405702:	e4b6      	b.n	405072 <_vfiprintf_r+0x48a>
  405704:	9e07      	ldr	r6, [sp, #28]
  405706:	3607      	adds	r6, #7
  405708:	f026 0207 	bic.w	r2, r6, #7
  40570c:	f102 0108 	add.w	r1, r2, #8
  405710:	e9d2 6700 	ldrd	r6, r7, [r2]
  405714:	9107      	str	r1, [sp, #28]
  405716:	2200      	movs	r2, #0
  405718:	f7ff bb99 	b.w	404e4e <_vfiprintf_r+0x266>
  40571c:	9e07      	ldr	r6, [sp, #28]
  40571e:	3607      	adds	r6, #7
  405720:	f026 0107 	bic.w	r1, r6, #7
  405724:	f101 0008 	add.w	r0, r1, #8
  405728:	9007      	str	r0, [sp, #28]
  40572a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40572e:	e519      	b.n	405164 <_vfiprintf_r+0x57c>
  405730:	46cb      	mov	fp, r9
  405732:	f7ff bbab 	b.w	404e8c <_vfiprintf_r+0x2a4>
  405736:	252d      	movs	r5, #45	; 0x2d
  405738:	4276      	negs	r6, r6
  40573a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40573e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405742:	2201      	movs	r2, #1
  405744:	f7ff bb88 	b.w	404e58 <_vfiprintf_r+0x270>
  405748:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40574a:	b9b3      	cbnz	r3, 40577a <_vfiprintf_r+0xb92>
  40574c:	4611      	mov	r1, r2
  40574e:	2001      	movs	r0, #1
  405750:	46ca      	mov	sl, r9
  405752:	e5f2      	b.n	40533a <_vfiprintf_r+0x752>
  405754:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405758:	f000 fdfe 	bl	406358 <__retarget_lock_release_recursive>
  40575c:	f04f 33ff 	mov.w	r3, #4294967295
  405760:	9303      	str	r3, [sp, #12]
  405762:	f7ff bb50 	b.w	404e06 <_vfiprintf_r+0x21e>
  405766:	aa0f      	add	r2, sp, #60	; 0x3c
  405768:	9904      	ldr	r1, [sp, #16]
  40576a:	9806      	ldr	r0, [sp, #24]
  40576c:	f7ff f9fc 	bl	404b68 <__sprint_r.part.0>
  405770:	2800      	cmp	r0, #0
  405772:	f47f aeeb 	bne.w	40554c <_vfiprintf_r+0x964>
  405776:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405778:	e6a9      	b.n	4054ce <_vfiprintf_r+0x8e6>
  40577a:	ab0e      	add	r3, sp, #56	; 0x38
  40577c:	2202      	movs	r2, #2
  40577e:	931c      	str	r3, [sp, #112]	; 0x70
  405780:	921d      	str	r2, [sp, #116]	; 0x74
  405782:	2001      	movs	r0, #1
  405784:	46ca      	mov	sl, r9
  405786:	e5d0      	b.n	40532a <_vfiprintf_r+0x742>
  405788:	aa0f      	add	r2, sp, #60	; 0x3c
  40578a:	9904      	ldr	r1, [sp, #16]
  40578c:	9806      	ldr	r0, [sp, #24]
  40578e:	f7ff f9eb 	bl	404b68 <__sprint_r.part.0>
  405792:	2800      	cmp	r0, #0
  405794:	f47f aeda 	bne.w	40554c <_vfiprintf_r+0x964>
  405798:	9910      	ldr	r1, [sp, #64]	; 0x40
  40579a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40579c:	1c48      	adds	r0, r1, #1
  40579e:	46ca      	mov	sl, r9
  4057a0:	e5a4      	b.n	4052ec <_vfiprintf_r+0x704>
  4057a2:	9a07      	ldr	r2, [sp, #28]
  4057a4:	9903      	ldr	r1, [sp, #12]
  4057a6:	6813      	ldr	r3, [r2, #0]
  4057a8:	17cd      	asrs	r5, r1, #31
  4057aa:	4608      	mov	r0, r1
  4057ac:	3204      	adds	r2, #4
  4057ae:	4629      	mov	r1, r5
  4057b0:	9207      	str	r2, [sp, #28]
  4057b2:	e9c3 0100 	strd	r0, r1, [r3]
  4057b6:	f7ff ba54 	b.w	404c62 <_vfiprintf_r+0x7a>
  4057ba:	4658      	mov	r0, fp
  4057bc:	9607      	str	r6, [sp, #28]
  4057be:	9302      	str	r3, [sp, #8]
  4057c0:	f001 fc7e 	bl	4070c0 <strlen>
  4057c4:	2400      	movs	r4, #0
  4057c6:	9005      	str	r0, [sp, #20]
  4057c8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4057cc:	f7ff bb5e 	b.w	404e8c <_vfiprintf_r+0x2a4>
  4057d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4057d2:	9904      	ldr	r1, [sp, #16]
  4057d4:	9806      	ldr	r0, [sp, #24]
  4057d6:	f7ff f9c7 	bl	404b68 <__sprint_r.part.0>
  4057da:	2800      	cmp	r0, #0
  4057dc:	f47f aeb6 	bne.w	40554c <_vfiprintf_r+0x964>
  4057e0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057e4:	1c48      	adds	r0, r1, #1
  4057e6:	46ca      	mov	sl, r9
  4057e8:	e5a7      	b.n	40533a <_vfiprintf_r+0x752>
  4057ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057ee:	4e20      	ldr	r6, [pc, #128]	; (405870 <_vfiprintf_r+0xc88>)
  4057f0:	3101      	adds	r1, #1
  4057f2:	f7ff bb90 	b.w	404f16 <_vfiprintf_r+0x32e>
  4057f6:	2c06      	cmp	r4, #6
  4057f8:	bf28      	it	cs
  4057fa:	2406      	movcs	r4, #6
  4057fc:	9405      	str	r4, [sp, #20]
  4057fe:	9607      	str	r6, [sp, #28]
  405800:	9401      	str	r4, [sp, #4]
  405802:	f8df b070 	ldr.w	fp, [pc, #112]	; 405874 <_vfiprintf_r+0xc8c>
  405806:	e4d5      	b.n	4051b4 <_vfiprintf_r+0x5cc>
  405808:	9810      	ldr	r0, [sp, #64]	; 0x40
  40580a:	4e19      	ldr	r6, [pc, #100]	; (405870 <_vfiprintf_r+0xc88>)
  40580c:	3001      	adds	r0, #1
  40580e:	e603      	b.n	405418 <_vfiprintf_r+0x830>
  405810:	9405      	str	r4, [sp, #20]
  405812:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405816:	9607      	str	r6, [sp, #28]
  405818:	9302      	str	r3, [sp, #8]
  40581a:	4604      	mov	r4, r0
  40581c:	f7ff bb36 	b.w	404e8c <_vfiprintf_r+0x2a4>
  405820:	4686      	mov	lr, r0
  405822:	f7ff bbce 	b.w	404fc2 <_vfiprintf_r+0x3da>
  405826:	9806      	ldr	r0, [sp, #24]
  405828:	aa0f      	add	r2, sp, #60	; 0x3c
  40582a:	4659      	mov	r1, fp
  40582c:	f7ff f99c 	bl	404b68 <__sprint_r.part.0>
  405830:	2800      	cmp	r0, #0
  405832:	f43f ae24 	beq.w	40547e <_vfiprintf_r+0x896>
  405836:	e624      	b.n	405482 <_vfiprintf_r+0x89a>
  405838:	9907      	ldr	r1, [sp, #28]
  40583a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40583e:	680c      	ldr	r4, [r1, #0]
  405840:	3104      	adds	r1, #4
  405842:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405846:	46b8      	mov	r8, r7
  405848:	9107      	str	r1, [sp, #28]
  40584a:	f7ff ba3f 	b.w	404ccc <_vfiprintf_r+0xe4>
  40584e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405852:	e43c      	b.n	4050ce <_vfiprintf_r+0x4e6>
  405854:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405858:	e521      	b.n	40529e <_vfiprintf_r+0x6b6>
  40585a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40585e:	f7ff bbf4 	b.w	40504a <_vfiprintf_r+0x462>
  405862:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405866:	e491      	b.n	40518c <_vfiprintf_r+0x5a4>
  405868:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40586c:	e469      	b.n	405142 <_vfiprintf_r+0x55a>
  40586e:	bf00      	nop
  405870:	0040811c 	.word	0x0040811c
  405874:	00408114 	.word	0x00408114

00405878 <__sbprintf>:
  405878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40587c:	460c      	mov	r4, r1
  40587e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405882:	8989      	ldrh	r1, [r1, #12]
  405884:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405886:	89e5      	ldrh	r5, [r4, #14]
  405888:	9619      	str	r6, [sp, #100]	; 0x64
  40588a:	f021 0102 	bic.w	r1, r1, #2
  40588e:	4606      	mov	r6, r0
  405890:	69e0      	ldr	r0, [r4, #28]
  405892:	f8ad 100c 	strh.w	r1, [sp, #12]
  405896:	4617      	mov	r7, r2
  405898:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40589c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40589e:	f8ad 500e 	strh.w	r5, [sp, #14]
  4058a2:	4698      	mov	r8, r3
  4058a4:	ad1a      	add	r5, sp, #104	; 0x68
  4058a6:	2300      	movs	r3, #0
  4058a8:	9007      	str	r0, [sp, #28]
  4058aa:	a816      	add	r0, sp, #88	; 0x58
  4058ac:	9209      	str	r2, [sp, #36]	; 0x24
  4058ae:	9306      	str	r3, [sp, #24]
  4058b0:	9500      	str	r5, [sp, #0]
  4058b2:	9504      	str	r5, [sp, #16]
  4058b4:	9102      	str	r1, [sp, #8]
  4058b6:	9105      	str	r1, [sp, #20]
  4058b8:	f000 fd48 	bl	40634c <__retarget_lock_init_recursive>
  4058bc:	4643      	mov	r3, r8
  4058be:	463a      	mov	r2, r7
  4058c0:	4669      	mov	r1, sp
  4058c2:	4630      	mov	r0, r6
  4058c4:	f7ff f990 	bl	404be8 <_vfiprintf_r>
  4058c8:	1e05      	subs	r5, r0, #0
  4058ca:	db07      	blt.n	4058dc <__sbprintf+0x64>
  4058cc:	4630      	mov	r0, r6
  4058ce:	4669      	mov	r1, sp
  4058d0:	f000 f928 	bl	405b24 <_fflush_r>
  4058d4:	2800      	cmp	r0, #0
  4058d6:	bf18      	it	ne
  4058d8:	f04f 35ff 	movne.w	r5, #4294967295
  4058dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4058e0:	065b      	lsls	r3, r3, #25
  4058e2:	d503      	bpl.n	4058ec <__sbprintf+0x74>
  4058e4:	89a3      	ldrh	r3, [r4, #12]
  4058e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058ea:	81a3      	strh	r3, [r4, #12]
  4058ec:	9816      	ldr	r0, [sp, #88]	; 0x58
  4058ee:	f000 fd2f 	bl	406350 <__retarget_lock_close_recursive>
  4058f2:	4628      	mov	r0, r5
  4058f4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004058fc <__swsetup_r>:
  4058fc:	b538      	push	{r3, r4, r5, lr}
  4058fe:	4b30      	ldr	r3, [pc, #192]	; (4059c0 <__swsetup_r+0xc4>)
  405900:	681b      	ldr	r3, [r3, #0]
  405902:	4605      	mov	r5, r0
  405904:	460c      	mov	r4, r1
  405906:	b113      	cbz	r3, 40590e <__swsetup_r+0x12>
  405908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40590a:	2a00      	cmp	r2, #0
  40590c:	d038      	beq.n	405980 <__swsetup_r+0x84>
  40590e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405912:	b293      	uxth	r3, r2
  405914:	0718      	lsls	r0, r3, #28
  405916:	d50c      	bpl.n	405932 <__swsetup_r+0x36>
  405918:	6920      	ldr	r0, [r4, #16]
  40591a:	b1a8      	cbz	r0, 405948 <__swsetup_r+0x4c>
  40591c:	f013 0201 	ands.w	r2, r3, #1
  405920:	d01e      	beq.n	405960 <__swsetup_r+0x64>
  405922:	6963      	ldr	r3, [r4, #20]
  405924:	2200      	movs	r2, #0
  405926:	425b      	negs	r3, r3
  405928:	61a3      	str	r3, [r4, #24]
  40592a:	60a2      	str	r2, [r4, #8]
  40592c:	b1f0      	cbz	r0, 40596c <__swsetup_r+0x70>
  40592e:	2000      	movs	r0, #0
  405930:	bd38      	pop	{r3, r4, r5, pc}
  405932:	06d9      	lsls	r1, r3, #27
  405934:	d53c      	bpl.n	4059b0 <__swsetup_r+0xb4>
  405936:	0758      	lsls	r0, r3, #29
  405938:	d426      	bmi.n	405988 <__swsetup_r+0x8c>
  40593a:	6920      	ldr	r0, [r4, #16]
  40593c:	f042 0308 	orr.w	r3, r2, #8
  405940:	81a3      	strh	r3, [r4, #12]
  405942:	b29b      	uxth	r3, r3
  405944:	2800      	cmp	r0, #0
  405946:	d1e9      	bne.n	40591c <__swsetup_r+0x20>
  405948:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40594c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405950:	d0e4      	beq.n	40591c <__swsetup_r+0x20>
  405952:	4628      	mov	r0, r5
  405954:	4621      	mov	r1, r4
  405956:	f000 fd2f 	bl	4063b8 <__smakebuf_r>
  40595a:	89a3      	ldrh	r3, [r4, #12]
  40595c:	6920      	ldr	r0, [r4, #16]
  40595e:	e7dd      	b.n	40591c <__swsetup_r+0x20>
  405960:	0799      	lsls	r1, r3, #30
  405962:	bf58      	it	pl
  405964:	6962      	ldrpl	r2, [r4, #20]
  405966:	60a2      	str	r2, [r4, #8]
  405968:	2800      	cmp	r0, #0
  40596a:	d1e0      	bne.n	40592e <__swsetup_r+0x32>
  40596c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405970:	061a      	lsls	r2, r3, #24
  405972:	d5dd      	bpl.n	405930 <__swsetup_r+0x34>
  405974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405978:	81a3      	strh	r3, [r4, #12]
  40597a:	f04f 30ff 	mov.w	r0, #4294967295
  40597e:	bd38      	pop	{r3, r4, r5, pc}
  405980:	4618      	mov	r0, r3
  405982:	f000 f927 	bl	405bd4 <__sinit>
  405986:	e7c2      	b.n	40590e <__swsetup_r+0x12>
  405988:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40598a:	b151      	cbz	r1, 4059a2 <__swsetup_r+0xa6>
  40598c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405990:	4299      	cmp	r1, r3
  405992:	d004      	beq.n	40599e <__swsetup_r+0xa2>
  405994:	4628      	mov	r0, r5
  405996:	f000 fa43 	bl	405e20 <_free_r>
  40599a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40599e:	2300      	movs	r3, #0
  4059a0:	6323      	str	r3, [r4, #48]	; 0x30
  4059a2:	2300      	movs	r3, #0
  4059a4:	6920      	ldr	r0, [r4, #16]
  4059a6:	6063      	str	r3, [r4, #4]
  4059a8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4059ac:	6020      	str	r0, [r4, #0]
  4059ae:	e7c5      	b.n	40593c <__swsetup_r+0x40>
  4059b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4059b4:	2309      	movs	r3, #9
  4059b6:	602b      	str	r3, [r5, #0]
  4059b8:	f04f 30ff 	mov.w	r0, #4294967295
  4059bc:	81a2      	strh	r2, [r4, #12]
  4059be:	bd38      	pop	{r3, r4, r5, pc}
  4059c0:	20400038 	.word	0x20400038

004059c4 <register_fini>:
  4059c4:	4b02      	ldr	r3, [pc, #8]	; (4059d0 <register_fini+0xc>)
  4059c6:	b113      	cbz	r3, 4059ce <register_fini+0xa>
  4059c8:	4802      	ldr	r0, [pc, #8]	; (4059d4 <register_fini+0x10>)
  4059ca:	f000 b805 	b.w	4059d8 <atexit>
  4059ce:	4770      	bx	lr
  4059d0:	00000000 	.word	0x00000000
  4059d4:	00405c45 	.word	0x00405c45

004059d8 <atexit>:
  4059d8:	2300      	movs	r3, #0
  4059da:	4601      	mov	r1, r0
  4059dc:	461a      	mov	r2, r3
  4059de:	4618      	mov	r0, r3
  4059e0:	f001 bc82 	b.w	4072e8 <__register_exitproc>

004059e4 <__sflush_r>:
  4059e4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4059e8:	b29a      	uxth	r2, r3
  4059ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059ee:	460d      	mov	r5, r1
  4059f0:	0711      	lsls	r1, r2, #28
  4059f2:	4680      	mov	r8, r0
  4059f4:	d43a      	bmi.n	405a6c <__sflush_r+0x88>
  4059f6:	686a      	ldr	r2, [r5, #4]
  4059f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4059fc:	2a00      	cmp	r2, #0
  4059fe:	81ab      	strh	r3, [r5, #12]
  405a00:	dd6f      	ble.n	405ae2 <__sflush_r+0xfe>
  405a02:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405a04:	2c00      	cmp	r4, #0
  405a06:	d049      	beq.n	405a9c <__sflush_r+0xb8>
  405a08:	2200      	movs	r2, #0
  405a0a:	b29b      	uxth	r3, r3
  405a0c:	f8d8 6000 	ldr.w	r6, [r8]
  405a10:	f8c8 2000 	str.w	r2, [r8]
  405a14:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405a18:	d067      	beq.n	405aea <__sflush_r+0x106>
  405a1a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405a1c:	075f      	lsls	r7, r3, #29
  405a1e:	d505      	bpl.n	405a2c <__sflush_r+0x48>
  405a20:	6869      	ldr	r1, [r5, #4]
  405a22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405a24:	1a52      	subs	r2, r2, r1
  405a26:	b10b      	cbz	r3, 405a2c <__sflush_r+0x48>
  405a28:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405a2a:	1ad2      	subs	r2, r2, r3
  405a2c:	2300      	movs	r3, #0
  405a2e:	69e9      	ldr	r1, [r5, #28]
  405a30:	4640      	mov	r0, r8
  405a32:	47a0      	blx	r4
  405a34:	1c44      	adds	r4, r0, #1
  405a36:	d03c      	beq.n	405ab2 <__sflush_r+0xce>
  405a38:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405a3c:	692a      	ldr	r2, [r5, #16]
  405a3e:	602a      	str	r2, [r5, #0]
  405a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405a44:	2200      	movs	r2, #0
  405a46:	81ab      	strh	r3, [r5, #12]
  405a48:	04db      	lsls	r3, r3, #19
  405a4a:	606a      	str	r2, [r5, #4]
  405a4c:	d447      	bmi.n	405ade <__sflush_r+0xfa>
  405a4e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405a50:	f8c8 6000 	str.w	r6, [r8]
  405a54:	b311      	cbz	r1, 405a9c <__sflush_r+0xb8>
  405a56:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405a5a:	4299      	cmp	r1, r3
  405a5c:	d002      	beq.n	405a64 <__sflush_r+0x80>
  405a5e:	4640      	mov	r0, r8
  405a60:	f000 f9de 	bl	405e20 <_free_r>
  405a64:	2000      	movs	r0, #0
  405a66:	6328      	str	r0, [r5, #48]	; 0x30
  405a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a6c:	692e      	ldr	r6, [r5, #16]
  405a6e:	b1ae      	cbz	r6, 405a9c <__sflush_r+0xb8>
  405a70:	682c      	ldr	r4, [r5, #0]
  405a72:	602e      	str	r6, [r5, #0]
  405a74:	0791      	lsls	r1, r2, #30
  405a76:	bf0c      	ite	eq
  405a78:	696b      	ldreq	r3, [r5, #20]
  405a7a:	2300      	movne	r3, #0
  405a7c:	1ba4      	subs	r4, r4, r6
  405a7e:	60ab      	str	r3, [r5, #8]
  405a80:	e00a      	b.n	405a98 <__sflush_r+0xb4>
  405a82:	4623      	mov	r3, r4
  405a84:	4632      	mov	r2, r6
  405a86:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405a88:	69e9      	ldr	r1, [r5, #28]
  405a8a:	4640      	mov	r0, r8
  405a8c:	47b8      	blx	r7
  405a8e:	2800      	cmp	r0, #0
  405a90:	eba4 0400 	sub.w	r4, r4, r0
  405a94:	4406      	add	r6, r0
  405a96:	dd04      	ble.n	405aa2 <__sflush_r+0xbe>
  405a98:	2c00      	cmp	r4, #0
  405a9a:	dcf2      	bgt.n	405a82 <__sflush_r+0x9e>
  405a9c:	2000      	movs	r0, #0
  405a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405aa2:	89ab      	ldrh	r3, [r5, #12]
  405aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405aa8:	81ab      	strh	r3, [r5, #12]
  405aaa:	f04f 30ff 	mov.w	r0, #4294967295
  405aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ab2:	f8d8 4000 	ldr.w	r4, [r8]
  405ab6:	2c1d      	cmp	r4, #29
  405ab8:	d8f3      	bhi.n	405aa2 <__sflush_r+0xbe>
  405aba:	4b19      	ldr	r3, [pc, #100]	; (405b20 <__sflush_r+0x13c>)
  405abc:	40e3      	lsrs	r3, r4
  405abe:	43db      	mvns	r3, r3
  405ac0:	f013 0301 	ands.w	r3, r3, #1
  405ac4:	d1ed      	bne.n	405aa2 <__sflush_r+0xbe>
  405ac6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  405aca:	606b      	str	r3, [r5, #4]
  405acc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405ad0:	6929      	ldr	r1, [r5, #16]
  405ad2:	81ab      	strh	r3, [r5, #12]
  405ad4:	04da      	lsls	r2, r3, #19
  405ad6:	6029      	str	r1, [r5, #0]
  405ad8:	d5b9      	bpl.n	405a4e <__sflush_r+0x6a>
  405ada:	2c00      	cmp	r4, #0
  405adc:	d1b7      	bne.n	405a4e <__sflush_r+0x6a>
  405ade:	6528      	str	r0, [r5, #80]	; 0x50
  405ae0:	e7b5      	b.n	405a4e <__sflush_r+0x6a>
  405ae2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405ae4:	2a00      	cmp	r2, #0
  405ae6:	dc8c      	bgt.n	405a02 <__sflush_r+0x1e>
  405ae8:	e7d8      	b.n	405a9c <__sflush_r+0xb8>
  405aea:	2301      	movs	r3, #1
  405aec:	69e9      	ldr	r1, [r5, #28]
  405aee:	4640      	mov	r0, r8
  405af0:	47a0      	blx	r4
  405af2:	1c43      	adds	r3, r0, #1
  405af4:	4602      	mov	r2, r0
  405af6:	d002      	beq.n	405afe <__sflush_r+0x11a>
  405af8:	89ab      	ldrh	r3, [r5, #12]
  405afa:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405afc:	e78e      	b.n	405a1c <__sflush_r+0x38>
  405afe:	f8d8 3000 	ldr.w	r3, [r8]
  405b02:	2b00      	cmp	r3, #0
  405b04:	d0f8      	beq.n	405af8 <__sflush_r+0x114>
  405b06:	2b1d      	cmp	r3, #29
  405b08:	d001      	beq.n	405b0e <__sflush_r+0x12a>
  405b0a:	2b16      	cmp	r3, #22
  405b0c:	d102      	bne.n	405b14 <__sflush_r+0x130>
  405b0e:	f8c8 6000 	str.w	r6, [r8]
  405b12:	e7c3      	b.n	405a9c <__sflush_r+0xb8>
  405b14:	89ab      	ldrh	r3, [r5, #12]
  405b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b1a:	81ab      	strh	r3, [r5, #12]
  405b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b20:	20400001 	.word	0x20400001

00405b24 <_fflush_r>:
  405b24:	b538      	push	{r3, r4, r5, lr}
  405b26:	460d      	mov	r5, r1
  405b28:	4604      	mov	r4, r0
  405b2a:	b108      	cbz	r0, 405b30 <_fflush_r+0xc>
  405b2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405b2e:	b1bb      	cbz	r3, 405b60 <_fflush_r+0x3c>
  405b30:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405b34:	b188      	cbz	r0, 405b5a <_fflush_r+0x36>
  405b36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405b38:	07db      	lsls	r3, r3, #31
  405b3a:	d401      	bmi.n	405b40 <_fflush_r+0x1c>
  405b3c:	0581      	lsls	r1, r0, #22
  405b3e:	d517      	bpl.n	405b70 <_fflush_r+0x4c>
  405b40:	4620      	mov	r0, r4
  405b42:	4629      	mov	r1, r5
  405b44:	f7ff ff4e 	bl	4059e4 <__sflush_r>
  405b48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405b4a:	07da      	lsls	r2, r3, #31
  405b4c:	4604      	mov	r4, r0
  405b4e:	d402      	bmi.n	405b56 <_fflush_r+0x32>
  405b50:	89ab      	ldrh	r3, [r5, #12]
  405b52:	059b      	lsls	r3, r3, #22
  405b54:	d507      	bpl.n	405b66 <_fflush_r+0x42>
  405b56:	4620      	mov	r0, r4
  405b58:	bd38      	pop	{r3, r4, r5, pc}
  405b5a:	4604      	mov	r4, r0
  405b5c:	4620      	mov	r0, r4
  405b5e:	bd38      	pop	{r3, r4, r5, pc}
  405b60:	f000 f838 	bl	405bd4 <__sinit>
  405b64:	e7e4      	b.n	405b30 <_fflush_r+0xc>
  405b66:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405b68:	f000 fbf6 	bl	406358 <__retarget_lock_release_recursive>
  405b6c:	4620      	mov	r0, r4
  405b6e:	bd38      	pop	{r3, r4, r5, pc}
  405b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405b72:	f000 fbef 	bl	406354 <__retarget_lock_acquire_recursive>
  405b76:	e7e3      	b.n	405b40 <_fflush_r+0x1c>

00405b78 <_cleanup_r>:
  405b78:	4901      	ldr	r1, [pc, #4]	; (405b80 <_cleanup_r+0x8>)
  405b7a:	f000 bbaf 	b.w	4062dc <_fwalk_reent>
  405b7e:	bf00      	nop
  405b80:	004073d1 	.word	0x004073d1

00405b84 <std.isra.0>:
  405b84:	b510      	push	{r4, lr}
  405b86:	2300      	movs	r3, #0
  405b88:	4604      	mov	r4, r0
  405b8a:	8181      	strh	r1, [r0, #12]
  405b8c:	81c2      	strh	r2, [r0, #14]
  405b8e:	6003      	str	r3, [r0, #0]
  405b90:	6043      	str	r3, [r0, #4]
  405b92:	6083      	str	r3, [r0, #8]
  405b94:	6643      	str	r3, [r0, #100]	; 0x64
  405b96:	6103      	str	r3, [r0, #16]
  405b98:	6143      	str	r3, [r0, #20]
  405b9a:	6183      	str	r3, [r0, #24]
  405b9c:	4619      	mov	r1, r3
  405b9e:	2208      	movs	r2, #8
  405ba0:	305c      	adds	r0, #92	; 0x5c
  405ba2:	f7fe fec3 	bl	40492c <memset>
  405ba6:	4807      	ldr	r0, [pc, #28]	; (405bc4 <std.isra.0+0x40>)
  405ba8:	4907      	ldr	r1, [pc, #28]	; (405bc8 <std.isra.0+0x44>)
  405baa:	4a08      	ldr	r2, [pc, #32]	; (405bcc <std.isra.0+0x48>)
  405bac:	4b08      	ldr	r3, [pc, #32]	; (405bd0 <std.isra.0+0x4c>)
  405bae:	6220      	str	r0, [r4, #32]
  405bb0:	61e4      	str	r4, [r4, #28]
  405bb2:	6261      	str	r1, [r4, #36]	; 0x24
  405bb4:	62a2      	str	r2, [r4, #40]	; 0x28
  405bb6:	62e3      	str	r3, [r4, #44]	; 0x2c
  405bb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405bc0:	f000 bbc4 	b.w	40634c <__retarget_lock_init_recursive>
  405bc4:	00407015 	.word	0x00407015
  405bc8:	00407039 	.word	0x00407039
  405bcc:	00407075 	.word	0x00407075
  405bd0:	00407095 	.word	0x00407095

00405bd4 <__sinit>:
  405bd4:	b510      	push	{r4, lr}
  405bd6:	4604      	mov	r4, r0
  405bd8:	4812      	ldr	r0, [pc, #72]	; (405c24 <__sinit+0x50>)
  405bda:	f000 fbbb 	bl	406354 <__retarget_lock_acquire_recursive>
  405bde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405be0:	b9d2      	cbnz	r2, 405c18 <__sinit+0x44>
  405be2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  405be6:	4810      	ldr	r0, [pc, #64]	; (405c28 <__sinit+0x54>)
  405be8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  405bec:	2103      	movs	r1, #3
  405bee:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  405bf2:	63e0      	str	r0, [r4, #60]	; 0x3c
  405bf4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  405bf8:	6860      	ldr	r0, [r4, #4]
  405bfa:	2104      	movs	r1, #4
  405bfc:	f7ff ffc2 	bl	405b84 <std.isra.0>
  405c00:	2201      	movs	r2, #1
  405c02:	2109      	movs	r1, #9
  405c04:	68a0      	ldr	r0, [r4, #8]
  405c06:	f7ff ffbd 	bl	405b84 <std.isra.0>
  405c0a:	2202      	movs	r2, #2
  405c0c:	2112      	movs	r1, #18
  405c0e:	68e0      	ldr	r0, [r4, #12]
  405c10:	f7ff ffb8 	bl	405b84 <std.isra.0>
  405c14:	2301      	movs	r3, #1
  405c16:	63a3      	str	r3, [r4, #56]	; 0x38
  405c18:	4802      	ldr	r0, [pc, #8]	; (405c24 <__sinit+0x50>)
  405c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405c1e:	f000 bb9b 	b.w	406358 <__retarget_lock_release_recursive>
  405c22:	bf00      	nop
  405c24:	20400b08 	.word	0x20400b08
  405c28:	00405b79 	.word	0x00405b79

00405c2c <__sfp_lock_acquire>:
  405c2c:	4801      	ldr	r0, [pc, #4]	; (405c34 <__sfp_lock_acquire+0x8>)
  405c2e:	f000 bb91 	b.w	406354 <__retarget_lock_acquire_recursive>
  405c32:	bf00      	nop
  405c34:	20400b1c 	.word	0x20400b1c

00405c38 <__sfp_lock_release>:
  405c38:	4801      	ldr	r0, [pc, #4]	; (405c40 <__sfp_lock_release+0x8>)
  405c3a:	f000 bb8d 	b.w	406358 <__retarget_lock_release_recursive>
  405c3e:	bf00      	nop
  405c40:	20400b1c 	.word	0x20400b1c

00405c44 <__libc_fini_array>:
  405c44:	b538      	push	{r3, r4, r5, lr}
  405c46:	4c0a      	ldr	r4, [pc, #40]	; (405c70 <__libc_fini_array+0x2c>)
  405c48:	4d0a      	ldr	r5, [pc, #40]	; (405c74 <__libc_fini_array+0x30>)
  405c4a:	1b64      	subs	r4, r4, r5
  405c4c:	10a4      	asrs	r4, r4, #2
  405c4e:	d00a      	beq.n	405c66 <__libc_fini_array+0x22>
  405c50:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405c54:	3b01      	subs	r3, #1
  405c56:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405c5a:	3c01      	subs	r4, #1
  405c5c:	f855 3904 	ldr.w	r3, [r5], #-4
  405c60:	4798      	blx	r3
  405c62:	2c00      	cmp	r4, #0
  405c64:	d1f9      	bne.n	405c5a <__libc_fini_array+0x16>
  405c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405c6a:	f002 bafb 	b.w	408264 <_fini>
  405c6e:	bf00      	nop
  405c70:	00408274 	.word	0x00408274
  405c74:	00408270 	.word	0x00408270

00405c78 <__fputwc>:
  405c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405c7c:	b082      	sub	sp, #8
  405c7e:	4680      	mov	r8, r0
  405c80:	4689      	mov	r9, r1
  405c82:	4614      	mov	r4, r2
  405c84:	f000 fb54 	bl	406330 <__locale_mb_cur_max>
  405c88:	2801      	cmp	r0, #1
  405c8a:	d036      	beq.n	405cfa <__fputwc+0x82>
  405c8c:	464a      	mov	r2, r9
  405c8e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405c92:	a901      	add	r1, sp, #4
  405c94:	4640      	mov	r0, r8
  405c96:	f001 fad9 	bl	40724c <_wcrtomb_r>
  405c9a:	1c42      	adds	r2, r0, #1
  405c9c:	4606      	mov	r6, r0
  405c9e:	d025      	beq.n	405cec <__fputwc+0x74>
  405ca0:	b3a8      	cbz	r0, 405d0e <__fputwc+0x96>
  405ca2:	f89d e004 	ldrb.w	lr, [sp, #4]
  405ca6:	2500      	movs	r5, #0
  405ca8:	f10d 0a04 	add.w	sl, sp, #4
  405cac:	e009      	b.n	405cc2 <__fputwc+0x4a>
  405cae:	6823      	ldr	r3, [r4, #0]
  405cb0:	1c5a      	adds	r2, r3, #1
  405cb2:	6022      	str	r2, [r4, #0]
  405cb4:	f883 e000 	strb.w	lr, [r3]
  405cb8:	3501      	adds	r5, #1
  405cba:	42b5      	cmp	r5, r6
  405cbc:	d227      	bcs.n	405d0e <__fputwc+0x96>
  405cbe:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405cc2:	68a3      	ldr	r3, [r4, #8]
  405cc4:	3b01      	subs	r3, #1
  405cc6:	2b00      	cmp	r3, #0
  405cc8:	60a3      	str	r3, [r4, #8]
  405cca:	daf0      	bge.n	405cae <__fputwc+0x36>
  405ccc:	69a7      	ldr	r7, [r4, #24]
  405cce:	42bb      	cmp	r3, r7
  405cd0:	4671      	mov	r1, lr
  405cd2:	4622      	mov	r2, r4
  405cd4:	4640      	mov	r0, r8
  405cd6:	db02      	blt.n	405cde <__fputwc+0x66>
  405cd8:	f1be 0f0a 	cmp.w	lr, #10
  405cdc:	d1e7      	bne.n	405cae <__fputwc+0x36>
  405cde:	f001 fa5d 	bl	40719c <__swbuf_r>
  405ce2:	1c43      	adds	r3, r0, #1
  405ce4:	d1e8      	bne.n	405cb8 <__fputwc+0x40>
  405ce6:	b002      	add	sp, #8
  405ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405cec:	89a3      	ldrh	r3, [r4, #12]
  405cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405cf2:	81a3      	strh	r3, [r4, #12]
  405cf4:	b002      	add	sp, #8
  405cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405cfa:	f109 33ff 	add.w	r3, r9, #4294967295
  405cfe:	2bfe      	cmp	r3, #254	; 0xfe
  405d00:	d8c4      	bhi.n	405c8c <__fputwc+0x14>
  405d02:	fa5f fe89 	uxtb.w	lr, r9
  405d06:	4606      	mov	r6, r0
  405d08:	f88d e004 	strb.w	lr, [sp, #4]
  405d0c:	e7cb      	b.n	405ca6 <__fputwc+0x2e>
  405d0e:	4648      	mov	r0, r9
  405d10:	b002      	add	sp, #8
  405d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d16:	bf00      	nop

00405d18 <_fputwc_r>:
  405d18:	b530      	push	{r4, r5, lr}
  405d1a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405d1c:	f013 0f01 	tst.w	r3, #1
  405d20:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405d24:	4614      	mov	r4, r2
  405d26:	b083      	sub	sp, #12
  405d28:	4605      	mov	r5, r0
  405d2a:	b29a      	uxth	r2, r3
  405d2c:	d101      	bne.n	405d32 <_fputwc_r+0x1a>
  405d2e:	0590      	lsls	r0, r2, #22
  405d30:	d51c      	bpl.n	405d6c <_fputwc_r+0x54>
  405d32:	0490      	lsls	r0, r2, #18
  405d34:	d406      	bmi.n	405d44 <_fputwc_r+0x2c>
  405d36:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405d40:	81a3      	strh	r3, [r4, #12]
  405d42:	6662      	str	r2, [r4, #100]	; 0x64
  405d44:	4628      	mov	r0, r5
  405d46:	4622      	mov	r2, r4
  405d48:	f7ff ff96 	bl	405c78 <__fputwc>
  405d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405d4e:	07da      	lsls	r2, r3, #31
  405d50:	4605      	mov	r5, r0
  405d52:	d402      	bmi.n	405d5a <_fputwc_r+0x42>
  405d54:	89a3      	ldrh	r3, [r4, #12]
  405d56:	059b      	lsls	r3, r3, #22
  405d58:	d502      	bpl.n	405d60 <_fputwc_r+0x48>
  405d5a:	4628      	mov	r0, r5
  405d5c:	b003      	add	sp, #12
  405d5e:	bd30      	pop	{r4, r5, pc}
  405d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405d62:	f000 faf9 	bl	406358 <__retarget_lock_release_recursive>
  405d66:	4628      	mov	r0, r5
  405d68:	b003      	add	sp, #12
  405d6a:	bd30      	pop	{r4, r5, pc}
  405d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405d6e:	9101      	str	r1, [sp, #4]
  405d70:	f000 faf0 	bl	406354 <__retarget_lock_acquire_recursive>
  405d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d78:	9901      	ldr	r1, [sp, #4]
  405d7a:	b29a      	uxth	r2, r3
  405d7c:	e7d9      	b.n	405d32 <_fputwc_r+0x1a>
  405d7e:	bf00      	nop

00405d80 <_malloc_trim_r>:
  405d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405d82:	4f24      	ldr	r7, [pc, #144]	; (405e14 <_malloc_trim_r+0x94>)
  405d84:	460c      	mov	r4, r1
  405d86:	4606      	mov	r6, r0
  405d88:	f000 ff80 	bl	406c8c <__malloc_lock>
  405d8c:	68bb      	ldr	r3, [r7, #8]
  405d8e:	685d      	ldr	r5, [r3, #4]
  405d90:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405d94:	310f      	adds	r1, #15
  405d96:	f025 0503 	bic.w	r5, r5, #3
  405d9a:	4429      	add	r1, r5
  405d9c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405da0:	f021 010f 	bic.w	r1, r1, #15
  405da4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405da8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405dac:	db07      	blt.n	405dbe <_malloc_trim_r+0x3e>
  405dae:	2100      	movs	r1, #0
  405db0:	4630      	mov	r0, r6
  405db2:	f001 f91d 	bl	406ff0 <_sbrk_r>
  405db6:	68bb      	ldr	r3, [r7, #8]
  405db8:	442b      	add	r3, r5
  405dba:	4298      	cmp	r0, r3
  405dbc:	d004      	beq.n	405dc8 <_malloc_trim_r+0x48>
  405dbe:	4630      	mov	r0, r6
  405dc0:	f000 ff6a 	bl	406c98 <__malloc_unlock>
  405dc4:	2000      	movs	r0, #0
  405dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405dc8:	4261      	negs	r1, r4
  405dca:	4630      	mov	r0, r6
  405dcc:	f001 f910 	bl	406ff0 <_sbrk_r>
  405dd0:	3001      	adds	r0, #1
  405dd2:	d00d      	beq.n	405df0 <_malloc_trim_r+0x70>
  405dd4:	4b10      	ldr	r3, [pc, #64]	; (405e18 <_malloc_trim_r+0x98>)
  405dd6:	68ba      	ldr	r2, [r7, #8]
  405dd8:	6819      	ldr	r1, [r3, #0]
  405dda:	1b2d      	subs	r5, r5, r4
  405ddc:	f045 0501 	orr.w	r5, r5, #1
  405de0:	4630      	mov	r0, r6
  405de2:	1b09      	subs	r1, r1, r4
  405de4:	6055      	str	r5, [r2, #4]
  405de6:	6019      	str	r1, [r3, #0]
  405de8:	f000 ff56 	bl	406c98 <__malloc_unlock>
  405dec:	2001      	movs	r0, #1
  405dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405df0:	2100      	movs	r1, #0
  405df2:	4630      	mov	r0, r6
  405df4:	f001 f8fc 	bl	406ff0 <_sbrk_r>
  405df8:	68ba      	ldr	r2, [r7, #8]
  405dfa:	1a83      	subs	r3, r0, r2
  405dfc:	2b0f      	cmp	r3, #15
  405dfe:	ddde      	ble.n	405dbe <_malloc_trim_r+0x3e>
  405e00:	4c06      	ldr	r4, [pc, #24]	; (405e1c <_malloc_trim_r+0x9c>)
  405e02:	4905      	ldr	r1, [pc, #20]	; (405e18 <_malloc_trim_r+0x98>)
  405e04:	6824      	ldr	r4, [r4, #0]
  405e06:	f043 0301 	orr.w	r3, r3, #1
  405e0a:	1b00      	subs	r0, r0, r4
  405e0c:	6053      	str	r3, [r2, #4]
  405e0e:	6008      	str	r0, [r1, #0]
  405e10:	e7d5      	b.n	405dbe <_malloc_trim_r+0x3e>
  405e12:	bf00      	nop
  405e14:	204005d8 	.word	0x204005d8
  405e18:	20400abc 	.word	0x20400abc
  405e1c:	204009e0 	.word	0x204009e0

00405e20 <_free_r>:
  405e20:	2900      	cmp	r1, #0
  405e22:	d044      	beq.n	405eae <_free_r+0x8e>
  405e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405e28:	460d      	mov	r5, r1
  405e2a:	4680      	mov	r8, r0
  405e2c:	f000 ff2e 	bl	406c8c <__malloc_lock>
  405e30:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405e34:	4969      	ldr	r1, [pc, #420]	; (405fdc <_free_r+0x1bc>)
  405e36:	f027 0301 	bic.w	r3, r7, #1
  405e3a:	f1a5 0408 	sub.w	r4, r5, #8
  405e3e:	18e2      	adds	r2, r4, r3
  405e40:	688e      	ldr	r6, [r1, #8]
  405e42:	6850      	ldr	r0, [r2, #4]
  405e44:	42b2      	cmp	r2, r6
  405e46:	f020 0003 	bic.w	r0, r0, #3
  405e4a:	d05e      	beq.n	405f0a <_free_r+0xea>
  405e4c:	07fe      	lsls	r6, r7, #31
  405e4e:	6050      	str	r0, [r2, #4]
  405e50:	d40b      	bmi.n	405e6a <_free_r+0x4a>
  405e52:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405e56:	1be4      	subs	r4, r4, r7
  405e58:	f101 0e08 	add.w	lr, r1, #8
  405e5c:	68a5      	ldr	r5, [r4, #8]
  405e5e:	4575      	cmp	r5, lr
  405e60:	443b      	add	r3, r7
  405e62:	d06d      	beq.n	405f40 <_free_r+0x120>
  405e64:	68e7      	ldr	r7, [r4, #12]
  405e66:	60ef      	str	r7, [r5, #12]
  405e68:	60bd      	str	r5, [r7, #8]
  405e6a:	1815      	adds	r5, r2, r0
  405e6c:	686d      	ldr	r5, [r5, #4]
  405e6e:	07ed      	lsls	r5, r5, #31
  405e70:	d53e      	bpl.n	405ef0 <_free_r+0xd0>
  405e72:	f043 0201 	orr.w	r2, r3, #1
  405e76:	6062      	str	r2, [r4, #4]
  405e78:	50e3      	str	r3, [r4, r3]
  405e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405e7e:	d217      	bcs.n	405eb0 <_free_r+0x90>
  405e80:	08db      	lsrs	r3, r3, #3
  405e82:	1c58      	adds	r0, r3, #1
  405e84:	109a      	asrs	r2, r3, #2
  405e86:	684d      	ldr	r5, [r1, #4]
  405e88:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405e8c:	60a7      	str	r7, [r4, #8]
  405e8e:	2301      	movs	r3, #1
  405e90:	4093      	lsls	r3, r2
  405e92:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405e96:	432b      	orrs	r3, r5
  405e98:	3a08      	subs	r2, #8
  405e9a:	60e2      	str	r2, [r4, #12]
  405e9c:	604b      	str	r3, [r1, #4]
  405e9e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405ea2:	60fc      	str	r4, [r7, #12]
  405ea4:	4640      	mov	r0, r8
  405ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405eaa:	f000 bef5 	b.w	406c98 <__malloc_unlock>
  405eae:	4770      	bx	lr
  405eb0:	0a5a      	lsrs	r2, r3, #9
  405eb2:	2a04      	cmp	r2, #4
  405eb4:	d852      	bhi.n	405f5c <_free_r+0x13c>
  405eb6:	099a      	lsrs	r2, r3, #6
  405eb8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405ebc:	00ff      	lsls	r7, r7, #3
  405ebe:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405ec2:	19c8      	adds	r0, r1, r7
  405ec4:	59ca      	ldr	r2, [r1, r7]
  405ec6:	3808      	subs	r0, #8
  405ec8:	4290      	cmp	r0, r2
  405eca:	d04f      	beq.n	405f6c <_free_r+0x14c>
  405ecc:	6851      	ldr	r1, [r2, #4]
  405ece:	f021 0103 	bic.w	r1, r1, #3
  405ed2:	428b      	cmp	r3, r1
  405ed4:	d232      	bcs.n	405f3c <_free_r+0x11c>
  405ed6:	6892      	ldr	r2, [r2, #8]
  405ed8:	4290      	cmp	r0, r2
  405eda:	d1f7      	bne.n	405ecc <_free_r+0xac>
  405edc:	68c3      	ldr	r3, [r0, #12]
  405ede:	60a0      	str	r0, [r4, #8]
  405ee0:	60e3      	str	r3, [r4, #12]
  405ee2:	609c      	str	r4, [r3, #8]
  405ee4:	60c4      	str	r4, [r0, #12]
  405ee6:	4640      	mov	r0, r8
  405ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405eec:	f000 bed4 	b.w	406c98 <__malloc_unlock>
  405ef0:	6895      	ldr	r5, [r2, #8]
  405ef2:	4f3b      	ldr	r7, [pc, #236]	; (405fe0 <_free_r+0x1c0>)
  405ef4:	42bd      	cmp	r5, r7
  405ef6:	4403      	add	r3, r0
  405ef8:	d040      	beq.n	405f7c <_free_r+0x15c>
  405efa:	68d0      	ldr	r0, [r2, #12]
  405efc:	60e8      	str	r0, [r5, #12]
  405efe:	f043 0201 	orr.w	r2, r3, #1
  405f02:	6085      	str	r5, [r0, #8]
  405f04:	6062      	str	r2, [r4, #4]
  405f06:	50e3      	str	r3, [r4, r3]
  405f08:	e7b7      	b.n	405e7a <_free_r+0x5a>
  405f0a:	07ff      	lsls	r7, r7, #31
  405f0c:	4403      	add	r3, r0
  405f0e:	d407      	bmi.n	405f20 <_free_r+0x100>
  405f10:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405f14:	1aa4      	subs	r4, r4, r2
  405f16:	4413      	add	r3, r2
  405f18:	68a0      	ldr	r0, [r4, #8]
  405f1a:	68e2      	ldr	r2, [r4, #12]
  405f1c:	60c2      	str	r2, [r0, #12]
  405f1e:	6090      	str	r0, [r2, #8]
  405f20:	4a30      	ldr	r2, [pc, #192]	; (405fe4 <_free_r+0x1c4>)
  405f22:	6812      	ldr	r2, [r2, #0]
  405f24:	f043 0001 	orr.w	r0, r3, #1
  405f28:	4293      	cmp	r3, r2
  405f2a:	6060      	str	r0, [r4, #4]
  405f2c:	608c      	str	r4, [r1, #8]
  405f2e:	d3b9      	bcc.n	405ea4 <_free_r+0x84>
  405f30:	4b2d      	ldr	r3, [pc, #180]	; (405fe8 <_free_r+0x1c8>)
  405f32:	4640      	mov	r0, r8
  405f34:	6819      	ldr	r1, [r3, #0]
  405f36:	f7ff ff23 	bl	405d80 <_malloc_trim_r>
  405f3a:	e7b3      	b.n	405ea4 <_free_r+0x84>
  405f3c:	4610      	mov	r0, r2
  405f3e:	e7cd      	b.n	405edc <_free_r+0xbc>
  405f40:	1811      	adds	r1, r2, r0
  405f42:	6849      	ldr	r1, [r1, #4]
  405f44:	07c9      	lsls	r1, r1, #31
  405f46:	d444      	bmi.n	405fd2 <_free_r+0x1b2>
  405f48:	6891      	ldr	r1, [r2, #8]
  405f4a:	68d2      	ldr	r2, [r2, #12]
  405f4c:	60ca      	str	r2, [r1, #12]
  405f4e:	4403      	add	r3, r0
  405f50:	f043 0001 	orr.w	r0, r3, #1
  405f54:	6091      	str	r1, [r2, #8]
  405f56:	6060      	str	r0, [r4, #4]
  405f58:	50e3      	str	r3, [r4, r3]
  405f5a:	e7a3      	b.n	405ea4 <_free_r+0x84>
  405f5c:	2a14      	cmp	r2, #20
  405f5e:	d816      	bhi.n	405f8e <_free_r+0x16e>
  405f60:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405f64:	00ff      	lsls	r7, r7, #3
  405f66:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405f6a:	e7aa      	b.n	405ec2 <_free_r+0xa2>
  405f6c:	10aa      	asrs	r2, r5, #2
  405f6e:	2301      	movs	r3, #1
  405f70:	684d      	ldr	r5, [r1, #4]
  405f72:	4093      	lsls	r3, r2
  405f74:	432b      	orrs	r3, r5
  405f76:	604b      	str	r3, [r1, #4]
  405f78:	4603      	mov	r3, r0
  405f7a:	e7b0      	b.n	405ede <_free_r+0xbe>
  405f7c:	f043 0201 	orr.w	r2, r3, #1
  405f80:	614c      	str	r4, [r1, #20]
  405f82:	610c      	str	r4, [r1, #16]
  405f84:	60e5      	str	r5, [r4, #12]
  405f86:	60a5      	str	r5, [r4, #8]
  405f88:	6062      	str	r2, [r4, #4]
  405f8a:	50e3      	str	r3, [r4, r3]
  405f8c:	e78a      	b.n	405ea4 <_free_r+0x84>
  405f8e:	2a54      	cmp	r2, #84	; 0x54
  405f90:	d806      	bhi.n	405fa0 <_free_r+0x180>
  405f92:	0b1a      	lsrs	r2, r3, #12
  405f94:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405f98:	00ff      	lsls	r7, r7, #3
  405f9a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405f9e:	e790      	b.n	405ec2 <_free_r+0xa2>
  405fa0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405fa4:	d806      	bhi.n	405fb4 <_free_r+0x194>
  405fa6:	0bda      	lsrs	r2, r3, #15
  405fa8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405fac:	00ff      	lsls	r7, r7, #3
  405fae:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405fb2:	e786      	b.n	405ec2 <_free_r+0xa2>
  405fb4:	f240 5054 	movw	r0, #1364	; 0x554
  405fb8:	4282      	cmp	r2, r0
  405fba:	d806      	bhi.n	405fca <_free_r+0x1aa>
  405fbc:	0c9a      	lsrs	r2, r3, #18
  405fbe:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405fc2:	00ff      	lsls	r7, r7, #3
  405fc4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405fc8:	e77b      	b.n	405ec2 <_free_r+0xa2>
  405fca:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405fce:	257e      	movs	r5, #126	; 0x7e
  405fd0:	e777      	b.n	405ec2 <_free_r+0xa2>
  405fd2:	f043 0101 	orr.w	r1, r3, #1
  405fd6:	6061      	str	r1, [r4, #4]
  405fd8:	6013      	str	r3, [r2, #0]
  405fda:	e763      	b.n	405ea4 <_free_r+0x84>
  405fdc:	204005d8 	.word	0x204005d8
  405fe0:	204005e0 	.word	0x204005e0
  405fe4:	204009e4 	.word	0x204009e4
  405fe8:	20400aec 	.word	0x20400aec

00405fec <__sfvwrite_r>:
  405fec:	6893      	ldr	r3, [r2, #8]
  405fee:	2b00      	cmp	r3, #0
  405ff0:	d073      	beq.n	4060da <__sfvwrite_r+0xee>
  405ff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ff6:	898b      	ldrh	r3, [r1, #12]
  405ff8:	b083      	sub	sp, #12
  405ffa:	460c      	mov	r4, r1
  405ffc:	0719      	lsls	r1, r3, #28
  405ffe:	9000      	str	r0, [sp, #0]
  406000:	4616      	mov	r6, r2
  406002:	d526      	bpl.n	406052 <__sfvwrite_r+0x66>
  406004:	6922      	ldr	r2, [r4, #16]
  406006:	b322      	cbz	r2, 406052 <__sfvwrite_r+0x66>
  406008:	f013 0002 	ands.w	r0, r3, #2
  40600c:	6835      	ldr	r5, [r6, #0]
  40600e:	d02c      	beq.n	40606a <__sfvwrite_r+0x7e>
  406010:	f04f 0900 	mov.w	r9, #0
  406014:	4fb0      	ldr	r7, [pc, #704]	; (4062d8 <__sfvwrite_r+0x2ec>)
  406016:	46c8      	mov	r8, r9
  406018:	46b2      	mov	sl, r6
  40601a:	45b8      	cmp	r8, r7
  40601c:	4643      	mov	r3, r8
  40601e:	464a      	mov	r2, r9
  406020:	bf28      	it	cs
  406022:	463b      	movcs	r3, r7
  406024:	9800      	ldr	r0, [sp, #0]
  406026:	f1b8 0f00 	cmp.w	r8, #0
  40602a:	d050      	beq.n	4060ce <__sfvwrite_r+0xe2>
  40602c:	69e1      	ldr	r1, [r4, #28]
  40602e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406030:	47b0      	blx	r6
  406032:	2800      	cmp	r0, #0
  406034:	dd58      	ble.n	4060e8 <__sfvwrite_r+0xfc>
  406036:	f8da 3008 	ldr.w	r3, [sl, #8]
  40603a:	1a1b      	subs	r3, r3, r0
  40603c:	4481      	add	r9, r0
  40603e:	eba8 0800 	sub.w	r8, r8, r0
  406042:	f8ca 3008 	str.w	r3, [sl, #8]
  406046:	2b00      	cmp	r3, #0
  406048:	d1e7      	bne.n	40601a <__sfvwrite_r+0x2e>
  40604a:	2000      	movs	r0, #0
  40604c:	b003      	add	sp, #12
  40604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406052:	4621      	mov	r1, r4
  406054:	9800      	ldr	r0, [sp, #0]
  406056:	f7ff fc51 	bl	4058fc <__swsetup_r>
  40605a:	2800      	cmp	r0, #0
  40605c:	f040 8133 	bne.w	4062c6 <__sfvwrite_r+0x2da>
  406060:	89a3      	ldrh	r3, [r4, #12]
  406062:	6835      	ldr	r5, [r6, #0]
  406064:	f013 0002 	ands.w	r0, r3, #2
  406068:	d1d2      	bne.n	406010 <__sfvwrite_r+0x24>
  40606a:	f013 0901 	ands.w	r9, r3, #1
  40606e:	d145      	bne.n	4060fc <__sfvwrite_r+0x110>
  406070:	464f      	mov	r7, r9
  406072:	9601      	str	r6, [sp, #4]
  406074:	b337      	cbz	r7, 4060c4 <__sfvwrite_r+0xd8>
  406076:	059a      	lsls	r2, r3, #22
  406078:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40607c:	f140 8083 	bpl.w	406186 <__sfvwrite_r+0x19a>
  406080:	4547      	cmp	r7, r8
  406082:	46c3      	mov	fp, r8
  406084:	f0c0 80ab 	bcc.w	4061de <__sfvwrite_r+0x1f2>
  406088:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40608c:	f040 80ac 	bne.w	4061e8 <__sfvwrite_r+0x1fc>
  406090:	6820      	ldr	r0, [r4, #0]
  406092:	46ba      	mov	sl, r7
  406094:	465a      	mov	r2, fp
  406096:	4649      	mov	r1, r9
  406098:	f000 fd94 	bl	406bc4 <memmove>
  40609c:	68a2      	ldr	r2, [r4, #8]
  40609e:	6823      	ldr	r3, [r4, #0]
  4060a0:	eba2 0208 	sub.w	r2, r2, r8
  4060a4:	445b      	add	r3, fp
  4060a6:	60a2      	str	r2, [r4, #8]
  4060a8:	6023      	str	r3, [r4, #0]
  4060aa:	9a01      	ldr	r2, [sp, #4]
  4060ac:	6893      	ldr	r3, [r2, #8]
  4060ae:	eba3 030a 	sub.w	r3, r3, sl
  4060b2:	44d1      	add	r9, sl
  4060b4:	eba7 070a 	sub.w	r7, r7, sl
  4060b8:	6093      	str	r3, [r2, #8]
  4060ba:	2b00      	cmp	r3, #0
  4060bc:	d0c5      	beq.n	40604a <__sfvwrite_r+0x5e>
  4060be:	89a3      	ldrh	r3, [r4, #12]
  4060c0:	2f00      	cmp	r7, #0
  4060c2:	d1d8      	bne.n	406076 <__sfvwrite_r+0x8a>
  4060c4:	f8d5 9000 	ldr.w	r9, [r5]
  4060c8:	686f      	ldr	r7, [r5, #4]
  4060ca:	3508      	adds	r5, #8
  4060cc:	e7d2      	b.n	406074 <__sfvwrite_r+0x88>
  4060ce:	f8d5 9000 	ldr.w	r9, [r5]
  4060d2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4060d6:	3508      	adds	r5, #8
  4060d8:	e79f      	b.n	40601a <__sfvwrite_r+0x2e>
  4060da:	2000      	movs	r0, #0
  4060dc:	4770      	bx	lr
  4060de:	4621      	mov	r1, r4
  4060e0:	9800      	ldr	r0, [sp, #0]
  4060e2:	f7ff fd1f 	bl	405b24 <_fflush_r>
  4060e6:	b370      	cbz	r0, 406146 <__sfvwrite_r+0x15a>
  4060e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4060ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4060f0:	f04f 30ff 	mov.w	r0, #4294967295
  4060f4:	81a3      	strh	r3, [r4, #12]
  4060f6:	b003      	add	sp, #12
  4060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060fc:	4681      	mov	r9, r0
  4060fe:	4633      	mov	r3, r6
  406100:	464e      	mov	r6, r9
  406102:	46a8      	mov	r8, r5
  406104:	469a      	mov	sl, r3
  406106:	464d      	mov	r5, r9
  406108:	b34e      	cbz	r6, 40615e <__sfvwrite_r+0x172>
  40610a:	b380      	cbz	r0, 40616e <__sfvwrite_r+0x182>
  40610c:	6820      	ldr	r0, [r4, #0]
  40610e:	6923      	ldr	r3, [r4, #16]
  406110:	6962      	ldr	r2, [r4, #20]
  406112:	45b1      	cmp	r9, r6
  406114:	46cb      	mov	fp, r9
  406116:	bf28      	it	cs
  406118:	46b3      	movcs	fp, r6
  40611a:	4298      	cmp	r0, r3
  40611c:	465f      	mov	r7, fp
  40611e:	d904      	bls.n	40612a <__sfvwrite_r+0x13e>
  406120:	68a3      	ldr	r3, [r4, #8]
  406122:	4413      	add	r3, r2
  406124:	459b      	cmp	fp, r3
  406126:	f300 80a6 	bgt.w	406276 <__sfvwrite_r+0x28a>
  40612a:	4593      	cmp	fp, r2
  40612c:	db4b      	blt.n	4061c6 <__sfvwrite_r+0x1da>
  40612e:	4613      	mov	r3, r2
  406130:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406132:	69e1      	ldr	r1, [r4, #28]
  406134:	9800      	ldr	r0, [sp, #0]
  406136:	462a      	mov	r2, r5
  406138:	47b8      	blx	r7
  40613a:	1e07      	subs	r7, r0, #0
  40613c:	ddd4      	ble.n	4060e8 <__sfvwrite_r+0xfc>
  40613e:	ebb9 0907 	subs.w	r9, r9, r7
  406142:	d0cc      	beq.n	4060de <__sfvwrite_r+0xf2>
  406144:	2001      	movs	r0, #1
  406146:	f8da 3008 	ldr.w	r3, [sl, #8]
  40614a:	1bdb      	subs	r3, r3, r7
  40614c:	443d      	add	r5, r7
  40614e:	1bf6      	subs	r6, r6, r7
  406150:	f8ca 3008 	str.w	r3, [sl, #8]
  406154:	2b00      	cmp	r3, #0
  406156:	f43f af78 	beq.w	40604a <__sfvwrite_r+0x5e>
  40615a:	2e00      	cmp	r6, #0
  40615c:	d1d5      	bne.n	40610a <__sfvwrite_r+0x11e>
  40615e:	f108 0308 	add.w	r3, r8, #8
  406162:	e913 0060 	ldmdb	r3, {r5, r6}
  406166:	4698      	mov	r8, r3
  406168:	3308      	adds	r3, #8
  40616a:	2e00      	cmp	r6, #0
  40616c:	d0f9      	beq.n	406162 <__sfvwrite_r+0x176>
  40616e:	4632      	mov	r2, r6
  406170:	210a      	movs	r1, #10
  406172:	4628      	mov	r0, r5
  406174:	f000 fc3c 	bl	4069f0 <memchr>
  406178:	2800      	cmp	r0, #0
  40617a:	f000 80a1 	beq.w	4062c0 <__sfvwrite_r+0x2d4>
  40617e:	3001      	adds	r0, #1
  406180:	eba0 0905 	sub.w	r9, r0, r5
  406184:	e7c2      	b.n	40610c <__sfvwrite_r+0x120>
  406186:	6820      	ldr	r0, [r4, #0]
  406188:	6923      	ldr	r3, [r4, #16]
  40618a:	4298      	cmp	r0, r3
  40618c:	d802      	bhi.n	406194 <__sfvwrite_r+0x1a8>
  40618e:	6963      	ldr	r3, [r4, #20]
  406190:	429f      	cmp	r7, r3
  406192:	d25d      	bcs.n	406250 <__sfvwrite_r+0x264>
  406194:	45b8      	cmp	r8, r7
  406196:	bf28      	it	cs
  406198:	46b8      	movcs	r8, r7
  40619a:	4642      	mov	r2, r8
  40619c:	4649      	mov	r1, r9
  40619e:	f000 fd11 	bl	406bc4 <memmove>
  4061a2:	68a3      	ldr	r3, [r4, #8]
  4061a4:	6822      	ldr	r2, [r4, #0]
  4061a6:	eba3 0308 	sub.w	r3, r3, r8
  4061aa:	4442      	add	r2, r8
  4061ac:	60a3      	str	r3, [r4, #8]
  4061ae:	6022      	str	r2, [r4, #0]
  4061b0:	b10b      	cbz	r3, 4061b6 <__sfvwrite_r+0x1ca>
  4061b2:	46c2      	mov	sl, r8
  4061b4:	e779      	b.n	4060aa <__sfvwrite_r+0xbe>
  4061b6:	4621      	mov	r1, r4
  4061b8:	9800      	ldr	r0, [sp, #0]
  4061ba:	f7ff fcb3 	bl	405b24 <_fflush_r>
  4061be:	2800      	cmp	r0, #0
  4061c0:	d192      	bne.n	4060e8 <__sfvwrite_r+0xfc>
  4061c2:	46c2      	mov	sl, r8
  4061c4:	e771      	b.n	4060aa <__sfvwrite_r+0xbe>
  4061c6:	465a      	mov	r2, fp
  4061c8:	4629      	mov	r1, r5
  4061ca:	f000 fcfb 	bl	406bc4 <memmove>
  4061ce:	68a2      	ldr	r2, [r4, #8]
  4061d0:	6823      	ldr	r3, [r4, #0]
  4061d2:	eba2 020b 	sub.w	r2, r2, fp
  4061d6:	445b      	add	r3, fp
  4061d8:	60a2      	str	r2, [r4, #8]
  4061da:	6023      	str	r3, [r4, #0]
  4061dc:	e7af      	b.n	40613e <__sfvwrite_r+0x152>
  4061de:	6820      	ldr	r0, [r4, #0]
  4061e0:	46b8      	mov	r8, r7
  4061e2:	46ba      	mov	sl, r7
  4061e4:	46bb      	mov	fp, r7
  4061e6:	e755      	b.n	406094 <__sfvwrite_r+0xa8>
  4061e8:	6962      	ldr	r2, [r4, #20]
  4061ea:	6820      	ldr	r0, [r4, #0]
  4061ec:	6921      	ldr	r1, [r4, #16]
  4061ee:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4061f2:	eba0 0a01 	sub.w	sl, r0, r1
  4061f6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4061fa:	f10a 0001 	add.w	r0, sl, #1
  4061fe:	ea4f 0868 	mov.w	r8, r8, asr #1
  406202:	4438      	add	r0, r7
  406204:	4540      	cmp	r0, r8
  406206:	4642      	mov	r2, r8
  406208:	bf84      	itt	hi
  40620a:	4680      	movhi	r8, r0
  40620c:	4642      	movhi	r2, r8
  40620e:	055b      	lsls	r3, r3, #21
  406210:	d544      	bpl.n	40629c <__sfvwrite_r+0x2b0>
  406212:	4611      	mov	r1, r2
  406214:	9800      	ldr	r0, [sp, #0]
  406216:	f000 f921 	bl	40645c <_malloc_r>
  40621a:	4683      	mov	fp, r0
  40621c:	2800      	cmp	r0, #0
  40621e:	d055      	beq.n	4062cc <__sfvwrite_r+0x2e0>
  406220:	4652      	mov	r2, sl
  406222:	6921      	ldr	r1, [r4, #16]
  406224:	f000 fc34 	bl	406a90 <memcpy>
  406228:	89a3      	ldrh	r3, [r4, #12]
  40622a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406232:	81a3      	strh	r3, [r4, #12]
  406234:	eb0b 000a 	add.w	r0, fp, sl
  406238:	eba8 030a 	sub.w	r3, r8, sl
  40623c:	f8c4 b010 	str.w	fp, [r4, #16]
  406240:	f8c4 8014 	str.w	r8, [r4, #20]
  406244:	6020      	str	r0, [r4, #0]
  406246:	60a3      	str	r3, [r4, #8]
  406248:	46b8      	mov	r8, r7
  40624a:	46ba      	mov	sl, r7
  40624c:	46bb      	mov	fp, r7
  40624e:	e721      	b.n	406094 <__sfvwrite_r+0xa8>
  406250:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406254:	42b9      	cmp	r1, r7
  406256:	bf28      	it	cs
  406258:	4639      	movcs	r1, r7
  40625a:	464a      	mov	r2, r9
  40625c:	fb91 f1f3 	sdiv	r1, r1, r3
  406260:	9800      	ldr	r0, [sp, #0]
  406262:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406264:	fb03 f301 	mul.w	r3, r3, r1
  406268:	69e1      	ldr	r1, [r4, #28]
  40626a:	47b0      	blx	r6
  40626c:	f1b0 0a00 	subs.w	sl, r0, #0
  406270:	f73f af1b 	bgt.w	4060aa <__sfvwrite_r+0xbe>
  406274:	e738      	b.n	4060e8 <__sfvwrite_r+0xfc>
  406276:	461a      	mov	r2, r3
  406278:	4629      	mov	r1, r5
  40627a:	9301      	str	r3, [sp, #4]
  40627c:	f000 fca2 	bl	406bc4 <memmove>
  406280:	6822      	ldr	r2, [r4, #0]
  406282:	9b01      	ldr	r3, [sp, #4]
  406284:	9800      	ldr	r0, [sp, #0]
  406286:	441a      	add	r2, r3
  406288:	6022      	str	r2, [r4, #0]
  40628a:	4621      	mov	r1, r4
  40628c:	f7ff fc4a 	bl	405b24 <_fflush_r>
  406290:	9b01      	ldr	r3, [sp, #4]
  406292:	2800      	cmp	r0, #0
  406294:	f47f af28 	bne.w	4060e8 <__sfvwrite_r+0xfc>
  406298:	461f      	mov	r7, r3
  40629a:	e750      	b.n	40613e <__sfvwrite_r+0x152>
  40629c:	9800      	ldr	r0, [sp, #0]
  40629e:	f000 fd01 	bl	406ca4 <_realloc_r>
  4062a2:	4683      	mov	fp, r0
  4062a4:	2800      	cmp	r0, #0
  4062a6:	d1c5      	bne.n	406234 <__sfvwrite_r+0x248>
  4062a8:	9d00      	ldr	r5, [sp, #0]
  4062aa:	6921      	ldr	r1, [r4, #16]
  4062ac:	4628      	mov	r0, r5
  4062ae:	f7ff fdb7 	bl	405e20 <_free_r>
  4062b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062b6:	220c      	movs	r2, #12
  4062b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4062bc:	602a      	str	r2, [r5, #0]
  4062be:	e715      	b.n	4060ec <__sfvwrite_r+0x100>
  4062c0:	f106 0901 	add.w	r9, r6, #1
  4062c4:	e722      	b.n	40610c <__sfvwrite_r+0x120>
  4062c6:	f04f 30ff 	mov.w	r0, #4294967295
  4062ca:	e6bf      	b.n	40604c <__sfvwrite_r+0x60>
  4062cc:	9a00      	ldr	r2, [sp, #0]
  4062ce:	230c      	movs	r3, #12
  4062d0:	6013      	str	r3, [r2, #0]
  4062d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062d6:	e709      	b.n	4060ec <__sfvwrite_r+0x100>
  4062d8:	7ffffc00 	.word	0x7ffffc00

004062dc <_fwalk_reent>:
  4062dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4062e0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4062e4:	d01f      	beq.n	406326 <_fwalk_reent+0x4a>
  4062e6:	4688      	mov	r8, r1
  4062e8:	4606      	mov	r6, r0
  4062ea:	f04f 0900 	mov.w	r9, #0
  4062ee:	687d      	ldr	r5, [r7, #4]
  4062f0:	68bc      	ldr	r4, [r7, #8]
  4062f2:	3d01      	subs	r5, #1
  4062f4:	d411      	bmi.n	40631a <_fwalk_reent+0x3e>
  4062f6:	89a3      	ldrh	r3, [r4, #12]
  4062f8:	2b01      	cmp	r3, #1
  4062fa:	f105 35ff 	add.w	r5, r5, #4294967295
  4062fe:	d908      	bls.n	406312 <_fwalk_reent+0x36>
  406300:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406304:	3301      	adds	r3, #1
  406306:	4621      	mov	r1, r4
  406308:	4630      	mov	r0, r6
  40630a:	d002      	beq.n	406312 <_fwalk_reent+0x36>
  40630c:	47c0      	blx	r8
  40630e:	ea49 0900 	orr.w	r9, r9, r0
  406312:	1c6b      	adds	r3, r5, #1
  406314:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406318:	d1ed      	bne.n	4062f6 <_fwalk_reent+0x1a>
  40631a:	683f      	ldr	r7, [r7, #0]
  40631c:	2f00      	cmp	r7, #0
  40631e:	d1e6      	bne.n	4062ee <_fwalk_reent+0x12>
  406320:	4648      	mov	r0, r9
  406322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406326:	46b9      	mov	r9, r7
  406328:	4648      	mov	r0, r9
  40632a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40632e:	bf00      	nop

00406330 <__locale_mb_cur_max>:
  406330:	4b04      	ldr	r3, [pc, #16]	; (406344 <__locale_mb_cur_max+0x14>)
  406332:	4a05      	ldr	r2, [pc, #20]	; (406348 <__locale_mb_cur_max+0x18>)
  406334:	681b      	ldr	r3, [r3, #0]
  406336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  406338:	2b00      	cmp	r3, #0
  40633a:	bf08      	it	eq
  40633c:	4613      	moveq	r3, r2
  40633e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406342:	4770      	bx	lr
  406344:	20400038 	.word	0x20400038
  406348:	2040046c 	.word	0x2040046c

0040634c <__retarget_lock_init_recursive>:
  40634c:	4770      	bx	lr
  40634e:	bf00      	nop

00406350 <__retarget_lock_close_recursive>:
  406350:	4770      	bx	lr
  406352:	bf00      	nop

00406354 <__retarget_lock_acquire_recursive>:
  406354:	4770      	bx	lr
  406356:	bf00      	nop

00406358 <__retarget_lock_release_recursive>:
  406358:	4770      	bx	lr
  40635a:	bf00      	nop

0040635c <__swhatbuf_r>:
  40635c:	b570      	push	{r4, r5, r6, lr}
  40635e:	460c      	mov	r4, r1
  406360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406364:	2900      	cmp	r1, #0
  406366:	b090      	sub	sp, #64	; 0x40
  406368:	4615      	mov	r5, r2
  40636a:	461e      	mov	r6, r3
  40636c:	db14      	blt.n	406398 <__swhatbuf_r+0x3c>
  40636e:	aa01      	add	r2, sp, #4
  406370:	f001 f890 	bl	407494 <_fstat_r>
  406374:	2800      	cmp	r0, #0
  406376:	db0f      	blt.n	406398 <__swhatbuf_r+0x3c>
  406378:	9a02      	ldr	r2, [sp, #8]
  40637a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40637e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406382:	fab2 f282 	clz	r2, r2
  406386:	0952      	lsrs	r2, r2, #5
  406388:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40638c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406390:	6032      	str	r2, [r6, #0]
  406392:	602b      	str	r3, [r5, #0]
  406394:	b010      	add	sp, #64	; 0x40
  406396:	bd70      	pop	{r4, r5, r6, pc}
  406398:	89a2      	ldrh	r2, [r4, #12]
  40639a:	2300      	movs	r3, #0
  40639c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4063a0:	6033      	str	r3, [r6, #0]
  4063a2:	d004      	beq.n	4063ae <__swhatbuf_r+0x52>
  4063a4:	2240      	movs	r2, #64	; 0x40
  4063a6:	4618      	mov	r0, r3
  4063a8:	602a      	str	r2, [r5, #0]
  4063aa:	b010      	add	sp, #64	; 0x40
  4063ac:	bd70      	pop	{r4, r5, r6, pc}
  4063ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4063b2:	602b      	str	r3, [r5, #0]
  4063b4:	b010      	add	sp, #64	; 0x40
  4063b6:	bd70      	pop	{r4, r5, r6, pc}

004063b8 <__smakebuf_r>:
  4063b8:	898a      	ldrh	r2, [r1, #12]
  4063ba:	0792      	lsls	r2, r2, #30
  4063bc:	460b      	mov	r3, r1
  4063be:	d506      	bpl.n	4063ce <__smakebuf_r+0x16>
  4063c0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4063c4:	2101      	movs	r1, #1
  4063c6:	601a      	str	r2, [r3, #0]
  4063c8:	611a      	str	r2, [r3, #16]
  4063ca:	6159      	str	r1, [r3, #20]
  4063cc:	4770      	bx	lr
  4063ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  4063d0:	b083      	sub	sp, #12
  4063d2:	ab01      	add	r3, sp, #4
  4063d4:	466a      	mov	r2, sp
  4063d6:	460c      	mov	r4, r1
  4063d8:	4606      	mov	r6, r0
  4063da:	f7ff ffbf 	bl	40635c <__swhatbuf_r>
  4063de:	9900      	ldr	r1, [sp, #0]
  4063e0:	4605      	mov	r5, r0
  4063e2:	4630      	mov	r0, r6
  4063e4:	f000 f83a 	bl	40645c <_malloc_r>
  4063e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063ec:	b1d8      	cbz	r0, 406426 <__smakebuf_r+0x6e>
  4063ee:	9a01      	ldr	r2, [sp, #4]
  4063f0:	4f15      	ldr	r7, [pc, #84]	; (406448 <__smakebuf_r+0x90>)
  4063f2:	9900      	ldr	r1, [sp, #0]
  4063f4:	63f7      	str	r7, [r6, #60]	; 0x3c
  4063f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4063fa:	81a3      	strh	r3, [r4, #12]
  4063fc:	6020      	str	r0, [r4, #0]
  4063fe:	6120      	str	r0, [r4, #16]
  406400:	6161      	str	r1, [r4, #20]
  406402:	b91a      	cbnz	r2, 40640c <__smakebuf_r+0x54>
  406404:	432b      	orrs	r3, r5
  406406:	81a3      	strh	r3, [r4, #12]
  406408:	b003      	add	sp, #12
  40640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40640c:	4630      	mov	r0, r6
  40640e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406412:	f001 f853 	bl	4074bc <_isatty_r>
  406416:	b1a0      	cbz	r0, 406442 <__smakebuf_r+0x8a>
  406418:	89a3      	ldrh	r3, [r4, #12]
  40641a:	f023 0303 	bic.w	r3, r3, #3
  40641e:	f043 0301 	orr.w	r3, r3, #1
  406422:	b21b      	sxth	r3, r3
  406424:	e7ee      	b.n	406404 <__smakebuf_r+0x4c>
  406426:	059a      	lsls	r2, r3, #22
  406428:	d4ee      	bmi.n	406408 <__smakebuf_r+0x50>
  40642a:	f023 0303 	bic.w	r3, r3, #3
  40642e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406432:	f043 0302 	orr.w	r3, r3, #2
  406436:	2101      	movs	r1, #1
  406438:	81a3      	strh	r3, [r4, #12]
  40643a:	6022      	str	r2, [r4, #0]
  40643c:	6122      	str	r2, [r4, #16]
  40643e:	6161      	str	r1, [r4, #20]
  406440:	e7e2      	b.n	406408 <__smakebuf_r+0x50>
  406442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406446:	e7dd      	b.n	406404 <__smakebuf_r+0x4c>
  406448:	00405b79 	.word	0x00405b79

0040644c <malloc>:
  40644c:	4b02      	ldr	r3, [pc, #8]	; (406458 <malloc+0xc>)
  40644e:	4601      	mov	r1, r0
  406450:	6818      	ldr	r0, [r3, #0]
  406452:	f000 b803 	b.w	40645c <_malloc_r>
  406456:	bf00      	nop
  406458:	20400038 	.word	0x20400038

0040645c <_malloc_r>:
  40645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406460:	f101 060b 	add.w	r6, r1, #11
  406464:	2e16      	cmp	r6, #22
  406466:	b083      	sub	sp, #12
  406468:	4605      	mov	r5, r0
  40646a:	f240 809e 	bls.w	4065aa <_malloc_r+0x14e>
  40646e:	f036 0607 	bics.w	r6, r6, #7
  406472:	f100 80bd 	bmi.w	4065f0 <_malloc_r+0x194>
  406476:	42b1      	cmp	r1, r6
  406478:	f200 80ba 	bhi.w	4065f0 <_malloc_r+0x194>
  40647c:	f000 fc06 	bl	406c8c <__malloc_lock>
  406480:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406484:	f0c0 8293 	bcc.w	4069ae <_malloc_r+0x552>
  406488:	0a73      	lsrs	r3, r6, #9
  40648a:	f000 80b8 	beq.w	4065fe <_malloc_r+0x1a2>
  40648e:	2b04      	cmp	r3, #4
  406490:	f200 8179 	bhi.w	406786 <_malloc_r+0x32a>
  406494:	09b3      	lsrs	r3, r6, #6
  406496:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40649a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40649e:	00c3      	lsls	r3, r0, #3
  4064a0:	4fbf      	ldr	r7, [pc, #764]	; (4067a0 <_malloc_r+0x344>)
  4064a2:	443b      	add	r3, r7
  4064a4:	f1a3 0108 	sub.w	r1, r3, #8
  4064a8:	685c      	ldr	r4, [r3, #4]
  4064aa:	42a1      	cmp	r1, r4
  4064ac:	d106      	bne.n	4064bc <_malloc_r+0x60>
  4064ae:	e00c      	b.n	4064ca <_malloc_r+0x6e>
  4064b0:	2a00      	cmp	r2, #0
  4064b2:	f280 80aa 	bge.w	40660a <_malloc_r+0x1ae>
  4064b6:	68e4      	ldr	r4, [r4, #12]
  4064b8:	42a1      	cmp	r1, r4
  4064ba:	d006      	beq.n	4064ca <_malloc_r+0x6e>
  4064bc:	6863      	ldr	r3, [r4, #4]
  4064be:	f023 0303 	bic.w	r3, r3, #3
  4064c2:	1b9a      	subs	r2, r3, r6
  4064c4:	2a0f      	cmp	r2, #15
  4064c6:	ddf3      	ble.n	4064b0 <_malloc_r+0x54>
  4064c8:	4670      	mov	r0, lr
  4064ca:	693c      	ldr	r4, [r7, #16]
  4064cc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4067b4 <_malloc_r+0x358>
  4064d0:	4574      	cmp	r4, lr
  4064d2:	f000 81ab 	beq.w	40682c <_malloc_r+0x3d0>
  4064d6:	6863      	ldr	r3, [r4, #4]
  4064d8:	f023 0303 	bic.w	r3, r3, #3
  4064dc:	1b9a      	subs	r2, r3, r6
  4064de:	2a0f      	cmp	r2, #15
  4064e0:	f300 8190 	bgt.w	406804 <_malloc_r+0x3a8>
  4064e4:	2a00      	cmp	r2, #0
  4064e6:	f8c7 e014 	str.w	lr, [r7, #20]
  4064ea:	f8c7 e010 	str.w	lr, [r7, #16]
  4064ee:	f280 809d 	bge.w	40662c <_malloc_r+0x1d0>
  4064f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4064f6:	f080 8161 	bcs.w	4067bc <_malloc_r+0x360>
  4064fa:	08db      	lsrs	r3, r3, #3
  4064fc:	f103 0c01 	add.w	ip, r3, #1
  406500:	1099      	asrs	r1, r3, #2
  406502:	687a      	ldr	r2, [r7, #4]
  406504:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406508:	f8c4 8008 	str.w	r8, [r4, #8]
  40650c:	2301      	movs	r3, #1
  40650e:	408b      	lsls	r3, r1
  406510:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406514:	4313      	orrs	r3, r2
  406516:	3908      	subs	r1, #8
  406518:	60e1      	str	r1, [r4, #12]
  40651a:	607b      	str	r3, [r7, #4]
  40651c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406520:	f8c8 400c 	str.w	r4, [r8, #12]
  406524:	1082      	asrs	r2, r0, #2
  406526:	2401      	movs	r4, #1
  406528:	4094      	lsls	r4, r2
  40652a:	429c      	cmp	r4, r3
  40652c:	f200 808b 	bhi.w	406646 <_malloc_r+0x1ea>
  406530:	421c      	tst	r4, r3
  406532:	d106      	bne.n	406542 <_malloc_r+0xe6>
  406534:	f020 0003 	bic.w	r0, r0, #3
  406538:	0064      	lsls	r4, r4, #1
  40653a:	421c      	tst	r4, r3
  40653c:	f100 0004 	add.w	r0, r0, #4
  406540:	d0fa      	beq.n	406538 <_malloc_r+0xdc>
  406542:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406546:	46cc      	mov	ip, r9
  406548:	4680      	mov	r8, r0
  40654a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40654e:	459c      	cmp	ip, r3
  406550:	d107      	bne.n	406562 <_malloc_r+0x106>
  406552:	e16d      	b.n	406830 <_malloc_r+0x3d4>
  406554:	2a00      	cmp	r2, #0
  406556:	f280 817b 	bge.w	406850 <_malloc_r+0x3f4>
  40655a:	68db      	ldr	r3, [r3, #12]
  40655c:	459c      	cmp	ip, r3
  40655e:	f000 8167 	beq.w	406830 <_malloc_r+0x3d4>
  406562:	6859      	ldr	r1, [r3, #4]
  406564:	f021 0103 	bic.w	r1, r1, #3
  406568:	1b8a      	subs	r2, r1, r6
  40656a:	2a0f      	cmp	r2, #15
  40656c:	ddf2      	ble.n	406554 <_malloc_r+0xf8>
  40656e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406572:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406576:	9300      	str	r3, [sp, #0]
  406578:	199c      	adds	r4, r3, r6
  40657a:	4628      	mov	r0, r5
  40657c:	f046 0601 	orr.w	r6, r6, #1
  406580:	f042 0501 	orr.w	r5, r2, #1
  406584:	605e      	str	r6, [r3, #4]
  406586:	f8c8 c00c 	str.w	ip, [r8, #12]
  40658a:	f8cc 8008 	str.w	r8, [ip, #8]
  40658e:	617c      	str	r4, [r7, #20]
  406590:	613c      	str	r4, [r7, #16]
  406592:	f8c4 e00c 	str.w	lr, [r4, #12]
  406596:	f8c4 e008 	str.w	lr, [r4, #8]
  40659a:	6065      	str	r5, [r4, #4]
  40659c:	505a      	str	r2, [r3, r1]
  40659e:	f000 fb7b 	bl	406c98 <__malloc_unlock>
  4065a2:	9b00      	ldr	r3, [sp, #0]
  4065a4:	f103 0408 	add.w	r4, r3, #8
  4065a8:	e01e      	b.n	4065e8 <_malloc_r+0x18c>
  4065aa:	2910      	cmp	r1, #16
  4065ac:	d820      	bhi.n	4065f0 <_malloc_r+0x194>
  4065ae:	f000 fb6d 	bl	406c8c <__malloc_lock>
  4065b2:	2610      	movs	r6, #16
  4065b4:	2318      	movs	r3, #24
  4065b6:	2002      	movs	r0, #2
  4065b8:	4f79      	ldr	r7, [pc, #484]	; (4067a0 <_malloc_r+0x344>)
  4065ba:	443b      	add	r3, r7
  4065bc:	f1a3 0208 	sub.w	r2, r3, #8
  4065c0:	685c      	ldr	r4, [r3, #4]
  4065c2:	4294      	cmp	r4, r2
  4065c4:	f000 813d 	beq.w	406842 <_malloc_r+0x3e6>
  4065c8:	6863      	ldr	r3, [r4, #4]
  4065ca:	68e1      	ldr	r1, [r4, #12]
  4065cc:	68a6      	ldr	r6, [r4, #8]
  4065ce:	f023 0303 	bic.w	r3, r3, #3
  4065d2:	4423      	add	r3, r4
  4065d4:	4628      	mov	r0, r5
  4065d6:	685a      	ldr	r2, [r3, #4]
  4065d8:	60f1      	str	r1, [r6, #12]
  4065da:	f042 0201 	orr.w	r2, r2, #1
  4065de:	608e      	str	r6, [r1, #8]
  4065e0:	605a      	str	r2, [r3, #4]
  4065e2:	f000 fb59 	bl	406c98 <__malloc_unlock>
  4065e6:	3408      	adds	r4, #8
  4065e8:	4620      	mov	r0, r4
  4065ea:	b003      	add	sp, #12
  4065ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065f0:	2400      	movs	r4, #0
  4065f2:	230c      	movs	r3, #12
  4065f4:	4620      	mov	r0, r4
  4065f6:	602b      	str	r3, [r5, #0]
  4065f8:	b003      	add	sp, #12
  4065fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065fe:	2040      	movs	r0, #64	; 0x40
  406600:	f44f 7300 	mov.w	r3, #512	; 0x200
  406604:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406608:	e74a      	b.n	4064a0 <_malloc_r+0x44>
  40660a:	4423      	add	r3, r4
  40660c:	68e1      	ldr	r1, [r4, #12]
  40660e:	685a      	ldr	r2, [r3, #4]
  406610:	68a6      	ldr	r6, [r4, #8]
  406612:	f042 0201 	orr.w	r2, r2, #1
  406616:	60f1      	str	r1, [r6, #12]
  406618:	4628      	mov	r0, r5
  40661a:	608e      	str	r6, [r1, #8]
  40661c:	605a      	str	r2, [r3, #4]
  40661e:	f000 fb3b 	bl	406c98 <__malloc_unlock>
  406622:	3408      	adds	r4, #8
  406624:	4620      	mov	r0, r4
  406626:	b003      	add	sp, #12
  406628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40662c:	4423      	add	r3, r4
  40662e:	4628      	mov	r0, r5
  406630:	685a      	ldr	r2, [r3, #4]
  406632:	f042 0201 	orr.w	r2, r2, #1
  406636:	605a      	str	r2, [r3, #4]
  406638:	f000 fb2e 	bl	406c98 <__malloc_unlock>
  40663c:	3408      	adds	r4, #8
  40663e:	4620      	mov	r0, r4
  406640:	b003      	add	sp, #12
  406642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406646:	68bc      	ldr	r4, [r7, #8]
  406648:	6863      	ldr	r3, [r4, #4]
  40664a:	f023 0803 	bic.w	r8, r3, #3
  40664e:	45b0      	cmp	r8, r6
  406650:	d304      	bcc.n	40665c <_malloc_r+0x200>
  406652:	eba8 0306 	sub.w	r3, r8, r6
  406656:	2b0f      	cmp	r3, #15
  406658:	f300 8085 	bgt.w	406766 <_malloc_r+0x30a>
  40665c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4067b8 <_malloc_r+0x35c>
  406660:	4b50      	ldr	r3, [pc, #320]	; (4067a4 <_malloc_r+0x348>)
  406662:	f8d9 2000 	ldr.w	r2, [r9]
  406666:	681b      	ldr	r3, [r3, #0]
  406668:	3201      	adds	r2, #1
  40666a:	4433      	add	r3, r6
  40666c:	eb04 0a08 	add.w	sl, r4, r8
  406670:	f000 8155 	beq.w	40691e <_malloc_r+0x4c2>
  406674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406678:	330f      	adds	r3, #15
  40667a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40667e:	f02b 0b0f 	bic.w	fp, fp, #15
  406682:	4659      	mov	r1, fp
  406684:	4628      	mov	r0, r5
  406686:	f000 fcb3 	bl	406ff0 <_sbrk_r>
  40668a:	1c41      	adds	r1, r0, #1
  40668c:	4602      	mov	r2, r0
  40668e:	f000 80fc 	beq.w	40688a <_malloc_r+0x42e>
  406692:	4582      	cmp	sl, r0
  406694:	f200 80f7 	bhi.w	406886 <_malloc_r+0x42a>
  406698:	4b43      	ldr	r3, [pc, #268]	; (4067a8 <_malloc_r+0x34c>)
  40669a:	6819      	ldr	r1, [r3, #0]
  40669c:	4459      	add	r1, fp
  40669e:	6019      	str	r1, [r3, #0]
  4066a0:	f000 814d 	beq.w	40693e <_malloc_r+0x4e2>
  4066a4:	f8d9 0000 	ldr.w	r0, [r9]
  4066a8:	3001      	adds	r0, #1
  4066aa:	bf1b      	ittet	ne
  4066ac:	eba2 0a0a 	subne.w	sl, r2, sl
  4066b0:	4451      	addne	r1, sl
  4066b2:	f8c9 2000 	streq.w	r2, [r9]
  4066b6:	6019      	strne	r1, [r3, #0]
  4066b8:	f012 0107 	ands.w	r1, r2, #7
  4066bc:	f000 8115 	beq.w	4068ea <_malloc_r+0x48e>
  4066c0:	f1c1 0008 	rsb	r0, r1, #8
  4066c4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4066c8:	4402      	add	r2, r0
  4066ca:	3108      	adds	r1, #8
  4066cc:	eb02 090b 	add.w	r9, r2, fp
  4066d0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4066d4:	eba1 0909 	sub.w	r9, r1, r9
  4066d8:	4649      	mov	r1, r9
  4066da:	4628      	mov	r0, r5
  4066dc:	9301      	str	r3, [sp, #4]
  4066de:	9200      	str	r2, [sp, #0]
  4066e0:	f000 fc86 	bl	406ff0 <_sbrk_r>
  4066e4:	1c43      	adds	r3, r0, #1
  4066e6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4066ea:	f000 8143 	beq.w	406974 <_malloc_r+0x518>
  4066ee:	1a80      	subs	r0, r0, r2
  4066f0:	4448      	add	r0, r9
  4066f2:	f040 0001 	orr.w	r0, r0, #1
  4066f6:	6819      	ldr	r1, [r3, #0]
  4066f8:	60ba      	str	r2, [r7, #8]
  4066fa:	4449      	add	r1, r9
  4066fc:	42bc      	cmp	r4, r7
  4066fe:	6050      	str	r0, [r2, #4]
  406700:	6019      	str	r1, [r3, #0]
  406702:	d017      	beq.n	406734 <_malloc_r+0x2d8>
  406704:	f1b8 0f0f 	cmp.w	r8, #15
  406708:	f240 80fb 	bls.w	406902 <_malloc_r+0x4a6>
  40670c:	6860      	ldr	r0, [r4, #4]
  40670e:	f1a8 020c 	sub.w	r2, r8, #12
  406712:	f022 0207 	bic.w	r2, r2, #7
  406716:	eb04 0e02 	add.w	lr, r4, r2
  40671a:	f000 0001 	and.w	r0, r0, #1
  40671e:	f04f 0c05 	mov.w	ip, #5
  406722:	4310      	orrs	r0, r2
  406724:	2a0f      	cmp	r2, #15
  406726:	6060      	str	r0, [r4, #4]
  406728:	f8ce c004 	str.w	ip, [lr, #4]
  40672c:	f8ce c008 	str.w	ip, [lr, #8]
  406730:	f200 8117 	bhi.w	406962 <_malloc_r+0x506>
  406734:	4b1d      	ldr	r3, [pc, #116]	; (4067ac <_malloc_r+0x350>)
  406736:	68bc      	ldr	r4, [r7, #8]
  406738:	681a      	ldr	r2, [r3, #0]
  40673a:	4291      	cmp	r1, r2
  40673c:	bf88      	it	hi
  40673e:	6019      	strhi	r1, [r3, #0]
  406740:	4b1b      	ldr	r3, [pc, #108]	; (4067b0 <_malloc_r+0x354>)
  406742:	681a      	ldr	r2, [r3, #0]
  406744:	4291      	cmp	r1, r2
  406746:	6862      	ldr	r2, [r4, #4]
  406748:	bf88      	it	hi
  40674a:	6019      	strhi	r1, [r3, #0]
  40674c:	f022 0203 	bic.w	r2, r2, #3
  406750:	4296      	cmp	r6, r2
  406752:	eba2 0306 	sub.w	r3, r2, r6
  406756:	d801      	bhi.n	40675c <_malloc_r+0x300>
  406758:	2b0f      	cmp	r3, #15
  40675a:	dc04      	bgt.n	406766 <_malloc_r+0x30a>
  40675c:	4628      	mov	r0, r5
  40675e:	f000 fa9b 	bl	406c98 <__malloc_unlock>
  406762:	2400      	movs	r4, #0
  406764:	e740      	b.n	4065e8 <_malloc_r+0x18c>
  406766:	19a2      	adds	r2, r4, r6
  406768:	f043 0301 	orr.w	r3, r3, #1
  40676c:	f046 0601 	orr.w	r6, r6, #1
  406770:	6066      	str	r6, [r4, #4]
  406772:	4628      	mov	r0, r5
  406774:	60ba      	str	r2, [r7, #8]
  406776:	6053      	str	r3, [r2, #4]
  406778:	f000 fa8e 	bl	406c98 <__malloc_unlock>
  40677c:	3408      	adds	r4, #8
  40677e:	4620      	mov	r0, r4
  406780:	b003      	add	sp, #12
  406782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406786:	2b14      	cmp	r3, #20
  406788:	d971      	bls.n	40686e <_malloc_r+0x412>
  40678a:	2b54      	cmp	r3, #84	; 0x54
  40678c:	f200 80a3 	bhi.w	4068d6 <_malloc_r+0x47a>
  406790:	0b33      	lsrs	r3, r6, #12
  406792:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406796:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40679a:	00c3      	lsls	r3, r0, #3
  40679c:	e680      	b.n	4064a0 <_malloc_r+0x44>
  40679e:	bf00      	nop
  4067a0:	204005d8 	.word	0x204005d8
  4067a4:	20400aec 	.word	0x20400aec
  4067a8:	20400abc 	.word	0x20400abc
  4067ac:	20400ae4 	.word	0x20400ae4
  4067b0:	20400ae8 	.word	0x20400ae8
  4067b4:	204005e0 	.word	0x204005e0
  4067b8:	204009e0 	.word	0x204009e0
  4067bc:	0a5a      	lsrs	r2, r3, #9
  4067be:	2a04      	cmp	r2, #4
  4067c0:	d95b      	bls.n	40687a <_malloc_r+0x41e>
  4067c2:	2a14      	cmp	r2, #20
  4067c4:	f200 80ae 	bhi.w	406924 <_malloc_r+0x4c8>
  4067c8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4067cc:	00c9      	lsls	r1, r1, #3
  4067ce:	325b      	adds	r2, #91	; 0x5b
  4067d0:	eb07 0c01 	add.w	ip, r7, r1
  4067d4:	5879      	ldr	r1, [r7, r1]
  4067d6:	f1ac 0c08 	sub.w	ip, ip, #8
  4067da:	458c      	cmp	ip, r1
  4067dc:	f000 8088 	beq.w	4068f0 <_malloc_r+0x494>
  4067e0:	684a      	ldr	r2, [r1, #4]
  4067e2:	f022 0203 	bic.w	r2, r2, #3
  4067e6:	4293      	cmp	r3, r2
  4067e8:	d273      	bcs.n	4068d2 <_malloc_r+0x476>
  4067ea:	6889      	ldr	r1, [r1, #8]
  4067ec:	458c      	cmp	ip, r1
  4067ee:	d1f7      	bne.n	4067e0 <_malloc_r+0x384>
  4067f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4067f4:	687b      	ldr	r3, [r7, #4]
  4067f6:	60e2      	str	r2, [r4, #12]
  4067f8:	f8c4 c008 	str.w	ip, [r4, #8]
  4067fc:	6094      	str	r4, [r2, #8]
  4067fe:	f8cc 400c 	str.w	r4, [ip, #12]
  406802:	e68f      	b.n	406524 <_malloc_r+0xc8>
  406804:	19a1      	adds	r1, r4, r6
  406806:	f046 0c01 	orr.w	ip, r6, #1
  40680a:	f042 0601 	orr.w	r6, r2, #1
  40680e:	f8c4 c004 	str.w	ip, [r4, #4]
  406812:	4628      	mov	r0, r5
  406814:	6179      	str	r1, [r7, #20]
  406816:	6139      	str	r1, [r7, #16]
  406818:	f8c1 e00c 	str.w	lr, [r1, #12]
  40681c:	f8c1 e008 	str.w	lr, [r1, #8]
  406820:	604e      	str	r6, [r1, #4]
  406822:	50e2      	str	r2, [r4, r3]
  406824:	f000 fa38 	bl	406c98 <__malloc_unlock>
  406828:	3408      	adds	r4, #8
  40682a:	e6dd      	b.n	4065e8 <_malloc_r+0x18c>
  40682c:	687b      	ldr	r3, [r7, #4]
  40682e:	e679      	b.n	406524 <_malloc_r+0xc8>
  406830:	f108 0801 	add.w	r8, r8, #1
  406834:	f018 0f03 	tst.w	r8, #3
  406838:	f10c 0c08 	add.w	ip, ip, #8
  40683c:	f47f ae85 	bne.w	40654a <_malloc_r+0xee>
  406840:	e02d      	b.n	40689e <_malloc_r+0x442>
  406842:	68dc      	ldr	r4, [r3, #12]
  406844:	42a3      	cmp	r3, r4
  406846:	bf08      	it	eq
  406848:	3002      	addeq	r0, #2
  40684a:	f43f ae3e 	beq.w	4064ca <_malloc_r+0x6e>
  40684e:	e6bb      	b.n	4065c8 <_malloc_r+0x16c>
  406850:	4419      	add	r1, r3
  406852:	461c      	mov	r4, r3
  406854:	684a      	ldr	r2, [r1, #4]
  406856:	68db      	ldr	r3, [r3, #12]
  406858:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40685c:	f042 0201 	orr.w	r2, r2, #1
  406860:	604a      	str	r2, [r1, #4]
  406862:	4628      	mov	r0, r5
  406864:	60f3      	str	r3, [r6, #12]
  406866:	609e      	str	r6, [r3, #8]
  406868:	f000 fa16 	bl	406c98 <__malloc_unlock>
  40686c:	e6bc      	b.n	4065e8 <_malloc_r+0x18c>
  40686e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406872:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406876:	00c3      	lsls	r3, r0, #3
  406878:	e612      	b.n	4064a0 <_malloc_r+0x44>
  40687a:	099a      	lsrs	r2, r3, #6
  40687c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406880:	00c9      	lsls	r1, r1, #3
  406882:	3238      	adds	r2, #56	; 0x38
  406884:	e7a4      	b.n	4067d0 <_malloc_r+0x374>
  406886:	42bc      	cmp	r4, r7
  406888:	d054      	beq.n	406934 <_malloc_r+0x4d8>
  40688a:	68bc      	ldr	r4, [r7, #8]
  40688c:	6862      	ldr	r2, [r4, #4]
  40688e:	f022 0203 	bic.w	r2, r2, #3
  406892:	e75d      	b.n	406750 <_malloc_r+0x2f4>
  406894:	f859 3908 	ldr.w	r3, [r9], #-8
  406898:	4599      	cmp	r9, r3
  40689a:	f040 8086 	bne.w	4069aa <_malloc_r+0x54e>
  40689e:	f010 0f03 	tst.w	r0, #3
  4068a2:	f100 30ff 	add.w	r0, r0, #4294967295
  4068a6:	d1f5      	bne.n	406894 <_malloc_r+0x438>
  4068a8:	687b      	ldr	r3, [r7, #4]
  4068aa:	ea23 0304 	bic.w	r3, r3, r4
  4068ae:	607b      	str	r3, [r7, #4]
  4068b0:	0064      	lsls	r4, r4, #1
  4068b2:	429c      	cmp	r4, r3
  4068b4:	f63f aec7 	bhi.w	406646 <_malloc_r+0x1ea>
  4068b8:	2c00      	cmp	r4, #0
  4068ba:	f43f aec4 	beq.w	406646 <_malloc_r+0x1ea>
  4068be:	421c      	tst	r4, r3
  4068c0:	4640      	mov	r0, r8
  4068c2:	f47f ae3e 	bne.w	406542 <_malloc_r+0xe6>
  4068c6:	0064      	lsls	r4, r4, #1
  4068c8:	421c      	tst	r4, r3
  4068ca:	f100 0004 	add.w	r0, r0, #4
  4068ce:	d0fa      	beq.n	4068c6 <_malloc_r+0x46a>
  4068d0:	e637      	b.n	406542 <_malloc_r+0xe6>
  4068d2:	468c      	mov	ip, r1
  4068d4:	e78c      	b.n	4067f0 <_malloc_r+0x394>
  4068d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4068da:	d815      	bhi.n	406908 <_malloc_r+0x4ac>
  4068dc:	0bf3      	lsrs	r3, r6, #15
  4068de:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4068e2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4068e6:	00c3      	lsls	r3, r0, #3
  4068e8:	e5da      	b.n	4064a0 <_malloc_r+0x44>
  4068ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4068ee:	e6ed      	b.n	4066cc <_malloc_r+0x270>
  4068f0:	687b      	ldr	r3, [r7, #4]
  4068f2:	1092      	asrs	r2, r2, #2
  4068f4:	2101      	movs	r1, #1
  4068f6:	fa01 f202 	lsl.w	r2, r1, r2
  4068fa:	4313      	orrs	r3, r2
  4068fc:	607b      	str	r3, [r7, #4]
  4068fe:	4662      	mov	r2, ip
  406900:	e779      	b.n	4067f6 <_malloc_r+0x39a>
  406902:	2301      	movs	r3, #1
  406904:	6053      	str	r3, [r2, #4]
  406906:	e729      	b.n	40675c <_malloc_r+0x300>
  406908:	f240 5254 	movw	r2, #1364	; 0x554
  40690c:	4293      	cmp	r3, r2
  40690e:	d822      	bhi.n	406956 <_malloc_r+0x4fa>
  406910:	0cb3      	lsrs	r3, r6, #18
  406912:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406916:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40691a:	00c3      	lsls	r3, r0, #3
  40691c:	e5c0      	b.n	4064a0 <_malloc_r+0x44>
  40691e:	f103 0b10 	add.w	fp, r3, #16
  406922:	e6ae      	b.n	406682 <_malloc_r+0x226>
  406924:	2a54      	cmp	r2, #84	; 0x54
  406926:	d829      	bhi.n	40697c <_malloc_r+0x520>
  406928:	0b1a      	lsrs	r2, r3, #12
  40692a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40692e:	00c9      	lsls	r1, r1, #3
  406930:	326e      	adds	r2, #110	; 0x6e
  406932:	e74d      	b.n	4067d0 <_malloc_r+0x374>
  406934:	4b20      	ldr	r3, [pc, #128]	; (4069b8 <_malloc_r+0x55c>)
  406936:	6819      	ldr	r1, [r3, #0]
  406938:	4459      	add	r1, fp
  40693a:	6019      	str	r1, [r3, #0]
  40693c:	e6b2      	b.n	4066a4 <_malloc_r+0x248>
  40693e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406942:	2800      	cmp	r0, #0
  406944:	f47f aeae 	bne.w	4066a4 <_malloc_r+0x248>
  406948:	eb08 030b 	add.w	r3, r8, fp
  40694c:	68ba      	ldr	r2, [r7, #8]
  40694e:	f043 0301 	orr.w	r3, r3, #1
  406952:	6053      	str	r3, [r2, #4]
  406954:	e6ee      	b.n	406734 <_malloc_r+0x2d8>
  406956:	207f      	movs	r0, #127	; 0x7f
  406958:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40695c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406960:	e59e      	b.n	4064a0 <_malloc_r+0x44>
  406962:	f104 0108 	add.w	r1, r4, #8
  406966:	4628      	mov	r0, r5
  406968:	9300      	str	r3, [sp, #0]
  40696a:	f7ff fa59 	bl	405e20 <_free_r>
  40696e:	9b00      	ldr	r3, [sp, #0]
  406970:	6819      	ldr	r1, [r3, #0]
  406972:	e6df      	b.n	406734 <_malloc_r+0x2d8>
  406974:	2001      	movs	r0, #1
  406976:	f04f 0900 	mov.w	r9, #0
  40697a:	e6bc      	b.n	4066f6 <_malloc_r+0x29a>
  40697c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406980:	d805      	bhi.n	40698e <_malloc_r+0x532>
  406982:	0bda      	lsrs	r2, r3, #15
  406984:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406988:	00c9      	lsls	r1, r1, #3
  40698a:	3277      	adds	r2, #119	; 0x77
  40698c:	e720      	b.n	4067d0 <_malloc_r+0x374>
  40698e:	f240 5154 	movw	r1, #1364	; 0x554
  406992:	428a      	cmp	r2, r1
  406994:	d805      	bhi.n	4069a2 <_malloc_r+0x546>
  406996:	0c9a      	lsrs	r2, r3, #18
  406998:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40699c:	00c9      	lsls	r1, r1, #3
  40699e:	327c      	adds	r2, #124	; 0x7c
  4069a0:	e716      	b.n	4067d0 <_malloc_r+0x374>
  4069a2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4069a6:	227e      	movs	r2, #126	; 0x7e
  4069a8:	e712      	b.n	4067d0 <_malloc_r+0x374>
  4069aa:	687b      	ldr	r3, [r7, #4]
  4069ac:	e780      	b.n	4068b0 <_malloc_r+0x454>
  4069ae:	08f0      	lsrs	r0, r6, #3
  4069b0:	f106 0308 	add.w	r3, r6, #8
  4069b4:	e600      	b.n	4065b8 <_malloc_r+0x15c>
  4069b6:	bf00      	nop
  4069b8:	20400abc 	.word	0x20400abc

004069bc <__ascii_mbtowc>:
  4069bc:	b082      	sub	sp, #8
  4069be:	b149      	cbz	r1, 4069d4 <__ascii_mbtowc+0x18>
  4069c0:	b15a      	cbz	r2, 4069da <__ascii_mbtowc+0x1e>
  4069c2:	b16b      	cbz	r3, 4069e0 <__ascii_mbtowc+0x24>
  4069c4:	7813      	ldrb	r3, [r2, #0]
  4069c6:	600b      	str	r3, [r1, #0]
  4069c8:	7812      	ldrb	r2, [r2, #0]
  4069ca:	1c10      	adds	r0, r2, #0
  4069cc:	bf18      	it	ne
  4069ce:	2001      	movne	r0, #1
  4069d0:	b002      	add	sp, #8
  4069d2:	4770      	bx	lr
  4069d4:	a901      	add	r1, sp, #4
  4069d6:	2a00      	cmp	r2, #0
  4069d8:	d1f3      	bne.n	4069c2 <__ascii_mbtowc+0x6>
  4069da:	4610      	mov	r0, r2
  4069dc:	b002      	add	sp, #8
  4069de:	4770      	bx	lr
  4069e0:	f06f 0001 	mvn.w	r0, #1
  4069e4:	e7f4      	b.n	4069d0 <__ascii_mbtowc+0x14>
  4069e6:	bf00      	nop
	...

004069f0 <memchr>:
  4069f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4069f4:	2a10      	cmp	r2, #16
  4069f6:	db2b      	blt.n	406a50 <memchr+0x60>
  4069f8:	f010 0f07 	tst.w	r0, #7
  4069fc:	d008      	beq.n	406a10 <memchr+0x20>
  4069fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a02:	3a01      	subs	r2, #1
  406a04:	428b      	cmp	r3, r1
  406a06:	d02d      	beq.n	406a64 <memchr+0x74>
  406a08:	f010 0f07 	tst.w	r0, #7
  406a0c:	b342      	cbz	r2, 406a60 <memchr+0x70>
  406a0e:	d1f6      	bne.n	4069fe <memchr+0xe>
  406a10:	b4f0      	push	{r4, r5, r6, r7}
  406a12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406a16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406a1a:	f022 0407 	bic.w	r4, r2, #7
  406a1e:	f07f 0700 	mvns.w	r7, #0
  406a22:	2300      	movs	r3, #0
  406a24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406a28:	3c08      	subs	r4, #8
  406a2a:	ea85 0501 	eor.w	r5, r5, r1
  406a2e:	ea86 0601 	eor.w	r6, r6, r1
  406a32:	fa85 f547 	uadd8	r5, r5, r7
  406a36:	faa3 f587 	sel	r5, r3, r7
  406a3a:	fa86 f647 	uadd8	r6, r6, r7
  406a3e:	faa5 f687 	sel	r6, r5, r7
  406a42:	b98e      	cbnz	r6, 406a68 <memchr+0x78>
  406a44:	d1ee      	bne.n	406a24 <memchr+0x34>
  406a46:	bcf0      	pop	{r4, r5, r6, r7}
  406a48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406a4c:	f002 0207 	and.w	r2, r2, #7
  406a50:	b132      	cbz	r2, 406a60 <memchr+0x70>
  406a52:	f810 3b01 	ldrb.w	r3, [r0], #1
  406a56:	3a01      	subs	r2, #1
  406a58:	ea83 0301 	eor.w	r3, r3, r1
  406a5c:	b113      	cbz	r3, 406a64 <memchr+0x74>
  406a5e:	d1f8      	bne.n	406a52 <memchr+0x62>
  406a60:	2000      	movs	r0, #0
  406a62:	4770      	bx	lr
  406a64:	3801      	subs	r0, #1
  406a66:	4770      	bx	lr
  406a68:	2d00      	cmp	r5, #0
  406a6a:	bf06      	itte	eq
  406a6c:	4635      	moveq	r5, r6
  406a6e:	3803      	subeq	r0, #3
  406a70:	3807      	subne	r0, #7
  406a72:	f015 0f01 	tst.w	r5, #1
  406a76:	d107      	bne.n	406a88 <memchr+0x98>
  406a78:	3001      	adds	r0, #1
  406a7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406a7e:	bf02      	ittt	eq
  406a80:	3001      	addeq	r0, #1
  406a82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406a86:	3001      	addeq	r0, #1
  406a88:	bcf0      	pop	{r4, r5, r6, r7}
  406a8a:	3801      	subs	r0, #1
  406a8c:	4770      	bx	lr
  406a8e:	bf00      	nop

00406a90 <memcpy>:
  406a90:	4684      	mov	ip, r0
  406a92:	ea41 0300 	orr.w	r3, r1, r0
  406a96:	f013 0303 	ands.w	r3, r3, #3
  406a9a:	d16d      	bne.n	406b78 <memcpy+0xe8>
  406a9c:	3a40      	subs	r2, #64	; 0x40
  406a9e:	d341      	bcc.n	406b24 <memcpy+0x94>
  406aa0:	f851 3b04 	ldr.w	r3, [r1], #4
  406aa4:	f840 3b04 	str.w	r3, [r0], #4
  406aa8:	f851 3b04 	ldr.w	r3, [r1], #4
  406aac:	f840 3b04 	str.w	r3, [r0], #4
  406ab0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ab4:	f840 3b04 	str.w	r3, [r0], #4
  406ab8:	f851 3b04 	ldr.w	r3, [r1], #4
  406abc:	f840 3b04 	str.w	r3, [r0], #4
  406ac0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ac4:	f840 3b04 	str.w	r3, [r0], #4
  406ac8:	f851 3b04 	ldr.w	r3, [r1], #4
  406acc:	f840 3b04 	str.w	r3, [r0], #4
  406ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ad4:	f840 3b04 	str.w	r3, [r0], #4
  406ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  406adc:	f840 3b04 	str.w	r3, [r0], #4
  406ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ae4:	f840 3b04 	str.w	r3, [r0], #4
  406ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  406aec:	f840 3b04 	str.w	r3, [r0], #4
  406af0:	f851 3b04 	ldr.w	r3, [r1], #4
  406af4:	f840 3b04 	str.w	r3, [r0], #4
  406af8:	f851 3b04 	ldr.w	r3, [r1], #4
  406afc:	f840 3b04 	str.w	r3, [r0], #4
  406b00:	f851 3b04 	ldr.w	r3, [r1], #4
  406b04:	f840 3b04 	str.w	r3, [r0], #4
  406b08:	f851 3b04 	ldr.w	r3, [r1], #4
  406b0c:	f840 3b04 	str.w	r3, [r0], #4
  406b10:	f851 3b04 	ldr.w	r3, [r1], #4
  406b14:	f840 3b04 	str.w	r3, [r0], #4
  406b18:	f851 3b04 	ldr.w	r3, [r1], #4
  406b1c:	f840 3b04 	str.w	r3, [r0], #4
  406b20:	3a40      	subs	r2, #64	; 0x40
  406b22:	d2bd      	bcs.n	406aa0 <memcpy+0x10>
  406b24:	3230      	adds	r2, #48	; 0x30
  406b26:	d311      	bcc.n	406b4c <memcpy+0xbc>
  406b28:	f851 3b04 	ldr.w	r3, [r1], #4
  406b2c:	f840 3b04 	str.w	r3, [r0], #4
  406b30:	f851 3b04 	ldr.w	r3, [r1], #4
  406b34:	f840 3b04 	str.w	r3, [r0], #4
  406b38:	f851 3b04 	ldr.w	r3, [r1], #4
  406b3c:	f840 3b04 	str.w	r3, [r0], #4
  406b40:	f851 3b04 	ldr.w	r3, [r1], #4
  406b44:	f840 3b04 	str.w	r3, [r0], #4
  406b48:	3a10      	subs	r2, #16
  406b4a:	d2ed      	bcs.n	406b28 <memcpy+0x98>
  406b4c:	320c      	adds	r2, #12
  406b4e:	d305      	bcc.n	406b5c <memcpy+0xcc>
  406b50:	f851 3b04 	ldr.w	r3, [r1], #4
  406b54:	f840 3b04 	str.w	r3, [r0], #4
  406b58:	3a04      	subs	r2, #4
  406b5a:	d2f9      	bcs.n	406b50 <memcpy+0xc0>
  406b5c:	3204      	adds	r2, #4
  406b5e:	d008      	beq.n	406b72 <memcpy+0xe2>
  406b60:	07d2      	lsls	r2, r2, #31
  406b62:	bf1c      	itt	ne
  406b64:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b68:	f800 3b01 	strbne.w	r3, [r0], #1
  406b6c:	d301      	bcc.n	406b72 <memcpy+0xe2>
  406b6e:	880b      	ldrh	r3, [r1, #0]
  406b70:	8003      	strh	r3, [r0, #0]
  406b72:	4660      	mov	r0, ip
  406b74:	4770      	bx	lr
  406b76:	bf00      	nop
  406b78:	2a08      	cmp	r2, #8
  406b7a:	d313      	bcc.n	406ba4 <memcpy+0x114>
  406b7c:	078b      	lsls	r3, r1, #30
  406b7e:	d08d      	beq.n	406a9c <memcpy+0xc>
  406b80:	f010 0303 	ands.w	r3, r0, #3
  406b84:	d08a      	beq.n	406a9c <memcpy+0xc>
  406b86:	f1c3 0304 	rsb	r3, r3, #4
  406b8a:	1ad2      	subs	r2, r2, r3
  406b8c:	07db      	lsls	r3, r3, #31
  406b8e:	bf1c      	itt	ne
  406b90:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b94:	f800 3b01 	strbne.w	r3, [r0], #1
  406b98:	d380      	bcc.n	406a9c <memcpy+0xc>
  406b9a:	f831 3b02 	ldrh.w	r3, [r1], #2
  406b9e:	f820 3b02 	strh.w	r3, [r0], #2
  406ba2:	e77b      	b.n	406a9c <memcpy+0xc>
  406ba4:	3a04      	subs	r2, #4
  406ba6:	d3d9      	bcc.n	406b5c <memcpy+0xcc>
  406ba8:	3a01      	subs	r2, #1
  406baa:	f811 3b01 	ldrb.w	r3, [r1], #1
  406bae:	f800 3b01 	strb.w	r3, [r0], #1
  406bb2:	d2f9      	bcs.n	406ba8 <memcpy+0x118>
  406bb4:	780b      	ldrb	r3, [r1, #0]
  406bb6:	7003      	strb	r3, [r0, #0]
  406bb8:	784b      	ldrb	r3, [r1, #1]
  406bba:	7043      	strb	r3, [r0, #1]
  406bbc:	788b      	ldrb	r3, [r1, #2]
  406bbe:	7083      	strb	r3, [r0, #2]
  406bc0:	4660      	mov	r0, ip
  406bc2:	4770      	bx	lr

00406bc4 <memmove>:
  406bc4:	4288      	cmp	r0, r1
  406bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
  406bc8:	d90d      	bls.n	406be6 <memmove+0x22>
  406bca:	188b      	adds	r3, r1, r2
  406bcc:	4298      	cmp	r0, r3
  406bce:	d20a      	bcs.n	406be6 <memmove+0x22>
  406bd0:	1884      	adds	r4, r0, r2
  406bd2:	2a00      	cmp	r2, #0
  406bd4:	d051      	beq.n	406c7a <memmove+0xb6>
  406bd6:	4622      	mov	r2, r4
  406bd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406bdc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406be0:	4299      	cmp	r1, r3
  406be2:	d1f9      	bne.n	406bd8 <memmove+0x14>
  406be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406be6:	2a0f      	cmp	r2, #15
  406be8:	d948      	bls.n	406c7c <memmove+0xb8>
  406bea:	ea41 0300 	orr.w	r3, r1, r0
  406bee:	079b      	lsls	r3, r3, #30
  406bf0:	d146      	bne.n	406c80 <memmove+0xbc>
  406bf2:	f100 0410 	add.w	r4, r0, #16
  406bf6:	f101 0310 	add.w	r3, r1, #16
  406bfa:	4615      	mov	r5, r2
  406bfc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406c00:	f844 6c10 	str.w	r6, [r4, #-16]
  406c04:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406c08:	f844 6c0c 	str.w	r6, [r4, #-12]
  406c0c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406c10:	f844 6c08 	str.w	r6, [r4, #-8]
  406c14:	3d10      	subs	r5, #16
  406c16:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406c1a:	f844 6c04 	str.w	r6, [r4, #-4]
  406c1e:	2d0f      	cmp	r5, #15
  406c20:	f103 0310 	add.w	r3, r3, #16
  406c24:	f104 0410 	add.w	r4, r4, #16
  406c28:	d8e8      	bhi.n	406bfc <memmove+0x38>
  406c2a:	f1a2 0310 	sub.w	r3, r2, #16
  406c2e:	f023 030f 	bic.w	r3, r3, #15
  406c32:	f002 0e0f 	and.w	lr, r2, #15
  406c36:	3310      	adds	r3, #16
  406c38:	f1be 0f03 	cmp.w	lr, #3
  406c3c:	4419      	add	r1, r3
  406c3e:	4403      	add	r3, r0
  406c40:	d921      	bls.n	406c86 <memmove+0xc2>
  406c42:	1f1e      	subs	r6, r3, #4
  406c44:	460d      	mov	r5, r1
  406c46:	4674      	mov	r4, lr
  406c48:	3c04      	subs	r4, #4
  406c4a:	f855 7b04 	ldr.w	r7, [r5], #4
  406c4e:	f846 7f04 	str.w	r7, [r6, #4]!
  406c52:	2c03      	cmp	r4, #3
  406c54:	d8f8      	bhi.n	406c48 <memmove+0x84>
  406c56:	f1ae 0404 	sub.w	r4, lr, #4
  406c5a:	f024 0403 	bic.w	r4, r4, #3
  406c5e:	3404      	adds	r4, #4
  406c60:	4421      	add	r1, r4
  406c62:	4423      	add	r3, r4
  406c64:	f002 0203 	and.w	r2, r2, #3
  406c68:	b162      	cbz	r2, 406c84 <memmove+0xc0>
  406c6a:	3b01      	subs	r3, #1
  406c6c:	440a      	add	r2, r1
  406c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406c72:	f803 4f01 	strb.w	r4, [r3, #1]!
  406c76:	428a      	cmp	r2, r1
  406c78:	d1f9      	bne.n	406c6e <memmove+0xaa>
  406c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c7c:	4603      	mov	r3, r0
  406c7e:	e7f3      	b.n	406c68 <memmove+0xa4>
  406c80:	4603      	mov	r3, r0
  406c82:	e7f2      	b.n	406c6a <memmove+0xa6>
  406c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c86:	4672      	mov	r2, lr
  406c88:	e7ee      	b.n	406c68 <memmove+0xa4>
  406c8a:	bf00      	nop

00406c8c <__malloc_lock>:
  406c8c:	4801      	ldr	r0, [pc, #4]	; (406c94 <__malloc_lock+0x8>)
  406c8e:	f7ff bb61 	b.w	406354 <__retarget_lock_acquire_recursive>
  406c92:	bf00      	nop
  406c94:	20400b0c 	.word	0x20400b0c

00406c98 <__malloc_unlock>:
  406c98:	4801      	ldr	r0, [pc, #4]	; (406ca0 <__malloc_unlock+0x8>)
  406c9a:	f7ff bb5d 	b.w	406358 <__retarget_lock_release_recursive>
  406c9e:	bf00      	nop
  406ca0:	20400b0c 	.word	0x20400b0c

00406ca4 <_realloc_r>:
  406ca4:	2900      	cmp	r1, #0
  406ca6:	f000 8095 	beq.w	406dd4 <_realloc_r+0x130>
  406caa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406cae:	460d      	mov	r5, r1
  406cb0:	4616      	mov	r6, r2
  406cb2:	b083      	sub	sp, #12
  406cb4:	4680      	mov	r8, r0
  406cb6:	f106 070b 	add.w	r7, r6, #11
  406cba:	f7ff ffe7 	bl	406c8c <__malloc_lock>
  406cbe:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406cc2:	2f16      	cmp	r7, #22
  406cc4:	f02e 0403 	bic.w	r4, lr, #3
  406cc8:	f1a5 0908 	sub.w	r9, r5, #8
  406ccc:	d83c      	bhi.n	406d48 <_realloc_r+0xa4>
  406cce:	2210      	movs	r2, #16
  406cd0:	4617      	mov	r7, r2
  406cd2:	42be      	cmp	r6, r7
  406cd4:	d83d      	bhi.n	406d52 <_realloc_r+0xae>
  406cd6:	4294      	cmp	r4, r2
  406cd8:	da43      	bge.n	406d62 <_realloc_r+0xbe>
  406cda:	4bc4      	ldr	r3, [pc, #784]	; (406fec <_realloc_r+0x348>)
  406cdc:	6899      	ldr	r1, [r3, #8]
  406cde:	eb09 0004 	add.w	r0, r9, r4
  406ce2:	4288      	cmp	r0, r1
  406ce4:	f000 80b4 	beq.w	406e50 <_realloc_r+0x1ac>
  406ce8:	6843      	ldr	r3, [r0, #4]
  406cea:	f023 0101 	bic.w	r1, r3, #1
  406cee:	4401      	add	r1, r0
  406cf0:	6849      	ldr	r1, [r1, #4]
  406cf2:	07c9      	lsls	r1, r1, #31
  406cf4:	d54c      	bpl.n	406d90 <_realloc_r+0xec>
  406cf6:	f01e 0f01 	tst.w	lr, #1
  406cfa:	f000 809b 	beq.w	406e34 <_realloc_r+0x190>
  406cfe:	4631      	mov	r1, r6
  406d00:	4640      	mov	r0, r8
  406d02:	f7ff fbab 	bl	40645c <_malloc_r>
  406d06:	4606      	mov	r6, r0
  406d08:	2800      	cmp	r0, #0
  406d0a:	d03a      	beq.n	406d82 <_realloc_r+0xde>
  406d0c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406d10:	f023 0301 	bic.w	r3, r3, #1
  406d14:	444b      	add	r3, r9
  406d16:	f1a0 0208 	sub.w	r2, r0, #8
  406d1a:	429a      	cmp	r2, r3
  406d1c:	f000 8121 	beq.w	406f62 <_realloc_r+0x2be>
  406d20:	1f22      	subs	r2, r4, #4
  406d22:	2a24      	cmp	r2, #36	; 0x24
  406d24:	f200 8107 	bhi.w	406f36 <_realloc_r+0x292>
  406d28:	2a13      	cmp	r2, #19
  406d2a:	f200 80db 	bhi.w	406ee4 <_realloc_r+0x240>
  406d2e:	4603      	mov	r3, r0
  406d30:	462a      	mov	r2, r5
  406d32:	6811      	ldr	r1, [r2, #0]
  406d34:	6019      	str	r1, [r3, #0]
  406d36:	6851      	ldr	r1, [r2, #4]
  406d38:	6059      	str	r1, [r3, #4]
  406d3a:	6892      	ldr	r2, [r2, #8]
  406d3c:	609a      	str	r2, [r3, #8]
  406d3e:	4629      	mov	r1, r5
  406d40:	4640      	mov	r0, r8
  406d42:	f7ff f86d 	bl	405e20 <_free_r>
  406d46:	e01c      	b.n	406d82 <_realloc_r+0xde>
  406d48:	f027 0707 	bic.w	r7, r7, #7
  406d4c:	2f00      	cmp	r7, #0
  406d4e:	463a      	mov	r2, r7
  406d50:	dabf      	bge.n	406cd2 <_realloc_r+0x2e>
  406d52:	2600      	movs	r6, #0
  406d54:	230c      	movs	r3, #12
  406d56:	4630      	mov	r0, r6
  406d58:	f8c8 3000 	str.w	r3, [r8]
  406d5c:	b003      	add	sp, #12
  406d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d62:	462e      	mov	r6, r5
  406d64:	1be3      	subs	r3, r4, r7
  406d66:	2b0f      	cmp	r3, #15
  406d68:	d81e      	bhi.n	406da8 <_realloc_r+0x104>
  406d6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406d6e:	f003 0301 	and.w	r3, r3, #1
  406d72:	4323      	orrs	r3, r4
  406d74:	444c      	add	r4, r9
  406d76:	f8c9 3004 	str.w	r3, [r9, #4]
  406d7a:	6863      	ldr	r3, [r4, #4]
  406d7c:	f043 0301 	orr.w	r3, r3, #1
  406d80:	6063      	str	r3, [r4, #4]
  406d82:	4640      	mov	r0, r8
  406d84:	f7ff ff88 	bl	406c98 <__malloc_unlock>
  406d88:	4630      	mov	r0, r6
  406d8a:	b003      	add	sp, #12
  406d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d90:	f023 0303 	bic.w	r3, r3, #3
  406d94:	18e1      	adds	r1, r4, r3
  406d96:	4291      	cmp	r1, r2
  406d98:	db1f      	blt.n	406dda <_realloc_r+0x136>
  406d9a:	68c3      	ldr	r3, [r0, #12]
  406d9c:	6882      	ldr	r2, [r0, #8]
  406d9e:	462e      	mov	r6, r5
  406da0:	60d3      	str	r3, [r2, #12]
  406da2:	460c      	mov	r4, r1
  406da4:	609a      	str	r2, [r3, #8]
  406da6:	e7dd      	b.n	406d64 <_realloc_r+0xc0>
  406da8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406dac:	eb09 0107 	add.w	r1, r9, r7
  406db0:	f002 0201 	and.w	r2, r2, #1
  406db4:	444c      	add	r4, r9
  406db6:	f043 0301 	orr.w	r3, r3, #1
  406dba:	4317      	orrs	r7, r2
  406dbc:	f8c9 7004 	str.w	r7, [r9, #4]
  406dc0:	604b      	str	r3, [r1, #4]
  406dc2:	6863      	ldr	r3, [r4, #4]
  406dc4:	f043 0301 	orr.w	r3, r3, #1
  406dc8:	3108      	adds	r1, #8
  406dca:	6063      	str	r3, [r4, #4]
  406dcc:	4640      	mov	r0, r8
  406dce:	f7ff f827 	bl	405e20 <_free_r>
  406dd2:	e7d6      	b.n	406d82 <_realloc_r+0xde>
  406dd4:	4611      	mov	r1, r2
  406dd6:	f7ff bb41 	b.w	40645c <_malloc_r>
  406dda:	f01e 0f01 	tst.w	lr, #1
  406dde:	d18e      	bne.n	406cfe <_realloc_r+0x5a>
  406de0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406de4:	eba9 0a01 	sub.w	sl, r9, r1
  406de8:	f8da 1004 	ldr.w	r1, [sl, #4]
  406dec:	f021 0103 	bic.w	r1, r1, #3
  406df0:	440b      	add	r3, r1
  406df2:	4423      	add	r3, r4
  406df4:	4293      	cmp	r3, r2
  406df6:	db25      	blt.n	406e44 <_realloc_r+0x1a0>
  406df8:	68c2      	ldr	r2, [r0, #12]
  406dfa:	6881      	ldr	r1, [r0, #8]
  406dfc:	4656      	mov	r6, sl
  406dfe:	60ca      	str	r2, [r1, #12]
  406e00:	6091      	str	r1, [r2, #8]
  406e02:	f8da 100c 	ldr.w	r1, [sl, #12]
  406e06:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406e0a:	1f22      	subs	r2, r4, #4
  406e0c:	2a24      	cmp	r2, #36	; 0x24
  406e0e:	60c1      	str	r1, [r0, #12]
  406e10:	6088      	str	r0, [r1, #8]
  406e12:	f200 8094 	bhi.w	406f3e <_realloc_r+0x29a>
  406e16:	2a13      	cmp	r2, #19
  406e18:	d96f      	bls.n	406efa <_realloc_r+0x256>
  406e1a:	6829      	ldr	r1, [r5, #0]
  406e1c:	f8ca 1008 	str.w	r1, [sl, #8]
  406e20:	6869      	ldr	r1, [r5, #4]
  406e22:	f8ca 100c 	str.w	r1, [sl, #12]
  406e26:	2a1b      	cmp	r2, #27
  406e28:	f200 80a2 	bhi.w	406f70 <_realloc_r+0x2cc>
  406e2c:	3508      	adds	r5, #8
  406e2e:	f10a 0210 	add.w	r2, sl, #16
  406e32:	e063      	b.n	406efc <_realloc_r+0x258>
  406e34:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406e38:	eba9 0a03 	sub.w	sl, r9, r3
  406e3c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406e40:	f021 0103 	bic.w	r1, r1, #3
  406e44:	1863      	adds	r3, r4, r1
  406e46:	4293      	cmp	r3, r2
  406e48:	f6ff af59 	blt.w	406cfe <_realloc_r+0x5a>
  406e4c:	4656      	mov	r6, sl
  406e4e:	e7d8      	b.n	406e02 <_realloc_r+0x15e>
  406e50:	6841      	ldr	r1, [r0, #4]
  406e52:	f021 0b03 	bic.w	fp, r1, #3
  406e56:	44a3      	add	fp, r4
  406e58:	f107 0010 	add.w	r0, r7, #16
  406e5c:	4583      	cmp	fp, r0
  406e5e:	da56      	bge.n	406f0e <_realloc_r+0x26a>
  406e60:	f01e 0f01 	tst.w	lr, #1
  406e64:	f47f af4b 	bne.w	406cfe <_realloc_r+0x5a>
  406e68:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406e6c:	eba9 0a01 	sub.w	sl, r9, r1
  406e70:	f8da 1004 	ldr.w	r1, [sl, #4]
  406e74:	f021 0103 	bic.w	r1, r1, #3
  406e78:	448b      	add	fp, r1
  406e7a:	4558      	cmp	r0, fp
  406e7c:	dce2      	bgt.n	406e44 <_realloc_r+0x1a0>
  406e7e:	4656      	mov	r6, sl
  406e80:	f8da 100c 	ldr.w	r1, [sl, #12]
  406e84:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406e88:	1f22      	subs	r2, r4, #4
  406e8a:	2a24      	cmp	r2, #36	; 0x24
  406e8c:	60c1      	str	r1, [r0, #12]
  406e8e:	6088      	str	r0, [r1, #8]
  406e90:	f200 808f 	bhi.w	406fb2 <_realloc_r+0x30e>
  406e94:	2a13      	cmp	r2, #19
  406e96:	f240 808a 	bls.w	406fae <_realloc_r+0x30a>
  406e9a:	6829      	ldr	r1, [r5, #0]
  406e9c:	f8ca 1008 	str.w	r1, [sl, #8]
  406ea0:	6869      	ldr	r1, [r5, #4]
  406ea2:	f8ca 100c 	str.w	r1, [sl, #12]
  406ea6:	2a1b      	cmp	r2, #27
  406ea8:	f200 808a 	bhi.w	406fc0 <_realloc_r+0x31c>
  406eac:	3508      	adds	r5, #8
  406eae:	f10a 0210 	add.w	r2, sl, #16
  406eb2:	6829      	ldr	r1, [r5, #0]
  406eb4:	6011      	str	r1, [r2, #0]
  406eb6:	6869      	ldr	r1, [r5, #4]
  406eb8:	6051      	str	r1, [r2, #4]
  406eba:	68a9      	ldr	r1, [r5, #8]
  406ebc:	6091      	str	r1, [r2, #8]
  406ebe:	eb0a 0107 	add.w	r1, sl, r7
  406ec2:	ebab 0207 	sub.w	r2, fp, r7
  406ec6:	f042 0201 	orr.w	r2, r2, #1
  406eca:	6099      	str	r1, [r3, #8]
  406ecc:	604a      	str	r2, [r1, #4]
  406ece:	f8da 3004 	ldr.w	r3, [sl, #4]
  406ed2:	f003 0301 	and.w	r3, r3, #1
  406ed6:	431f      	orrs	r7, r3
  406ed8:	4640      	mov	r0, r8
  406eda:	f8ca 7004 	str.w	r7, [sl, #4]
  406ede:	f7ff fedb 	bl	406c98 <__malloc_unlock>
  406ee2:	e751      	b.n	406d88 <_realloc_r+0xe4>
  406ee4:	682b      	ldr	r3, [r5, #0]
  406ee6:	6003      	str	r3, [r0, #0]
  406ee8:	686b      	ldr	r3, [r5, #4]
  406eea:	6043      	str	r3, [r0, #4]
  406eec:	2a1b      	cmp	r2, #27
  406eee:	d82d      	bhi.n	406f4c <_realloc_r+0x2a8>
  406ef0:	f100 0308 	add.w	r3, r0, #8
  406ef4:	f105 0208 	add.w	r2, r5, #8
  406ef8:	e71b      	b.n	406d32 <_realloc_r+0x8e>
  406efa:	4632      	mov	r2, r6
  406efc:	6829      	ldr	r1, [r5, #0]
  406efe:	6011      	str	r1, [r2, #0]
  406f00:	6869      	ldr	r1, [r5, #4]
  406f02:	6051      	str	r1, [r2, #4]
  406f04:	68a9      	ldr	r1, [r5, #8]
  406f06:	6091      	str	r1, [r2, #8]
  406f08:	461c      	mov	r4, r3
  406f0a:	46d1      	mov	r9, sl
  406f0c:	e72a      	b.n	406d64 <_realloc_r+0xc0>
  406f0e:	eb09 0107 	add.w	r1, r9, r7
  406f12:	ebab 0b07 	sub.w	fp, fp, r7
  406f16:	f04b 0201 	orr.w	r2, fp, #1
  406f1a:	6099      	str	r1, [r3, #8]
  406f1c:	604a      	str	r2, [r1, #4]
  406f1e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406f22:	f003 0301 	and.w	r3, r3, #1
  406f26:	431f      	orrs	r7, r3
  406f28:	4640      	mov	r0, r8
  406f2a:	f845 7c04 	str.w	r7, [r5, #-4]
  406f2e:	f7ff feb3 	bl	406c98 <__malloc_unlock>
  406f32:	462e      	mov	r6, r5
  406f34:	e728      	b.n	406d88 <_realloc_r+0xe4>
  406f36:	4629      	mov	r1, r5
  406f38:	f7ff fe44 	bl	406bc4 <memmove>
  406f3c:	e6ff      	b.n	406d3e <_realloc_r+0x9a>
  406f3e:	4629      	mov	r1, r5
  406f40:	4630      	mov	r0, r6
  406f42:	461c      	mov	r4, r3
  406f44:	46d1      	mov	r9, sl
  406f46:	f7ff fe3d 	bl	406bc4 <memmove>
  406f4a:	e70b      	b.n	406d64 <_realloc_r+0xc0>
  406f4c:	68ab      	ldr	r3, [r5, #8]
  406f4e:	6083      	str	r3, [r0, #8]
  406f50:	68eb      	ldr	r3, [r5, #12]
  406f52:	60c3      	str	r3, [r0, #12]
  406f54:	2a24      	cmp	r2, #36	; 0x24
  406f56:	d017      	beq.n	406f88 <_realloc_r+0x2e4>
  406f58:	f100 0310 	add.w	r3, r0, #16
  406f5c:	f105 0210 	add.w	r2, r5, #16
  406f60:	e6e7      	b.n	406d32 <_realloc_r+0x8e>
  406f62:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406f66:	f023 0303 	bic.w	r3, r3, #3
  406f6a:	441c      	add	r4, r3
  406f6c:	462e      	mov	r6, r5
  406f6e:	e6f9      	b.n	406d64 <_realloc_r+0xc0>
  406f70:	68a9      	ldr	r1, [r5, #8]
  406f72:	f8ca 1010 	str.w	r1, [sl, #16]
  406f76:	68e9      	ldr	r1, [r5, #12]
  406f78:	f8ca 1014 	str.w	r1, [sl, #20]
  406f7c:	2a24      	cmp	r2, #36	; 0x24
  406f7e:	d00c      	beq.n	406f9a <_realloc_r+0x2f6>
  406f80:	3510      	adds	r5, #16
  406f82:	f10a 0218 	add.w	r2, sl, #24
  406f86:	e7b9      	b.n	406efc <_realloc_r+0x258>
  406f88:	692b      	ldr	r3, [r5, #16]
  406f8a:	6103      	str	r3, [r0, #16]
  406f8c:	696b      	ldr	r3, [r5, #20]
  406f8e:	6143      	str	r3, [r0, #20]
  406f90:	f105 0218 	add.w	r2, r5, #24
  406f94:	f100 0318 	add.w	r3, r0, #24
  406f98:	e6cb      	b.n	406d32 <_realloc_r+0x8e>
  406f9a:	692a      	ldr	r2, [r5, #16]
  406f9c:	f8ca 2018 	str.w	r2, [sl, #24]
  406fa0:	696a      	ldr	r2, [r5, #20]
  406fa2:	f8ca 201c 	str.w	r2, [sl, #28]
  406fa6:	3518      	adds	r5, #24
  406fa8:	f10a 0220 	add.w	r2, sl, #32
  406fac:	e7a6      	b.n	406efc <_realloc_r+0x258>
  406fae:	4632      	mov	r2, r6
  406fb0:	e77f      	b.n	406eb2 <_realloc_r+0x20e>
  406fb2:	4629      	mov	r1, r5
  406fb4:	4630      	mov	r0, r6
  406fb6:	9301      	str	r3, [sp, #4]
  406fb8:	f7ff fe04 	bl	406bc4 <memmove>
  406fbc:	9b01      	ldr	r3, [sp, #4]
  406fbe:	e77e      	b.n	406ebe <_realloc_r+0x21a>
  406fc0:	68a9      	ldr	r1, [r5, #8]
  406fc2:	f8ca 1010 	str.w	r1, [sl, #16]
  406fc6:	68e9      	ldr	r1, [r5, #12]
  406fc8:	f8ca 1014 	str.w	r1, [sl, #20]
  406fcc:	2a24      	cmp	r2, #36	; 0x24
  406fce:	d003      	beq.n	406fd8 <_realloc_r+0x334>
  406fd0:	3510      	adds	r5, #16
  406fd2:	f10a 0218 	add.w	r2, sl, #24
  406fd6:	e76c      	b.n	406eb2 <_realloc_r+0x20e>
  406fd8:	692a      	ldr	r2, [r5, #16]
  406fda:	f8ca 2018 	str.w	r2, [sl, #24]
  406fde:	696a      	ldr	r2, [r5, #20]
  406fe0:	f8ca 201c 	str.w	r2, [sl, #28]
  406fe4:	3518      	adds	r5, #24
  406fe6:	f10a 0220 	add.w	r2, sl, #32
  406fea:	e762      	b.n	406eb2 <_realloc_r+0x20e>
  406fec:	204005d8 	.word	0x204005d8

00406ff0 <_sbrk_r>:
  406ff0:	b538      	push	{r3, r4, r5, lr}
  406ff2:	4c07      	ldr	r4, [pc, #28]	; (407010 <_sbrk_r+0x20>)
  406ff4:	2300      	movs	r3, #0
  406ff6:	4605      	mov	r5, r0
  406ff8:	4608      	mov	r0, r1
  406ffa:	6023      	str	r3, [r4, #0]
  406ffc:	f7fb fb1e 	bl	40263c <_sbrk>
  407000:	1c43      	adds	r3, r0, #1
  407002:	d000      	beq.n	407006 <_sbrk_r+0x16>
  407004:	bd38      	pop	{r3, r4, r5, pc}
  407006:	6823      	ldr	r3, [r4, #0]
  407008:	2b00      	cmp	r3, #0
  40700a:	d0fb      	beq.n	407004 <_sbrk_r+0x14>
  40700c:	602b      	str	r3, [r5, #0]
  40700e:	bd38      	pop	{r3, r4, r5, pc}
  407010:	20400b20 	.word	0x20400b20

00407014 <__sread>:
  407014:	b510      	push	{r4, lr}
  407016:	460c      	mov	r4, r1
  407018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40701c:	f000 fa76 	bl	40750c <_read_r>
  407020:	2800      	cmp	r0, #0
  407022:	db03      	blt.n	40702c <__sread+0x18>
  407024:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407026:	4403      	add	r3, r0
  407028:	6523      	str	r3, [r4, #80]	; 0x50
  40702a:	bd10      	pop	{r4, pc}
  40702c:	89a3      	ldrh	r3, [r4, #12]
  40702e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407032:	81a3      	strh	r3, [r4, #12]
  407034:	bd10      	pop	{r4, pc}
  407036:	bf00      	nop

00407038 <__swrite>:
  407038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40703c:	4616      	mov	r6, r2
  40703e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407042:	461f      	mov	r7, r3
  407044:	05d3      	lsls	r3, r2, #23
  407046:	460c      	mov	r4, r1
  407048:	4605      	mov	r5, r0
  40704a:	d507      	bpl.n	40705c <__swrite+0x24>
  40704c:	2200      	movs	r2, #0
  40704e:	2302      	movs	r3, #2
  407050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407054:	f000 fa44 	bl	4074e0 <_lseek_r>
  407058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40705c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407060:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407064:	81a2      	strh	r2, [r4, #12]
  407066:	463b      	mov	r3, r7
  407068:	4632      	mov	r2, r6
  40706a:	4628      	mov	r0, r5
  40706c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407070:	f000 b924 	b.w	4072bc <_write_r>

00407074 <__sseek>:
  407074:	b510      	push	{r4, lr}
  407076:	460c      	mov	r4, r1
  407078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40707c:	f000 fa30 	bl	4074e0 <_lseek_r>
  407080:	89a3      	ldrh	r3, [r4, #12]
  407082:	1c42      	adds	r2, r0, #1
  407084:	bf0e      	itee	eq
  407086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40708a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40708e:	6520      	strne	r0, [r4, #80]	; 0x50
  407090:	81a3      	strh	r3, [r4, #12]
  407092:	bd10      	pop	{r4, pc}

00407094 <__sclose>:
  407094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407098:	f000 b988 	b.w	4073ac <_close_r>
	...

004070c0 <strlen>:
  4070c0:	f890 f000 	pld	[r0]
  4070c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4070c8:	f020 0107 	bic.w	r1, r0, #7
  4070cc:	f06f 0c00 	mvn.w	ip, #0
  4070d0:	f010 0407 	ands.w	r4, r0, #7
  4070d4:	f891 f020 	pld	[r1, #32]
  4070d8:	f040 8049 	bne.w	40716e <strlen+0xae>
  4070dc:	f04f 0400 	mov.w	r4, #0
  4070e0:	f06f 0007 	mvn.w	r0, #7
  4070e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4070e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4070ec:	f100 0008 	add.w	r0, r0, #8
  4070f0:	fa82 f24c 	uadd8	r2, r2, ip
  4070f4:	faa4 f28c 	sel	r2, r4, ip
  4070f8:	fa83 f34c 	uadd8	r3, r3, ip
  4070fc:	faa2 f38c 	sel	r3, r2, ip
  407100:	bb4b      	cbnz	r3, 407156 <strlen+0x96>
  407102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407106:	fa82 f24c 	uadd8	r2, r2, ip
  40710a:	f100 0008 	add.w	r0, r0, #8
  40710e:	faa4 f28c 	sel	r2, r4, ip
  407112:	fa83 f34c 	uadd8	r3, r3, ip
  407116:	faa2 f38c 	sel	r3, r2, ip
  40711a:	b9e3      	cbnz	r3, 407156 <strlen+0x96>
  40711c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407120:	fa82 f24c 	uadd8	r2, r2, ip
  407124:	f100 0008 	add.w	r0, r0, #8
  407128:	faa4 f28c 	sel	r2, r4, ip
  40712c:	fa83 f34c 	uadd8	r3, r3, ip
  407130:	faa2 f38c 	sel	r3, r2, ip
  407134:	b97b      	cbnz	r3, 407156 <strlen+0x96>
  407136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40713a:	f101 0120 	add.w	r1, r1, #32
  40713e:	fa82 f24c 	uadd8	r2, r2, ip
  407142:	f100 0008 	add.w	r0, r0, #8
  407146:	faa4 f28c 	sel	r2, r4, ip
  40714a:	fa83 f34c 	uadd8	r3, r3, ip
  40714e:	faa2 f38c 	sel	r3, r2, ip
  407152:	2b00      	cmp	r3, #0
  407154:	d0c6      	beq.n	4070e4 <strlen+0x24>
  407156:	2a00      	cmp	r2, #0
  407158:	bf04      	itt	eq
  40715a:	3004      	addeq	r0, #4
  40715c:	461a      	moveq	r2, r3
  40715e:	ba12      	rev	r2, r2
  407160:	fab2 f282 	clz	r2, r2
  407164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40716c:	4770      	bx	lr
  40716e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407172:	f004 0503 	and.w	r5, r4, #3
  407176:	f1c4 0000 	rsb	r0, r4, #0
  40717a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40717e:	f014 0f04 	tst.w	r4, #4
  407182:	f891 f040 	pld	[r1, #64]	; 0x40
  407186:	fa0c f505 	lsl.w	r5, ip, r5
  40718a:	ea62 0205 	orn	r2, r2, r5
  40718e:	bf1c      	itt	ne
  407190:	ea63 0305 	ornne	r3, r3, r5
  407194:	4662      	movne	r2, ip
  407196:	f04f 0400 	mov.w	r4, #0
  40719a:	e7a9      	b.n	4070f0 <strlen+0x30>

0040719c <__swbuf_r>:
  40719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40719e:	460d      	mov	r5, r1
  4071a0:	4614      	mov	r4, r2
  4071a2:	4606      	mov	r6, r0
  4071a4:	b110      	cbz	r0, 4071ac <__swbuf_r+0x10>
  4071a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4071a8:	2b00      	cmp	r3, #0
  4071aa:	d04b      	beq.n	407244 <__swbuf_r+0xa8>
  4071ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4071b0:	69a3      	ldr	r3, [r4, #24]
  4071b2:	60a3      	str	r3, [r4, #8]
  4071b4:	b291      	uxth	r1, r2
  4071b6:	0708      	lsls	r0, r1, #28
  4071b8:	d539      	bpl.n	40722e <__swbuf_r+0x92>
  4071ba:	6923      	ldr	r3, [r4, #16]
  4071bc:	2b00      	cmp	r3, #0
  4071be:	d036      	beq.n	40722e <__swbuf_r+0x92>
  4071c0:	b2ed      	uxtb	r5, r5
  4071c2:	0489      	lsls	r1, r1, #18
  4071c4:	462f      	mov	r7, r5
  4071c6:	d515      	bpl.n	4071f4 <__swbuf_r+0x58>
  4071c8:	6822      	ldr	r2, [r4, #0]
  4071ca:	6961      	ldr	r1, [r4, #20]
  4071cc:	1ad3      	subs	r3, r2, r3
  4071ce:	428b      	cmp	r3, r1
  4071d0:	da1c      	bge.n	40720c <__swbuf_r+0x70>
  4071d2:	3301      	adds	r3, #1
  4071d4:	68a1      	ldr	r1, [r4, #8]
  4071d6:	1c50      	adds	r0, r2, #1
  4071d8:	3901      	subs	r1, #1
  4071da:	60a1      	str	r1, [r4, #8]
  4071dc:	6020      	str	r0, [r4, #0]
  4071de:	7015      	strb	r5, [r2, #0]
  4071e0:	6962      	ldr	r2, [r4, #20]
  4071e2:	429a      	cmp	r2, r3
  4071e4:	d01a      	beq.n	40721c <__swbuf_r+0x80>
  4071e6:	89a3      	ldrh	r3, [r4, #12]
  4071e8:	07db      	lsls	r3, r3, #31
  4071ea:	d501      	bpl.n	4071f0 <__swbuf_r+0x54>
  4071ec:	2d0a      	cmp	r5, #10
  4071ee:	d015      	beq.n	40721c <__swbuf_r+0x80>
  4071f0:	4638      	mov	r0, r7
  4071f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4071f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4071f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4071fa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4071fe:	81a2      	strh	r2, [r4, #12]
  407200:	6822      	ldr	r2, [r4, #0]
  407202:	6661      	str	r1, [r4, #100]	; 0x64
  407204:	6961      	ldr	r1, [r4, #20]
  407206:	1ad3      	subs	r3, r2, r3
  407208:	428b      	cmp	r3, r1
  40720a:	dbe2      	blt.n	4071d2 <__swbuf_r+0x36>
  40720c:	4621      	mov	r1, r4
  40720e:	4630      	mov	r0, r6
  407210:	f7fe fc88 	bl	405b24 <_fflush_r>
  407214:	b940      	cbnz	r0, 407228 <__swbuf_r+0x8c>
  407216:	6822      	ldr	r2, [r4, #0]
  407218:	2301      	movs	r3, #1
  40721a:	e7db      	b.n	4071d4 <__swbuf_r+0x38>
  40721c:	4621      	mov	r1, r4
  40721e:	4630      	mov	r0, r6
  407220:	f7fe fc80 	bl	405b24 <_fflush_r>
  407224:	2800      	cmp	r0, #0
  407226:	d0e3      	beq.n	4071f0 <__swbuf_r+0x54>
  407228:	f04f 37ff 	mov.w	r7, #4294967295
  40722c:	e7e0      	b.n	4071f0 <__swbuf_r+0x54>
  40722e:	4621      	mov	r1, r4
  407230:	4630      	mov	r0, r6
  407232:	f7fe fb63 	bl	4058fc <__swsetup_r>
  407236:	2800      	cmp	r0, #0
  407238:	d1f6      	bne.n	407228 <__swbuf_r+0x8c>
  40723a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40723e:	6923      	ldr	r3, [r4, #16]
  407240:	b291      	uxth	r1, r2
  407242:	e7bd      	b.n	4071c0 <__swbuf_r+0x24>
  407244:	f7fe fcc6 	bl	405bd4 <__sinit>
  407248:	e7b0      	b.n	4071ac <__swbuf_r+0x10>
  40724a:	bf00      	nop

0040724c <_wcrtomb_r>:
  40724c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40724e:	4606      	mov	r6, r0
  407250:	b085      	sub	sp, #20
  407252:	461f      	mov	r7, r3
  407254:	b189      	cbz	r1, 40727a <_wcrtomb_r+0x2e>
  407256:	4c10      	ldr	r4, [pc, #64]	; (407298 <_wcrtomb_r+0x4c>)
  407258:	4d10      	ldr	r5, [pc, #64]	; (40729c <_wcrtomb_r+0x50>)
  40725a:	6824      	ldr	r4, [r4, #0]
  40725c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40725e:	2c00      	cmp	r4, #0
  407260:	bf08      	it	eq
  407262:	462c      	moveq	r4, r5
  407264:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407268:	47a0      	blx	r4
  40726a:	1c43      	adds	r3, r0, #1
  40726c:	d103      	bne.n	407276 <_wcrtomb_r+0x2a>
  40726e:	2200      	movs	r2, #0
  407270:	238a      	movs	r3, #138	; 0x8a
  407272:	603a      	str	r2, [r7, #0]
  407274:	6033      	str	r3, [r6, #0]
  407276:	b005      	add	sp, #20
  407278:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40727a:	460c      	mov	r4, r1
  40727c:	4906      	ldr	r1, [pc, #24]	; (407298 <_wcrtomb_r+0x4c>)
  40727e:	4a07      	ldr	r2, [pc, #28]	; (40729c <_wcrtomb_r+0x50>)
  407280:	6809      	ldr	r1, [r1, #0]
  407282:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407284:	2900      	cmp	r1, #0
  407286:	bf08      	it	eq
  407288:	4611      	moveq	r1, r2
  40728a:	4622      	mov	r2, r4
  40728c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407290:	a901      	add	r1, sp, #4
  407292:	47a0      	blx	r4
  407294:	e7e9      	b.n	40726a <_wcrtomb_r+0x1e>
  407296:	bf00      	nop
  407298:	20400038 	.word	0x20400038
  40729c:	2040046c 	.word	0x2040046c

004072a0 <__ascii_wctomb>:
  4072a0:	b121      	cbz	r1, 4072ac <__ascii_wctomb+0xc>
  4072a2:	2aff      	cmp	r2, #255	; 0xff
  4072a4:	d804      	bhi.n	4072b0 <__ascii_wctomb+0x10>
  4072a6:	700a      	strb	r2, [r1, #0]
  4072a8:	2001      	movs	r0, #1
  4072aa:	4770      	bx	lr
  4072ac:	4608      	mov	r0, r1
  4072ae:	4770      	bx	lr
  4072b0:	238a      	movs	r3, #138	; 0x8a
  4072b2:	6003      	str	r3, [r0, #0]
  4072b4:	f04f 30ff 	mov.w	r0, #4294967295
  4072b8:	4770      	bx	lr
  4072ba:	bf00      	nop

004072bc <_write_r>:
  4072bc:	b570      	push	{r4, r5, r6, lr}
  4072be:	460d      	mov	r5, r1
  4072c0:	4c08      	ldr	r4, [pc, #32]	; (4072e4 <_write_r+0x28>)
  4072c2:	4611      	mov	r1, r2
  4072c4:	4606      	mov	r6, r0
  4072c6:	461a      	mov	r2, r3
  4072c8:	4628      	mov	r0, r5
  4072ca:	2300      	movs	r3, #0
  4072cc:	6023      	str	r3, [r4, #0]
  4072ce:	f7f9 ff31 	bl	401134 <_write>
  4072d2:	1c43      	adds	r3, r0, #1
  4072d4:	d000      	beq.n	4072d8 <_write_r+0x1c>
  4072d6:	bd70      	pop	{r4, r5, r6, pc}
  4072d8:	6823      	ldr	r3, [r4, #0]
  4072da:	2b00      	cmp	r3, #0
  4072dc:	d0fb      	beq.n	4072d6 <_write_r+0x1a>
  4072de:	6033      	str	r3, [r6, #0]
  4072e0:	bd70      	pop	{r4, r5, r6, pc}
  4072e2:	bf00      	nop
  4072e4:	20400b20 	.word	0x20400b20

004072e8 <__register_exitproc>:
  4072e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4072ec:	4d2c      	ldr	r5, [pc, #176]	; (4073a0 <__register_exitproc+0xb8>)
  4072ee:	4606      	mov	r6, r0
  4072f0:	6828      	ldr	r0, [r5, #0]
  4072f2:	4698      	mov	r8, r3
  4072f4:	460f      	mov	r7, r1
  4072f6:	4691      	mov	r9, r2
  4072f8:	f7ff f82c 	bl	406354 <__retarget_lock_acquire_recursive>
  4072fc:	4b29      	ldr	r3, [pc, #164]	; (4073a4 <__register_exitproc+0xbc>)
  4072fe:	681c      	ldr	r4, [r3, #0]
  407300:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407304:	2b00      	cmp	r3, #0
  407306:	d03e      	beq.n	407386 <__register_exitproc+0x9e>
  407308:	685a      	ldr	r2, [r3, #4]
  40730a:	2a1f      	cmp	r2, #31
  40730c:	dc1c      	bgt.n	407348 <__register_exitproc+0x60>
  40730e:	f102 0e01 	add.w	lr, r2, #1
  407312:	b176      	cbz	r6, 407332 <__register_exitproc+0x4a>
  407314:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407318:	2401      	movs	r4, #1
  40731a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40731e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407322:	4094      	lsls	r4, r2
  407324:	4320      	orrs	r0, r4
  407326:	2e02      	cmp	r6, #2
  407328:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40732c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407330:	d023      	beq.n	40737a <__register_exitproc+0x92>
  407332:	3202      	adds	r2, #2
  407334:	f8c3 e004 	str.w	lr, [r3, #4]
  407338:	6828      	ldr	r0, [r5, #0]
  40733a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40733e:	f7ff f80b 	bl	406358 <__retarget_lock_release_recursive>
  407342:	2000      	movs	r0, #0
  407344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407348:	4b17      	ldr	r3, [pc, #92]	; (4073a8 <__register_exitproc+0xc0>)
  40734a:	b30b      	cbz	r3, 407390 <__register_exitproc+0xa8>
  40734c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407350:	f7ff f87c 	bl	40644c <malloc>
  407354:	4603      	mov	r3, r0
  407356:	b1d8      	cbz	r0, 407390 <__register_exitproc+0xa8>
  407358:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40735c:	6002      	str	r2, [r0, #0]
  40735e:	2100      	movs	r1, #0
  407360:	6041      	str	r1, [r0, #4]
  407362:	460a      	mov	r2, r1
  407364:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407368:	f04f 0e01 	mov.w	lr, #1
  40736c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407370:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407374:	2e00      	cmp	r6, #0
  407376:	d0dc      	beq.n	407332 <__register_exitproc+0x4a>
  407378:	e7cc      	b.n	407314 <__register_exitproc+0x2c>
  40737a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40737e:	430c      	orrs	r4, r1
  407380:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407384:	e7d5      	b.n	407332 <__register_exitproc+0x4a>
  407386:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40738a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40738e:	e7bb      	b.n	407308 <__register_exitproc+0x20>
  407390:	6828      	ldr	r0, [r5, #0]
  407392:	f7fe ffe1 	bl	406358 <__retarget_lock_release_recursive>
  407396:	f04f 30ff 	mov.w	r0, #4294967295
  40739a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40739e:	bf00      	nop
  4073a0:	20400468 	.word	0x20400468
  4073a4:	004080e8 	.word	0x004080e8
  4073a8:	0040644d 	.word	0x0040644d

004073ac <_close_r>:
  4073ac:	b538      	push	{r3, r4, r5, lr}
  4073ae:	4c07      	ldr	r4, [pc, #28]	; (4073cc <_close_r+0x20>)
  4073b0:	2300      	movs	r3, #0
  4073b2:	4605      	mov	r5, r0
  4073b4:	4608      	mov	r0, r1
  4073b6:	6023      	str	r3, [r4, #0]
  4073b8:	f7fb f95c 	bl	402674 <_close>
  4073bc:	1c43      	adds	r3, r0, #1
  4073be:	d000      	beq.n	4073c2 <_close_r+0x16>
  4073c0:	bd38      	pop	{r3, r4, r5, pc}
  4073c2:	6823      	ldr	r3, [r4, #0]
  4073c4:	2b00      	cmp	r3, #0
  4073c6:	d0fb      	beq.n	4073c0 <_close_r+0x14>
  4073c8:	602b      	str	r3, [r5, #0]
  4073ca:	bd38      	pop	{r3, r4, r5, pc}
  4073cc:	20400b20 	.word	0x20400b20

004073d0 <_fclose_r>:
  4073d0:	b570      	push	{r4, r5, r6, lr}
  4073d2:	b159      	cbz	r1, 4073ec <_fclose_r+0x1c>
  4073d4:	4605      	mov	r5, r0
  4073d6:	460c      	mov	r4, r1
  4073d8:	b110      	cbz	r0, 4073e0 <_fclose_r+0x10>
  4073da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4073dc:	2b00      	cmp	r3, #0
  4073de:	d03c      	beq.n	40745a <_fclose_r+0x8a>
  4073e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4073e2:	07d8      	lsls	r0, r3, #31
  4073e4:	d505      	bpl.n	4073f2 <_fclose_r+0x22>
  4073e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4073ea:	b92b      	cbnz	r3, 4073f8 <_fclose_r+0x28>
  4073ec:	2600      	movs	r6, #0
  4073ee:	4630      	mov	r0, r6
  4073f0:	bd70      	pop	{r4, r5, r6, pc}
  4073f2:	89a3      	ldrh	r3, [r4, #12]
  4073f4:	0599      	lsls	r1, r3, #22
  4073f6:	d53c      	bpl.n	407472 <_fclose_r+0xa2>
  4073f8:	4621      	mov	r1, r4
  4073fa:	4628      	mov	r0, r5
  4073fc:	f7fe faf2 	bl	4059e4 <__sflush_r>
  407400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407402:	4606      	mov	r6, r0
  407404:	b133      	cbz	r3, 407414 <_fclose_r+0x44>
  407406:	69e1      	ldr	r1, [r4, #28]
  407408:	4628      	mov	r0, r5
  40740a:	4798      	blx	r3
  40740c:	2800      	cmp	r0, #0
  40740e:	bfb8      	it	lt
  407410:	f04f 36ff 	movlt.w	r6, #4294967295
  407414:	89a3      	ldrh	r3, [r4, #12]
  407416:	061a      	lsls	r2, r3, #24
  407418:	d422      	bmi.n	407460 <_fclose_r+0x90>
  40741a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40741c:	b141      	cbz	r1, 407430 <_fclose_r+0x60>
  40741e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407422:	4299      	cmp	r1, r3
  407424:	d002      	beq.n	40742c <_fclose_r+0x5c>
  407426:	4628      	mov	r0, r5
  407428:	f7fe fcfa 	bl	405e20 <_free_r>
  40742c:	2300      	movs	r3, #0
  40742e:	6323      	str	r3, [r4, #48]	; 0x30
  407430:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407432:	b121      	cbz	r1, 40743e <_fclose_r+0x6e>
  407434:	4628      	mov	r0, r5
  407436:	f7fe fcf3 	bl	405e20 <_free_r>
  40743a:	2300      	movs	r3, #0
  40743c:	6463      	str	r3, [r4, #68]	; 0x44
  40743e:	f7fe fbf5 	bl	405c2c <__sfp_lock_acquire>
  407442:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407444:	2200      	movs	r2, #0
  407446:	07db      	lsls	r3, r3, #31
  407448:	81a2      	strh	r2, [r4, #12]
  40744a:	d50e      	bpl.n	40746a <_fclose_r+0x9a>
  40744c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40744e:	f7fe ff7f 	bl	406350 <__retarget_lock_close_recursive>
  407452:	f7fe fbf1 	bl	405c38 <__sfp_lock_release>
  407456:	4630      	mov	r0, r6
  407458:	bd70      	pop	{r4, r5, r6, pc}
  40745a:	f7fe fbbb 	bl	405bd4 <__sinit>
  40745e:	e7bf      	b.n	4073e0 <_fclose_r+0x10>
  407460:	6921      	ldr	r1, [r4, #16]
  407462:	4628      	mov	r0, r5
  407464:	f7fe fcdc 	bl	405e20 <_free_r>
  407468:	e7d7      	b.n	40741a <_fclose_r+0x4a>
  40746a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40746c:	f7fe ff74 	bl	406358 <__retarget_lock_release_recursive>
  407470:	e7ec      	b.n	40744c <_fclose_r+0x7c>
  407472:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407474:	f7fe ff6e 	bl	406354 <__retarget_lock_acquire_recursive>
  407478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40747c:	2b00      	cmp	r3, #0
  40747e:	d1bb      	bne.n	4073f8 <_fclose_r+0x28>
  407480:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407482:	f016 0601 	ands.w	r6, r6, #1
  407486:	d1b1      	bne.n	4073ec <_fclose_r+0x1c>
  407488:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40748a:	f7fe ff65 	bl	406358 <__retarget_lock_release_recursive>
  40748e:	4630      	mov	r0, r6
  407490:	bd70      	pop	{r4, r5, r6, pc}
  407492:	bf00      	nop

00407494 <_fstat_r>:
  407494:	b538      	push	{r3, r4, r5, lr}
  407496:	460b      	mov	r3, r1
  407498:	4c07      	ldr	r4, [pc, #28]	; (4074b8 <_fstat_r+0x24>)
  40749a:	4605      	mov	r5, r0
  40749c:	4611      	mov	r1, r2
  40749e:	4618      	mov	r0, r3
  4074a0:	2300      	movs	r3, #0
  4074a2:	6023      	str	r3, [r4, #0]
  4074a4:	f7fb f8e9 	bl	40267a <_fstat>
  4074a8:	1c43      	adds	r3, r0, #1
  4074aa:	d000      	beq.n	4074ae <_fstat_r+0x1a>
  4074ac:	bd38      	pop	{r3, r4, r5, pc}
  4074ae:	6823      	ldr	r3, [r4, #0]
  4074b0:	2b00      	cmp	r3, #0
  4074b2:	d0fb      	beq.n	4074ac <_fstat_r+0x18>
  4074b4:	602b      	str	r3, [r5, #0]
  4074b6:	bd38      	pop	{r3, r4, r5, pc}
  4074b8:	20400b20 	.word	0x20400b20

004074bc <_isatty_r>:
  4074bc:	b538      	push	{r3, r4, r5, lr}
  4074be:	4c07      	ldr	r4, [pc, #28]	; (4074dc <_isatty_r+0x20>)
  4074c0:	2300      	movs	r3, #0
  4074c2:	4605      	mov	r5, r0
  4074c4:	4608      	mov	r0, r1
  4074c6:	6023      	str	r3, [r4, #0]
  4074c8:	f7fb f8dc 	bl	402684 <_isatty>
  4074cc:	1c43      	adds	r3, r0, #1
  4074ce:	d000      	beq.n	4074d2 <_isatty_r+0x16>
  4074d0:	bd38      	pop	{r3, r4, r5, pc}
  4074d2:	6823      	ldr	r3, [r4, #0]
  4074d4:	2b00      	cmp	r3, #0
  4074d6:	d0fb      	beq.n	4074d0 <_isatty_r+0x14>
  4074d8:	602b      	str	r3, [r5, #0]
  4074da:	bd38      	pop	{r3, r4, r5, pc}
  4074dc:	20400b20 	.word	0x20400b20

004074e0 <_lseek_r>:
  4074e0:	b570      	push	{r4, r5, r6, lr}
  4074e2:	460d      	mov	r5, r1
  4074e4:	4c08      	ldr	r4, [pc, #32]	; (407508 <_lseek_r+0x28>)
  4074e6:	4611      	mov	r1, r2
  4074e8:	4606      	mov	r6, r0
  4074ea:	461a      	mov	r2, r3
  4074ec:	4628      	mov	r0, r5
  4074ee:	2300      	movs	r3, #0
  4074f0:	6023      	str	r3, [r4, #0]
  4074f2:	f7fb f8c9 	bl	402688 <_lseek>
  4074f6:	1c43      	adds	r3, r0, #1
  4074f8:	d000      	beq.n	4074fc <_lseek_r+0x1c>
  4074fa:	bd70      	pop	{r4, r5, r6, pc}
  4074fc:	6823      	ldr	r3, [r4, #0]
  4074fe:	2b00      	cmp	r3, #0
  407500:	d0fb      	beq.n	4074fa <_lseek_r+0x1a>
  407502:	6033      	str	r3, [r6, #0]
  407504:	bd70      	pop	{r4, r5, r6, pc}
  407506:	bf00      	nop
  407508:	20400b20 	.word	0x20400b20

0040750c <_read_r>:
  40750c:	b570      	push	{r4, r5, r6, lr}
  40750e:	460d      	mov	r5, r1
  407510:	4c08      	ldr	r4, [pc, #32]	; (407534 <_read_r+0x28>)
  407512:	4611      	mov	r1, r2
  407514:	4606      	mov	r6, r0
  407516:	461a      	mov	r2, r3
  407518:	4628      	mov	r0, r5
  40751a:	2300      	movs	r3, #0
  40751c:	6023      	str	r3, [r4, #0]
  40751e:	f7f9 fdeb 	bl	4010f8 <_read>
  407522:	1c43      	adds	r3, r0, #1
  407524:	d000      	beq.n	407528 <_read_r+0x1c>
  407526:	bd70      	pop	{r4, r5, r6, pc}
  407528:	6823      	ldr	r3, [r4, #0]
  40752a:	2b00      	cmp	r3, #0
  40752c:	d0fb      	beq.n	407526 <_read_r+0x1a>
  40752e:	6033      	str	r3, [r6, #0]
  407530:	bd70      	pop	{r4, r5, r6, pc}
  407532:	bf00      	nop
  407534:	20400b20 	.word	0x20400b20

00407538 <__aeabi_uldivmod>:
  407538:	b953      	cbnz	r3, 407550 <__aeabi_uldivmod+0x18>
  40753a:	b94a      	cbnz	r2, 407550 <__aeabi_uldivmod+0x18>
  40753c:	2900      	cmp	r1, #0
  40753e:	bf08      	it	eq
  407540:	2800      	cmpeq	r0, #0
  407542:	bf1c      	itt	ne
  407544:	f04f 31ff 	movne.w	r1, #4294967295
  407548:	f04f 30ff 	movne.w	r0, #4294967295
  40754c:	f000 b97a 	b.w	407844 <__aeabi_idiv0>
  407550:	f1ad 0c08 	sub.w	ip, sp, #8
  407554:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407558:	f000 f806 	bl	407568 <__udivmoddi4>
  40755c:	f8dd e004 	ldr.w	lr, [sp, #4]
  407560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407564:	b004      	add	sp, #16
  407566:	4770      	bx	lr

00407568 <__udivmoddi4>:
  407568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40756c:	468c      	mov	ip, r1
  40756e:	460d      	mov	r5, r1
  407570:	4604      	mov	r4, r0
  407572:	9e08      	ldr	r6, [sp, #32]
  407574:	2b00      	cmp	r3, #0
  407576:	d151      	bne.n	40761c <__udivmoddi4+0xb4>
  407578:	428a      	cmp	r2, r1
  40757a:	4617      	mov	r7, r2
  40757c:	d96d      	bls.n	40765a <__udivmoddi4+0xf2>
  40757e:	fab2 fe82 	clz	lr, r2
  407582:	f1be 0f00 	cmp.w	lr, #0
  407586:	d00b      	beq.n	4075a0 <__udivmoddi4+0x38>
  407588:	f1ce 0c20 	rsb	ip, lr, #32
  40758c:	fa01 f50e 	lsl.w	r5, r1, lr
  407590:	fa20 fc0c 	lsr.w	ip, r0, ip
  407594:	fa02 f70e 	lsl.w	r7, r2, lr
  407598:	ea4c 0c05 	orr.w	ip, ip, r5
  40759c:	fa00 f40e 	lsl.w	r4, r0, lr
  4075a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4075a4:	0c25      	lsrs	r5, r4, #16
  4075a6:	fbbc f8fa 	udiv	r8, ip, sl
  4075aa:	fa1f f987 	uxth.w	r9, r7
  4075ae:	fb0a cc18 	mls	ip, sl, r8, ip
  4075b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4075b6:	fb08 f309 	mul.w	r3, r8, r9
  4075ba:	42ab      	cmp	r3, r5
  4075bc:	d90a      	bls.n	4075d4 <__udivmoddi4+0x6c>
  4075be:	19ed      	adds	r5, r5, r7
  4075c0:	f108 32ff 	add.w	r2, r8, #4294967295
  4075c4:	f080 8123 	bcs.w	40780e <__udivmoddi4+0x2a6>
  4075c8:	42ab      	cmp	r3, r5
  4075ca:	f240 8120 	bls.w	40780e <__udivmoddi4+0x2a6>
  4075ce:	f1a8 0802 	sub.w	r8, r8, #2
  4075d2:	443d      	add	r5, r7
  4075d4:	1aed      	subs	r5, r5, r3
  4075d6:	b2a4      	uxth	r4, r4
  4075d8:	fbb5 f0fa 	udiv	r0, r5, sl
  4075dc:	fb0a 5510 	mls	r5, sl, r0, r5
  4075e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4075e4:	fb00 f909 	mul.w	r9, r0, r9
  4075e8:	45a1      	cmp	r9, r4
  4075ea:	d909      	bls.n	407600 <__udivmoddi4+0x98>
  4075ec:	19e4      	adds	r4, r4, r7
  4075ee:	f100 33ff 	add.w	r3, r0, #4294967295
  4075f2:	f080 810a 	bcs.w	40780a <__udivmoddi4+0x2a2>
  4075f6:	45a1      	cmp	r9, r4
  4075f8:	f240 8107 	bls.w	40780a <__udivmoddi4+0x2a2>
  4075fc:	3802      	subs	r0, #2
  4075fe:	443c      	add	r4, r7
  407600:	eba4 0409 	sub.w	r4, r4, r9
  407604:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407608:	2100      	movs	r1, #0
  40760a:	2e00      	cmp	r6, #0
  40760c:	d061      	beq.n	4076d2 <__udivmoddi4+0x16a>
  40760e:	fa24 f40e 	lsr.w	r4, r4, lr
  407612:	2300      	movs	r3, #0
  407614:	6034      	str	r4, [r6, #0]
  407616:	6073      	str	r3, [r6, #4]
  407618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40761c:	428b      	cmp	r3, r1
  40761e:	d907      	bls.n	407630 <__udivmoddi4+0xc8>
  407620:	2e00      	cmp	r6, #0
  407622:	d054      	beq.n	4076ce <__udivmoddi4+0x166>
  407624:	2100      	movs	r1, #0
  407626:	e886 0021 	stmia.w	r6, {r0, r5}
  40762a:	4608      	mov	r0, r1
  40762c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407630:	fab3 f183 	clz	r1, r3
  407634:	2900      	cmp	r1, #0
  407636:	f040 808e 	bne.w	407756 <__udivmoddi4+0x1ee>
  40763a:	42ab      	cmp	r3, r5
  40763c:	d302      	bcc.n	407644 <__udivmoddi4+0xdc>
  40763e:	4282      	cmp	r2, r0
  407640:	f200 80fa 	bhi.w	407838 <__udivmoddi4+0x2d0>
  407644:	1a84      	subs	r4, r0, r2
  407646:	eb65 0503 	sbc.w	r5, r5, r3
  40764a:	2001      	movs	r0, #1
  40764c:	46ac      	mov	ip, r5
  40764e:	2e00      	cmp	r6, #0
  407650:	d03f      	beq.n	4076d2 <__udivmoddi4+0x16a>
  407652:	e886 1010 	stmia.w	r6, {r4, ip}
  407656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40765a:	b912      	cbnz	r2, 407662 <__udivmoddi4+0xfa>
  40765c:	2701      	movs	r7, #1
  40765e:	fbb7 f7f2 	udiv	r7, r7, r2
  407662:	fab7 fe87 	clz	lr, r7
  407666:	f1be 0f00 	cmp.w	lr, #0
  40766a:	d134      	bne.n	4076d6 <__udivmoddi4+0x16e>
  40766c:	1beb      	subs	r3, r5, r7
  40766e:	0c3a      	lsrs	r2, r7, #16
  407670:	fa1f fc87 	uxth.w	ip, r7
  407674:	2101      	movs	r1, #1
  407676:	fbb3 f8f2 	udiv	r8, r3, r2
  40767a:	0c25      	lsrs	r5, r4, #16
  40767c:	fb02 3318 	mls	r3, r2, r8, r3
  407680:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407684:	fb0c f308 	mul.w	r3, ip, r8
  407688:	42ab      	cmp	r3, r5
  40768a:	d907      	bls.n	40769c <__udivmoddi4+0x134>
  40768c:	19ed      	adds	r5, r5, r7
  40768e:	f108 30ff 	add.w	r0, r8, #4294967295
  407692:	d202      	bcs.n	40769a <__udivmoddi4+0x132>
  407694:	42ab      	cmp	r3, r5
  407696:	f200 80d1 	bhi.w	40783c <__udivmoddi4+0x2d4>
  40769a:	4680      	mov	r8, r0
  40769c:	1aed      	subs	r5, r5, r3
  40769e:	b2a3      	uxth	r3, r4
  4076a0:	fbb5 f0f2 	udiv	r0, r5, r2
  4076a4:	fb02 5510 	mls	r5, r2, r0, r5
  4076a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4076ac:	fb0c fc00 	mul.w	ip, ip, r0
  4076b0:	45a4      	cmp	ip, r4
  4076b2:	d907      	bls.n	4076c4 <__udivmoddi4+0x15c>
  4076b4:	19e4      	adds	r4, r4, r7
  4076b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4076ba:	d202      	bcs.n	4076c2 <__udivmoddi4+0x15a>
  4076bc:	45a4      	cmp	ip, r4
  4076be:	f200 80b8 	bhi.w	407832 <__udivmoddi4+0x2ca>
  4076c2:	4618      	mov	r0, r3
  4076c4:	eba4 040c 	sub.w	r4, r4, ip
  4076c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4076cc:	e79d      	b.n	40760a <__udivmoddi4+0xa2>
  4076ce:	4631      	mov	r1, r6
  4076d0:	4630      	mov	r0, r6
  4076d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4076d6:	f1ce 0420 	rsb	r4, lr, #32
  4076da:	fa05 f30e 	lsl.w	r3, r5, lr
  4076de:	fa07 f70e 	lsl.w	r7, r7, lr
  4076e2:	fa20 f804 	lsr.w	r8, r0, r4
  4076e6:	0c3a      	lsrs	r2, r7, #16
  4076e8:	fa25 f404 	lsr.w	r4, r5, r4
  4076ec:	ea48 0803 	orr.w	r8, r8, r3
  4076f0:	fbb4 f1f2 	udiv	r1, r4, r2
  4076f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4076f8:	fb02 4411 	mls	r4, r2, r1, r4
  4076fc:	fa1f fc87 	uxth.w	ip, r7
  407700:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407704:	fb01 f30c 	mul.w	r3, r1, ip
  407708:	42ab      	cmp	r3, r5
  40770a:	fa00 f40e 	lsl.w	r4, r0, lr
  40770e:	d909      	bls.n	407724 <__udivmoddi4+0x1bc>
  407710:	19ed      	adds	r5, r5, r7
  407712:	f101 30ff 	add.w	r0, r1, #4294967295
  407716:	f080 808a 	bcs.w	40782e <__udivmoddi4+0x2c6>
  40771a:	42ab      	cmp	r3, r5
  40771c:	f240 8087 	bls.w	40782e <__udivmoddi4+0x2c6>
  407720:	3902      	subs	r1, #2
  407722:	443d      	add	r5, r7
  407724:	1aeb      	subs	r3, r5, r3
  407726:	fa1f f588 	uxth.w	r5, r8
  40772a:	fbb3 f0f2 	udiv	r0, r3, r2
  40772e:	fb02 3310 	mls	r3, r2, r0, r3
  407732:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407736:	fb00 f30c 	mul.w	r3, r0, ip
  40773a:	42ab      	cmp	r3, r5
  40773c:	d907      	bls.n	40774e <__udivmoddi4+0x1e6>
  40773e:	19ed      	adds	r5, r5, r7
  407740:	f100 38ff 	add.w	r8, r0, #4294967295
  407744:	d26f      	bcs.n	407826 <__udivmoddi4+0x2be>
  407746:	42ab      	cmp	r3, r5
  407748:	d96d      	bls.n	407826 <__udivmoddi4+0x2be>
  40774a:	3802      	subs	r0, #2
  40774c:	443d      	add	r5, r7
  40774e:	1aeb      	subs	r3, r5, r3
  407750:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  407754:	e78f      	b.n	407676 <__udivmoddi4+0x10e>
  407756:	f1c1 0720 	rsb	r7, r1, #32
  40775a:	fa22 f807 	lsr.w	r8, r2, r7
  40775e:	408b      	lsls	r3, r1
  407760:	fa05 f401 	lsl.w	r4, r5, r1
  407764:	ea48 0303 	orr.w	r3, r8, r3
  407768:	fa20 fe07 	lsr.w	lr, r0, r7
  40776c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407770:	40fd      	lsrs	r5, r7
  407772:	ea4e 0e04 	orr.w	lr, lr, r4
  407776:	fbb5 f9fc 	udiv	r9, r5, ip
  40777a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40777e:	fb0c 5519 	mls	r5, ip, r9, r5
  407782:	fa1f f883 	uxth.w	r8, r3
  407786:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40778a:	fb09 f408 	mul.w	r4, r9, r8
  40778e:	42ac      	cmp	r4, r5
  407790:	fa02 f201 	lsl.w	r2, r2, r1
  407794:	fa00 fa01 	lsl.w	sl, r0, r1
  407798:	d908      	bls.n	4077ac <__udivmoddi4+0x244>
  40779a:	18ed      	adds	r5, r5, r3
  40779c:	f109 30ff 	add.w	r0, r9, #4294967295
  4077a0:	d243      	bcs.n	40782a <__udivmoddi4+0x2c2>
  4077a2:	42ac      	cmp	r4, r5
  4077a4:	d941      	bls.n	40782a <__udivmoddi4+0x2c2>
  4077a6:	f1a9 0902 	sub.w	r9, r9, #2
  4077aa:	441d      	add	r5, r3
  4077ac:	1b2d      	subs	r5, r5, r4
  4077ae:	fa1f fe8e 	uxth.w	lr, lr
  4077b2:	fbb5 f0fc 	udiv	r0, r5, ip
  4077b6:	fb0c 5510 	mls	r5, ip, r0, r5
  4077ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4077be:	fb00 f808 	mul.w	r8, r0, r8
  4077c2:	45a0      	cmp	r8, r4
  4077c4:	d907      	bls.n	4077d6 <__udivmoddi4+0x26e>
  4077c6:	18e4      	adds	r4, r4, r3
  4077c8:	f100 35ff 	add.w	r5, r0, #4294967295
  4077cc:	d229      	bcs.n	407822 <__udivmoddi4+0x2ba>
  4077ce:	45a0      	cmp	r8, r4
  4077d0:	d927      	bls.n	407822 <__udivmoddi4+0x2ba>
  4077d2:	3802      	subs	r0, #2
  4077d4:	441c      	add	r4, r3
  4077d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4077da:	eba4 0408 	sub.w	r4, r4, r8
  4077de:	fba0 8902 	umull	r8, r9, r0, r2
  4077e2:	454c      	cmp	r4, r9
  4077e4:	46c6      	mov	lr, r8
  4077e6:	464d      	mov	r5, r9
  4077e8:	d315      	bcc.n	407816 <__udivmoddi4+0x2ae>
  4077ea:	d012      	beq.n	407812 <__udivmoddi4+0x2aa>
  4077ec:	b156      	cbz	r6, 407804 <__udivmoddi4+0x29c>
  4077ee:	ebba 030e 	subs.w	r3, sl, lr
  4077f2:	eb64 0405 	sbc.w	r4, r4, r5
  4077f6:	fa04 f707 	lsl.w	r7, r4, r7
  4077fa:	40cb      	lsrs	r3, r1
  4077fc:	431f      	orrs	r7, r3
  4077fe:	40cc      	lsrs	r4, r1
  407800:	6037      	str	r7, [r6, #0]
  407802:	6074      	str	r4, [r6, #4]
  407804:	2100      	movs	r1, #0
  407806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40780a:	4618      	mov	r0, r3
  40780c:	e6f8      	b.n	407600 <__udivmoddi4+0x98>
  40780e:	4690      	mov	r8, r2
  407810:	e6e0      	b.n	4075d4 <__udivmoddi4+0x6c>
  407812:	45c2      	cmp	sl, r8
  407814:	d2ea      	bcs.n	4077ec <__udivmoddi4+0x284>
  407816:	ebb8 0e02 	subs.w	lr, r8, r2
  40781a:	eb69 0503 	sbc.w	r5, r9, r3
  40781e:	3801      	subs	r0, #1
  407820:	e7e4      	b.n	4077ec <__udivmoddi4+0x284>
  407822:	4628      	mov	r0, r5
  407824:	e7d7      	b.n	4077d6 <__udivmoddi4+0x26e>
  407826:	4640      	mov	r0, r8
  407828:	e791      	b.n	40774e <__udivmoddi4+0x1e6>
  40782a:	4681      	mov	r9, r0
  40782c:	e7be      	b.n	4077ac <__udivmoddi4+0x244>
  40782e:	4601      	mov	r1, r0
  407830:	e778      	b.n	407724 <__udivmoddi4+0x1bc>
  407832:	3802      	subs	r0, #2
  407834:	443c      	add	r4, r7
  407836:	e745      	b.n	4076c4 <__udivmoddi4+0x15c>
  407838:	4608      	mov	r0, r1
  40783a:	e708      	b.n	40764e <__udivmoddi4+0xe6>
  40783c:	f1a8 0802 	sub.w	r8, r8, #2
  407840:	443d      	add	r5, r7
  407842:	e72b      	b.n	40769c <__udivmoddi4+0x134>

00407844 <__aeabi_idiv0>:
  407844:	4770      	bx	lr
  407846:	bf00      	nop

00407848 <mmc_trans_multipliers>:
  407848:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  407858:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  407868:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  407878:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00407888 <sd_mmc_trans_units>:
  407888:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

004078a4 <sd_trans_multipliers>:
  4078a4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  4078b4:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  4078c4:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  4078d4:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

004078e4 <LfnOfs>:
  4078e4:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

004078f4 <excvt.5681>:
  4078f4:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  407904:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  407914:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  407924:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  407934:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  407944:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  407954:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  407964:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  407974:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  407984:	5d5b 0000                                   []..

00407988 <Tbl>:
  407988:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  407998:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  4079a8:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  4079b8:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  4079c8:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  4079d8:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  4079e8:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  4079f8:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  407a08:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  407a18:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  407a28:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  407a38:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  407a48:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  407a58:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  407a68:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  407a78:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00407a88 <tbl_lower.5431>:
  407a88:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  407a98:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  407aa8:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  407ab8:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  407ac8:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  407ad8:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  407ae8:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  407af8:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  407b08:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  407b18:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  407b28:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  407b38:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  407b48:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  407b58:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  407b68:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  407b78:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  407b88:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  407b98:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  407ba8:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  407bb8:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  407bc8:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  407bd8:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  407be8:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  407bf8:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  407c08:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  407c18:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  407c28:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  407c38:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  407c48:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  407c58:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00407c68 <tbl_upper.5432>:
  407c68:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  407c78:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  407c88:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  407c98:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  407ca8:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  407cb8:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  407cc8:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  407cd8:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  407ce8:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  407cf8:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  407d08:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  407d18:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  407d28:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  407d38:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  407d48:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  407d58:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  407d68:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  407d78:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  407d88:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  407d98:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  407da8:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  407db8:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  407dc8:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  407dd8:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  407de8:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  407df8:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  407e08:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  407e18:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  407e28:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  407e38:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  407e48:	6544 6f6d 6420 206f 6573 736e 726f 4220     Demo do sensor B
  407e58:	454d 3832 2c30 7320 6d65 6320 6c61 6269     ME280, sem calib
  407e68:	6172 6163 216f 0a20 0000 0000 0a0c 2d0d     racao! ........-
  407e78:	202d 4453 4d2f 434d 532f 4944 204f 6143     - SD/MMC/SDIO Ca
  407e88:	6472 4520 6178 706d 656c 6f20 206e 6146     rd Example on Fa
  407e98:	4674 2073 2d2d 0d0a 0000 0000 3231 303a     tFs --......12:0
  407ea8:	3a31 3030 0000 0000 754a 206e 3031 3220     1:00....Jun 10 2
  407eb8:	3130 0039 2d2d 4320 6d6f 6970 656c 3a64     019.-- Compiled:
  407ec8:	2520 2073 7325 2d20 0a2d 000d 6e49 6369      %s %s --...Inic
  407ed8:	6169 696c 617a 646e 206f 7562 2073 3269     ializando bus i2
  407ee8:	2063 000a 6843 7069 6e20 6f61 6520 636e     c ..Chip nao enc
  407ef8:	6e6f 7274 6461 0a6f 0000 0000 6843 7069     ontrado.....Chip
  407f08:	6520 636e 6e6f 7274 6461 2c6f 6920 696e      encontrado, ini
  407f18:	6963 6c61 7a69 6e61 6f64 7420 6d65 6570     cializando tempe
  407f28:	6172 7574 6172 0a20 0000 0000 7265 6f72     ratura .....erro
  407f38:	7220 6165 6964 476e 7420 6d65 6570 6172      readinG tempera
  407f48:	7574 6572 0a20 0000 6554 706d 7265 7461     ture ...Temperat
  407f58:	7275 3a61 2520 2064 000a 0000 7265 6f72     ura: %d ....erro
  407f68:	6820 6d75 6469 6461 0065 0000 7548 696d      humidade...Humi
  407f78:	6164 6564 203a 6425 0a20 0000 7265 6f72     dade: %d ...erro
  407f88:	7020 6572 7373 0000 7270 7365 6173 3a6f      press..pressao:
  407f98:	2520 2064 000a 0000 6c50 6165 6573 7020      %d ....Please p
  407fa8:	756c 2067 6e61 5320 2c44 4d20 434d 6f20     lug an SD, MMC o
  407fb8:	2072 4453 4f49 6320 7261 2064 6e69 7320     r SDIO card in s
  407fc8:	6f6c 2e74 0d0a 0000 6143 6472 6920 736e     lot.....Card ins
  407fd8:	6174 6c6c 4620 4941 0a4c 000d 6c50 6165     tall FAIL...Plea
  407fe8:	6573 7520 706e 756c 2067 6e61 2064 6572     se unplug and re
  407ff8:	702d 756c 2067 6874 2065 6163 6472 0a2e     -plug the card..
  408008:	000d 0000 6f4d 6e75 2074 6964 6b73 2820     ....Mount disk (
  408018:	5f66 6f6d 6e75 2974 2e2e 0d2e 000a 0000     f_mount)........
  408028:	465b 4941 5d4c 7220 7365 2520 0d64 000a     [FAIL] res %d...
  408038:	4f5b 5d4b 0a0d 0000 7243 6165 6574 6120     [OK]....Create a
  408048:	6620 6c69 2065 6628 6f5f 6570 296e 2e2e      file (f_open)..
  408058:	0d2e 000a 7257 7469 2065 6f74 7420 7365     ....Write to tes
  408068:	2074 6966 656c 2820 5f66 7570 7374 2e29     t file (f_puts).
  408078:	2e2e 0a0d 0000 0000 6554 7473 5320 2f44     ........Test SD/
  408088:	4d4d 2043 7473 6361 0a6b 0000 465b 4941     MMC stack...[FAI
  408098:	5d4c 0a0d 0000 0000 6554 7473 6920 2073     L]......Test is 
  4080a8:	7573 6363 7365 6673 6c75 0a2e 000d 0000     successful......
  4080b8:	6c50 6165 6573 7520 706e 756c 2067 6874     Please unplug th
  4080c8:	2065 6163 6472 0a2e 000d 0000 3a30 6473     e card......0:sd
  4080d8:	6d5f 636d 745f 7365 2e74 7874 0074 0000     _mmc_test.txt...

004080e8 <_global_impure_ptr>:
  4080e8:	0040 2040 3130 3332 3534 3736 3938 4241     @.@ 0123456789AB
  4080f8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  408108:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  408118:	296c 0000                                   l)..

0040811c <blanks.7217>:
  40811c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040812c <zeroes.7218>:
  40812c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40813c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040814c <_ctype_>:
  40814c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40815c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40816c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40817c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40818c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40819c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4081ac:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4081bc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4081cc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00408250 <_init>:
  408250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408252:	bf00      	nop
  408254:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408256:	bc08      	pop	{r3}
  408258:	469e      	mov	lr, r3
  40825a:	4770      	bx	lr

0040825c <__init_array_start>:
  40825c:	004059c5 	.word	0x004059c5

00408260 <__frame_dummy_init_array_entry>:
  408260:	00400165                                e.@.

00408264 <_fini>:
  408264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408266:	bf00      	nop
  408268:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40826a:	bc08      	pop	{r3}
  40826c:	469e      	mov	lr, r3
  40826e:	4770      	bx	lr

00408270 <__fini_array_start>:
  408270:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <g_interrupt_enabled>:
20400030:	0001 0000                                   ....

20400034 <SystemCoreClock>:
20400034:	0900 003d                                   ..=.

20400038 <_impure_ptr>:
20400038:	0040 2040 0000 0000                         @.@ ....

20400040 <impure_data>:
20400040:	0000 0000 032c 2040 0394 2040 03fc 2040     ....,.@ ..@ ..@ 
	...
204000e8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000f8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400468 <__atexit_recursive_mutex>:
20400468:	0afc 2040                                   ..@ 

2040046c <__global_locale>:
2040046c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040048c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040050c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040052c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040054c:	72a1 0040 69bd 0040 0000 0000 814c 0040     .r@..i@.....L.@.
2040055c:	8148 0040 807c 0040 807c 0040 807c 0040     H.@.|.@.|.@.|.@.
2040056c:	807c 0040 807c 0040 807c 0040 807c 0040     |.@.|.@.|.@.|.@.
2040057c:	807c 0040 807c 0040 ffff ffff ffff ffff     |.@.|.@.........
2040058c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005b4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005d8 <__malloc_av_>:
	...
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 
204009d0:	09c8 2040 09c8 2040 09d0 2040 09d0 2040     ..@ ..@ ..@ ..@ 

204009e0 <__malloc_sbrk_base>:
204009e0:	ffff ffff                                   ....

204009e4 <__malloc_trim_threshold>:
204009e4:	0000 0002                                   ....
